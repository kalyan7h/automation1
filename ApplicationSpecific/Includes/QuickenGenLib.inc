[ ] 
[ ] 
[ ] // *********************************************************
[+] // FILE NAME:	QuickenGenLib.inc
	[ ] //
	[ ] // DESCRIPTION:
	[ ] //   This file contains all the generic functions required for application.
	[ ] //
	[ ] // DEPENDENCIES:	Includes.inc
	[ ] //
	[ ] // DEVELOPED BY:	Mamta Jain
	[ ] //			
	[ ] // REVISION HISTORY:
	[ ] //	 06/Dec/10 Mamta Jain	Created
	[ ] //	 10/Dec/10	Chandan Abhyankar	Modified
	[ ] // 	  21/Dec/10 Udita Dube  Addedd functions
[ ] // *********************************************************
[ ] 
[ ] // *********************************************************
[+] // INCLUDED FILES
	[ ] use "..\..\FrameworkSpecific\FrameworkFiles\Includes.inc" 	
	[ ] use "msw32.inc"
	[+] dll "shell32.dll"
		[ ] HINSTANCE ShellExecute (in HWND hwnd,in STRING lpOperation,in STRING lpFile,in STRING lpParameters,in STRING lpDirectory, in INT nShowCmd) alias "ShellExecuteW"
	[ ] 
[ ] // *********************************************************
[ ] //Global
[ ] public INTEGER iFunctionResult 
[ ] private BOOLEAN bMatch
[ ] 
[+] //********************** Testcase Functions**********************************************************************
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: CreateTCResultFile()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will create a .txt file which will store the testcase status
		[ ] //
		[ ] // PARAMETERS:		STRING	sFile				file name
		[ ] //						STRING 	sMsg				Text to write in a file 
		[ ] //
		[ ] // RETURNS:			None
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //   	Jan 24, 2011  Mamta Jain  Created
	[ ] // ==========================================================
	[+] public VOID CreateTCResultFile(STRING sFile, STRING sMsg) 
		[+] // Variable
			[ ]  HFILE hFile 
			[ ] STRING sLine
		[ ] 
		[+] do
			[ ] hFile = FileOpen (sFile, FM_APPEND)
			[ ] FileWriteLine (hFile, sMsg)
			[ ] FileClose (hFile)
		[+] except
			[ ] ExceptLog()
		[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: ReadTCStatus()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will read the PASS/FAIL status of supplied  TestCase. This is used in selective execution.
		[ ] // i.e. if Primary Test Case is failed then dependent Test Cases won't be executed
		[ ] //
		[ ] // PARAMETERS:		STRING	sFile				file name
		[ ] //						STRING 	sMsg				Text to write in a file 
		[ ] //
		[ ] // RETURNS:			STRING	sFunctionResult	Status of supplied Test Case
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //   	Jan 24, 2011  Mamta Jain  Created
	[ ] // ==========================================================
	[+] public STRING ReadTCStatus(STRING sFile, STRING sTestcaseName)
		[ ] // Purpose:  Read contents of a file.
		[+] // Variable
			[ ] HFILE hFile 
			[ ] STRING sLine, sFunctionResult = FAILED
			[ ] BOOLEAN  bResultFound
			[ ] LIST OF STRING lsOutput
		[ ] 
		[+] do
			[ ] hFile = FileOpen (sFile, FM_READ)
			[ ] bResultFound = FALSE
			[+] while (FileReadLine (hFile, sLine)) 
				[ ] 
				[ ] bMatch = MatchStr("*{sTestcaseName}*", sLine)
				[+] if(bMatch == TRUE)
					[ ] lsOutput = ParseString(sLine, "-")
					[ ] sFunctionResult = lsOutput[2]
					[ ] bResultFound = TRUE
					[ ] break
				[+] else
					[ ] continue
			[ ] FileClose (hFile)
			[+] if (bResultFound == FALSE)
				[ ] sFunctionResult = "NOT RUN"
		[+] except
			[ ] LogException("Error occured while reading Result Status file")
			[ ] ExceptLog()
		[ ] 
		[ ] return sFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: CheckExecutionDependency(Array of Dependencies)
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will read the PASS/FAIL status of primary TestCase for Dependent TestCase.
		[ ] // i.e. if Primary Test Case is failed then dependent Test Cases won't be executed
		[ ] //
		[ ] // PARAMETERS:		ARRAY	Dependencies	Array of Test Cases dependencies
		[ ] //	
		[ ] //
		[ ] // RETURNS:			None
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //   	Feb 01, 2011  Chandan Abhyankar	Created
	[ ] // ==========================================================
	[+] public VOID CheckExecutionDependency(ARRAY [10] [10] OF STRING DependentTCs, INTEGER iSize)
		[ ] INTEGER  iRowNumDependent, i
		[ ] STRING sTestCaseName, sPrimaryTestStatus
		[ ] BOOLEAN bFound
		[ ] 
		[+] do
			[ ] sTestCaseName = GetTestCaseName ()
			[ ] bFound = FALSE
			[ ] iRowNumDependent = 0
			[ ] 
			[+] for(i=1;i<=iSize; i++)
				[+] if(DependentTCs[i][2] == "")				// Check for empty rows		
					[ ] break
				[ ] bFound = MatchStr("*{sTestCaseName}*", DependentTCs[i][2])
				[+]  if(bFound == TRUE)
					[ ] iRowNumDependent = i
					[ ] break
				[ ] 
				[ ] // If Dependent Test case is found then only below mentioned code gets executed
			[+] if (iRowNumDependent != 0)
					[ ] sPrimaryTestStatus = ReadTCStatus(sTestCaseStatusFile,  DependentTCs[iRowNumDependent][1])
					[ ] 
				[+] if (sPrimaryTestStatus == "FAILED" || sPrimaryTestStatus == "NOT RUN")
					[ ] ReportStatus("Test Execution dependency", WARN, "Test execution of - {sTestCaseName} is stopped as it's Primary Test case - { DependentTCs[iRowNumDependent] [1]} is {sPrimaryTestStatus}")
					[ ] CreateTCResultFile(sTestCaseStatusFile,"{sTestCaseName} - NOT RUN")
					[ ] exit
					[ ] 
			[+] else
					[ ] // Test case is not having any dependency
		[+] except
			[ ] ReportStatus("Verify TCs Dependency", FAIL, "Error is observed while executing 'CheckTestExecutionDependency'") 
			[ ] ExceptLog()
			[ ] 
	[ ] 
	[ ] 
[ ] 
[-] // //********************** Common  Functions********************************************************************
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: SearchItemInListBox()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will Search an item in a Grid/table/list
		[ ] //
		[ ] // PARAMETERS:			List of AnyType		lsAddTenant
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If Property added successfully
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //Date                             Oct 5, 2012		
		[ ] //Author                          Mukesh 	
		[ ] 
	[ ] // ==========================================================
	[+] public INTEGER SearchItemInListBox (STRING hWnd, STRING sExpected , STRING sRowNo)
		[ ] 
		[ ] STRING   sActual, sExpectedErrorMsg, sActualErrorMsg
		[ ] BOOLEAN bAssert, bEnabled
		[ ] 
		[+] do 
			[ ] sActual= QwAutoExecuteCommand("LISTBOX_GETFULLROW", hWnd,  sRowNo)
			[ ] bAssert = MatchStr("*{sExpected}*",sActual)
			[+] if ( bAssert == TRUE)
				[ ] ReportStatus("Verify item exists", PASS, "Expected -  {sExpected} item exists.") 
				[ ] iFunctionResult = PASS
			[+] else
				[ ] ReportStatus("Verify item exists", PASS, "Expected -  {sExpected} item does not exist.") 
				[ ] iFunctionResult = FAIL
			[ ] hWnd=NULL
			[ ] sActual=NULL
		[+] except
			[ ] iFunctionResult = FAIL
			[ ] ExceptLog()
		[ ] return iFunctionResult
		[ ] 
		[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: GetLatestBuild()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will return the latest build no. 
		[ ] //
		[ ] // PARAMETERS:		none
		[ ] //
		[ ] // RETURNS:			STRING		Latest build no. 
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	 Dec 05, 2010	Mamta Jain created
	[ ] // ==========================================================
	[+] public STRING GetLatestBuild()
		[+] // Variable declaration
			[ ] HFILE OutputFileHandle
			[ ] STRING sLine=""
		[ ] 
		[+] do
			[ ] 
			[ ] sys_execute("dir {INSTALL_BUILD_PATH} /b /o:-d > c:/LatestBuild.txt")
			[ ] OutputFileHandle = FileOpen ("c:/LatestBuild.txt", FM_READ)
			[ ] FileReadLine (OutputFileHandle, sLine )
			[ ] FileClose(OutputFileHandle)
			[ ] return sLine
		[+] except
			[ ] ReportStatus("Get Latest Build", FAIL, "Error occurred while getting latest build")
			[ ] ExceptLog()
		[ ] return sLine
		[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: BypassRegistration()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // Using short cut keys this function will by-pass registration
		[ ] 
		[ ] //
		[ ] // PARAMETERS:		None
		[ ] //
		[ ] // RETURNS:			INTEGER	0	If Registration is by passed
		[ ] //									1	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	 Dec 10, 2010	Chandan Abhyankar	created
	[ ] // ==========================================================
	[+] public INTEGER BypassRegistration()
		[+] // Variable declaration
			[ ] STRING sMessageText, sExpected
			[ ] sExpected="You will no longer be prompted for registration." 
		[ ] 
		[-] do
			[-] if(QuickenWindow.Exists(20) )       
				[ ] QuickenWindow.SetActive ()
				[-] if(AccountAdded.Exists(SHORT_SLEEP))
					[ ] AccountAdded.Close()
				[+] else if(AlertMessage.Exists(SHORT_SLEEP))
					[ ] AlertMessage.Close()
				[+] else
					[ ] 
				[ ] 
				[ ] QuickenMainWindow.PressKeys("<Ctrl-Shift>")
				[ ] QuickenMainWindow.QWNavigator.Update_Accounts.Click ()
				[ ] QuickenMainWindow.ReleaseKeys("<Ctrl-Shift>")
				[+] if(AlertMessage.Exists(SHORT_SLEEP))
					[ ] AlertMessage.SetActive ()
					[ ] sMessageText = AlertMessage.MessageText.GetText()
					[ ] AlertMessage.OK.Click()
					[ ] //print(sMessageText)
					[-] if (sMessageText ==  "You will no longer be prompted for registration." )
						[ ] iFunctionResult = PASS
					[+] else
						[ ] iFunctionResult = FAIL
					[ ] 
				[+] else
					[ ] iFunctionResult = FAIL
			[+] else
				[ ] iFunctionResult = FAIL
				[ ] ReportStatus("BypassRegistration", FAIL, "Quicken is not available")
		[+] except
			[+] if(MessageBox.Exists(SHORT_SLEEP))
				[ ] MessageBox.SetActive()
				[ ] MessageBox.Close()
			[ ] iFunctionResult=FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] // =========================================================
	[+] // FUNCTION: ClearRegistration()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // Using short cut keys this function will clear registration
		[ ] 
		[ ] //
		[ ] // PARAMETERS:		None
		[ ] //
		[ ] // RETURNS:			INTEGER	0	If Registration is cleared
		[ ] //									1	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	Jan 14, 2011	Puja Verma	created
	[ ] // ==========================================================
	[+] public INTEGER ClearRegistration()
		[+] // Variable declaration
			[ ] STRING sMessageText
			[ ] INTEGER iFunctionResult,i,iCount
			[ ] STRING sConf_FilePath, sValue, sBlock, sKey
			[ ] HINIFILE hIni
			[ ] LIST OF STRING lsClearReg={"InstallationID","RegisteredVersion","RegistrationCount"}
			[ ] iCount=ListCount(lsClearReg)
			[ ] sBlock="Registration"
			[ ] sConf_FilePath = QUICKEN_CONFIG  
			[ ]  
			[ ] 
		[+] do
			[+] if(QuickenWindow.Exists(5)) 
				[ ] QuickenWindow.SetActive ()
				[ ] QuickenWindow.PressKeys("<ctrl-shift-alt>")
				[ ] QuickenMainWindow.QWNavigator.Update_Accounts.Click ()
				[ ] 
				[+] if(AlertMessage.Exists(10))
					[ ] AlertMessage.SetActive ()
					[ ] sMessageText = AlertMessage.MessageText.GetText()
					[ ] AlertMessage.OK.Click()
					[ ] 
					[+] if (sMessageText ==  "Registration has been cleared.")
						[ ] iFunctionResult = PASS
					[+] else
						[ ] iFunctionResult = FAIL
					[ ] 
				[+] else
					[ ] iFunctionResult = FAIL
				[ ] 
				[ ] QuickenWindow.ReleaseKeys("<ctrl-shift-alt>")
				[ ] 
			[+] else
				[ ] iFunctionResult = FAIL
				[ ] ReportStatus("Clear Registration", FAIL, "Quicken is not available")
		[+] except
			[+] do
				[ ] 
				[ ] // Clear registration
				[+] if (FileExists(sConf_FilePath))
					[+] for(i=1;i<=iCount;i++)
						[ ] 
						[ ] sKey=lsClearReg[i]
						[ ] sValue = ""
						[ ] 
						[ ] // Open File
						[ ] hIni = SYS_IniFileOpen (sConf_FilePath)
						[ ] // Set Values for keys
						[ ] SYS_IniFileSetValue (hIni, sBlock , sKey, sValue)
						[ ] // Close File
						[ ] SYS_IniFileClose (hIni)
					[ ] iFunctionResult=PASS
				[+] else
					[ ] ReportStatus("Verify {sConf_FilePath} file exists",FAIL,"File - {sConf_FilePath} not found")
					[ ] iFunctionResult=FAIL
					[ ] 
				[ ] 
			[+] except
				[ ] ExceptLog()
				[ ] iFunctionResult=FAIL
			[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: CloseQuicken()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will close Quicken
		[ ] //
		[ ] // PARAMETERS:		None
		[ ] //						
		[ ] // RETURNS:			INTEGER	PASS			 if Quicken is closed successfully
		[ ] //									FAIL  			 if any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //   	Jan 4, 2011  Mamta Jain  Created
	[ ] // ==========================================================
	[+] public INTEGER CloseQuicken()
		[+] // Varaible declaration
			[ ] 
		[ ] 
		[+] do
			[ ] 
			[ ] QuickenWindow.SetActive()
			[ ] QuickenWindow.TypeKeys(KEY_EXIT)
			[+] if(QuickenBackupReminder.Exists(SHORT_SLEEP))
				[ ] QuickenBackupReminder.DontShowAgainCheckBox.Check()
				[ ] QuickenBackupReminder.LaterButton.Click()
			[+] if(SyncChangesToTheQuickenCloud.Exists(5))
				[ ] SyncChangesToTheQuickenCloud.SetActive()
				[ ] SyncChangesToTheQuickenCloud.Later.Click()
			[ ] 
			[ ] WaitForState(QuickenWindow,FALSE,5)
			[ ] sleep(SHORT_SLEEP)
			[+] if(QuickenWindow.Exists(SHORT_SLEEP))
				[ ] iFunctionResult = FAIL
			[+] else
				[ ] iFunctionResult = PASS
		[+] except
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: PasswordValidation()
		[ ] //
		[ ] // DESCRIPTION:	This function will validate all the passwords in file
		[ ] // 
		[ ] //
		[ ] // PARAMETERS IN:		STRING 	sFileName	Name of file
		[ ] //							STRING	sPassword	Password for opening file
		[ ] //							STRING	sVersion		Version of file
		[ ] //
		[ ] // RETURNS:				INTEGER		PASS  = If all the password popup appear successfully
		[ ] //											FAIL   = if any error occurs or validation  fail
		[ ] //
		[ ] // REVISION HISTORY:	11/03/2011	Created By	Puja Verma
		[ ] //							05/04/2011	Modified by	Mamta Jain 									   
	[ ] // ==========================================================
	[+] // public INTEGER PasswordValidation (STRING sFileName, STRING sPassword, STRING sVersion)
		[+] // // Variable declaration
			[ ] // STRING sErrorMsg
		[ ] // 
		[+] // do 
			[+] // if(EnterQuickenPassword.Exists(MEDIUM_SLEEP))
				[ ] // EnterQuickenPassword.Password.SetText(sPassword)			// Enter password
				[ ] // EnterQuickenPassword.OK.Click()
				[+] // if(AlertMessage.Exists(MEDIUM_SLEEP))			// Error message will be displayed if wrong password is entered
					[ ] // sErrorMsg = AlertMessage.MessageText.GetText()
					[ ] // ReportStatus("Validate Password ", FAIL, "Error Message - {sErrorMsg} is displayed.")
					[ ] // AlertMessage.OK.Click ()
					[+] // if(EnterQuickenPassword.Exists(SHORT_SLEEP))
						[ ] // EnterQuickenPassword.Close()
						[+] // if(ImportExportQuickenFile.Exists(SHORT_SLEEP))
							[ ] // ImportExportQuickenFile.SetActive ()
							[ ] // ImportExportQuickenFile.Close ()
					[ ] // iFunctionResult = FAIL
				[+] // else
					[ ] // iFunctionResult = PASS
			[+] // else
				[ ] // ReportStatus("Validate Password ", FAIL, "Validate Password window did not appear")
				[ ] // iFunctionResult = FAIL
				[ ] // 
			[+] // if(QuickenFilePassword.Exists(MEDIUM_SLEEP))
				[ ] // QuickenFilePassword.Close.Click()
			[ ] // 
		[+] // except
			[ ] // iFunctionResult = FAIL
		[ ] // return iFunctionResult
	[+] public INTEGER EnterQuickenPassword (STRING sPassword)
		[+] // Variable declaration
			[ ] STRING sErrorMsg
		[ ] 
		[+] do 
			[+] if(EnterQuickenPassword.Exists(MEDIUM_SLEEP))
				[ ] EnterQuickenPassword.Password.SetText(sPassword)			// Enter password
				[ ] EnterQuickenPassword.OK.Click()
				[+] if(AlertMessage.Exists(MEDIUM_SLEEP))			// Error message will be displayed if wrong password is entered
					[ ] sErrorMsg = AlertMessage.MessageText.GetText()
					[ ] ReportStatus("Validate Password ", FAIL, "Error Message - {sErrorMsg} is displayed.")
					[ ] AlertMessage.OK.Click ()
					[+] if(EnterQuickenPassword.Exists(SHORT_SLEEP))
						[ ] EnterQuickenPassword.Close()
						[+] if(ImportExportQuickenFile.Exists(SHORT_SLEEP))
							[ ] ImportExportQuickenFile.SetActive ()
							[ ] ImportExportQuickenFile.Close ()
					[ ] iFunctionResult = FAIL
				[+] else
					[ ] iFunctionResult = PASS
			[+] // else
				[ ] // ReportStatus("Validate Password ", FAIL, "Validate Password window did not appear")
				[ ] // iFunctionResult = FAIL
				[ ] // 
			[+] if(QuickenFilePassword.Exists(MEDIUM_SLEEP))
				[ ] QuickenFilePassword.Close.Click()
			[ ] 
		[+] except
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ]  
	[ ] // ==========================================================
	[+] // FUNCTION: OSUWithPasswordVault()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // Using short cut keys this function will perform OSU by entering password in PasswordVault
		[ ] 
		[ ] //
		[ ] // PARAMETERS:		None
		[ ] //
		[ ] // RETURNS:			INTEGER	0	If OSU Successful
		[ ] //									1	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	 Feb 23, 2013	Mukesh 	created
	[ ] // ==========================================================
	[+] public INTEGER OSUWithPasswordVault(STRING sOSUPassword)
		[ ] //Variable declaration
		[ ] 
		[+] do
			[ ] 
			[+] if(QuickenWindow.Exists(5) )
				[ ] QuickenWindow.SetActive ()
				[ ] QuickenWindow.SetActive ()
				[ ] QuickenWindow.Tools.Click()
				[ ] QuickenWindow.Tools.OneStepUpdate.Select()
				[+] if (DlgUnlockYourPasswordVault.Exists(30))
					[ ] DlgUnlockYourPasswordVault.SetActive()
					[ ] DlgUnlockYourPasswordVault.PasswordTextField.SetText(sOSUPassword)
					[ ] DlgUnlockYourPasswordVault.UpdateNowButton.Click()
					[ ] WaitForState(DlgUnlockYourPasswordVault,false,2)
					[+] if (DlgIAMSignIn.Exists(20))
						[ ] DlgIAMSignIn.SetActive()
						[ ] DlgIAMSignIn.IntuitPasswordTextBox.SetText(sPassword)
						[ ] DlgIAMSignIn.LoginButton.Click()
						[ ] 
					[+] if(QuickenConnectedServices.Exists(5))
						[ ] RegisterQuickenConnectedServices()
					[+] if(OneStepUpdateSummary.Exists(200))
						[ ] OneStepUpdateSummary.SetActive ()
						[ ] OneStepUpdateSummary.Close.Click()
						[ ] WaitForState(OneStepUpdateSummary,false,2)
						[ ] iFunctionResult=PASS
					[+] else
						[ ] ReportStatus("OneStepUpdate ",FAIL, "OneStepUpdate window is not launched")
						[ ] iFunctionResult=FAIL
				[+] else
					[ ] ReportStatus("Verify PasswordVault ",FAIL, "Verify PasswordVault exists: Verify PasswordVault didn't appear.")
					[ ] iFunctionResult=FAIL
				[ ] 
			[+] else
				[ ] iFunctionResult = FAIL
				[ ] ReportStatus("BypassRegistration", FAIL, "Quicken is not available")
		[+] except
			[ ] ExceptLog()
			[+] if(MessageBox.Exists(SHORT_SLEEP))
				[ ] MessageBox.Close()
			[ ] iFunctionResult=FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: LaunchQuicken()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function launches Quicken.
		[ ] //
		[ ] // PARAMETERS:		NONE
		[ ] //
		[ ] // RETURNS:			INTEGER	PASS	If Quicken is launched successfully
		[ ] //									FAIL  	if any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	Feb 17, 2014	Govind Babhulgaonkar	Created
		[ ] //    May 12, 2014   Udita Dube updated
	[ ] // ==========================================================
	[+] public INTEGER LaunchQuicken()
		[+] // Variable declaration
			[ ] BOOLEAN bResult
			[ ] 
		[+] do
			[ ] 
			[+] if (QuickenWindow.Exists(2))
				[ ] Sys_Execute("taskkill /f /im qw.exe" ,NULL , EM_CONTINUE_RUNNING)
				[ ] sleep(20)
				[ ] WaitForState(QuickenWindow,FALSE,5)
			[+] if (!QuickenWindow.Exists(2))
				[ ] App_Start (sCmdLine)
				[ ] sleep(20)
				[+] if (!QuickenWindow.Exists(2))
					[ ] Sys_Execute("taskkill /f /im qw.exe" ,NULL , EM_CONTINUE_RUNNING)
					[ ] sleep(15)
					[ ]  LaunchQuicken()
				[+] if(QuickenWindow.Exists(20))
					[ ] QuickenWindow.SetActive()
					[ ] iFunctionResult=PASS
				[+] else
					[ ] ReportStatus("Verify Quicken is launched", FAIL, "Quicken is NOT launched.")
					[ ] iFunctionResult=FAIL
					[ ] 
		[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] Log.Error("","FAILED TO LAUNCH QUICKEN") 
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: SelectCustomizeViewItems(STRING sItem)
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will select items from CustomizeView dialog box
		[ ] 
		[ ] //
		[ ] // PARAMETERS:		None;
		[ ] //
		[ ] // RETURNS:			INTEGER	0	If item selection is successful
		[ ] //									1	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	 Feb 11, 2014	Mukesh 	created
	[ ] // ==========================================================
	[+] public INTEGER SelectCustomizeViewItems(STRING sItem)
		[ ] 
		[+] // Variable declaration
			[ ] STRING sHandle ,sActual
			[ ] INTEGER iListCount ,iCount , iResult
			[ ] 
			[ ] 
			[ ] 
		[ ] 
		[ ] 
		[+] do
			[ ] QuickenWindow.SetActive()
			[ ] 
			[ ] iResult =NavigateQuickenTab(sTAB_HOME)
			[+] if (iResult ==PASS)
				[ ] QuickenWindow.SetActive()
				[ ] QuickenMainWindow.Customize.Click()
				[+] if (CustomizeView.Exists(3))
					[ ] CustomizeView.SetActive()
					[ ] sHandle= Str(CustomizeView.AvailableItemsListBox.GetHandle())
					[ ] iListCount= CustomizeView.AvailableItemsListBox.GetItemCount() +1
					[+] for(iCount= 0; iCount <= iListCount;  iCount++)
						[ ] sActual = QwAutoExecuteCommand("LISTBOX_GETFULLROW", sHandle, Str(iCount))
						[ ] 
						[ ] 
						[ ] // To handle values Rental Property and Debt Accounts and Property and Debt Accounts 
						[+] if (sItem=="Property and Debt Accounts")
							[ ] bMatch = MatchStr("{trim(sItem)}", sActual)
						[+] else
							[ ] bMatch = MatchStr("*{sItem}*", sActual)
						[+] if (bMatch)
							[ ] QwAutoExecuteCommand("LISTBOX_SELECTROW", sHandle, Str(iCount))
							[ ] break
					[+] if (bMatch)
						[ ] CustomizeView.Add.Click()
						[ ] iFunctionResult = PASS
						[ ] 
					[+] else
						[ ] ReportStatus("Verify snapshot is available on Customize View > Available items", FAIL , " {sItem}: is not available on Customize View > Available items")
						[ ] iFunctionResult = FAIL
					[ ] CustomizeView.SetActive()
					[ ] CustomizeView.OK.Click()
					[ ] WaitForState(CustomizeView , FALSE ,5)
				[+] else
					[ ] ReportStatus("Verify Customize View dialog." , FAIL , "Customize View dialog didn't appear.")
					[ ] iFunctionResult = FAIL
			[+] else
				[ ] ReportStatus("Verify Home tab." , FAIL , "Quicken didn't goto Home tab.")
				[ ] iFunctionResult = FAIL
			[ ] 
		[+] except
			[ ] Exceptlog()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: DeleteView(STRING sView optional)
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will Delete View
		[ ] 
		[ ] //
		[ ] // PARAMETERS:		None;
		[ ] //
		[ ] // RETURNS:			INTEGER	0	If View is deleted
		[ ] //									1	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	 Feb 24, 2014	Mukesh 	created
	[ ] // ==========================================================
	[+] public INTEGER DeleteView(STRING sView optional)
		[ ] 
		[+] //Variable declaration
			[ ] INTEGER iResult
		[ ] 
		[ ] 
		[+] do
			[ ] QuickenWindow.SetActive()
			[ ] 
			[ ] iResult =NavigateQuickenTab(sTAB_HOME)
			[+] if (iResult ==PASS)
				[ ] QuickenWindow.SetActive()
				[+] if (QuickenMainWindow.Customize.Exists(2))
					[ ] QuickenMainWindow.Customize.Click()
					[+] if (CustomizeView.Exists(3))
						[ ] CustomizeView.SetActive()
						[+] if (CustomizeView.DeleteThisView.IsEnabled())
							[ ] CustomizeView.DeleteThisView.Click()
							[+] if (AlertMessage.Exists(2))
								[ ] AlertMessage.SetActive()
								[ ] AlertMessage.Yes.Click()
								[ ] WaitForState(AlertMessage , FALSE ,5)
								[ ] iFunctionResult = PASS
							[+] else
								[ ] ReportStatus("Verify View delete confirmation appeared." , FAIL , "View delete confirmation didn't appear.")
								[ ] iFunctionResult = FAIL
							[ ] 
							[ ] WaitForState(CustomizeView , FALSE ,5)
						[+] else
							[ ] ReportStatus("Verify Delete This View button is enabled on Customize View dialog." , FAIL , " Delete This View button is disabled on Customize View dialog.")
							[ ] iFunctionResult = FAIL
						[ ] 
					[+] else
						[ ] ReportStatus("Verify Customize View dialog." , FAIL , "Customize View dialog didn't appear.")
						[ ] iFunctionResult = FAIL
				[+] else
					[ ] ReportStatus("Verify Customize button exists on Home tab." , FAIL , "Customize button doesn't exist on Home tab.")
					[ ] iFunctionResult = FAIL
				[ ] 
			[+] else
				[ ] ReportStatus("Verify Home tab." , FAIL , "Quicken didn't goto Home tab.")
				[ ] iFunctionResult = FAIL
			[ ] 
		[+] except
			[ ] Exceptlog()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: AddView(STRING sView)
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will Add View
		[ ] 
		[ ] //
		[ ] // PARAMETERS:		None;
		[ ] //
		[ ] // RETURNS:			INTEGER	0	If Viiew is added
		[ ] //									1	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	 Feb 25, 2014	Mukesh 	created
	[ ] // ==========================================================
	[+] public INTEGER AddView(STRING sViewName )
		[ ] 
		[+] // Variable declaration
			[ ] STRING sActualView
			[ ] INTEGER iResult
			[ ] 
		[ ] 
		[+] do
			[ ] QuickenWindow.SetActive()
			[ ] 
			[ ] iResult =NavigateQuickenTab(sTAB_HOME)
			[+] if (iResult ==PASS)
				[ ] QuickenWindow.SetActive()
				[ ] QuickenMainWindow.AddViewButton.Click()
				[+] if (CustomizeView.Exists(3))
					[ ] CustomizeView.SetActive()
					[ ] CustomizeView.ViewName.SetText(sViewName)
					[ ] CustomizeView.OK.Click()
					[ ] WaitForState(CustomizeView , FALSE , 2)
					[ ] QuickenMainWindow.Customize.Click()
					[+] if (CustomizeView.Exists(3))
						[ ] CustomizeView.SetActive()
						[ ] sActualView =CustomizeView.ViewName.GetText()
						[ ] CustomizeView.OK.Click()
						[ ] WaitForState( CustomizeView , FALSE , 3)
						[+] if (sActualView==sViewName)
							[ ] iFunctionResult = PASS
						[+] else
							[ ] ReportStatus("Verify veiw has been added." , FAIL , "View added: {sActualView} is NOT as expected: {sViewName}.")
							[ ] iFunctionResult = FAIL
							[ ] 
						[ ] 
					[+] else
						[ ] ReportStatus("Verify Customize View dialog." , FAIL , "Customize View dialog didn't appear.")
						[ ] iFunctionResult = FAIL
						[ ] 
					[ ] 
				[+] else
					[ ] ReportStatus("Verify that Customize view dialog gets launched when clicked on Add view button." , FAIL , "Customize View dialog didn't appear on clicking Add view button.")
					[ ] iFunctionResult = FAIL
				[ ] 
			[+] else
				[ ] ReportStatus("Verify Home tab." , FAIL , "Quicken didn't goto Home tab.")
				[ ] iFunctionResult = FAIL
			[ ] 
		[+] except
			[ ] Exceptlog()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] // // ==========================================================
	[+] // // FUNCTION: DeSelectCustomizeViewItems()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will remove items from CustomizeView dialog box
		[ ] // 
		[ ] // //
		[ ] // // PARAMETERS:		None;
		[ ] // //
		[ ] // // RETURNS:			INTEGER	0	If item deletion is successful
		[ ] // //									1	In case of failure
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //	 Feb 14, 2014	Mukesh 	created
	[ ] // // ==========================================================
	[+] public void DeSelectCustomizeViewItems()
		[ ] 
		[+] // Variable declaration
			[ ] STRING sHandle ,sActual
			[ ] INTEGER iListCount ,iCount , iResult
			[ ] 
			[ ] 
			[ ] 
		[ ] 
		[ ] 
		[+] do
			[ ] QuickenWindow.SetActive()
			[ ] 
			[ ] iResult =NavigateQuickenTab(sTAB_HOME)
			[+] if (iResult ==PASS)
				[ ] QuickenWindow.SetActive()
				[ ] QuickenMainWindow.Customize.Click()
				[+] if (CustomizeView.Exists(3))
					[ ] CustomizeView.SetActive()
					[ ] sHandle= Str(CustomizeView.ChosenItemsListBox.GetHandle())
					[ ] iListCount= CustomizeView.ChosenItemsListBox.GetItemCount() +1
					[+] if (iListCount>0)
						[ ] 
						[+] for(iCount= 0; iCount <= iListCount;  iCount++)
							[ ] CustomizeView.Remove.Click()
						[ ] CustomizeView.SetActive()
						[ ] CustomizeView.OK.Click()
						[ ] WaitForState(CustomizeView , false ,5)
				[+] else
					[ ] ReportStatus("Verify Customize View dialog." , FAIL , "Customize View dialog didn't appear.")
					[ ] 
			[+] else
				[ ] ReportStatus("Verify Home tab." , FAIL , "Quicken didn't goto Home tab.")
				[ ] 
			[ ] 
		[+] except
			[ ] Exceptlog()
			[ ] 
	[ ] 
	[ ] // // ==========================================================
	[+] // // FUNCTION: RemoveSnapShotFromView(STRING sSnapshotName)
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will remove item from CustomizeView dialog box
		[ ] // 
		[ ] // //
		[ ] // // PARAMETERS:		None;
		[ ] // //
		[ ] // // RETURNS:			INTEGER	0	If item removal is successful
		[ ] // //									1	In case of failure
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //	 Feb 14, 2014	Mukesh 	created
	[ ] // // ==========================================================
	[+] public INTEGER RemoveSnapShotFromView(STRING sSnapshotName)
		[ ] 
		[+] // Variable declaration
			[ ] STRING sHandle ,sActual
			[ ] INTEGER iListCount ,iCount , iResult
			[ ] 
			[ ] 
			[ ] 
		[ ] 
		[ ] 
		[+] do
			[ ] 
			[ ] QuickenWindow.SetActive()
			[ ] QuickenMainWindow.Customize.Click()
			[+] if (CustomizeView.Exists(3))
				[ ] CustomizeView.SetActive()
				[ ] sHandle= Str(CustomizeView.ChosenItemsListBox.GetHandle())
				[ ] iListCount= CustomizeView.ChosenItemsListBox.GetItemCount() +1
				[+] if (iListCount>0)
					[ ] 
					[+] for(iCount= 0; iCount <= iListCount;  iCount++)
						[ ] sActual = QwAutoExecuteCommand("LISTBOX_GETFULLROW", sHandle, Str(iCount))
						[ ] bMatch = MatchStr("*{sSnapshotName}*" , sActual)
						[+] if (bMatch)
							[ ] break
					[ ] 
					[+] if (bMatch)
						[ ] QwAutoExecuteCommand("LISTBOX_SELECTROW", sHandle, Str(iCount))
						[ ] CustomizeView.Remove.Click()
						[ ] iFunctionResult=PASS
						[ ] 
					[+] else
						[ ] ReportStatus("Verify item removed." , FAIL , "Item not found in Customize View dialog .")
						[ ] iFunctionResult=FAIL
					[ ] CustomizeView.SetActive()
					[ ] CustomizeView.OK.Click()
					[ ] WaitForState(CustomizeView , FALSE ,5)
				[+] else
					[ ] ReportStatus("Verify item removed." , FAIL , "Item not found in Customize View dialog .")
					[ ] iFunctionResult=FAIL
					[ ] 
			[+] else
				[ ] ReportStatus("Verify Customize View dialog." , FAIL , "Customize View dialog didn't appear.")
				[ ] iFunctionResult=FAIL
				[ ] 
			[ ] 
		[+] except
			[ ] Exceptlog()
			[ ] iFunctionResult=FAIL
			[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] // // ==========================================================
	[+] // // FUNCTION: GetPreviousMonth ( INTEGER iMonthDiff)
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will previous month
		[ ] // 
		[ ] // //
		[ ] // // PARAMETERS:		None;
		[ ] // //
		[ ] // // RETURNS:			STRING		If previous month's date calculated
		[ ] // //									NULL	In case of failure
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //	 April 14, 2014	Mukesh 	created
	[ ] // // ==========================================================
	[ ] 
	[+] public STRING GetPreviousMonth ( INTEGER iMonthDiff)
		[ ] STRING sYear, sDay,sMonth ,sDate
		[ ] INTEGER  iCount,iMonth ,iYear ,iLastMonth,iYearCounter ,iDay
		[ ] INTEGER iCurrentMonth
		[ ] sYear=FormatDateTime(GetDateTime(), "yyyy") 
		[ ] iYear= VAL(sYear)
		[ ] sDay=FormatDateTime(GetDateTime(), "d")
		[ ] iDay=Val(sDay)
		[ ] sMonth=FormatDateTime(GetDateTime(), "m") //Get current month
		[ ]  iMonth =Val(sMonth)
		[ ] iYearCounter=0
		[+] do
			[ ] START:
			[ ] 
			[+] if(iMonth >= iMonthDiff)
				[ ] iLastMonth=iMonth-iMonthDiff
				[+] if (iLastMonth==0)
					[ ] iLastMonth=12
					[ ] iYear=iYear-1
				[ ] 
			[ ] 
			[+] else if(iMonth < iMonthDiff)
				[ ] iLastMonth=iMonth-iMonthDiff
				[ ] // iLastMonth =iLastMonth*(-1)
				[ ] iLastMonth=12+iLastMonth
				[ ] iYear=iYear-1
				[ ] 
			[ ] 
			[ ] 
			[+] if (iLastMonth==2 && iDay>28)
				[ ] iDay=28
			[ ] sDate ="{iLastMonth}" +"/"+str(iDay)+"/"+"{iYear}"
		[+] except
			[ ] exceptlog()
		[ ] return sDate
	[ ] 
[ ] 
[-] // //********************** Data File Related Functions*************************************************************
	[ ]  
	[ ] // ==========================================================
	[+] // FUNCTION: DataFileCreateWithoutRegistration()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will create data file with specified name sFileName and do not register the data file
		[ ] //
		[ ] // PARAMETERS:		STRING 	sFileName		Name of the file to be created
		[ ] //						STRING 	sLocation		Path of the file
		[ ] //
		[ ] // RETURNS:			INTEGER	0 = If data file is created successfully
		[ ] //									1 = if any error occurs while creating file
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	Sept 16, 2014	Udita Dube added
	[ ] // ==========================================================
	[+] public INTEGER DataFileCreateWithoutRegistration(STRING sFileName,STRING sLocation optional)
		[ ] 
		[+] // Variable declaration
			[ ] STRING sCaption, sExpected, sFileWithPath
			[ ] BOOLEAN  bFound 
			[+] if(sLocation==NULL)
				[ ] sFileWithPath = AUT_DATAFILE_PATH + "\" + sFileName + ".QDF"
			[+] else
				[ ] sFileWithPath = sLocation + "\" + sFileName + ".QDF"
				[ ] 
			[ ] 
		[+] do
			[+] if (!QuickenWindow.Exists())
				[ ] App_Start (sCmdLine)
				[ ] sleep(20)
			[ ] QuickenWindow.SetActive()
			[ ] sCaption = QuickenWindow.GetCaption ()
			[ ] bFound = MatchStr("*{sFileName}*", sCaption)
			[+] if(FileExists(sFileWithPath))
				[+] if(bFound)
					[ ] CloseQuicken()
				[ ] DeleteFile(sFileWithPath)
				[ ] 
			[+] if (!QuickenWindow.Exists())
				[ ] App_Start (sCmdLine)
				[ ] sleep(20)
			[+] if(QuickenWindow.Exists(20))
				[ ] QuickenWindow.SetActive()
				[ ] sleep(3)
				[ ] 
				[+] do
					[ ] // QuickenWindow.File.Click()
					[ ] QuickenWindow.TypeKeys("<Alt-f>")
					[ ] sleep(1)
					[ ] QuickenWindow.File.NewQuickenFile.Select()
				[+] except 
					[ ] QuickenWindow.MainMenu.Select("/*File/_New Quicken File*")
				[ ] 
				[ ] //CreateNewFile Dailog will appear if the file to be created doesn't exist and a file is already open //// 
				[+] if (CreateNewFile.Exists(2))
					[ ] CreateNewFile.SetActive()
					[ ] CreateNewFile.OK.Click()
					[ ] 
					[ ] // Alert for online payments
					[+] if(AlertMessage.No.Exists(5))
						[ ] AlertMessage.SetActive()
						[ ] AlertMessage.No.Click()
					[ ] 
					[+] if(SyncChangesToTheQuickenCloud.Exists(3))
						[ ] SyncChangesToTheQuickenCloud.Later.Click()
						[ ] WaitForState(SyncChangesToTheQuickenCloud,FALSE,5)
					[ ] WaitForState(CreateNewFile,False,1)
				[ ] 
				[+] if (ImportExportQuickenFile.Exists(10))
					[ ] ImportExportQuickenFile.SetActive()
					[ ] ImportExportQuickenFile.FileName.SetText(sFileWithPath)
					[ ] 
					[ ] ImportExportQuickenFile.OK.Click()
					[ ] 
					[ ] //Check for the already existing file
					[+] if (ImportExportQuickenFile.DuplicateFileMsg.Exists())
						[ ] ImportExportQuickenFile.DuplicateFileMsg.Close()
						[ ] ImportExportQuickenFile.Cancel.Click()
						[ ] ReportStatus("Data file existence", ABORT, "Data File {sFileName} already exists") 
					[ ] 
					[ ] QuickenWindow.SetActive()
					[ ] iFunctionResult=PASS
				[+] else
					[ ] ReportStatus("Verify Create New Quicken File", FAIL, "Create New Quicken File dailog didn't appear.") 
					[ ] iFunctionResult=FAIL
			[+] else
				[ ] ReportStatus("Verify Quicken Exists. ", FAIL, "Quicken does not exist. ") 
				[ ] iFunctionResult = FAIL
		[+] except
			[ ] ExceptLog()
			[+] if (ImportExportQuickenFile.Exists())
				[ ] ImportExportQuickenFile.Close()
				[ ] 
			[ ] iFunctionResult = FAIL
		[ ] 
		[ ] return iFunctionResult
	[ ] 
	[+] // FUNCTION: DataFileCreateTillRegistration()       Added by Abhijit sarma Feb 2015
		[ ] // ==========================================================
	[ ] // ==========================================================
	[+] public INTEGER DataFileCreateTillRegistration(STRING sFileName,STRING sLocation optional)
		[ ] 
		[+] // Variable declaration
			[ ] STRING sCaption, sExpected, sFileWithPath
			[ ] BOOLEAN bAssert, bFound , bResult , bMatch
			[ ] bResult=FALSE
			[ ] bMatch=FALSE
			[ ] INTEGER iResult
			[ ] 
			[+] if(sLocation==NULL)
				[ ] sFileWithPath = AUT_DATAFILE_PATH + "\" + sFileName + ".QDF"
			[+] else
				[ ] sFileWithPath = sLocation + "\" + sFileName + ".QDF"
				[ ] 
			[ ] 
		[+] do
			[ ] 
			[+] if (!QuickenWindow.Exists())
				[ ] LaunchQuicken()
			[+] if (EnterQuickenPassword.Exists(2)) // added by Abhijit s Feb 2015
				[ ] EnterQuickenPassword.SetActive()
				[ ] EnterQuickenPassword.Password.SetFocus()
				[ ] EnterQuickenPassword.Password.SetText(sPassword)
				[ ] EnterQuickenPassword.Password.OK.Click()
			[+] if(ConvertYourData.Exists(30))// added by Abhijit s Feb 2015
				[ ] print("convert your data dialog appeard")
				[ ] ConvertYourData.SetActive()
				[ ] ConvertYourData.ConvertFilebutton.Click()
				[+] if(ConvertConfirmation.Exists())
					[ ] ConvertConfirmation.Yes.Click()
			[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Exists(10))// added by Abhijit s Feb 2015
				[ ] SignInQuickenConnectedServices()
				[ ] 
			[ ] 
			[+] if(QuickenWindow.Exists(20))
				[ ] QuickenWindow.SetActive()
				[ ] sCaption = QuickenWindow.GetCaption ()
				[ ] bFound = MatchStr("*{sFileName}*", sCaption)
				[+] if(FileExists(sFileWithPath))
					[+] if(bFound)
						[ ] OpenDataFile("TempFile")
					[ ] DeleteFile(sFileWithPath)
					[ ] 
				[ ] 
				[+] if(QuickenWindow.Exists(20))
					[ ] QuickenWindow.SetActive()
					[ ] 
					[+] // if(QuickenWindow.GetState()!=WS_MAXIMIZED)
						[ ] // QuickenWindow.PressKeys(KEY_ALT_SPACE)
						[ ] // QuickenWindow.TypeKeys(KEY_X)
						[ ] // QuickenWindow.ReleaseKeys(KEY_ALT_SPACE)
					[ ] 
					[ ] 
					[ ] QuickenWindow.SetActive()
					[ ] // bResult =QuickenWindow.File.IsEnabled
					[+] // if (bResult==FALSE)
						[ ] // QuickenWindow.Kill()
						[ ] // WaitForState(QuickenWindow,False,5)
						[ ] // App_Start (sCmdLine)
						[ ] // sleep(5)
						[ ] // WaitForState(QuickenWindow,true,10)
						[ ] // QuickenWindow.SetActive()
						[ ] // 
					[+] // do
						[ ] // QuickenWindow.TextClick("File")
						[ ] // // QuickenWindow.File.Click()
						[ ] // QuickenWindow.File.NewQuickenFile.Select()
					[+] // except
						[ ] // QuickenWindow.MainMenu.Select("/_File/_New Quicken File...")
						[ ] // 
					[ ] START:
					[+] do
						[ ] QuickenWindow.SetActive()
						[ ] QuickenWindow.TypeKeys(KEY_ALT_F)
						[ ] sleep(2)
						[ ] QuickenWindow.MainMenu.Select("/_File/_New Quicken File*")
					[+] except
						[ ] // LaunchQuicken()
						[ ] // goto START
					[ ] 
					[ ] ////CreateNewFile Dailog will appear if the file to be created doesn't exist and a file is already open //// 
					[ ] 
					[+] if (CreateNewFile.Exists(2))
						[ ] CreateNewFile.SetActive()
						[ ] CreateNewFile.OK.Click()
						[ ] 
						[ ] // Alert for online payments
						[+] if(AlertMessage.No.Exists(5))
							[ ] AlertMessage.SetActive()
							[ ] AlertMessage.No.Click()
						[ ] 
						[+] if(SyncChangesToTheQuickenCloud.Exists(3))
							[ ] SyncChangesToTheQuickenCloud.Later.Click()
							[ ] WaitForState(SyncChangesToTheQuickenCloud,FALSE,5)
						[ ] WaitForState(CreateNewFile,False,1)
					[+] if (ImportExportQuickenFile.Exists(10))
						[ ] ImportExportQuickenFile.SetActive()
						[ ] ImportExportQuickenFile.FileName.SetText(sFileWithPath)
						[ ] 
						[ ] ImportExportQuickenFile.OK.Click()
						[ ] 
						[ ] //Check for the already existing file
						[+] if (ImportExportQuickenFile.DuplicateFileMsg.Exists())
							[ ] ImportExportQuickenFile.DuplicateFileMsg.Close()
							[ ] ImportExportQuickenFile.Cancel.Click()
							[ ] ReportStatus("Data file existence", ABORT, "Data File {sFileName} already exists") 
						[ ] 
						[+] if (QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Exists(10))
							[ ] RegisterQuickenConnectedServicesTillReistration()
							[ ] bMatch=TRUE
						[ ] 
						[+] if (bMatch==FALSE)
							[ ] RegisterQuickenConnectedServicesTillReistration()
						[ ] QuickenWindow.SetActive()
						[ ] sCaption = QuickenWindow.GetCaption ()
						[ ] 
						[ ] bFound = MatchStr("*{sFileName}*", sCaption)
						[+] if(bFound == TRUE)
							[ ] iFunctionResult = PASS
							[ ] 
						[+] else
							[ ] iFunctionResult = FAIL
							[ ] ReportStatus("Verify Data file name", FAIL, "Data file name actual is: {sCaption} is NOT as expected: {sFileName}.") 
						[ ] 
						[ ] QuickenWindow.SetActive()
						[ ] //ExpandAccountBar()
					[+] // if (CreateNewFile.Exists(2))
						[ ] // CreateNewFile.SetActive()
						[ ] // CreateNewFile.OK.Click()
					[ ] // 
					[+] else
						[ ] ReportStatus("Verify Create New Quicken File", FAIL, "Create New Quicken File dailog didn't appear.") 
						[ ] iFunctionResult=FAIL
				[+] else
					[ ] ReportStatus("Verify Quicken Exists. ", FAIL, "Quicken does not exist. ") 
					[ ] iFunctionResult = FAIL
			[+] else
				[ ] ReportStatus("Verify Quicken Exists. ", FAIL, "Quicken does not exist. ") 
				[ ] iFunctionResult = FAIL
				[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] // QuickenWindow.Kill()
			[ ] // WaitForState(QuickenWindow , FALSE ,5)
			[ ] // App_Start(sCmdLine)
			[ ] // WaitForState(QuickenWindow , TRUE ,10)
			[ ] 
			[+] if (ImportExportQuickenFile.Exists())
				[ ] ImportExportQuickenFile.Close()
				[ ] 
			[ ] iFunctionResult = FAIL
		[ ] 
		[ ] return iFunctionResult
		[ ] 
		[ ] 
		[ ] 
	[+] // ===================================================================================
		[ ] 
	[ ] // 
	[ ] //Commented on 12/16/2015 to handele new sign-in widget - Mukesh
	[ ] // // ==========================================================
	[+] // // FUNCTION: DataFileCreate()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will create data file with specified name sFileName.
		[ ] // // If file is created successfully TRUE is returned else FALSE with error message is returned.
		[ ] // 
		[ ] // //
		[ ] // // PARAMETERS:		STRING 	sFileName		Name of the file to be created
		[ ] // //						STRING 	sLocation		Path of the file
		[ ] // //
		[ ] // // RETURNS:			INTEGER	0 = If data file is created successfully
		[ ] // //									1 = if any error occurs while creating file
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //	Dec 03, 2010	Mamta Jain created
		[ ] // //	Dec 23, 2010	Udita Dube Modified
	[ ] // // ==========================================================
	[+] // public INTEGER DataFileCreate(STRING sFileName,STRING sLocation optional, STRING sEmailID optional,STRING sPassword optional,STRING sSecurityQuestion optional,STRING sSecurityQuestionAnswer optional,STRING sName optional,STRING sLastName optional,STRING sAddress optional,STRING sCity optional,STRING sState optional, STRING sZip optional,STRING sBoughtFrom optional,STRING sVaultPassword optional ,STRING sMobileNumber optional)
		[ ] // 
		[+] // // Variable declaration
			[ ] // STRING sCaption, sExpected, sFileWithPath
			[ ] // BOOLEAN bAssert, bFound , bResult
			[ ] // bResult=FALSE
			[ ] // bMatch=FALSE
			[ ] // INTEGER iResult
			[ ] // 
			[+] // if(sLocation==NULL)
				[ ] // sFileWithPath = AUT_DATAFILE_PATH + "\" + sFileName + ".QDF"
			[+] // else
				[ ] // sFileWithPath = sLocation + "\" + sFileName + ".QDF"
				[ ] // 
			[ ] // 
		[+] // do
			[ ] // 
			[+] // if (!QuickenWindow.Exists())
				[ ] // LaunchQuicken()
			[ ] // 
			[+] // if(QuickenWindow.Exists(20))
				[ ] // QuickenWindow.SetActive()
				[ ] // sCaption = QuickenWindow.GetCaption ()
				[ ] // bFound = MatchStr("*{sFileName}*", sCaption)
				[+] // if(FileExists(sFileWithPath))
					[+] // if(bFound)
						[ ] // OpenDataFile("TempFile")
					[ ] // DeleteFile(sFileWithPath)
					[ ] // 
				[ ] // 
				[+] // if(QuickenWindow.Exists(20))
					[ ] // START:
					[+] // do
						[ ] // QuickenWindow.SetActive()
						[ ] // QuickenWindow.TypeKeys("<Alt-f>")
						[ ] // sleep(1)
						[ ] // QuickenWindow.File.NewQuickenFile.Select()
					[+] // except 
						[ ] // QuickenWindow.MainMenu.Select("/*File/_New Quicken File*")
					[ ] // 
					[+] // // do
						[ ] // // QuickenWindow.SetActive()
						[ ] // // QuickenWindow.TypeKeys(KEY_ALT_F)
						[ ] // // sleep(2)
						[ ] // // QuickenWindow.MainMenu.Select("/_File/_New Quicken File*")
					[+] // // except
						[ ] // // // LaunchQuicken()
						[ ] // // // goto START
					[ ] // 
					[ ] // ////CreateNewFile Dailog will appear if the file to be created doesn't exist and a file is already open //// 
					[ ] // 
					[+] // if (CreateNewFile.Exists(2))
						[ ] // CreateNewFile.SetActive()
						[ ] // CreateNewFile.OK.Click()
						[ ] // 
						[ ] // // Alert for online payments
						[+] // if(AlertMessage.No.Exists(5))
							[ ] // AlertMessage.SetActive()
							[ ] // AlertMessage.No.Click()
						[ ] // 
						[+] // if(SyncChangesToTheQuickenCloud.Exists(3))
							[ ] // SyncChangesToTheQuickenCloud.Later.Click()
							[ ] // WaitForState(SyncChangesToTheQuickenCloud,FALSE,5)
						[ ] // WaitForState(CreateNewFile,False,1)
					[+] // if (ImportExportQuickenFile.Exists(10))
						[ ] // ImportExportQuickenFile.SetActive()
						[ ] // ImportExportQuickenFile.FileName.SetText(sFileWithPath)
						[ ] // 
						[ ] // ImportExportQuickenFile.OK.Click()
						[ ] // 
						[ ] // //Check for the already existing file
						[+] // if (ImportExportQuickenFile.DuplicateFileMsg.Exists())
							[ ] // ImportExportQuickenFile.DuplicateFileMsg.Close()
							[ ] // ImportExportQuickenFile.Cancel.Click()
							[ ] // ReportStatus("Data file existence", ABORT, "Data File {sFileName} already exists") 
						[ ] // 
						[+] // if (QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Exists(10))
							[ ] // RegisterQuickenConnectedServices(sEmailID, sPassword, sSecurityQuestion, sSecurityQuestionAnswer, sName, sLastName, sAddress, sCity, sState, sZip, sBoughtFrom, sVaultPassword, sMobileNumber)
							[ ] // bMatch=TRUE
						[ ] // 
						[+] // if (bMatch==FALSE)
							[ ] // RegisterQuickenConnectedServices()
						[ ] // QuickenWindow.SetActive()
						[ ] // sCaption = QuickenWindow.GetCaption ()
						[ ] // 
						[ ] // bFound = MatchStr("*{sFileName}*", sCaption)
						[+] // if(bFound == TRUE)
							[ ] // iFunctionResult = PASS
							[ ] // 
						[+] // else
							[ ] // iFunctionResult = FAIL
							[ ] // ReportStatus("Verify Data file name", FAIL, "Data file name actual is: {sCaption} is NOT as expected: {sFileName}.") 
						[ ] // 
						[ ] // QuickenWindow.SetActive()
						[ ] // ExpandAccountBar()
					[+] // else
						[ ] // ReportStatus("Verify Create New Quicken File", FAIL, "Create New Quicken File dailog didn't appear.") 
						[ ] // iFunctionResult=FAIL
				[+] // else
					[ ] // ReportStatus("Verify Quicken Exists. ", FAIL, "Quicken does not exist. ") 
					[ ] // iFunctionResult = FAIL
			[+] // else
				[ ] // ReportStatus("Verify Quicken Exists. ", FAIL, "Quicken does not exist. ") 
				[ ] // iFunctionResult = FAIL
				[ ] // 
		[+] // except
			[ ] // ExceptLog()
			[ ] // // QuickenWindow.Kill()
			[ ] // // WaitForState(QuickenWindow , FALSE ,5)
			[ ] // // App_Start(sCmdLine)
			[ ] // // WaitForState(QuickenWindow , TRUE ,10)
			[ ] // 
			[+] // if (ImportExportQuickenFile.Exists())
				[ ] // ImportExportQuickenFile.Close()
				[ ] // 
			[ ] // iFunctionResult = FAIL
		[ ] // 
		[ ] // return iFunctionResult
	[ ] 
	[ ] 
	[+] public INTEGER DataFileCreate(STRING sFileName,STRING sLocation optional, STRING sEmailID optional,STRING sPassword optional,STRING sSecurityQuestion optional,STRING sSecurityQuestionAnswer optional,STRING sName optional,STRING sLastName optional,STRING sAddress optional,STRING sCity optional,STRING sState optional, STRING sZip optional,STRING sBoughtFrom optional,STRING sVaultPassword optional ,STRING sMobileNumber optional)
		[ ] 
		[+] // Variable declaration
			[ ] STRING sCaption, sExpected, sFileWithPath
			[ ] BOOLEAN bAssert, bFound , bResult
			[ ] bResult=FALSE
			[ ] bMatch=FALSE
			[ ] INTEGER iResult
			[ ] 
			[+] if(sLocation==NULL)
				[ ] sFileWithPath = AUT_DATAFILE_PATH + "\" + sFileName + ".QDF"
			[+] else
				[ ] sFileWithPath = sLocation + "\" + sFileName + ".QDF"
				[ ] 
			[ ] 
		[+] do
			[ ] 
			[+] if (!QuickenWindow.Exists())
				[ ] LaunchQuicken()
			[ ] 
			[+] if(QuickenWindow.Exists(20))
				[ ] QuickenWindow.SetActive()
				[ ] sCaption = QuickenWindow.GetCaption ()
				[ ] bFound = MatchStr("*{sFileName}*", sCaption)
				[+] if(FileExists(sFileWithPath))
					[+] if(bFound)
						[ ] //OpenDataFile("TempFile")
						[ ] 
					[ ] Sys_Execute("taskkill /f /im qw.exe",NULL,EM_CONTINUE_RUNNING )
					[ ] sleep(5)
					[ ] DeleteFile(sFileWithPath)
					[ ] LaunchQuicken()
				[ ] 
				[+] if(QuickenWindow.Exists(20))
					[ ] START:
					[+] do
						[ ] QuickenWindow.SetActive()
						[ ] QuickenWindow.TypeKeys("<Alt-f>")
						[ ] sleep(1)
						[ ] QuickenWindow.File.NewQuickenFile.Select()
					[+] except 
						[ ] QuickenWindow.File.Click()
						[ ] QuickenWindow.MainMenu.Select("/*File/_New Quicken File*")
					[ ] 
					[ ] ////CreateNewFile Dailog will appear if the file to be created doesn't exist and a file is already open //// 
					[ ] 
					[+] if (CreateNewFile.Exists(2))
						[ ] CreateNewFile.SetActive()
						[ ] CreateNewFile.OK.Click()
						[ ] 
						[ ] // Alert for online payments
						[+] if(AlertMessage.No.Exists(5))
							[ ] AlertMessage.SetActive()
							[ ] AlertMessage.No.Click()
						[ ] 
						[+] if(SyncChangesToTheQuickenCloud.Exists(3))
							[ ] SyncChangesToTheQuickenCloud.Later.Click()
							[ ] WaitForState(SyncChangesToTheQuickenCloud,FALSE,5)
						[ ] WaitForState(CreateNewFile,False,1)
					[+] if (ImportExportQuickenFile.Exists(10))
						[ ] ImportExportQuickenFile.SetActive()
						[ ] ImportExportQuickenFile.FileName.SetText(sFileWithPath)
						[ ] 
						[ ] ImportExportQuickenFile.OK.Click()
						[ ] 
						[ ] //Check for the already existing file
						[+] if (ImportExportQuickenFile.DuplicateFileMsg.Exists())
							[ ] ImportExportQuickenFile.DuplicateFileMsg.Close()
							[ ] ImportExportQuickenFile.Cancel.Click()
							[ ] ReportStatus("Data file existence", ABORT, "Data File {sFileName} already exists") 
						[ ] 
						[+] if (QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Exists(10))
							[ ] // RegisterQuickenConnectedServices(sEmailID, sPassword, sSecurityQuestion, sSecurityQuestionAnswer, sName, sLastName, sAddress, sCity, sState, sZip, sBoughtFrom, sVaultPassword, sMobileNumber)
							[ ] SignInQuickenConnectedServices()
							[ ] 
							[ ] 
							[ ] bMatch=TRUE
						[ ] 
						[+] if (bMatch==FALSE)
							[ ] SignInQuickenConnectedServices()
						[ ] QuickenWindow.SetActive()
						[ ] sCaption = QuickenWindow.GetCaption ()
						[ ] 
						[ ] bFound = MatchStr("*{sFileName}*", sCaption)
						[+] if(bFound == TRUE)
							[ ] iFunctionResult = PASS
							[ ] 
						[+] else
							[ ] iFunctionResult = FAIL
							[ ] ReportStatus("Verify Data file name", FAIL, "Data file name actual is: {sCaption} is NOT as expected: {sFileName}.") 
						[ ] 
						[ ] QuickenWindow.SetActive()
						[ ] ExpandAccountBar()
					[+] else
						[ ] ReportStatus("Verify Create New Quicken File", FAIL, "Create New Quicken File dailog didn't appear.") 
						[ ] iFunctionResult=FAIL
				[+] else
					[ ] ReportStatus("Verify Quicken Exists. ", FAIL, "Quicken does not exist. ") 
					[ ] iFunctionResult = FAIL
			[+] else
				[ ] ReportStatus("Verify Quicken Exists. ", FAIL, "Quicken does not exist. ") 
				[ ] iFunctionResult = FAIL
				[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] // QuickenWindow.Kill()
			[ ] // WaitForState(QuickenWindow , FALSE ,5)
			[ ] // App_Start(sCmdLine)
			[ ] // WaitForState(QuickenWindow , TRUE ,10)
			[ ] 
			[+] if (ImportExportQuickenFile.Exists())
				[ ] ImportExportQuickenFile.Close()
				[ ] 
			[ ] iFunctionResult = FAIL
		[ ] 
		[ ] return iFunctionResult
	[ ] 
	[+] public BOOLEAN verify_SigninWidget()
		[ ] 
		[ ] STRING sActual = "C:\automation\ApplicationSpecific\Results\Actual_{GetTestCaseName()}.bmp"
		[ ] STRING sExpected = "C:\automation\ApplicationSpecific\Data\TestData\awesomium_signin.bmp"
		[ ] BOOLEAN bMatch = FALSE
		[ ] INTEGER iCount
		[ ] 
		[ ] sleep(30)
		[ ] QuickenWindow.SetActive()
		[+] if (QuickenWindow.awesomium.Exists())
			[ ] 
			[+] for (iCount=1; iCount<=5; iCount++)
				[ ] 
				[+] if (Sys_FileExists(sActual))
					[ ] Sys_RemoveFile(sActual)
				[ ] 
				[ ] QuickenWindow.awesomium.CaptureBitmap(sActual)
				[ ] sleep(1)
				[ ] bMatch = Sys_CompareBitmap(sExpected, sActual)
				[ ] 
				[ ] 
				[+] if (bMatch)
					[ ] return bMatch
				[ ] 
				[ ] // Sys_RemoveFile(sActual)
				[ ] 
				[ ] sleep(2)
			[ ] 
			[ ] 
		[ ] 
		[ ] ReportStatus("Sign-In Widget is not loaded", WARN, "Sign-In Widget is not loaded")
		[ ] sleep(40)
		[ ] return FALSE
		[ ] 
	[ ] 
	[+] public BOOLEAN OII_SignIn()
		[ ] 
		[ ] STRING sIamUserName = "silk_iamtestpass@mailinator.com"
		[ ] STRING sPassword = "Intuit!1"
		[ ] 
		[ ] 
		[+] // if (! verify_SigninWidget())
			[ ] // ReportStatus("Sign-In Widget is Image comparision failed but still proceeding....", WARN, "Sign-In Widget is not loaded")
			[ ] // return FALSE
		[ ] sleep(70)
		[ ] 
		[ ] QuickenWindow.awesomium.click(1,50,70)
		[ ] QuickenWindow.awesomium.Typekeys(sIamUserName)
		[ ] QuickenWindow.awesomium.Typekeys("<Tab>")
		[ ] sleep(1)
		[ ] QuickenWindow.awesomium.Typekeys(sPassword)
		[ ] QuickenWindow.awesomium.Typekeys("<Enter>")
		[ ] sleep(10)
		[ ] 
		[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.WhereDidYouPurchaseQuicken.Exists(120))
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Name.SetText("first")
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.LastName.SetText("last")
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Address.SetText("address")
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.City.SetText("city")
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.State.Select("AL")
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Zip.SetText("52261")
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.WhereDidYouPurchaseQuicken.Select("Walmart")
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
			[ ] sleep(10)
			[ ] 
		[ ] 
		[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.UseMobileOption.Exists(120))
			[-] do
				[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.UseMobileOption.Check()
			[+] except
				[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.UseMobileOption.Click()
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
		[ ] 
		[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Upgrade.Exists())
			[ ] 
			[+] if(QuickenWindow.GetState()!=WS_MAXIMIZED)
				[ ] QuickenWindow.PressKeys(KEY_ALT_SPACE)
				[ ] QuickenWindow.TypeKeys(KEY_X)
				[ ] QuickenWindow.ReleaseKeys(KEY_ALT_SPACE)
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Upgrade.BringIntoView()
			[ ] sleep(2)
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Upgrade.Click()
			[+] if (UpgradeToTheQuickenmobileApp.Exists(30))
				[ ] UpgradeToTheQuickenmobileApp.SetActive()
				[ ] UpgradeToTheQuickenmobileApp.CancelButton.Click()
			[ ] 
		[ ] 
		[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.AddAccount.Exists(120))
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.AddAccount.Click()
			[+] if(AddAccount.Exists(5))
				[ ] AddAccount.SetActive()
				[ ] AddAccount.Close()
			[ ] 
			[ ] 
		[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Exists(5))
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
			[ ] 
			[ ] 
		[+] if(QuickenWindow.Done.Exists(20))
			[ ] QuickenWindow.Done.Click()
		[+] if (DlgConsolidatePassword.Exists())
			[ ] DlgConsolidatePassword.SetActive()
			[ ] DlgConsolidatePassword.Close()
			[ ] WaitForState(DlgConsolidatePassword ,FALSE , 5)
		[+] if (DlgQuickenOnePassword.Exists())
			[ ] DlgQuickenOnePassword.SetActive()
			[ ] DlgQuickenOnePassword.Close()
			[ ] WaitForState(DlgQuickenOnePassword ,FALSE , 5)
		[ ] 
		[ ] return TRUE
	[ ] 
	[+] public INTEGER DataFileCreate_OII(STRING sFileName,STRING sLocation optional, STRING sEmailID optional,STRING sPassword optional,STRING sSecurityQuestion optional,STRING sSecurityQuestionAnswer optional,STRING sName optional,STRING sLastName optional,STRING sAddress optional,STRING sCity optional,STRING sState optional, STRING sZip optional,STRING sBoughtFrom optional,STRING sVaultPassword optional ,STRING sMobileNumber optional)
		[ ] 
		[+] // Variable declaration
			[ ] STRING sCaption, sExpected, sFileWithPath
			[ ] BOOLEAN bAssert, bFound , bResult
			[ ] bResult=FALSE
			[ ] bMatch=FALSE
			[ ] INTEGER iResult
			[ ] 
			[+] if(sLocation==NULL)
				[ ] sFileWithPath = AUT_DATAFILE_PATH + "\" + sFileName + ".QDF"
			[+] else
				[ ] sFileWithPath = sLocation + "\" + sFileName + ".QDF"
				[ ] 
			[ ] 
		[-] do
			[ ] 
			[+] if (!QuickenWindow.Exists())
				[ ] LaunchQuicken()
			[ ] 
			[+] if(QuickenWindow.Exists(20))
				[ ] QuickenWindow.SetActive()
				[ ] sCaption = QuickenWindow.GetCaption ()
				[ ] bFound = MatchStr("*{sFileName}*", sCaption)
				[+] if(FileExists(sFileWithPath))
					[+] if(bFound)
						[ ] //OpenDataFile("TempFile")
						[ ] 
					[ ] Sys_Execute("taskkill /f /im qw.exe",NULL,EM_CONTINUE_RUNNING )
					[ ] sleep(5)
					[ ] DeleteFile(sFileWithPath)
					[ ] LaunchQuicken()
				[ ] 
				[+] if(QuickenWindow.Exists(20))
					[ ] START:
					[+] do
						[ ] QuickenWindow.SetActive()
						[ ] QuickenWindow.TypeKeys("<Alt-f>")
						[ ] sleep(1)
						[ ] QuickenWindow.File.NewQuickenFile.Select()
					[+] except 
						[ ] QuickenWindow.File.Click()
						[ ] QuickenWindow.MainMenu.Select("/*File/_New Quicken File*")
					[ ] 
					[ ] ////CreateNewFile Dailog will appear if the file to be created doesn't exist and a file is already open //// 
					[ ] 
					[+] if (CreateNewFile.Exists(2))
						[ ] CreateNewFile.SetActive()
						[ ] CreateNewFile.OK.Click()
						[ ] 
						[ ] // Alert for online payments
						[+] if(AlertMessage.No.Exists(5))
							[ ] AlertMessage.SetActive()
							[ ] AlertMessage.No.Click()
						[ ] 
						[+] if(SyncChangesToTheQuickenCloud.Exists(3))
							[ ] SyncChangesToTheQuickenCloud.Later.Click()
							[ ] WaitForState(SyncChangesToTheQuickenCloud,FALSE,5)
						[ ] WaitForState(CreateNewFile,False,1)
					[+] if (ImportExportQuickenFile.Exists(10))
						[ ] ImportExportQuickenFile.SetActive()
						[ ] ImportExportQuickenFile.FileName.SetText(sFileWithPath)
						[ ] 
						[ ] ImportExportQuickenFile.OK.Click()
						[ ] 
						[ ] //Check for the already existing file
						[+] if (ImportExportQuickenFile.DuplicateFileMsg.Exists())
							[ ] ImportExportQuickenFile.DuplicateFileMsg.Close()
							[ ] ImportExportQuickenFile.Cancel.Click()
							[ ] ReportStatus("Data file existence", ABORT, "Data File {sFileName} already exists") 
						[ ] 
						[+] if (QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Exists(10))
							[ ] 
							[ ] // 08-Mar-2016 Kalyan: Updated method to handle OII
							[ ] // RegisterQuickenConnectedServices(sEmailID, sPassword, sSecurityQuestion, sSecurityQuestionAnswer, sName, sLastName, sAddress, sCity, sState, sZip, sBoughtFrom, sVaultPassword, sMobileNumber)
							[ ] // SignInQuickenConnectedServices()
							[ ] OII_SignIn()
							[ ] 
							[ ] bMatch=TRUE
						[ ] 
						[+] if (bMatch==FALSE)
							[ ] SignInQuickenConnectedServices()
						[ ] QuickenWindow.SetActive()
						[ ] sCaption = QuickenWindow.GetCaption ()
						[ ] 
						[ ] bFound = MatchStr("*{sFileName}*", sCaption)
						[+] if(bFound == TRUE)
							[ ] iFunctionResult = PASS
							[ ] 
						[+] else
							[ ] iFunctionResult = FAIL
							[ ] ReportStatus("Verify Data file name", FAIL, "Data file name actual is: {sCaption} is NOT as expected: {sFileName}.") 
						[ ] 
						[ ] QuickenWindow.SetActive()
						[ ] ExpandAccountBar()
					[+] else
						[ ] ReportStatus("Verify Create New Quicken File", FAIL, "Create New Quicken File dailog didn't appear.") 
						[ ] iFunctionResult=FAIL
				[+] else
					[ ] ReportStatus("Verify Quicken Exists. ", FAIL, "Quicken does not exist. ") 
					[ ] iFunctionResult = FAIL
			[+] else
				[ ] ReportStatus("Verify Quicken Exists. ", FAIL, "Quicken does not exist. ") 
				[ ] iFunctionResult = FAIL
				[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] // QuickenWindow.Kill()
			[ ] // WaitForState(QuickenWindow , FALSE ,5)
			[ ] // App_Start(sCmdLine)
			[ ] // WaitForState(QuickenWindow , TRUE ,10)
			[ ] 
			[+] if (ImportExportQuickenFile.Exists())
				[ ] ImportExportQuickenFile.Close()
				[ ] 
			[ ] iFunctionResult = FAIL
		[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: OpenDataFile()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will open data file with specified name sFileName.
		[ ] // If file is opened successfully TRUE is returned else FALSE with error message is returned.
		[ ] 
		[ ] //
		[ ] // PARAMETERS:		STRING 	sFileName		Name of the file to be created
		[ ] //
		[ ] // RETURNS:			INTEGER	PASS = If data file is created successfully
		[ ] //									FAIL = if any error occurs while creating file
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	Dec 03, 2010	Mamta Jain created
		[ ] //	Dec 23, 2010	Udita Dube Modified
		[ ] //     Aug 20,2011    Puja Verma Modified
		[ ] //     Feb 24,2015    Abhijit S Modified
	[ ] // ==========================================================
	[+] // public INTEGER OpenDataFile(STRING sFileName,STRING sLocation optional, STRING sExtension optional)
		[ ] // 
		[+] // // Variable declaration
			[ ] // STRING sCaption, sExpected, sFileWithPath
			[ ] // BOOLEAN  bFound ,bResult
			[ ] // INTEGER iResult
			[ ] // 
			[+] // if(sExtension==NULL)
				[ ] // sExtension= ".QDF"
			[ ] // 
			[+] // if(sLocation==NULL)
				[ ] // sFileWithPath = AUT_DATAFILE_PATH + "\" + sFileName + sExtension
			[+] // else
				[ ] // sFileWithPath = sLocation + "\" + sFileName + ".QDF"
				[ ] // 
			[ ] // 
		[+] // do
			[ ] // QuickenWindow.SetActive()
			[+] // // if(QuickenTSM.Exists())  // Handle TSM Dialog if exist, added by Abhijit S Mar 2015
				[ ] // // QuickenTSM.SetActive()
				[ ] // // QuickenTSM.RemindMeLater.Uncheck()
				[ ] // // QuickenTSM.Close()
			[ ] // 
			[+] // // if (EnterQuickenPassword.Exists(2))
				[ ] // // EnterQuickenPassword(sPassword) // added by Abhijit s Feb 2015
			[+] // if (EnterQuickenPassword.Exists(2)) // added by Abhijit s Feb 2015
				[ ] // EnterQuickenPassword.SetActive()
				[ ] // EnterQuickenPassword.Password.SetFocus()
				[ ] // EnterQuickenPassword.Password.SetText(sPassword)
				[ ] // EnterQuickenPassword.Password.OK.Click()
			[+] // if(ConvertYourData.Exists(30))// added by Abhijit s Feb 2015
				[ ] // ConvertYourData.SetActive()
				[ ] // ConvertYourData.ConvertFilebutton.Click()
			[+] // if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Exists(10))// added by Abhijit s Feb 2015
				[ ] // SignInQuickenConnectedServices()
			[+] // do
				[ ] // QuickenWindow.TypeKeys(KEY_ALT_F)
				[ ] // QuickenWindow.File.OpenQuickenFile.Select()
			[+] // except
				[ ] // QuickenWindow.SetActive()
				[+] // do
					[ ] // QuickenWindow.TypeKeys(KEY_CTRL_O)
				[+] // except
					[+] // do
						[ ] // QuickenWindow.File.Click()
						[ ] // QuickenWindow.File.OpenQuickenFile.Select()
					[+] // except
						[ ] // QuickenWindow.MainMenu.Select("/_File/_Open Quicken File...")
				[ ] // 
			[ ] // 
			[ ] // // Alert for online payments
			[+] // if(AlertMessage.No.Exists(5))
				[ ] // AlertMessage.SetActive()
				[ ] // AlertMessage.No.Click()
			[+] // if(QuickenBackupReminder.Exists(5))
				[ ] // QuickenBackupReminder.DontShowAgainCheckBox.Check()
				[ ] // QuickenBackupReminder.LaterButton.Click()
			[+] // if(SyncChangesToTheQuickenCloud.Exists(3))
				[ ] // SyncChangesToTheQuickenCloud.Later.Click()
				[ ] // WaitForState(SyncChangesToTheQuickenCloud,FALSE,5)
			[ ] // 
			[+] // if (ImportExportQuickenFile.Exists(10))
				[ ] // ImportExportQuickenFile.SetActive()
				[ ] // ImportExportQuickenFile.FileName.SetText(sFileWithPath)
				[ ] // 
				[ ] // ImportExportQuickenFile.OK.Click()
				[ ] // sleep(10)
				[+] // // if(QuickenTSM.Exists())  // Handle TSM Dialog if exist, added by Abhijit S Mar 2015
					[ ] // // QuickenTSM.SetActive()
					[ ] // // QuickenTSM.RemindMeLater.Uncheck()
					[ ] // // QuickenTSM.Close()
				[ ] // // //Password protected file // Added by Abhijit S Feb 2015
				[+] // // if (EnterQuickenPassword.Exists(2))
					[ ] // // EnterQuickenPassword(sPassword)
				[+] // if (EnterQuickenPassword.Exists(2)) // added by Abhijit s Feb 2015
					[ ] // EnterQuickenPassword.SetActive()
					[ ] // EnterQuickenPassword.Password.SetFocus()
					[ ] // EnterQuickenPassword.Password.SetText(sPassword)
					[ ] // EnterQuickenPassword.Password.OK.Click()
					[ ] // 
				[ ] // //Convert data file if older file
				[+] // if(ConvertYourData.Exists(30))
					[ ] // 
					[ ] // ConvertYourData.SetActive()
					[ ] // ConvertYourData.ConvertFilebutton.Click()
					[+] // if (AlertMessage.Yes.Exists(2))
						[ ] // AlertMessage.SetActive()
						[ ] // AlertMessage.Yes.Click()
						[ ] // WaitForState(AlertMessage, FALSE ,2)
					[ ] // 
					[+] // if (AlertMessage.OK.Exists(2))
						[ ] // AlertMessage.SetActive()
						[ ] // AlertMessage.OK.Click()
						[ ] // WaitForState(AlertMessage, FALSE ,2)
					[+] // if (AlertMessage.Exists(5))
						[+] // while (AlertMessage.Exists())
							[ ] // sleep(1)
					[+] // while (QuickenAlertMessage.Exists(2))
						[ ] // sleep(1)
						[ ] // 
				[+] // else
					[ ] // //print("convert your data dialog didn't appear")
				[ ] // SignInQuickenConnectedServices()
				[+] // if (AlertMessage.Exists(3))
					[ ] // AlertMessage.SetActive()
					[ ] // AlertMessage.OK.Click()
					[ ] // WaitForState(AlertMessage, false ,2)
					[ ] // ImportExportQuickenFile.SetActive()
					[ ] // ImportExportQuickenFile.Cancel.Click()
				[ ] // 
				[ ] // WaitForState(ImportExportQuickenFile, false ,5)
				[ ] // 
				[ ] // sleep(5)
				[ ] // 
				[ ] // QuickenWindow.SetActive()
				[ ] // sCaption = QuickenWindow.GetCaption ()
				[ ] // 
				[ ] // bFound = MatchStr("*{sFileName}*", sCaption)
				[+] // if(bFound == TRUE)
					[ ] // iFunctionResult = PASS
				[+] // else
					[ ] // iFunctionResult = FAIL
					[ ] // 
				[ ] // QuickenWindow.SetActive()
				[ ] // ExpandAccountBar()     
				[ ] // 
			[+] // else
				[ ] // ReportStatus("Verify Open Quicken File", FAIL, "Open Quicken File dailog didn't appear.") 
				[ ] // iFunctionResult = FAIL
			[ ] // 
		[+] // except
			[ ] // ExceptLog()
			[ ] // // QuickenWindow.Kill()
			[ ] // // WaitForState(QuickenWindow , FALSE ,5)
			[ ] // // App_Start(sCmdLine)
			[ ] // // sleep(10)
			[ ] // // WaitForState(QuickenWindow , TRUE ,10)
			[ ] // // 
			[+] // // if (ImportExportQuickenFile.Exists())
				[ ] // // ImportExportQuickenFile.Close()
			[ ] // iFunctionResult = FAIL
		[ ] // return iFunctionResult
	[ ] 
	[ ] //Commented on 12/16/2015 to handele new sign-in widget - Mukesh
	[+] // public INTEGER OpenDataFile(STRING sFileName,STRING sLocation optional, STRING sExtension optional)
		[ ] // 
		[+] // // Variable declaration
			[ ] // STRING sCaption, sExpected, sFileWithPath
			[ ] // BOOLEAN  bFound ,bResult
			[ ] // INTEGER iResult
			[ ] // 
			[+] // if(sExtension==NULL)
				[ ] // sExtension= ".QDF"
			[ ] // 
			[+] // if(sLocation==NULL)
				[ ] // sFileWithPath = AUT_DATAFILE_PATH + "\" + sFileName + sExtension
			[+] // else
				[ ] // sFileWithPath = sLocation + "\" + sFileName + ".QDF"
				[ ] // 
			[ ] // 
		[+] // do
			[ ] // QuickenWindow.SetActive()
			[+] // // if(QuickenTSM.Exists())  // Handle TSM Dialog if exist, added by Abhijit S Mar 2015
				[ ] // // QuickenTSM.SetActive()
				[ ] // // QuickenTSM.RemindMeLater.Uncheck()
				[ ] // // QuickenTSM.Close()
			[ ] // 
			[+] // // if (EnterQuickenPassword.Exists(2))
				[ ] // // EnterQuickenPassword(sPassword) // added by Abhijit s Feb 2015
			[+] // if (EnterQuickenPassword.Exists(2)) // added by Abhijit s Feb 2015
				[ ] // EnterQuickenPassword.SetActive()
				[ ] // EnterQuickenPassword.Password.SetFocus()
				[ ] // EnterQuickenPassword.Password.SetText(sPassword)
				[ ] // EnterQuickenPassword.Password.OK.Click()
			[+] // if(ConvertYourData.Exists(30))// added by Abhijit s Feb 2015
				[ ] // ConvertYourData.SetActive()
				[ ] // ConvertYourData.ConvertFilebutton.Click()
			[+] // if (AlertMessage.OK.Exists(2)) // added by Abhijit s June 2015
				[ ] // AlertMessage.SetActive()
				[ ] // AlertMessage.OK.Click()
				[ ] // WaitForState(AlertMessage, false ,2)
			[+] // if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Exists(10))// added by Abhijit s Feb 2015
				[ ] // SignInQuickenConnectedServices()
			[+] // do
				[ ] // 
				[ ] // QuickenWindow.TypeKeys(KEY_ALT_F)
				[ ] // QuickenWindow.File.OpenQuickenFile.Select()
				[ ] // sleep(2)
				[ ] // 
				[ ] // // 2015-10-27 KalyanG: added the condition
				[+] // if !(ImportExportQuickenFile.Exists())
					[ ] // raise
				[ ] // print("[WARNING]***Able to open dialog[open data file] in first attempt")
			[+] // except
				[ ] // QuickenWindow.SetActive()
				[+] // do
					[ ] // QuickenWindow.TypeKeys(KEY_CTRL_O)
					[ ] // sleep(2)
					[ ] // 
					[ ] // // 2015-10-27 KalyanG: added the condition
					[+] // if !(ImportExportQuickenFile.Exists())
						[ ] // raise
					[ ] // print("[WARNING]***Able to open dialog[open data file] in Second attempt")
					[ ] // 
				[+] // except
					[+] // do
						[ ] // QuickenWindow.File.Click()
						[ ] // QuickenWindow.File.OpenQuickenFile.Select()
						[ ] // sleep(2)
						[ ] // 
						[ ] // // 2015-10-27 KalyanG: added the condition
						[+] // if !(ImportExportQuickenFile.Exists())
							[ ] // raise
						[ ] // print("[WARNING]***Able to open dialog[open data file] in third attempt")
						[ ] // 
					[+] // except
						[ ] // QuickenWindow.MainMenu.Select("/_File/_Open Quicken File...")
						[ ] // 
						[ ] // sleep(2)
						[ ] // 
						[ ] // // 2015-10-27 KalyanG: added the condition
						[+] // if !(ImportExportQuickenFile.Exists())
							[ ] // raise -1, "Attempt 4 -> Unable to open dialog[open data file]"
						[ ] // 
				[ ] // 
			[ ] // 
			[ ] // // Alert for online payments
			[+] // if(AlertMessage.No.Exists(5))
				[ ] // AlertMessage.SetActive()
				[ ] // AlertMessage.No.Click()
			[+] // if(QuickenBackupReminder.Exists(5))
				[ ] // QuickenBackupReminder.DontShowAgainCheckBox.Check()
				[ ] // QuickenBackupReminder.LaterButton.Click()
			[+] // if(SyncChangesToTheQuickenCloud.Exists(3))
				[ ] // SyncChangesToTheQuickenCloud.Later.Click()
				[ ] // WaitForState(SyncChangesToTheQuickenCloud,FALSE,5)
			[ ] // 
			[+] // if (ImportExportQuickenFile.Exists(10))
				[ ] // ImportExportQuickenFile.SetActive()
				[ ] // ImportExportQuickenFile.FileName.SetText(sFileWithPath)
				[ ] // 
				[ ] // ImportExportQuickenFile.OK.Click()
				[ ] // sleep(10)
				[+] // // if(QuickenTSM.Exists())  // Handle TSM Dialog if exist, added by Abhijit S Mar 2015
					[ ] // // QuickenTSM.SetActive()
					[ ] // // QuickenTSM.RemindMeLater.Uncheck()
					[ ] // // QuickenTSM.Close()
				[ ] // // //Password protected file // Added by Abhijit S Feb 2015
				[+] // // if (EnterQuickenPassword.Exists(2))
					[ ] // // EnterQuickenPassword(sPassword)
				[+] // if (EnterQuickenPassword.Exists(2)) // added by Abhijit s Feb 2015
					[ ] // EnterQuickenPassword.SetActive()
					[ ] // EnterQuickenPassword.Password.SetFocus()
					[ ] // EnterQuickenPassword.Password.SetText(sPassword)
					[ ] // EnterQuickenPassword.Password.OK.Click()
					[ ] // 
				[ ] // //Convert data file if older file
				[+] // if(ConvertYourData.Exists(30))
					[ ] // 
					[ ] // ConvertYourData.SetActive()
					[ ] // ConvertYourData.ConvertFilebutton.Click()
					[+] // if (AlertMessage.Yes.Exists(2))
						[ ] // AlertMessage.SetActive()
						[ ] // AlertMessage.Yes.Click()
						[ ] // WaitForState(AlertMessage, FALSE ,2)
					[ ] // 
					[+] // if (AlertMessage.OK.Exists(2))
						[ ] // AlertMessage.SetActive()
						[ ] // AlertMessage.OK.Click()
						[ ] // WaitForState(AlertMessage, FALSE ,2)
					[+] // if (AlertMessage.Exists(5))
						[+] // while (AlertMessage.Exists())
							[ ] // sleep(1)
					[+] // while (QuickenAlertMessage.Exists(2))
						[ ] // sleep(1)
						[ ] // 
				[+] // else
					[ ] // //print("convert your data dialog didn't appear")
				[ ] // SignInQuickenConnectedServices()
				[+] // if (AlertMessage.Exists(3))
					[ ] // AlertMessage.SetActive()
					[ ] // AlertMessage.OK.Click()
					[ ] // WaitForState(AlertMessage, false ,2)
					[ ] // ImportExportQuickenFile.SetActive()
					[ ] // ImportExportQuickenFile.Cancel.Click()
				[ ] // 
				[ ] // WaitForState(ImportExportQuickenFile, false ,5)
				[ ] // 
				[ ] // sleep(5)
				[ ] // 
				[ ] // QuickenWindow.SetActive()
				[ ] // sCaption = QuickenWindow.GetCaption ()
				[ ] // 
				[ ] // bFound = MatchStr("*{sFileName}*", sCaption)
				[+] // if(bFound == TRUE)
					[ ] // iFunctionResult = PASS
				[+] // else
					[ ] // iFunctionResult = FAIL
					[ ] // 
				[ ] // QuickenWindow.SetActive()
				[ ] // ExpandAccountBar()     
				[ ] // 
			[+] // else
				[ ] // ReportStatus("Verify Open Quicken File", FAIL, "Open Quicken File dailog didn't appear.") 
				[ ] // iFunctionResult = FAIL
			[ ] // 
		[+] // except
			[ ] // ExceptLog()
			[ ] // // QuickenWindow.Kill()
			[ ] // // WaitForState(QuickenWindow , FALSE ,5)
			[ ] // // App_Start(sCmdLine)
			[ ] // // sleep(10)
			[ ] // // WaitForState(QuickenWindow , TRUE ,10)
			[ ] // // 
			[+] // // if (ImportExportQuickenFile.Exists())
				[ ] // // ImportExportQuickenFile.Close()
			[ ] // iFunctionResult = FAIL
		[ ] // return iFunctionResult
	[ ] 
	[+] public INTEGER OpenDataFile(STRING sFileName,STRING sLocation optional, STRING sExtension optional)
		[ ] BOOLEAN bOpenDataFile =TRUE
		[+] // Variable declaration
			[ ] STRING sCaption, sExpected, sFileWithPath
			[ ] BOOLEAN  bFound ,bResult
			[ ] INTEGER iResult
			[ ] 
			[+] if(sExtension==NULL)
				[ ] sExtension= ".QDF"
			[ ] 
			[+] if(sLocation==NULL)
				[ ] sFileWithPath = AUT_DATAFILE_PATH + "\" + sFileName + sExtension
			[+] else
				[ ] sFileWithPath = sLocation + "\" + sFileName + ".QDF"
				[ ] 
			[ ] 
		[-] do
			[ ] QuickenWindow.SetActive()
			[+] // if(QuickenTSM.Exists())  // Handle TSM Dialog if exist, added by Abhijit S Mar 2015
				[ ] // QuickenTSM.SetActive()
				[ ] // QuickenTSM.RemindMeLater.Uncheck()
				[ ] // QuickenTSM.Close()
			[ ] 
			[+] // if (EnterQuickenPassword.Exists(2))
				[ ] // EnterQuickenPassword(sPassword) // added by Abhijit s Feb 2015
			[+] if (EnterQuickenPassword.Exists(2)) // added by Abhijit s Feb 2015
				[ ] EnterQuickenPassword.SetActive()
				[ ] EnterQuickenPassword.Password.SetFocus()
				[ ] EnterQuickenPassword.Password.SetText(sPassword)
				[ ] EnterQuickenPassword.Password.OK.Click()
			[+] if(ConvertYourData.Exists())// added by Abhijit s Feb 2015
				[ ] ConvertYourData.SetActive()
				[ ] ConvertYourData.ConvertFilebutton.Click()
			[+] if (AlertMessage.OK.Exists()) // added by Abhijit s June 2015
				[ ] AlertMessage.SetActive()
				[ ] AlertMessage.OK.Click()
				[ ] WaitForState(AlertMessage, false ,2)
			[+] // if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Exists(10))// added by Abhijit s Feb 2015
				[ ] // SignInQuickenConnectedServices()
			[+] do
				[ ] 
				[ ] QuickenWindow.TypeKeys(KEY_ALT_F)
				[ ] QuickenWindow.File.OpenQuickenFile.Select()
				[ ] sleep(2)
				[ ] 
				[ ] // // 2015-10-27 KalyanG: added the condition
				[+] // if !(ImportExportQuickenFile.Exists())
					[ ] // raise
				[ ] // print("[WARNING]***Able to open dialog[open data file] in first attempt")
			[+] except
				[ ] QuickenWindow.SetActive()
				[+] do
					[ ] 
					[ ] QuickenWindow.TypeKeys(KEY_CTRL_O)
					[ ] sleep(2)
					[ ] // 
					[ ] // // 2015-10-27 KalyanG: added the condition
					[+] // if !(ImportExportQuickenFile.Exists())
						[ ] // raise
					[ ] // print("[WARNING]***Able to open dialog[open data file] in Second attempt")
					[ ] 
				[+] except
					[ ] exceptlog()
					[+] do
						[ ] QuickenWindow.File.Click()
						[ ] QuickenWindow.File.OpenQuickenFile.Select()
						[ ] sleep(2)
						[ ] 
						[ ] // 2015-10-27 KalyanG: added the condition
						[+] // if !(ImportExportQuickenFile.Exists())
							[ ] // raise
						[ ] // print("[WARNING]***Able to open dialog[open data file] in third attempt")
						[ ] // 
					[+] except
						[ ] exceptlog()
						[ ] QuickenWindow.MainMenu.Select("/_File/_Open Quicken File...")
						[ ] 
						[ ] sleep(2)
						[ ] 
						[ ] // // 2015-10-27 KalyanG: added the condition
						[+] // if !(ImportExportQuickenFile.Exists())
							[ ] // raise -1, "Attempt 4 -> Unable to open dialog[open data file]"
						[ ] 
				[ ] 
			[ ] 
			[ ] // Alert for online payments
			[+] if(AlertMessage.No.Exists())
				[ ] AlertMessage.SetActive()
				[ ] AlertMessage.No.Click()
			[+] if(QuickenBackupReminder.Exists())
				[ ] QuickenBackupReminder.DontShowAgainCheckBox.Check()
				[ ] QuickenBackupReminder.LaterButton.Click()
			[+] if(SyncChangesToTheQuickenCloud.Exists())
				[ ] SyncChangesToTheQuickenCloud.Later.Click()
				[ ] WaitForState(SyncChangesToTheQuickenCloud,FALSE,5)
			[ ] 
			[-] if (ImportExportQuickenFile.Exists())
				[ ] ImportExportQuickenFile.SetActive()
				[ ] ImportExportQuickenFile.FileName.SetText(sFileWithPath)
				[ ] 
				[ ] ImportExportQuickenFile.OK.Click()
				[ ] sleep(10)
				[+] if (EnterQuickenPassword.Exists(2)) // added by Abhijit s Feb 2015
					[ ] EnterQuickenPassword.SetActive()
					[ ] EnterQuickenPassword.Password.SetFocus()
					[ ] EnterQuickenPassword.Password.SetText(sPassword)
					[ ] EnterQuickenPassword.Password.OK.Click()
					[ ] 
				[ ] //Convert data file if older file
				[+] if(ConvertYourData.Exists(30))
					[ ] 
					[ ] ConvertYourData.SetActive()
					[ ] ConvertYourData.ConvertFilebutton.Click()
					[+] if (AlertMessage.Yes.Exists(2))
						[ ] AlertMessage.SetActive()
						[ ] AlertMessage.Yes.Click()
						[ ] WaitForState(AlertMessage, FALSE ,2)
					[ ] 
					[+] if (AlertMessage.OK.Exists(2))
						[ ] AlertMessage.SetActive()
						[ ] AlertMessage.OK.Click()
						[ ] WaitForState(AlertMessage, FALSE ,2)
					[+] if (AlertMessage.Exists(5))
						[+] while (AlertMessage.Exists())
							[ ] sleep(1)
					[+] while (QuickenAlertMessage.Exists(2))
						[ ] sleep(1)
						[ ] 
				[+] else
					[ ] //print("convert your data dialog didn't appear")
				[ ] SignInQuickenConnectedServices(bOpenDataFile)
				[+] if (AlertMessage.Exists(3))
					[ ] AlertMessage.SetActive()
					[ ] AlertMessage.OK.Click()
					[ ] WaitForState(AlertMessage, false ,2)
					[ ] ImportExportQuickenFile.SetActive()
					[ ] ImportExportQuickenFile.Cancel.Click()
				[ ] 
				[ ] WaitForState(ImportExportQuickenFile, false ,5)
				[ ] 
				[ ] sleep(5)
				[ ] 
				[ ] QuickenWindow.SetActive()
				[ ] sCaption = QuickenWindow.GetCaption ()
				[ ] 
				[ ] bFound = MatchStr("*{sFileName}*", sCaption)
				[+] if(bFound == TRUE)
					[ ] iFunctionResult = PASS
				[+] else
					[ ] iFunctionResult = FAIL
					[ ] 
				[ ] QuickenWindow.SetActive()
				[ ] ExpandAccountBar()     
				[ ] 
			[+] else
				[ ] ReportStatus("Verify Open Quicken File", FAIL, "Open Quicken File dailog didn't appear.") 
				[ ] iFunctionResult = FAIL
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] // QuickenWindow.Kill()
			[ ] // WaitForState(QuickenWindow , FALSE ,5)
			[ ] // App_Start(sCmdLine)
			[ ] // sleep(10)
			[ ] // WaitForState(QuickenWindow , TRUE ,10)
			[ ] // 
			[+] // if (ImportExportQuickenFile.Exists())
				[ ] // ImportExportQuickenFile.Close()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[-] public INTEGER OpenDataFile_OII(STRING sFileName,STRING sLocation optional, STRING sExtension optional)
		[ ] BOOLEAN bOpenDataFile =TRUE
		[+] // Variable declaration
			[ ] STRING sCaption, sExpected, sFileWithPath
			[ ] BOOLEAN  bFound ,bResult
			[ ] INTEGER iResult
			[ ] 
			[+] if(sExtension==NULL)
				[ ] sExtension= ".QDF"
			[ ] 
			[+] if(sLocation==NULL)
				[ ] sFileWithPath = AUT_DATAFILE_PATH + "\" + sFileName + sExtension
			[+] else
				[ ] sFileWithPath = sLocation + "\" + sFileName + ".QDF"
				[ ] 
			[ ] 
		[-] do
			[ ] QuickenWindow.SetActive()
			[+] // if(QuickenTSM.Exists())  // Handle TSM Dialog if exist, added by Abhijit S Mar 2015
				[ ] // QuickenTSM.SetActive()
				[ ] // QuickenTSM.RemindMeLater.Uncheck()
				[ ] // QuickenTSM.Close()
			[ ] 
			[+] // if (EnterQuickenPassword.Exists(2))
				[ ] // EnterQuickenPassword(sPassword) // added by Abhijit s Feb 2015
			[+] if (EnterQuickenPassword.Exists(2)) // added by Abhijit s Feb 2015
				[ ] EnterQuickenPassword.SetActive()
				[ ] EnterQuickenPassword.Password.SetFocus()
				[ ] EnterQuickenPassword.Password.SetText(sPassword)
				[ ] EnterQuickenPassword.Password.OK.Click()
			[+] if(ConvertYourData.Exists())// added by Abhijit s Feb 2015
				[ ] ConvertYourData.SetActive()
				[ ] ConvertYourData.ConvertFilebutton.Click()
			[+] if (AlertMessage.OK.Exists()) // added by Abhijit s June 2015
				[ ] AlertMessage.SetActive()
				[ ] AlertMessage.OK.Click()
				[ ] WaitForState(AlertMessage, false ,2)
			[+] // if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Exists(10))// added by Abhijit s Feb 2015
				[ ] // SignInQuickenConnectedServices()
			[+] do
				[ ] 
				[ ] QuickenWindow.TypeKeys(KEY_ALT_F)
				[ ] QuickenWindow.File.OpenQuickenFile.Select()
				[ ] sleep(2)
				[ ] 
				[ ] // // 2015-10-27 KalyanG: added the condition
				[+] // if !(ImportExportQuickenFile.Exists())
					[ ] // raise
				[ ] // print("[WARNING]***Able to open dialog[open data file] in first attempt")
			[+] except
				[ ] QuickenWindow.SetActive()
				[+] do
					[ ] 
					[ ] QuickenWindow.TypeKeys(KEY_CTRL_O)
					[ ] sleep(2)
					[ ] // 
					[ ] // // 2015-10-27 KalyanG: added the condition
					[+] // if !(ImportExportQuickenFile.Exists())
						[ ] // raise
					[ ] // print("[WARNING]***Able to open dialog[open data file] in Second attempt")
					[ ] 
				[+] except
					[ ] exceptlog()
					[+] do
						[ ] QuickenWindow.File.Click()
						[ ] QuickenWindow.File.OpenQuickenFile.Select()
						[ ] sleep(2)
						[ ] 
						[ ] // 2015-10-27 KalyanG: added the condition
						[+] // if !(ImportExportQuickenFile.Exists())
							[ ] // raise
						[ ] // print("[WARNING]***Able to open dialog[open data file] in third attempt")
						[ ] // 
					[+] except
						[ ] exceptlog()
						[ ] QuickenWindow.MainMenu.Select("/_File/_Open Quicken File...")
						[ ] 
						[ ] sleep(2)
						[ ] 
						[ ] // // 2015-10-27 KalyanG: added the condition
						[+] // if !(ImportExportQuickenFile.Exists())
							[ ] // raise -1, "Attempt 4 -> Unable to open dialog[open data file]"
						[ ] 
				[ ] 
			[ ] 
			[ ] // Alert for online payments
			[+] if(AlertMessage.No.Exists())
				[ ] AlertMessage.SetActive()
				[ ] AlertMessage.No.Click()
			[+] if(QuickenBackupReminder.Exists())
				[ ] QuickenBackupReminder.DontShowAgainCheckBox.Check()
				[ ] QuickenBackupReminder.LaterButton.Click()
			[+] if(SyncChangesToTheQuickenCloud.Exists())
				[ ] SyncChangesToTheQuickenCloud.Later.Click()
				[ ] WaitForState(SyncChangesToTheQuickenCloud,FALSE,5)
			[ ] 
			[-] if (ImportExportQuickenFile.Exists())
				[ ] ImportExportQuickenFile.SetActive()
				[ ] ImportExportQuickenFile.FileName.SetText(sFileWithPath)
				[ ] 
				[ ] ImportExportQuickenFile.OK.Click()
				[ ] sleep(10)
				[+] if (EnterQuickenPassword.Exists(2)) // added by Abhijit s Feb 2015
					[ ] EnterQuickenPassword.SetActive()
					[ ] EnterQuickenPassword.Password.SetFocus()
					[ ] EnterQuickenPassword.Password.SetText(sPassword)
					[ ] EnterQuickenPassword.Password.OK.Click()
					[ ] 
				[ ] //Convert data file if older file
				[+] if(ConvertYourData.Exists(30))
					[ ] 
					[ ] ConvertYourData.SetActive()
					[ ] ConvertYourData.ConvertFilebutton.Click()
					[+] if (AlertMessage.Yes.Exists(2))
						[ ] AlertMessage.SetActive()
						[ ] AlertMessage.Yes.Click()
						[ ] WaitForState(AlertMessage, FALSE ,2)
					[ ] 
					[+] if (AlertMessage.OK.Exists(2))
						[ ] AlertMessage.SetActive()
						[ ] AlertMessage.OK.Click()
						[ ] WaitForState(AlertMessage, FALSE ,2)
					[+] if (AlertMessage.Exists(5))
						[+] while (AlertMessage.Exists())
							[ ] sleep(1)
					[+] while (QuickenAlertMessage.Exists(2))
						[ ] sleep(1)
						[ ] 
				[+] else
					[ ] //print("convert your data dialog didn't appear")
				[ ] // SignInQuickenConnectedServices(bOpenDataFile)
				[ ] 
				[ ] // 08-Mar-2016 KalyanG: added to handle OII changes, signing in as a diff user to skip MFA
				[-] if (QuickenIAMMainWindow.IAMUserControl.IAMContentControl.linkSignInWithDifferentID.Exists(10))
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.linkSignInWithDifferentID.Click()
					[+] if ! (DlgSignInAsADifferentUser.Exists(30))
						[ ] ReportStatus("Sign In as Different User Dialog not shown", FAIL, "Sign In as Different User Dialog not shown")
					[ ] DlgSignInAsADifferentUser.SignOutTextField.SetText("yes")
					[ ] DlgSignInAsADifferentUser.SignOutButton.Click()
					[ ] sleep(20)
				[ ] OII_SignIn()
				[ ] 
				[+] if (AlertMessage.Exists(3))
					[ ] AlertMessage.SetActive()
					[ ] AlertMessage.OK.Click()
					[ ] WaitForState(AlertMessage, false ,2)
					[ ] ImportExportQuickenFile.SetActive()
					[ ] ImportExportQuickenFile.Cancel.Click()
				[ ] 
				[ ] WaitForState(ImportExportQuickenFile, false ,5)
				[ ] 
				[ ] sleep(5)
				[ ] 
				[ ] QuickenWindow.SetActive()
				[ ] sCaption = QuickenWindow.GetCaption ()
				[ ] 
				[ ] bFound = MatchStr("*{sFileName}*", sCaption)
				[+] if(bFound == TRUE)
					[ ] iFunctionResult = PASS
				[+] else
					[ ] iFunctionResult = FAIL
					[ ] 
				[ ] QuickenWindow.SetActive()
				[ ] ExpandAccountBar()     
				[ ] 
			[-] else
				[ ] ReportStatus("Verify Open Quicken File", FAIL, "Open Quicken File dailog didn't appear.") 
				[ ] iFunctionResult = FAIL
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] // QuickenWindow.Kill()
			[ ] // WaitForState(QuickenWindow , FALSE ,5)
			[ ] // App_Start(sCmdLine)
			[ ] // sleep(10)
			[ ] // WaitForState(QuickenWindow , TRUE ,10)
			[ ] // 
			[+] // if (ImportExportQuickenFile.Exists())
				[ ] // ImportExportQuickenFile.Close()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: QuickenFileAttributes()
		[ ] //
		[ ] // DESCRIPTION: 			This function will return File Attributes of Quiken
		[ ] //
		[ ] // PARAMETER IN:		None	
		[ ] //
		[ ] // PARAMETER OUT:   	LIST OF STRING 	lsFileAttributes	Values of all the file attributes
		[ ] //
		[ ] //
		[ ] // RETURNS:				LIST OF STRING	lsFileAttributes  = If attributes are taken successfully
		[ ] //												Error  = if any error occurs while capturing file attributes
		[ ] //
		[ ] // REVISION HISTORY:	21/12/2010   Created By		Udita Dube
		[ ] //                                                                     Reviewed By    
		[ ] //	 									    Updated By
	[ ] // ==========================================================
	[+] public LIST OF STRING  QuickenFileAttributes(out LIST OF STRING lsFileAttributes)
		[ ] 
		[+] // Variable declaration
			[ ] STRING   sAccounts, sCategories, sMemorizedPayees, sSecurities, sTransactions, sFileSize
			[ ] lsFileAttributes={""}
		[+] do
			[ ] 
			[ ] // Active Quicken Screen
			[ ] QuickenWindow.SetActive()
			[ ] 
			[ ] // Open Quicken Help
			[ ] // QuickenWindow.TypeKeys(KEY_ALT_H)
			[ ] // Open Qiucken File Attribute window 
			[ ] // QuickenWindow.Help.AboutQuicken.TypeKeys (KEY_SHIFT_Q)
			[ ] QuickenWindow.TypeKeys (KEY_ALT_H_SHIFT_Q)
			[ ] 
			[+] if(QuickenWindow.Quicken2012FileAttribute.Exists(5))
				[ ] 
				[ ] // Set Active File Attribute window
				[ ] QuickenWindow.Quicken2012FileAttribute.SetActive()
				[ ] 
				[ ] // Get values of File attributes
				[ ] sFileSize = QuickenWindow.Quicken2012FileAttribute.SizeOfQDFFileVal.GetText()
				[ ] sFileSize=Str(Val(sFileSize))
				[ ] sAccounts= QuickenWindow.Quicken2012FileAttribute.AccountsVal.GetText()
				[ ] sCategories= QuickenWindow.Quicken2012FileAttribute.CategoriesVal.GetText()
				[ ] sMemorizedPayees= QuickenWindow.Quicken2012FileAttribute.MemorizedPayeesVal.GetText()
				[ ] sSecurities= QuickenWindow.Quicken2012FileAttribute.SecuritiesVal.GetText()
				[ ] sTransactions= QuickenWindow.Quicken2012FileAttribute.TransactionsVal.GetText()
				[ ] 
				[ ] // Close File Attribute Window
				[ ] QuickenWindow.Quicken2012FileAttribute.Close()
				[ ] 
				[ ] // List of all Attributes
				[ ] lsFileAttributes={ sAccounts, sCategories, sMemorizedPayees, sSecurities, sTransactions}
			[+] else
				[ ] ReportStatus("Validate Quicken File Attributes window", FAIL, "Quicken File attributes window is not opened")
				[ ] 
			[ ] 
		[+] except
			[+] if(QuickenWindow.Quicken2012FileAttribute.Exists(SHORT_SLEEP))
				[ ] QuickenWindow.Quicken2012FileAttribute.Close()
			[ ] ReportStatus("Validate Quicken File Attributes", FAIL, "Quicken File attributes are not captured")
			[ ] 
		[ ] return lsFileAttributes
	[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: QuickenBackup()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will take the backup of Quicken
		[ ] //
		[ ] // PARAMETERS:			STRING  	sFilePath		Path where data file
		[ ] //							STRING  	sFileName	Backup file name which needs to be restored
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If Quicken Backup successful
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //  Jan 04, 2011	Udita Dube Created
	[ ] // ==========================================================
	[+] public INTEGER QuickenBackup(STRING sFilePath, STRING sFileName)
		[+] // Variable declaration
			[ ] STRING sActual,sExpectedMessage
			[ ] sExpectedMessage="Quicken data file backed up successfully."
		[ ] 
		[+] do
			[ ] 
			[+] if(FileExists(sFilePath + sFileName))
				[ ] DeleteFile(sFilePath + sFileName )
				[ ] 
				[ ] 
			[ ] sleep(2)
			[ ] 
			[ ] 
			[ ] // Activate Quicken window
			[ ] QuickenWindow.SetActive()
			[+] do
				[ ] QuickenWindow.TypeKeys(KEY_ALT_F)
				[ ] QuickenWindow.File.BackupAndRestore.Click()
				[ ] QuickenWindow.File.BackupAndRestore.BackUpQuickenFile.Select()
				[ ] 
			[+] except
				[ ] QuickenWindow.TypeKeys(KEY_CTRL_B)
			[ ] 
			[ ] 
			[ ] // Verify Quicken file Backup window
			[+] if(QuickenBackup.Exists(5))
				[ ] 
				[ ] QuickenBackup.SetActive()
				[ ] QuickenBackup.ThisMayHelpYouIdentifyThe2.Select(1)
				[ ] 
				[ ] // Enter Backup file path and file name
				[ ] QuickenBackup.BackupFile.SetText(sFilePath + sFileName )  
				[ ] // Click on Backup Now button
				[ ] QuickenBackup.BackUpNow.Click()
				[+] if(DuplicateBackupFile.Yes.Exists(5))
					[ ] DuplicateBackupFile.SetActive()
					[ ] DuplicateBackupFile.Yes.Click()
				[ ] 
				[ ] // If file with same name exists in backup directory
				[+] if(AlertMessage.Exists(3))
					[ ] AlertMessage.SetActive()
					[ ] AlertMessage.Yes.Click()
					[ ] 
					[ ] 
				[ ] 
				[ ] 
				[ ] // Verify backup confirmation
				[+] if (QuickenWindow.QuickenBackup.Exists(5))
					[ ] QuickenWindow.QuickenBackup.SetActive()
					[ ] QuickenWindow.QuickenBackup.Close()
					[ ] iFunctionResult = PASS
				[+] else if(BackupConfirmation.Exists(3))
					[ ] 
					[ ] BackupConfirmation.SetActive()
					[ ] sActual= BackupConfirmation.Message.GetText()
					[ ] BackupConfirmation.OK.Click()
					[+] if(sActual==sExpectedMessage)
						[ ] iFunctionResult = PASS
					[+] else 
						[ ] iFunctionResult = FAIL
						[ ] ReportStatus("Verify Backup confirmation Message", FAIL, "Actual Confirmation message {sActual} is not matching with expected {sExpectedMessage} ")
						[ ] 
					[ ] 
				[+] else
					[ ] iFunctionResult = FAIL
					[ ] ReportStatus("Quicken File Backup confirmation", FAIL, "Quicken file Backup confirmation is not found")
					[ ] 
			[+] else
				[ ] iFunctionResult = FAIL
				[ ] ReportStatus("Verification of Quicken Backup Window", FAIL, "Quicken Backup window is not found")
				[ ] 
			[ ] 
			[ ] 
		[+] except
			[ ] ExceptLog()
			[+] if(QuickenBackup.Exists(SHORT_SLEEP))
				[ ] QuickenBackup.Close()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: QuickenRestore()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will restore from the backup of Quicken
		[ ] //
		[ ] // PARAMETERS:			STRING  	sFilePath		Backup file's path
		[ ] //							STRING  	sFileName	Backup file name which needs to be restored
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If backeup file restored successful
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // Jan 04, 2011	Udita Dube Created
		[ ] //  Mar 24,2015    Abhijit S Modified
	[ ] // ==========================================================
	[+] public INTEGER QuickenRestore(STRING sFilePath, STRING sFileName, STRING sLocationToRestore optional)
		[+] // Variable declaration
			[ ] STRING sActual
			[ ] 
			[ ] //sExpectedMessage="File restored successfully."
		[ ] 
		[+] do
			[ ] 
			[ ] // Activate Quicken window
			[ ] QuickenWindow.SetActive()
			[ ] // Navigate to File > Backup and Restore > Restore from Backup file
			[+] do
				[ ] // Normal navigation
				[ ] QuickenWindow.MainMenu.Select("/_File/_Backup and Restore/_Restore from Backup File...")
			[+] except
				[ ] // If Quicken is launched silently
				[ ] QuickenWindow.MainMenu.Select("/_File/_Restore from Backup File...")
			[ ] 
			[+] if(QuickenRestore.Exists(5))
				[ ] 
				[ ] QuickenRestore.SetActive()
				[ ] // Select option: Restore from your backup
				[ ] QuickenRestore.RestoreFromBackupFile.Select("#2")
				[ ] // Enter Backup file path and file name
				[ ] QuickenRestore.BackupFilePath.SetText(sFilePath + sFileName+ ".QDF-backup" )
				[ ] // Click on RestoreBackup button
				[ ] QuickenRestore.RestoreBackup.Click()
				[ ] 
				[+] if(QuickenRestore.LocationToRestore.Exists(3))
					[ ] QuickenRestore.SetActive()
					[ ] QuickenRestore.LocationToRestore.SetText(sLocationToRestore)
					[ ] QuickenRestore.RestoreBackupButton.Click()
					[ ] 
				[+] do
					[ ] QuickenRestore.Yes.Click()
				[+] except
					[+] if(RestoreOpenFile.Exists(2))
						[ ] RestoreOpenFile.SetActive()
						[ ] RestoreOpenFile.RestoreBackup.Click()
						[+] if(QuickenRestore.Exists(2))  //    Code entered within if condition by Abhijit S, Mar 2015
							[ ] QuickenRestore.SetActive() 
							[ ]  QuickenRestore.Yes.Click()
				[ ] 
				[ ] ////Convert data file if older file
				[+] if(ConvertYourData.Exists(SHORT_SLEEP))
					[ ] ConvertYourData.SetActive()
					[ ] ConvertYourData.ConvertFilebutton.Click()
					[+] if (AlertMessage.OK.Exists(2))
						[ ] AlertMessage.SetActive()
						[ ] AlertMessage.OK.Click()
						[ ] WaitForState(AlertMessage, false ,2)
					[+] if (AlertMessage.Exists(5))
						[+] while (AlertMessage.Exists())
							[ ] sleep(1)
				[ ] 
				[ ] CloseQuickenConnectedServices()
				[ ] WaitForState(QuickenMainWindow.QWNavigator.Home, TRUE, 10)
				[ ] 
				[ ] 
				[ ] QuickenWindow.SetActive()
				[ ] sleep(SHORT_SLEEP)			// Added for Synchronization
				[+] if (EnterQuickenPassword.Exists(2)) // added by Abhijit S, Mar 2015
					[ ] EnterQuickenPassword(sPassword) 
				[ ] sActual= QuickenWindow.GetCaption()
				[+] if(Len (sFileName)>120)
					[ ] // Full data file name is not displayed on Quicken main window hence removing extra characters
					[ ] sFileName=Left(sFileName,120)
				[ ] 
				[ ] // Verify backup file restored successfully or not
				[ ] bMatch = MatchStr("*{sFileName}*", sActual)
				[+] if(bMatch == TRUE)
					[ ] iFunctionResult=PASS
					[ ] ReportStatus("Validate backup file restore", PASS, "{sFileName} file restored")
					[ ] 
				[+] else
					[ ] iFunctionResult=FAIL
					[ ] ReportStatus("Validate backup file restore", FAIL, "Expected- {sFileName} is not matching with actual {sActual} ")
				[ ] 
				[ ] 
			[+] else
				[ ] iFunctionResult = FAIL
				[ ] ReportStatus("Verification of Quicken Restore Window", FAIL, "'Restore from backup file' window is not found")
				[ ] 
			[ ] 
			[ ] 
		[+] except
			[ ] ExceptLog()
			[+] if(QuickenRestore.Exists(SHORT_SLEEP))
				[ ] QuickenRestore.Close()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: ExportQIFFile()
		[ ] // 
		[ ] // DESCRIPTION:
		[ ] // This function will export QIF file
		[ ] // 
		[ ] // PARAMETERS:		STRING	 		sFile					file name
		[ ] //						BOOLEAN 		bTransactionInclude		Transaction
		[ ] //						BOOLEAN		bAccountListInclude		Account List
		[ ] //						BOOLEAN		bCatListInclude			Category List
		[ ] //						BOOLEAN		bMemoPayeeInclude		Memorized Payee List
		[ ] //						BOOLEAN		bSecurityListInclude 		Security list
		[ ] //						STRING               sAccountName			Account name
		[ ] // 
		[ ] // RETURNS:	INTEGER	PASS			 if mentioned file EXPORTED successfully
		[ ] // 							FAIL  			 if any error occurs
		[ ] // 
		[ ] // REVISION HISTORY:Jul 14, 2014  Udita Dube Created
	[ ] // ==========================================================
	[+] public INTEGER ExportQIFFile(STRING sFileNameWithPath ,BOOLEAN bTransactionInclude optional,BOOLEAN bAccountListInclude optional,BOOLEAN bCatListInclude optional,BOOLEAN bMemoPayeeInclude optional,BOOLEAN bSecurityListInclude optional,STRING  sAccountName optional)
		[+] //Variable
			[+] if(IsNULL(bTransactionInclude))
				[ ] bTransactionInclude=TRUE
			[+] if(IsNULL(bAccountListInclude))
				[ ] bAccountListInclude=TRUE
			[+] if(IsNULL(bCatListInclude))
				[ ] bCatListInclude=TRUE
			[+] if(IsNULL(bMemoPayeeInclude))
				[ ] bMemoPayeeInclude=TRUE
			[+] if(IsNULL(bSecurityListInclude))
				[ ] bSecurityListInclude=TRUE
			[ ] 
		[+] do
				[ ] 
			[+] if (QuickenWindow.Exists(SHORT_SLEEP))
				[ ] QuickenWindow.SetActive()
				[+] do
					[ ] QuickenWindow.TypeKeys(KEY_ALT_F)
					[ ] QuickenWindow.File.FileExport.Click()
					[ ] QuickenWindow.File.FileExport.QIFFile.Select()
					[ ] 
					[ ] // 2015-10-27 KalyanG: added multiple attempts, to invoke the dialog
					[ ] sleep(2)
					[+] if !(QIFExportPopUp.Exists())
						[ ] print("***Warning First Attempt: Invoking [QIFExportPopUp] failed")
						[ ] raise
				[+] except
					[+] do
						[ ] QuickenWindow.TypeKeys("<Alt-f><e>")
						[ ] QuickenWindow.File.FileExport.QIFFile.Select()
						[ ] 
						[ ] sleep(2)
						[+] if !(QIFExportPopUp.Exists())
							[ ] print("***Warning Second Attempt: Invoking [QIFExportPopUp] failed")
							[ ] raise
						[ ] 
					[+] except
						[ ] QuickenWindow.MainMenu.Select("/_File/File _Export/_QIF File...")
						[ ] 
						[ ] sleep(2)
						[+] if !(QIFExportPopUp.Exists())
							[ ] raise -1, "***Error Third & Final Attempt: Invoking [QIFExportPopUp] failed"
					[ ] 
				[ ] 
				[+] if(QIFExportPopUp.Exists(3))
					[ ] QIFExportPopUp.SetActive()
					[ ] QIFExportPopUp.QIFFileToExportTo.SetText(sFileNameWithPath)
					[ ] 
					[+] if(sAccountName==NULL)
						[ ] sAccountName="<All Accounts>"
					[ ] QIFExportPopUp.QuickenAccountToExportFrom.Select(sAccountName)
					[ ] 
					[+] // Check Include in Export checkboxes
						[ ] 
						[ ] // Verify Transactions checkbox
						[+] if(bTransactionInclude==TRUE)
							[ ] QIFExportPopUp.Transactions.Check()
						[+] else
							[ ] QIFExportPopUp.Transactions.Uncheck()
							[ ] 
						[ ] 
						[ ] // Verify Account List checkbox
						[+] if(bAccountListInclude==TRUE)
							[ ] QIFExportPopUp.AccountList.Check()
						[+] else
							[ ] QIFExportPopUp.AccountList.Uncheck()
						[ ] 
						[ ] // Verify Category List checkbox
						[+] if(bCatListInclude==TRUE)
							[ ] QIFExportPopUp.CategoryList.Check()
						[+] else
							[ ] QIFExportPopUp.CategoryList.Uncheck()
						[ ] 
						[ ] // Verify Memorized Payees checkbox
						[+] if(bMemoPayeeInclude==TRUE)
							[ ] QIFExportPopUp.MemorizedPayees.Check()
						[+] else
							[ ] QIFExportPopUp.MemorizedPayees.Uncheck()
						[ ] 
						[ ] // Verify Security List checkbox
						[+] if(bSecurityListInclude==TRUE)
							[ ] QIFExportPopUp.SecurityLists.Check()
						[+] else
							[ ] QIFExportPopUp.SecurityLists.Uncheck()
						[ ] 
						[ ] // Verify Business List checkbox
						[+] if(!QIFExportPopUp.BusinessLists.IsChecked())
							[ ] QIFExportPopUp.BusinessLists.Check()
						[ ] 
					[ ] QIFExportPopUp.OK.Click()
					[ ] 
					[+] if(FileExists(sFileNameWithPath))
						[ ] ReportStatus("Verify QIF export",PASS,"{sFileNameWithPath} file exported successfully")
						[ ] iFunctionResult=PASS
					[+] else
						[ ] ReportStatus("Verify QIF export",FAIL,"{sFileNameWithPath} file is not exported successfully")
						[ ] iFunctionResult=FAIL
						[ ] 
				[+] else
					[ ] ReportStatus("Valiade QIF Export PopUp",FAIL,"QIF Export PopUp did not appear")
					[ ] iFunctionResult=FAIL
				[ ] 
			[+] else
				[ ] ReportStatus("Quicken Main Window",FAIL,"Quicken Main Window is not available")
				[ ] iFunctionResult = FAIL
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult=FAIL
		[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: ImportQIFFile()
		[ ] // 
		[ ] // DESCRIPTION:
		[ ] // This function will import QIF file
		[ ] // 
		[ ] // PARAMETERS:		STRING	 		sFile					file name
		[ ] //						BOOLEAN 		bTransactionInclude		Transaction
		[ ] //						BOOLEAN		bAccountListInclude		Account List
		[ ] //						BOOLEAN		bCatListInclude			Category List
		[ ] //						BOOLEAN		bMemoPayeeInclude		Memorized Payee List
		[ ] //						BOOLEAN		bSecurityListInclude 		Security list
		[ ] //						STRING               sAccountName			Account name
		[ ] // 
		[ ] // RETURNS:	INTEGER	PASS			 if mentioned file IMPORTED successfully
		[ ] // 							FAIL  			 if any error occurs
		[ ] // 
		[ ] // REVISION HISTORY:Jul 14, 2014  Udita Dube Created
	[ ] // ==========================================================
	[+] public INTEGER ImportQIFFile(STRING sFileNameWithPath ,BOOLEAN bTransactionInclude optional,BOOLEAN bAccountListInclude optional,BOOLEAN bCatListInclude optional,BOOLEAN bMemoPayeeInclude optional,BOOLEAN bSecurityListInclude optional,STRING  sAccountName optional)
		[+] //Variable
			[+] if(IsNULL(bTransactionInclude))
				[ ] bTransactionInclude=TRUE
			[+] if(IsNULL(bAccountListInclude))
				[ ] bAccountListInclude=TRUE
			[+] if(IsNULL(bCatListInclude))
				[ ] bCatListInclude=TRUE
			[+] if(IsNULL(bMemoPayeeInclude))
				[ ] bMemoPayeeInclude=TRUE
			[+] if(IsNULL(bSecurityListInclude))
				[ ] bSecurityListInclude=TRUE
			[ ] 
		[+] do
			[ ] 
			[+] if(FileExists(sFileNameWithPath))
				[+] if (QuickenWindow.Exists(SHORT_SLEEP))
					[ ] QuickenWindow.SetActive()
					[ ] 
					[ ] ShowQuickenTab(sTAB_INVESTING,TRUE)
					[ ] ShowQuickenTab(sTAB_BUSINESS,TRUE)
					[ ] 
					[+] do
						[ ] QuickenWindow.MainMenu.Select("/*File/File _Import/*QIF File*")
					[+] except
						[ ] QuickenWindow.TypeKeys(KEY_ALT_F)
						[ ] QuickenWindow.File.FileImport.Click()
						[ ] QuickenWindow.File.FileImport.QIFFile.Select()
						[ ] 
					[ ] 
					[+] if(QIFImportPopUp.Exists(3))
						[ ] QIFImportPopUp.SetActive()
						[ ] QIFImportPopUp.LocationOfQIFFileTextField.SetText(sFileNameWithPath)
						[ ] 
						[+] if(sAccountName==NULL)
							[ ] sAccountName="<All Accounts>"
						[ ] QIFImportPopUp.QuickenAccountToImportInto.Select(sAccountName)
						[ ] 
						[+] // Check Include in Export checkboxes
							[ ] 
							[ ] // Verify Transactions checkbox
							[+] if(bTransactionInclude==TRUE)
								[ ] QIFImportPopUp.Transactions.Check()
							[+] else
								[ ] QIFExportPopUp.Transactions.Uncheck()
								[ ] 
							[ ] 
							[ ] // Verify Account List checkbox
							[+] if(bAccountListInclude==TRUE)
								[ ] QIFImportPopUp.AccountList.Check()
							[+] else
								[ ] QIFImportPopUp.AccountList.Uncheck()
							[ ] 
							[ ] // Verify Category List checkbox
							[+] if(bCatListInclude==TRUE)
								[ ] QIFImportPopUp.CategoryList.Check()
							[+] else
								[ ] QIFImportPopUp.CategoryList.Uncheck()
							[ ] 
							[ ] // Verify Memorized Payees checkbox
							[+] if(bMemoPayeeInclude==TRUE)
								[ ] QIFImportPopUp.MemorizedPayees.Check()
							[+] else
								[ ] QIFImportPopUp.MemorizedPayees.Uncheck()
							[ ] 
							[ ] // Verify Security List checkbox
							[+] if(bSecurityListInclude==TRUE)
								[ ] QIFImportPopUp.SecurityLists.Check()
							[+] else
								[ ] QIFImportPopUp.SecurityLists.Uncheck()
							[ ] 
							[ ] // Verify Business List checkbox
							[+] if(!QIFImportPopUp.BusinessLists.IsChecked())
								[ ] QIFImportPopUp.BusinessLists.Check()
							[ ] 
						[ ] QIFImportPopUp.Import.Click()
						[+] while (QIFImportPopUp.Exists(1))
							[ ] 
							[+] if(AlertMessage.Yes.Exists())
								[ ] AlertMessage.SetActive()
								[ ] AlertMessage.Yes.Click()
								[ ] 
							[+] if(AlertMessage.OK.Exists())
								[ ] AlertMessage.SetActive()
								[ ] AlertMessage.OK.Click()
								[ ] 
							[+] if(QIFImportPopUpSuccessful.Done.Exists())
								[ ] break
						[ ] 
						[+] if(QIFImportPopUpSuccessful.Done.Exists(120))
							[ ] QIFImportPopUpSuccessful.SetActive()
							[ ] QIFImportPopUpSuccessful.Done.Click()
							[ ] ReportStatus("Verify QIF Import",PASS,"{sFileNameWithPath} file imported successfully")
							[ ] iFunctionResult = PASS
						[+] else
							[ ] ReportStatus("Verify QIF Import",FAIL,"{sFileNameWithPath} file couldn't be imported successfully")
							[ ] iFunctionResult=FAIL
					[+] else
						[ ] ReportStatus("Valiade QIF Import PopUp",FAIL,"QIF Import PopUp did not appear")
						[ ] iFunctionResult=FAIL
					[ ] 
				[+] else
					[ ] ReportStatus("Quicken Main Window",FAIL,"Quicken Main Window is not available")
					[ ] iFunctionResult = FAIL
			[+] else
				[ ] ReportStatus("Verify QIF import",FAIL,"QIF import failed as file to be imported doesn't exist")
				[ ] iFunctionResult = FAIL
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult=FAIL
		[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: ExportQXFFile()
		[ ] // 
		[ ] // DESCRIPTION:
		[ ] // This function will export QXF file
		[ ] // 
		[ ] // PARAMETERS:		STRING	 		sFileNameWithPath		file name
		[ ] // 
		[ ] // RETURNS:	INTEGER	PASS			 if mentioned file EXPORTED successfully
		[ ] // 							FAIL  			 if any error occurs
		[ ] // 
		[ ] // REVISION HISTORY:Jul 23, 2014  Udita Dube Created
	[ ] // ==========================================================
	[+] public INTEGER ExportQXFFile(STRING sFileNameWithPath)
		[+] //Variable
			[ ] STRING  sActual,sExpected,sMsg1
			[ ] sExpected="Export successful - the file location is:"
			[ ] sMsg1="error"
			[ ] 
			[ ] 
		[+] do
			[ ] 
			[+] if(FileExists(sFileNameWithPath))
				[ ] DeleteFile(sFileNameWithPath)
			[+] if (QuickenWindow.Exists(SHORT_SLEEP))
				[ ] QuickenWindow.SetActive()
				[+] do
					[ ] QuickenWindow.File.Click()
					[ ] QuickenWindow.File.FileExport.Click()
					[ ] QuickenWindow.File.FileExport.QuickenTransferFormatQXF.Select()
					[ ] 
					[ ] // 2015-10-27 KalyanG: added multiple attempts to invoke the dialog
					[ ] sleep(2)
					[+] if !(ImportExportQuickenFile.Exists())
						[ ] print("***Warning Attempt 1 Failed: Invoking [ImportExportQuickenFile] dialog")
						[ ] raise
				[+] except
					[ ] 
					[+] do
						[ ] QuickenWindow.TypeKeys("<Alt-f><e>")
						[ ] QuickenWindow.File.FileExport.QuickenTransferFormatQXF.Select()
						[ ] 
						[ ] // 2015-10-27 KalyanG: added multiple attempts to invoke the dialog
						[ ] sleep(2)
						[+] if !(ImportExportQuickenFile.Exists())
							[ ] print("***Warning Attempt 2 Failed: Invoking [ImportExportQuickenFile] dialog")
							[ ] 
							[ ] raise
					[+] except
						[ ] LogWarning("Trying 3rd time to invoke [ImportExportQuickenFile]")
						[ ] QuickenWindow.MainMenu.Select("/_File/File _Export/Quicken _Transfer Format (.QXF) File...")
						[ ] 
					[ ] 
					[ ] 
				[+] if(ImportExportQuickenFile.Exists(3))
					[ ] 
					[ ] ImportExportQuickenFile.SetActive()
					[ ] 
					[ ] // Set File name
					[ ] ImportExportQuickenFile.FileName.SetText(sFileNameWithPath)
					[ ] 
					[ ] // Click on Save button
					[ ] ImportExportQuickenFile.OK.Click()
					[ ] 
					[ ] sleep(180)
					[ ] // Verify success message
					[+] if(AlertMessage.Exists(15))
						[ ] AlertMessage.SetActive()
						[ ] sActual = AlertMessage.MessageText.GetText()
						[ ] bMatch=MatchStr("{sExpected}*",sActual)
						[+] if(bMatch)
							[ ] ReportStatus("Verify success message",PASS,"Success message is displayed on alert message, message is- {sExpected} {sFileNameWithPath}")
						[+] else
							[ ] ReportStatus("Verify success message",FAIL,"Success message is not displayed on alert message, Actual is- {sActual} and Expected -  {sExpected} {sFileNameWithPath}")
						[ ] AlertMessage.OK.Click()
						[ ] 
						[ ] // Verify note pad should have error report
						[+] if(Notepad.Exists(90))
							[ ] Notepad.SetActive()
							[ ] Notepad.TypeKeys(KEY_EXIT)
							[ ] WaitForState(Notepad,FALSE,1)
							[ ] ReportStatus("Verify notepad file after export operation",PASS,"Notepad file is displayed after QXF export")
							[ ] iFunctionResult=PASS
						[+] else
							[ ] ReportStatus("Verify notepad file after export operation",FAIL,"Notepad file is not displayed after QXF export")
							[ ] iFunctionResult=FAIL
						[ ] 
					[+] else
						[ ] ReportStatus("Verify successful export message",FAIL,"Export successful message is not displayed after QXF export activity")
						[ ] iFunctionResult=FAIL
					[ ] 
					[ ] 
					[+] if(FileExists(sFileNameWithPath))
						[ ] ReportStatus("Verify QXF export",PASS,"{sFileNameWithPath} file exported successfully")
						[ ] iFunctionResult=PASS
					[+] else
						[ ] ReportStatus("Verify QXF export",FAIL,"{sFileNameWithPath} file is not exported successfully")
						[ ] iFunctionResult=FAIL
						[ ] 
				[+] else
					[ ] ReportStatus("Valiade QXF Export PopUp",FAIL,"QXF Export PopUp did not appear")
					[ ] iFunctionResult=FAIL
				[ ] 
			[+] else
				[ ] ReportStatus("Quicken Main Window",FAIL,"Quicken Main Window is not available")
				[ ] iFunctionResult = FAIL
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult=FAIL
		[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: ImportQXFFile()
		[ ] // 
		[ ] // DESCRIPTION:
		[ ] // This function will import QXF file
		[ ] // 
		[ ] // PARAMETERS:		STRING	 		sFile					file name
		[ ] //						BOOLEAN 		bTransactionInclude		Transaction
		[ ] //						BOOLEAN		bAccountListInclude		Account List
		[ ] //						BOOLEAN		bCatListInclude			Category List
		[ ] //						BOOLEAN		bMemoPayeeInclude		Memorized Payee List
		[ ] //						BOOLEAN		bSecurityListInclude 		Security list
		[ ] //						STRING               sAccountName			Account name
		[ ] // 
		[ ] // RETURNS:	INTEGER	PASS			 if mentioned file IMPORTED successfully
		[ ] // 							FAIL  			 if any error occurs
		[ ] // 
		[ ] // REVISION HISTORY:Jul 23, 2014  Udita Dube Created
	[ ] // ==========================================================
	[+] public INTEGER ImportQXFFile(STRING sFileNameWithPath, BOOLEAN bLog optional)
		[+] //Variable
			[ ] STRING sActual,sExpected,sMsg
			[ ] sExpected="errors during import. Click Yes to view the log file."
			[ ] sMsg="Import successful."
			[+] if(IsNull(bLog))
				[ ] bLog=FALSE
			[ ] 
		[+] do
			[ ] 
			[+] if(FileExists(sFileNameWithPath))
				[+] if (QuickenWindow.Exists(SHORT_SLEEP))
					[ ] QuickenWindow.SetActive()
					[ ] 
					[ ] 
					[+] do
						[ ] QuickenWindow.File.Click()
						[ ] QuickenWindow.File.FileImport.Click()
						[ ] QuickenWindow.File.FileImport.QuickenTransferFormatFile.Select()
						[ ] 
						[ ] // 2015-10-28 KalyanG: Added multiple attempts code to invoke the dialog
						[+] if !(QXFImportPopUp.Exists(2))
							[ ] LogWarning("***WARNING: Attempt 1 Fail: Invoking [QXFImportPopUp] dialog [2 more attempts left before throwing exception]")
							[ ] raise
					[+] except
						[ ] 
						[+] do
							[ ] QuickenWindow.TypeKeys("<Alt-f><i>")
							[ ] QuickenWindow.File.FileImport.QuickenTransferFormatFile.Select()
							[ ] 
							[+] if !(QXFImportPopUp.Exists(2))
								[ ] LogWarning("***WARNING: Attempt 2 Fail: Invoking [QXFImportPopUp] dialog [1 more attempt left before throwing exception]")
								[ ] raise
						[+] except
							[ ] LogWarning("Trying 3rd time to invoke [QXFImportPopUp]")
							[ ] QuickenWindow.MainMenu.Select("/_File/File _Import/Quicken _Transfer Format (.QXF) File...")
						[ ] 
					[ ] 
					[+] if(QXFImportPopUp.Exists(3))
						[ ] QXFImportPopUp.SetActive()
						[ ] QXFImportPopUp.SelectTheQXFFileToImportTextField.SetText(sFileNameWithPath)
						[ ] QXFImportPopUp.Continue.Click()
						[ ] sleep(15)
						[+] if(AlertMessage.Exists(130))
							[ ] AlertMessage.SetActive()
							[ ] sActual=AlertMessage.MessageText.GetText()
							[ ] bMatch=MatchStr("There were * {sExpected}",sActual)
							[+] if(bMatch)
								[ ] ReportStatus("Verify alert message",PASS,"{sActual} message is displayed")
								[ ] iFunctionResult = PASS
							[+] else
								[ ] ReportStatus("Verify alert message",FAIL,"There were * {sExpected} message is not displayed, Actual - {sActual}")
								[ ] iFunctionResult = FAIL
							[ ] 
							[+] if(bLog==TRUE)
								[ ] AlertMessage.Yes.Click()
							[+] else
								[ ] AlertMessage.No.Click()
								[ ] 
							[ ] 
							[ ] WaitForState(AlertMessage , FALSE , 3)
							[ ] 
							[ ] sActual=NULL
							[+] if(AlertMessage.Exists(15))
								[ ] AlertMessage.SetActive()
								[ ] sActual=AlertMessage.MessageText.GetText()
								[+] if(sActual==sMsg)
									[ ] ReportStatus("Verify success message",PASS,"Correct message is displayed after QXF import, message- {sMsg}")
									[ ] iFunctionResult = PASS
								[+] else
									[ ] ReportStatus("Verify success message",FAIL,"Correct message is not displayed after QXF import,Actual- {sActual} and Expected- {sMsg}")
									[ ] iFunctionResult = FAIL
								[ ] AlertMessage.OK.Click()
							[+] else
								[ ] ReportStatus("Verify Alert message",FAIL,"Alert message is not displayed")
							[ ] 
							[+] if(bLog==TRUE)
								[+] if(QXFImportLogs.Exists(2))
									[ ] QXFImportLogs.SetActive()
									[ ] ReportStatus("Verify Logs opened or not after successful QXF import",PASS,"Logs opened after QXF import")
									[ ] QXFImportLogs.Close()
								[+] else
									[ ] ReportStatus("Verify Logs opened or not after successful QXF import",FAIL,"Logs did not open after QXF import")
									[ ] 
							[ ] 
						[+] else
							[ ] ReportStatus("Verify Alert message",FAIL,"Alert messge is not appeared")
							[ ] iFunctionResult=FAIL
					[+] else
						[ ] ReportStatus("Valiade QXF Import PopUp",FAIL,"QXF Import PopUp did not appear")
						[ ] iFunctionResult=FAIL
					[ ] 
				[+] else
					[ ] ReportStatus("Quicken Main Window",FAIL,"Quicken Main Window is not available")
					[ ] iFunctionResult = FAIL
			[+] else
				[ ] ReportStatus("Verify QXF import",FAIL,"QXF import failed as file to be imported doesn't exist")
				[ ] iFunctionResult = FAIL
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult=FAIL
		[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: ImportWebConnectFile() // Updated by Abhijit S April 2015
		[ ] // 
		[ ] // DESCRIPTION:
		[ ] // This function will import web file for investment and banking account
		[ ] // 
		[ ] // PARAMETERS:		STRING	sFile				file name
		[ ] // 
		[ ] // RETURNS:			INTEGER	PASS			 if mentioned file imported successfully
		[ ] // FAIL  			 if any error occurs
		[ ] // 
		[ ] // REVISION HISTORY:Feb 10, 2011  Puja Verma  Created
	[ ] // ==========================================================
	[+] public INTEGER ImportWebConnectFile(STRING sFileName ,STRING  sAccountName optional,INTEGER iExistingAccount optional)
		[+] //Variable
			[ ] STRING sStaticText
			[ ] STRING sFileWithPath = AUT_DATAFILE_PATH + "\" + sFileName+".QFX"
			[ ] BOOLEAN bCaption, bFound
			[ ] bCaption = FALSE
			[ ] iFunctionResult = FAIL
			[+] if(IsNull(iExistingAccount)) // Added by shrivardhan
				[ ] iExistingAccount=0
			[ ] 
		[ ] 
		[+] do
				[ ] 
			[+] if (QuickenWindow.Exists(SHORT_SLEEP))
				[ ] QuickenWindow.SetActive()
				[ ] QuickenWindow.File.Click()
				[ ] QuickenWindow.File.FileImport.Click()
				[ ] QuickenWindow.File.FileImport.WebConnectFile.Select()
				[ ] 
				[ ] // open the Web connect file for Banking
				[ ] ImportExportQuickenFile.SetActive()
				[ ] ImportExportQuickenFile.FileName.SetText(sFileWithPath)
				[ ] ImportExportQuickenFile.OK.Click()
				[+] if(BofaCriticalMsg.Exists(60))
					[ ] BofaCriticalMsg.SetActive()
					[ ] BofaCriticalMsg.DontShow.Check()
					[ ] BofaCriticalMsg.OK.Click()
				[ ] WaitForState(ImportDownloadedTransactions,TRUE,25)
				[ ] 
				[+] if(ImportDownloadedTransactions.Import.Exists(120))
					[ ] ImportDownloadedTransactions.SetActive()
					[+] if(iExistingAccount==0)
						[+] if (sAccountName!=NULL)
							[ ] ImportDownloadedTransactions.NewAccountDetails.TextField1.SetText(sAccountName)
					[+] else
						[ ] ImportDownloadedTransactions.LinkToAnExistingAccount.Select(1)
					[ ] ImportDownloadedTransactions.Import.Click()
					[+] if(BofaCriticalMsg.Exists(10))
						[ ] BofaCriticalMsg.SetActive()
						[ ] BofaCriticalMsg.DontShow.Check()
						[ ] BofaCriticalMsg.OK.Click()
					[ ] 
					[+] if(DlgMsgWellsFargo.Exists(10))
						[ ] DlgMsgWellsFargo.SetActive()
						[ ] DlgMsgWellsFargo.OK.Click()
					[+] if(DlgVerifyCashBalance.Exists(10))
						[ ] DlgVerifyCashBalance.SetActive()
						[ ] DlgVerifyCashBalance.Close()
						[ ] 
					[+] if(OneStepUpdateSummary.Exists(50))
						[ ] OneStepUpdateSummary.SetActive()
						[ ] OneStepUpdateSummary.Close.Click ()
						[+] if (sAccountName!=NULL)
							[+] if(iExistingAccount==0)
								[ ] SelectAccountFromAccountBar(sAccountName,ACCOUNT_INVESTING)
							[ ] 
							[+] if(DlgVerifyCashBalance.Exists(10))
								[ ] DlgVerifyCashBalance.SetActive()
								[ ] DlgVerifyCashBalance.OnlineBalanceTextField.SetText("10")
								[ ] DlgVerifyCashBalance.Done.Click()
								[ ] 
								[ ] 
								[ ] 
						[+] if(BankingPopUp.Exists())
							[ ] BankingPopUp.SetActive()
							[ ] BankingPopUp.Close()
						[ ] iFunctionResult = PASS
						[ ] 
					[+] else
						[ ] logerror("OneStepUpdateSummary is not opened")
						[ ] iFunctionResult = FAIL
						[ ] 
					[+] if(BofaCriticalMsg.Exists(10))
						[ ] BofaCriticalMsg.SetActive()
						[ ] //BofaCriticalMsg.DontShow.Check()
						[ ] BofaCriticalMsg.OK.Click()
					[ ] 
					[ ] 
				[+] else
					[ ] ReportStatus("ImportDownloadedTransactions",FAIL,"ImportDownloadedTransactions Did not opened")
					[ ] iFunctionResult = FAIL
					[ ] 
				[+] if(AlertMessage.Exists(SHORT_SLEEP))
					[ ] sStaticText = AlertMessage.StaticText.GetText()
					[ ] bFound = MatchStr("*401(k)*",sStaticText)
					[+] if (bFound == TRUE)
						[ ] AlertMessage.No.Click()
			[ ] 
			[+] else
				[ ] ReportStatus("Quicken Main Window",FAIL,"Quicken Main Window is not available")
				[ ] iFunctionResult = FAIL
		[ ] 
		[+] except
			[ ] ExceptLog()
			[+] if(OneStepUpdateSummary.Close.Exists(10))
				[ ] OneStepUpdateSummary.SetActive()
				[ ] OneStepUpdateSummary.Close.Click (1, 36, 12)
				[ ] 
			[ ] iFunctionResult=FAIL
		[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] 
	[ ] 
	[+] // FUNCTION: DataFileConversion()
		[ ] //
		[ ] // DESCRIPTION:	This function will Open different years of file in latest vesion of Quicken
		[ ] // 
		[ ] //
		[ ] // PARAMETERS IN:		STRING 	sFileName	Name of file
		[ ] //							STRING	sVersion		Version of the file
		[ ] //							STRING	sPassword	Optional, if password window appears then password variable is used
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If all the data file conversion is successful 
		[ ] //										FAIL	If any error occurs
		[ ] //
		[ ] // REVISION HISTORY:	11/03/2011	Created By	Puja Verma
		[ ] //							31/03/2011	Modified by	Mamta Jain	
		[ ] //                                         6/02/2013   Modified by Dean Paes                    								   
	[ ] //==========================================================
	[+] // public INTEGER DataFileConversion (STRING sFileName, STRING sVersion, STRING sPassword optional,STRING sLocation optional)
		[+] // // Variable declaration
			[ ] // STRING sFileWithPath 
			[ ] // //= AUT_DATAFILE_PATH + "\" + "DataConversionSource\ConversionFolder"+ "\"+"{sVersion}"+"\"+sFileName + ".QDF"
			[ ] // INTEGER  iPasswordValidation
			[ ] // BOOLEAN bCaption, bExists, bVersion
			[ ] // STRING sCaption, sErrorMsg, sExpectedErrorMsg
			[ ] // INTEGER iRegistration
			[ ] // 
			[ ] // sExpectedErrorMsg = "Convert your Quicken file"
		[+] // do
			[ ] // 
			[+] // if(sLocation==NULL)
				[ ] // sFileWithPath=AUT_DATAFILE_PATH + "\" + "ConversionFolder"+ "\"+"{sVersion}"+"\"+sFileName + ".QDF"
			[+] // else
				[ ] // sFileWithPath=sLocation
			[ ] // 
			[ ] // 
			[ ] // QuickenWindow.SetActive ()
			[ ] // sCaption = QuickenWindow.GetCaption()
			[ ] // bCaption = MatchStr("*- {sFileName} -*", sCaption)
			[+] // if(bCaption == FALSE)
				[ ] // bExists = FileExists(sFileWithPath)
				[+] // if(bExists == FALSE)
					[ ] // ReportStatus("Validate {sFileName} File ", FAIL, "File is not present in required location")
					[ ] // iFunctionResult=FAIL
				[+] // else
					[ ] // QuickenWindow.SetActive()
					[ ] // QuickenWindow.File.Click()
					[ ] // QuickenWindow.File.OpenQuickenFile.Select()
					[ ] // ImportExportQuickenFile.SetActive()
					[ ] // ImportExportQuickenFile.FileName.SetText(sFileWithPath)
					[ ] // ImportExportQuickenFile.OK.Click()
					[+] // if(EnterQuickenPassword.Exists(MEDIUM_SLEEP))
						[ ] // iPasswordValidation = PasswordValidation(sFileName, sPassword, sVersion)
						[+] // if(iPasswordValidation == FAIL)
							[ ] // iFunctionResult = FAIL
							[ ] // 
						[ ] // 
					[ ] // 
					[+] // if(ConvertYourData.Exists(LONG_SLEEP))
						[ ] // ConvertYourData.SetActive()
						[ ] // ConvertYourData.ConvertFilebutton.Click()
						[ ] // 
						[ ] // sleep(65)
						[ ] // WaitForState(QuickenMainWindow.QWNavigator.Home, TRUE, 10)
						[ ] // CloseQuickenConnectedServices()
						[ ] // 
						[ ] // iFunctionResult=PASS
					[ ] // 
					[+] // else
						[+] // if(ConvertYourQuickenFile.Exists(MEDIUM_SLEEP))			// if file is empty then error message is displayed
							[ ] // ConvertYourQuickenFile.SetActive ()
							[ ] // sErrorMsg = ConvertYourQuickenFile.ErrorText.GetText ()
							[+] // if(sExpectedErrorMsg == sErrorMsg)				// for 2001,2002,2003 error message is displayed so verify error message for pass returning Pass status
								[ ] // ConvertYourQuickenFile.Close()
								[ ] // iFunctionResult = PASS
							[+] // else
								[ ] // ReportStatus("Validate File Conversion", FAIL, "Error Message - '{sErrorMsg}' is displayed while converting the file.")
								[ ] // iFunctionResult = FAIL
							[+] // if(AlertMessage.Exists(SHORT_SLEEP))
								[ ] // AlertMessage.SetActive()
								[ ] // AlertMessage.OK.Click ()
							[+] // if(OpenQuickenFile.Exists(MEDIUM_SLEEP))
								[ ] // OpenQuickenFile.SetActive ()
								[ ] // OpenQuickenFile.Close()
							[ ] // 
						[+] // else
							[+] // if(AlertMessage.Exists(SHORT_SLEEP))
								[ ] // AlertMessage.SetActive()
								[ ] // AlertMessage.OK.Click()
								[+] // if(OpenQuickenFile.Exists(SHORT_SLEEP))
									[ ] // OpenQuickenFile.SetActive()
									[ ] // OpenQuickenFile.Close()
								[ ] // iFunctionResult=FAIL
							[ ] // iFunctionResult=FAIL
				[ ] // 
			[+] // else
				[ ] // ReportStatus("Validate {sFileName} File ", FAIL, "File is already converted, so we can not convert the same file")
				[ ] // iFunctionResult=FAIL
				[ ] // 
		[+] // except
			[ ] // ExceptLog()
			[ ] // QuickenWindow.Kill()
			[ ] // App_Start(sCmdLine)
			[ ] // sleep(5)
			[ ] // iFunctionResult=FAIL
		[ ] // return iFunctionResult
	[ ] //Commented on 12/16/2015 to handele new sign-in widget - Mukesh
	[+] // public INTEGER DataFileConversion (STRING sFileName, STRING sVersion, STRING sPassword optional,STRING sLocation optional , BOOLEAN bSignIn optional)
		[+] // // Variable declaration
			[ ] // STRING sFileWithPath 
			[ ] // //= AUT_DATAFILE_PATH + "\" + "DataConversionSource\ConversionFolder"+ "\"+"{sVersion}"+"\"+sFileName + ".QDF"
			[ ] // INTEGER  iPasswordValidation
			[ ] // BOOLEAN bCaption, bExists, bVersion
			[ ] // STRING sCaption, sErrorMsg, sExpectedErrorMsg
			[ ] // INTEGER iRegistration
			[+] // if (bSignIn==NULL)
				[ ] // bSignIn=TRUE
			[ ] // 
			[ ] // sExpectedErrorMsg = "Convert your Quicken file"
		[+] // do
			[ ] // 
			[+] // if(sLocation==NULL)
				[ ] // sFileWithPath=AUT_DATAFILE_PATH + "\" + "ConversionFolder"+ "\"+"{sVersion}"+"\"+sFileName + ".QDF"
			[+] // else
				[ ] // sFileWithPath=sLocation+"{sFileName}.QDF"
			[ ] // 
			[ ] // 
			[ ] // QuickenWindow.SetActive ()
			[ ] // sCaption = QuickenWindow.GetCaption()
			[ ] // bCaption = MatchStr("*- {sFileName} -*", sCaption)
			[+] // if(bCaption == FALSE)
				[ ] // bExists = FileExists(sFileWithPath)
				[+] // if(bExists == FALSE)
					[ ] // ReportStatus("Validate {sFileName} File ", FAIL, "File is not present in required location")
					[ ] // iFunctionResult=FAIL
				[+] // else
					[ ] // QuickenWindow.SetActive()
					[+] // do
						[ ] // QuickenWindow.TypeKeys(KEY_ALT_F)
						[ ] // sleep(1)
						[ ] // QuickenWindow.File.OpenQuickenFile.Select()
					[+] // except
						[ ] // QuickenWindow.SetActive()
						[+] // do
							[ ] // QuickenWindow.TypeKeys(KEY_CTRL_O)
							[ ] // 
							[ ] // // 2015-10-27 KalyanG: typekeys does not throw any error, hence added the condition
							[+] // if !(ImportExportQuickenFile.Exists(2))
								[ ] // raise
						[+] // except
							[+] // do
								[ ] // QuickenWindow.File.Click()
								[ ] // QuickenWindow.File.OpenQuickenFile.Select()
							[+] // except
								[ ] // QuickenWindow.MainMenu.Select("/_File/_Open Quicken File...")
						[ ] // 
					[ ] // 
					[+] // if (ImportExportQuickenFile.Exists(5))
						[ ] // ImportExportQuickenFile.SetActive()
						[ ] // ImportExportQuickenFile.FileName.SetText(sFileWithPath)
						[ ] // ImportExportQuickenFile.OK.Click()
						[+] // if(EnterQuickenPassword.Exists(MEDIUM_SLEEP))
							[ ] // //iPasswordValidation = PasswordValidation(sFileName, sPassword, sVersion)
							[ ] // iPasswordValidation = EnterQuickenPassword(sPassword)
							[ ] // 
							[+] // if(iPasswordValidation == FAIL)
								[ ] // iFunctionResult = FAIL
								[ ] // 
							[ ] // 
						[+] // if(ConvertYourData.Exists(LONG_SLEEP))
							[ ] // ConvertYourData.SetActive()
							[ ] // ConvertYourData.ConvertFilebutton.Click()
							[+] // if (AlertMessage.OK.Exists(2))
								[ ] // AlertMessage.SetActive()
								[ ] // AlertMessage.OK.Click()
								[ ] // WaitForState(AlertMessage, false ,2)
							[+] // if (AlertMessage.Exists(5))
								[+] // while (AlertMessage.Exists())
									[ ] // sleep(1)
							[+] // while (QuickenAlertMessage.Exists(2))
								[ ] // sleep(1)
								[ ] // 
							[ ] // sleep(30)
							[ ] // //Register the datafile
							[+] // if (bSignIn==TRUE)
								[ ] // SignInQuickenConnectedServices()
							[ ] // iFunctionResult=PASS
						[+] // else
							[+] // if(ConvertYourQuickenFile.Exists(MEDIUM_SLEEP))			// if file is empty then error message is displayed
								[ ] // ConvertYourQuickenFile.SetActive ()
								[ ] // sErrorMsg = ConvertYourQuickenFile.ErrorText.GetText ()
								[+] // if(sExpectedErrorMsg == sErrorMsg)				// for 2001,2002,2003 error message is displayed so verify error message for pass returning Pass status
									[ ] // ConvertYourQuickenFile.Close()
									[ ] // iFunctionResult = PASS
								[+] // else
									[ ] // ReportStatus("Validate File Conversion", FAIL, "Error Message - '{sErrorMsg}' is displayed while converting the file.")
									[ ] // iFunctionResult = FAIL
								[+] // if(AlertMessage.Exists(SHORT_SLEEP))
									[ ] // AlertMessage.SetActive()
									[ ] // AlertMessage.OK.Click ()
								[+] // if(OpenQuickenFile.Exists(MEDIUM_SLEEP))
									[ ] // OpenQuickenFile.SetActive ()
									[ ] // OpenQuickenFile.Close()
								[ ] // 
							[+] // else
								[+] // if(AlertMessage.Exists(SHORT_SLEEP))
									[ ] // AlertMessage.SetActive()
									[ ] // AlertMessage.OK.Click()
									[+] // if(OpenQuickenFile.Exists(SHORT_SLEEP))
										[ ] // OpenQuickenFile.SetActive()
										[ ] // OpenQuickenFile.Close()
									[ ] // iFunctionResult=FAIL
								[ ] // iFunctionResult=FAIL
					[+] // else
						[ ] // iFunctionResult=FAIL
				[ ] // 
			[+] // else
				[ ] // ReportStatus("Validate {sFileName} File ", FAIL, "File is already converted, so we can not convert the same file")
				[ ] // iFunctionResult=FAIL
				[ ] // 
		[+] // except
			[ ] // ExceptLog()
			[ ] // QuickenWindow.Kill()
			[ ] // App_Start(sCmdLine)
			[ ] // sleep(5)
			[ ] // iFunctionResult=FAIL
		[ ] // return iFunctionResult
	[ ] 
	[+] public INTEGER DataFileConversion (STRING sFileName, STRING sVersion, STRING sPassword optional,STRING sLocation optional , BOOLEAN bSignIn optional)
		[+] // Variable declaration
			[ ] BOOLEAN bOpenDataFile =TRUE
			[ ] STRING sFileWithPath 
			[ ] //= AUT_DATAFILE_PATH + "\" + "DataConversionSource\ConversionFolder"+ "\"+"{sVersion}"+"\"+sFileName + ".QDF"
			[ ] INTEGER  iPasswordValidation
			[ ] BOOLEAN bCaption, bExists, bVersion
			[ ] STRING sCaption, sErrorMsg, sExpectedErrorMsg
			[ ] INTEGER iRegistration
			[+] if (bSignIn==NULL)
				[ ] bSignIn=TRUE
			[ ] 
			[ ] sExpectedErrorMsg = "Convert your Quicken file"
		[+] do
			[ ] 
			[+] if(sLocation==NULL)
				[ ] sFileWithPath=AUT_DATAFILE_PATH + "\" + "ConversionFolder"+ "\"+"{sVersion}"+"\"+sFileName + ".QDF"
			[+] else
				[ ] sFileWithPath=sLocation+"{sFileName}.QDF"
			[ ] 
			[ ] 
			[ ] QuickenWindow.SetActive ()
			[ ] sCaption = QuickenWindow.GetCaption()
			[ ] bCaption = MatchStr("*- {sFileName} -*", sCaption)
			[+] if(bCaption == FALSE)
				[ ] bExists = FileExists(sFileWithPath)
				[+] if(bExists == FALSE)
					[ ] ReportStatus("Validate {sFileName} File ", FAIL, "File is not present in required location")
					[ ] iFunctionResult=FAIL
				[+] else
					[ ] QuickenWindow.SetActive()
					[+] do
						[ ] QuickenWindow.TypeKeys(KEY_ALT_F)
						[ ] sleep(1)
						[ ] QuickenWindow.File.OpenQuickenFile.Select()
					[+] except
						[ ] QuickenWindow.SetActive()
						[+] do
							[ ] QuickenWindow.TypeKeys(KEY_CTRL_O)
							[ ] 
							[ ] // 2015-10-27 KalyanG: typekeys does not throw any error, hence added the condition
							[+] if !(ImportExportQuickenFile.Exists(2))
								[ ] raise
						[+] except
							[+] do
								[ ] QuickenWindow.File.Click()
								[ ] QuickenWindow.File.OpenQuickenFile.Select()
							[+] except
								[ ] QuickenWindow.MainMenu.Select("/_File/_Open Quicken File...")
						[ ] 
					[ ] 
					[+] if (ImportExportQuickenFile.Exists(5))
						[ ] ImportExportQuickenFile.SetActive()
						[ ] ImportExportQuickenFile.FileName.SetText(sFileWithPath)
						[ ] ImportExportQuickenFile.OK.Click()
						[+] if(EnterQuickenPassword.Exists(MEDIUM_SLEEP))
							[ ] //iPasswordValidation = PasswordValidation(sFileName, sPassword, sVersion)
							[ ] iPasswordValidation = EnterQuickenPassword(sPassword)
							[ ] 
							[+] if(iPasswordValidation == FAIL)
								[ ] iFunctionResult = FAIL
								[ ] 
							[ ] 
						[+] if(ConvertYourData.Exists(LONG_SLEEP))
							[ ] ConvertYourData.SetActive()
							[ ] ConvertYourData.ConvertFilebutton.Click()
							[+] if (AlertMessage.OK.Exists(2))
								[ ] AlertMessage.SetActive()
								[ ] AlertMessage.OK.Click()
								[ ] WaitForState(AlertMessage, false ,2)
							[+] if (AlertMessage.Exists(5))
								[+] while (AlertMessage.Exists())
									[ ] sleep(1)
							[+] while (QuickenAlertMessage.Exists(2))
								[ ] sleep(1)
								[ ] 
							[ ] sleep(30)
							[ ] //Register the datafile
							[+] if (bSignIn==TRUE)
								[ ] 
								[ ] //Dataconversion
								[ ] //SignInQuickenConnectedServices()
								[ ] SignInQuickenConnectedServices(bOpenDataFile)
							[ ] iFunctionResult=PASS
						[+] else
							[+] if(ConvertYourQuickenFile.Exists(MEDIUM_SLEEP))			// if file is empty then error message is displayed
								[ ] ConvertYourQuickenFile.SetActive ()
								[ ] sErrorMsg = ConvertYourQuickenFile.ErrorText.GetText ()
								[+] if(sExpectedErrorMsg == sErrorMsg)				// for 2001,2002,2003 error message is displayed so verify error message for pass returning Pass status
									[ ] ConvertYourQuickenFile.Close()
									[ ] iFunctionResult = PASS
								[+] else
									[ ] ReportStatus("Validate File Conversion", FAIL, "Error Message - '{sErrorMsg}' is displayed while converting the file.")
									[ ] iFunctionResult = FAIL
								[+] if(AlertMessage.Exists(SHORT_SLEEP))
									[ ] AlertMessage.SetActive()
									[ ] AlertMessage.OK.Click ()
								[+] if(OpenQuickenFile.Exists(MEDIUM_SLEEP))
									[ ] OpenQuickenFile.SetActive ()
									[ ] OpenQuickenFile.Close()
								[ ] 
							[+] else
								[+] if(AlertMessage.Exists(SHORT_SLEEP))
									[ ] AlertMessage.SetActive()
									[ ] AlertMessage.OK.Click()
									[+] if(OpenQuickenFile.Exists(SHORT_SLEEP))
										[ ] OpenQuickenFile.SetActive()
										[ ] OpenQuickenFile.Close()
									[ ] iFunctionResult=FAIL
								[ ] iFunctionResult=FAIL
					[+] else
						[ ] iFunctionResult=FAIL
				[ ] 
			[+] else
				[ ] ReportStatus("Validate {sFileName} File ", FAIL, "File is already converted, so we can not convert the same file")
				[ ] iFunctionResult=FAIL
				[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] QuickenWindow.Kill()
			[ ] App_Start(sCmdLine)
			[ ] sleep(5)
			[ ] iFunctionResult=FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: ConvertedFileBackUp()
		[ ] //
		[ ] // DESCRIPTION:	This function will take backup of the converted files and store the files in some other Location
		[ ] // 					 which can be on Local drive or Network drive.
		[ ] //
		[ ] // PARAMETERS IN:		STRING 	sFileName	Name of file
		[ ] //							STRING	sVersion		Version of File
		[ ] //
		[ ] // RETURNS:				INTEGER		PASS	If file back up is successful
		[ ] //											FAIL	If any error occurs
		[ ] //
		[ ] // REVISION HISTORY:	05/04/2011	Created by	Mamta Jain
		[ ] //							 									   
	[ ] // ==========================================================
	[+] public INTEGER ConvertedFileBackUp(STRING sFileName, STRING sVersion)
		[+] // Variable declaration
			[ ] STRING sTarget = "\\ps7991\ConvertedFiles"				
			[ ] STRING sSource = "{AUT_DATAFILE_PATH}\ConversionFolder\{sVersion}\{sFileName}.QDF"
			[ ] Datetime dTime = GetDateTime()		// Get date and time
			[ ] String sDate, sNewTarget, sFolderName
			[ ] BOOLEAN bCopyStatus, bExists
		[ ] 
		[+] do
			[ ] sDate = FormatDateTime(dTime, "mmm d")			// change the format of date to "ddmm"
			[ ] sFolderName = sTarget + "\{sDate}_Converted{sVersion}"		// folder name should be "ddmm_Converted(Version of file) which is converted"
			[+] if(!SYS_DirExists(sFolderName))
				[ ] SYS_MakeDir(sFolderName)
			[ ] 
			[ ] sNewTarget = sFolderName + DELIMITER  + sFileName + ".QDF"
			[ ] 
			[+] if(FileExists(sSource) == TRUE)
				[ ] bCopyStatus = CopyFile(sSource, sNewTarget)
				[+] if(bCopyStatus == TRUE)
					[ ] iFunctionResult = PASS
				[+] else
					[ ] iFunctionResult = FAIL
			[+] else
				[ ] iFunctionResult = FAIL
		[ ] 
		[+] except
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: SetFilePassword()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will set the data file password
		[ ] 
		[ ] //
		[ ] // PARAMETERS:		STRING 	sFileName		Name of the file for settting the password
		[ ] //
		[ ] // RETURNS:			INTEGER	PASS  if password set successfully
		[ ] //									FAIL    if any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	Apr 29, 2014	Udita Dube Created
	[ ] // ==========================================================
	[+] public INTEGER SetFilePassword(STRING sPassword)
		[ ] 
		[ ] // Expected Values
		[ ] sPassword=trim(sPassword)
		[ ] 
		[+] do
			[ ] 
			[ ] // Quicken is launched then validate data log
			[+] if (QuickenWindow.Exists(5))
				[ ] 
				[ ] // Navigate to File > Set Password For This DataFile
				[ ] QuickenWindow.TypeKeys(KEY_ALT_F)
				[ ] QuickenWindow.File.SetPasswordForThisDataFile.Select()
				[ ] 
				[ ] // Verify that Quicken File Password window
				[+] if(QuickenFilePassword.Exists(5))
					[ ] 
					[ ] QuickenFilePassword.SetActive()
					[ ] QuickenFilePassword.NewPasswordTextField.SetText(sPassword)
					[ ] QuickenFilePassword.ConfirmPasswordTextField.SetText(sPassword)
					[ ] QuickenFilePassword.OK.Click()
					[ ] iFunctionResult=PASS
					[ ] 
				[+] else
					[ ] ReportStatus("Verify Quicken File Password Window", FAIL, "Quicken File Password window is not found") 
					[ ] iFunctionResult=FAIL
				[ ] 
			[ ] // Report Status if Quicken is not launched
			[+] else
				[ ] ReportStatus("Verify Quicken Window", FAIL, "Quicken is not available") 
				[ ] 
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult=FAIL
		[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: ValidateDataFile()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will validate data file with specified name sFileName.
		[ ] 
		[ ] //
		[ ] // PARAMETERS:		STRING 	sFileName		Name of the file to be validated
		[ ] //
		[ ] // RETURNS:			INTEGER	0 = If data file is validated successfully
		[ ] //									1 = if any error occurs while creating file
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	Apr 11, 2014	Udita Dube Created
	[ ] // ==========================================================
	[+] public INTEGER ValidateDataFile(STRING sFileName optional,STRING sLocation optional)
		[ ] 
		[+] // Variable declaration
			[ ] BOOLEAN bNotepad,bExist
			[ ] STRING sDataLogPath,sExpectedOutputFile,sActualOutputFile,sNoError
			[ ] HFILE hFile
			[ ] STRING sLine
			[ ] 
		[+] // Expected Values
			[ ] sExpectedOutputFile = "DATA_LOG"
			[ ] sDataLogPath = USERPROFILE + "\Application Data\Intuit\Quicken\Log\DATA_LOG.TXT"
			[ ] sNoError="No errors."
		[ ] 
		[+] do
			[ ] 
			[+] if(sFileName!=NULL && sLocation!=NULL)
				[ ] OpenDataFile(sFileName,sLocation)
				[ ] sleep(SHORT_SLEEP)
			[ ] 
			[ ] // Quicken is launched then validate data log
			[+] if (QuickenWindow.Exists(5))
				[ ] 
				[ ] // Navigate to File > File Operations > Validate and Repair
				[ ] QuickenWindow.File.Click()
				[ ] QuickenWindow.File.FileOperations.Click()
				[ ] QuickenWindow.File.FileOperations.ValidateAndRepair.Click()
				[ ] //QuickenWindow.File.FileOperations.ValidateAndRepair.Select()
				[ ] 
				[ ] 
				[ ] // Verify that "Validate and repair your Quicken file" window exists
				[+] if(ValidateAndRepair.Exists(5))
					[ ] 
					[ ] ValidateAndRepair.SetActive()
					[ ] ValidateAndRepair.ValidateFile.Check()
					[ ] ValidateAndRepair.RebuildInvestingLots.Check()
					[ ] ValidateAndRepair.OK.Click()
					[ ] 
					[+] while (!Notepad.Exists())
						[ ] sleep(1)
					[ ] 
					[ ] 
					[ ] // Verify that output file (data log text file) is opened
					[+] if(Notepad.Exists(SHORT_SLEEP))
						[ ] 
						[ ] Notepad.SetActive()
						[ ] // Verify window title for output file
						[ ] sActualOutputFile=Notepad.GetCaption()
						[ ] bMatch = MatchStr("*{sExpectedOutputFile}*",sActualOutputFile)
						[+] if (bMatch == TRUE)
							[ ] ReportStatus("Validate Output File", PASS, "Output file {sExpectedOutputFile} is created")
						[+] else
							[ ] ReportStatus("Validate Output File", FAIL, "Output file {sExpectedOutputFile} is not matching with {sActualOutputFile}")
						[ ] // Close Notepad
						[ ] Notepad.SetActive()
						[ ] Notepad.Exit()
						[ ] 
						[ ] // Read File
						[ ] hFile = FileOpen (sDataLogPath, FM_READ) 
						[+] while (FileReadLine (hFile, sLine))
							[ ] bMatch = MatchStr("*{sNoError}*", sLine)
							[+] if(bMatch == TRUE)
								[ ] ReportStatus("Validate Data log", PASS, "{sNoError} message is displayed in {sExpectedOutputFile} file")
								[ ] iFunctionResult=PASS
								[ ] break
							[+] else
								[ ] continue
							[ ] 
						[+] if(bMatch==FALSE)
							[ ] ReportStatus("Validate Data log", FAIL, "{sNoError} message is not displayed in {sExpectedOutputFile} file")
						[ ] FileClose (hFile)
						[ ] 
						[ ] 
						[ ] // Verify the path of output file i.e. Notepad
						[ ] bNotepad= SYS_FileExists(sDataLogPath)
						[ ] bExist =  AssertTrue(bNotepad)
						[+] if (bExist == TRUE)
							[ ] ReportStatus("Validate Output File", PASS, "Output file {sExpectedOutputFile} is found at {sDataLogPath}") 
							[ ] iFunctionResult=PASS
						[+] else
							[ ] ReportStatus("Validate Output File", FAIL, "Output file {sExpectedOutputFile} is not found at {sDataLogPath}") 
							[ ] iFunctionResult=FAIL
						[ ] 
					[+] else
						[ ] ReportStatus("Validate Data Log Notepad", FAIL, "Notepad is not opened") 
						[ ] iFunctionResult=FAIL
				[+] else
					[ ] ReportStatus("Validate ValidateAndRepair Window", FAIL, "ValidateAndRepair window is not found") 
					[ ] iFunctionResult=FAIL
				[ ] 
			[ ] // Report Status if Quicken is not launched
			[+] else
				[ ] ReportStatus("Validate Quicken Window", FAIL, "Quicken is not available") 
				[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult=FAIL
		[ ] 
		[ ] return iFunctionResult
	[ ] 
[ ] 
[+] // //********************** Account Bar and Navigation Related Functions**********************************************
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: SelectPreferenceType()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will select required Preference Type
		[ ] //
		[ ] // PARAMETERS:		STRING 	sPreferenceType e.g. Mobile & Alerts
		[ ] //
		[ ] // RETURNS:			INTEGER	PASS	If correct Preference Type is selected
		[ ] //									FAIL 	If any error
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	 Jan 15, 2013	Udita Dube created
	[ ] // ==========================================================
	[+] public INTEGER SelectPreferenceType(STRING sPreferenceType)
		[ ] 
		[+] // Variable declaration
			[ ] INTEGER iCount,i
			[ ] STRING sHandle,sActual
			[ ] iFunctionResult = FAIL
		[ ] 
		[ ] 
		[+] do
			[ ] QuickenWindow.SetActive ()
			[ ] // Navigate to Edit > Preferences
			[+] do
				[ ] QuickenWindow.Edit.Click()
				[ ] QuickenWindow.Edit.Preferences.Select()
			[+] except
				[ ] QuickenWindow.TypeKeys(KEY_ALT_E)
				[ ] QuickenWindow.Edit.Preferences.Select()
			[ ] 
			[ ] Waitforstate(Preferences,TRUE,SHORT_SLEEP)
			[+] if(Preferences.Exists(SHORT_SLEEP))
				[ ] Preferences.SetActive()
				[ ] sHandle = Str(Preferences.SelectPreferenceType.ListBox.GetHandle())
				[ ] iCount=Preferences.SelectPreferenceType.ListBox.GetItemCount()
				[+] for( i = 1; i<=iCount; i++)
					[ ] sActual = QwAutoExecuteCommand("LISTBOX_GETFULLROW", sHandle, Str(i))
					[ ] bMatch = MatchStr("*{sPreferenceType}*", sActual)
					[+] if(bMatch == TRUE)
						[ ] QwAutoExecuteCommand("LISTBOX_SELECTROW", sHandle, Str(i))		// Select  option
						[ ] iFunctionResult = PASS
						[ ] break
					[+] else
						[+] if(i==iCount)
							[ ] ReportStatus("Validate {sPreferenceType} option'", FAIL, "{sPreferenceType} option is not available") 
							[ ] iFunctionResult = FAIL
						[ ] 
				[ ] 
			[+] else
				[ ] ReportStatus("Verify Preferences dialog." ,FAIL,"Preferences dialog didn't appear.")
				[ ] iFunctionResult=FAIL
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult = FAIL
		[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: SwitchManualBackupOption()
		[ ] // 
		[ ] // DESCRIPTION:
		[ ] // This function will enable or disable Manual Backup pop up that appears when Quicken closes.
		[ ] // 
		[ ] // PARAMETERS:		STRING 		sSwitch	ON or OFF values
		[ ] // 
		[ ] // RETURNS:			INTEGER		PASS		If switching is done successfully 
		[ ] //                                                          FAIL 		If any error occured during switching
		[ ] // 
		[ ] // REVISION HISTORY:
		[ ] // Feb 18, 2014	Dean Paes created
	[ ] // ==========================================================
	[+] public INTEGER SwitchManualBackupOption(STRING sSwitch)
			[ ] INTEGER iResult
			[ ] BOOLEAN bCheckStatus 
			[ ] STRING sType="Backup"
		[ ] 
		[+] do
				[ ] QuickenWindow.SetActive()
				[ ] iResult=SelectPreferenceType(sType)
				[+] if (iResult==PASS)
					[ ] Preferences.SetActive()
					[+] switch(sSwitch)
						[+] case "ON"
							[ ] //----Select Manual Backup Reminder option in Preferences to prevent Backup prompts----
							[ ] Preferences.ManualBackupReminder.Check()
							[ ] bCheckStatus = Preferences.ManualBackupReminder.IsChecked()
							[+] if (bCheckStatus == TRUE)
								[ ] iFunctionResult = PASS
							[+] else
								[ ] iFunctionResult = FAIL
							[ ] 
						[+] case "OFF"
							[ ] 
							[ ] //----Deselect Manual Backup Reminder option in Preferences to prevent Backup prompts----
							[ ] Preferences.ManualBackupReminder.Uncheck()
							[ ] 
							[ ] bCheckStatus = Preferences.ManualBackupReminder.IsChecked()
							[+] if (bCheckStatus == FALSE)
								[ ] iFunctionResult = PASS
							[+] else
								[ ] iFunctionResult = FAIL
							[ ] 
							[ ] 
							[ ] 
						[+] default
							[ ] iFunctionResult = FAIL
					[ ] Preferences.OK.Click()
					[ ] WaitForState(Preferences,FALSE,5)
					[ ] 
				[+] else
					[ ] ReportStatus("Verify preference option: {sType} selected",FAIL," Preference option: {sType} couldn't be selected")
					[ ] iFunctionResult = FAIL
				[ ] 
			[ ] 
		[+] except
			[ ] iFunctionResult = FAIL
			[ ] ExceptLog()
			[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: ShowHiddenInvestmentTransactionOption()
		[ ] // 
		[ ] // DESCRIPTION:
		[ ] // This function will enable or disable Show Hidden Investment Transaction Option in Preference window
		[ ] // 
		[ ] // PARAMETERS:		STRING 		bOption 	ON - TRUE or OFF- FALSE
		[ ] // 
		[ ] // RETURNS:			INTEGER		PASS		If switching is done successfully 
		[ ] //                                                          FAIL 		If any error occured during switching
		[ ] // 
		[ ] // REVISION HISTORY:
		[ ] // Dec 03, 2014	Udita Dube created
	[ ] // ==========================================================
	[+] public INTEGER ShowHiddenInvestmentTransactionOption(BOOLEAN bOption)
		[ ] 
		[ ] INTEGER iValidate
		[ ] BOOLEAN bCheckStatus
		[ ] STRING sPreferenceType="Investment transactions"
		[ ] 
		[+] do
			[ ] 
			[ ] QuickenWindow.SetActive()
			[ ] 
			[ ] iValidate=SelectPreferenceType(sPreferenceType)
			[ ] 
			[+] if(iValidate==PASS)
				[ ] 
				[ ] Preferences.SetActive()
				[ ] 
				[+] switch(bOption)
					[+] case TRUE
						[ ] 
						[ ] Preferences.ShowHiddenTransactionsCheckBox.Check()
						[ ] bCheckStatus = Preferences.ShowHiddenTransactionsCheckBox.IsChecked()
						[+] if (bCheckStatus == TRUE)
							[ ] iFunctionResult = PASS
						[+] else
							[ ] iFunctionResult = FAIL
						[ ] 
					[+] case FALSE
						[ ] 
						[ ] Preferences.ShowHiddenTransactionsCheckBox.Uncheck()
						[ ] 
						[ ] bCheckStatus = Preferences.ShowHiddenTransactionsCheckBox.IsChecked()
						[+] if (bCheckStatus == FALSE)
							[ ] iFunctionResult = PASS
						[+] else
							[ ] iFunctionResult = FAIL
						[ ] 
						[ ] 
					[+] default
						[ ] iFunctionResult = FAIL
				[ ] 
				[ ] Preferences.SetActive()
				[ ] Preferences.OK.Click()
			[+] else
				[ ] ReportStatus("Select Preference type {sPreferenceType}",FAIL,"Preference type {sPreferenceType} is not selected")
			[ ] 
		[+] except
			[ ] iFunctionResult = FAIL
			[ ] ExceptLog()
			[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: SetC2RMode()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will select required Preference Type
		[ ] //
		[ ] // PARAMETERS:		STRING 	sPreferenceType e.g. Mobile & Alerts
		[ ] //
		[ ] // RETURNS:			INTEGER	PASS	If correct Preference Type is selected
		[ ] //									FAIL 	If any error
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	 Feb 13, 2013	Udita Dube created
	[ ] // ==========================================================
	[+] public INTEGER SetC2RMode(STRING sMode)
		[ ] 
		[+] // Variable declaration
			[ ] INTEGER iSelect
			[ ] STRING sPreferenceType
			[ ] sPreferenceType="Downloaded transactions"
		[ ] 
		[+] do
			[ ] QuickenWindow.SetActive ()
			[ ] // Navigate to Edit > Preferences > Downloaded transactions
			[ ] iSelect=SelectPreferenceType(sPreferenceType)
			[ ] ReportStatus("Select Preference type",iSelect,"Preference type {sPreferenceType} is selected")
			[ ] 
			[ ] Waitforstate(Preferences,TRUE,SHORT_SLEEP)
			[ ] Preferences.SetActive()
			[ ] 
			[+] if(Preferences.AutomaticallyAddDownloadedT.Exists(SHORT_SLEEP))
				[ ] // Check the checkbox if it is unchecked
				[+] if(Preferences.AutomaticallyAddDownloadedT.IsChecked())
					[+] if(sMode=="ON")
						[ ] Preferences.AutomaticallyAddDownloadedT.Uncheck()
						[ ] ReportStatus("'Automatically add downloaded transactions Uncheck'", PASS, "Automatically add downloaded transactions Checkbox is unchecked") 
						[ ] iFunctionResult=PASS
					[+] else if (sMode=="OFF")
						[ ] ReportStatus("'Automatically add downloaded transactions check'", PASS, "Automatically add downloaded transactions Checkbox is checked") 
						[ ] iFunctionResult=PASS
					[+] else
						[ ] ReportStatus("'Verify sMode '", FAIL, "Value of sMode is incorrect, it should be ON or OFF") 
						[ ] iFunctionResult=FAIL
					[ ] 
				[+] else
					[ ] 
					[+] if(sMode=="ON")
						[ ] ReportStatus("'Automatically add downloaded transactions Uncheck'", PASS, "Automatically add downloaded transactions Checkbox is unchecked")
						[ ] iFunctionResult=PASS 
					[+] else if (sMode=="OFF")
						[ ] Preferences.AutomaticallyAddDownloadedT.Check()
						[ ] ReportStatus("'Automatically add downloaded transactions check'", PASS, "Automatically add downloaded transactions Checkbox is checked") 
						[ ] iFunctionResult=PASS
						[ ] 
					[+] else
						[ ] ReportStatus("'Verify sMode '", FAIL, "Value of sMode is incorrect, it should be ON or OFF")
						[ ] iFunctionResult=FAIL 
					[ ] 
					[ ] 
				[ ] Preferences.OK.Click()
			[+] else
				[ ] ReportStatus("Validate checkbox for Automatic Transaction entry'", FAIL, "Checkbox is not available") 
				[ ] iFunctionResult=FAIL
				[ ] 
			[ ] 
			[ ] 
		[+] except
			[ ] iFunctionResult = FAIL
			[ ] ExceptLog()
		[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] // // ==========================================================
	[+] // // FUNCTION: AccountBarSelect()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will fire a query sCommand.
		[ ] // // and will reurn the result of the query and close the window.
		[ ] // //
		[ ] // // PARAMETERS:		STRING 	sAccountType		Type of account to be selected (e.g. Banking, Investing etc) 
		[ ] // //						INTEGER	iRowNum			Position of Account in AccountBar
		[ ] // //
		[ ] // // RETURNS:			INTEGER	0	If account is selected from AccountBar
		[ ] // //									1	If account is not selected
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //	 Dec 10, 2010	Mamta Jain created
		[ ] // // 	 May  02, 2011 Udita Dube updated
		[ ] // //     June 13,2012  Udita Dube updated - Added code for Savings Goal
		[ ] // //     Sep 26,2012  Udita Dube updated - Added code for Separate
	[ ] // // ==========================================================
	[+] public INTEGER AccountBarSelect(STRING sAccountType,  INTEGER iRowNum)
		[+] // Variable declaration
			[ ] INTEGER iCounter
			[ ] INTEGER iXCords,iYCords
			[ ] iXCords = 64
			[ ] iYCords = 9
		[ ] 
		[+] do
			[ ] 
			[ ] QuickenWindow.SetActive ()      
			[ ] ExpandAccountBar()
			[ ] 
			[+] for ( iCounter = 1; iCounter<iRowNum; iCounter++)
				[ ] //iYCords = iYCords + 20
				[ ] iYCords = iYCords + 19  // updated by Anagha 25/04/2013
				[ ] 
			[+] switch(sAccountType)
				[+] case "Banking"
					[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer1.ListBox.Click(1,iXCords, iYCords)
					[ ] iFunctionResult = PASS
				[+] case "Rental Property"
					[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer2.ListBox.Click(1,iXCords, iYCords)
					[ ] iFunctionResult = PASS
				[+] case "Business"
					[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer3.ListBox.Click(1,iXCords, iYCords)
					[ ] iFunctionResult = PASS
				[+] case "Investing"
					[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer4.ListBox.Click(1,iXCords, iYCords)
					[ ] iFunctionResult = PASS
				[+] case "Property & Debt"
					[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer5.ListBox.Click(1,iXCords, iYCords)
					[ ] iFunctionResult = PASS
				[+] case "Savings Goal"
					[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer6.ListBox.Click(1,iXCords, iYCords)
					[ ] iFunctionResult = PASS
					[ ] 
				[+] case "Separate"
					[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer7.ListBox.Click(1,iXCords, iYCords)
					[ ] iFunctionResult = PASS
				[ ] 
			[ ] 
			[ ] CloseRegisterReminderInfoPopup()
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] 
	[+] public INTEGER AccountSelect(STRING AccountUsedPrimarily, STRING sAccountName)
		[+] // Variable Declaration
			[ ] INTEGER k, iRowCount
			[ ] STRING sActualName
			[ ] iFunctionResult = FAIL
		[+] do
			[ ] QuickenWindow.SetActive ()      
			[ ] ExpandAccountBar()
			[ ] 
			[ ] // This will click account on AccountBar
			[+] if(AccountUsedPrimarily == "Personal Transactions" || AccountUsedPrimarily == "Null")
				[+] if(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer4.ListBox.Exists(SHORT_SLEEP) == TRUE)
					[ ] iRowCount = QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer4.ListBox.GetItemCount()		// Get no. of accounts
					[+] for(k = 0; k<=iRowCount; k++)
						[ ] AccountBarSelect(ACCOUNT_INVESTING, k)			// Select Account from account bar
						[ ] sActualName = QuickenWindow.GetCaption()
						[ ] bMatch = MatchStr("*{sAccountName}*", sActualName)
						[+] if(bMatch == TRUE)
							[ ] iFunctionResult = PASS
							[ ] break
						[+] else
							[ ] continue
					[ ] 
				[ ] 
			[+] else if(AccountUsedPrimarily == "Business Transactions")
				[+] if(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer3.ListBox.Exists(SHORT_SLEEP) == TRUE)
					[ ] iRowCount = QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer3.ListBox.GetItemCount()		// Get no. of accounts
					[+] for(k = 0; k<=iRowCount; k++)
						[ ] AccountBarSelect(ACCOUNT_BUSINESS, k)			// Select Account from account bar
						[ ] sActualName = QuickenWindow.GetCaption()
						[ ] bMatch = MatchStr("*{sAccountName}*", sActualName)
						[+] if(bMatch == TRUE)
							[ ] iFunctionResult = PASS
							[ ] break
						[+] else
							[ ] continue
			[ ] 
			[+] else
				[ ] ReportStatus("Validate Account in Account bar", FAIL, "{AccountUsedPrimarily} is invalid")
				[ ] iFunctionResult = FAIL
				[ ] 
			[ ] 
		[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: ExpandAccountBar()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will fire a query sCommand.
		[ ] // and will reurn the result of the query and close the window.
		[ ] 
		[ ] //
		[ ] // PARAMETERS:		None
		[ ] //
		[ ] // RETURNS:			INTEGER	0	If AccountBar is expanded
		[ ] //									1	If AccountBar is not expanded
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	 Dec 10, 2010	Mamta Jain created
	[ ] // ==========================================================
	[+] public INTEGER ExpandAccountBar()
		[ ] 
		[+] do
			[ ] BOOLEAN  bState
			[ ] QuickenWindow.SetActive ()
			[ ] bState = QuickenMainWindow.QWNavigator.Accounts.IsEnabled()
			[+] if(bState == TRUE)
				[ ] QuickenMainWindow.QWNavigator.AccountExpand.Click()
				[ ] 
			[+] else
				[ ] // Account bar is already expanded and do nothing
				[ ] //print("Account Bar is already expanded")
			[ ] iFunctionResult = PASS
		[+] except
			[ ] iFunctionResult = FAIL
			[ ] ExceptLog()
		[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] // // ==========================================================
	[+] // // FUNCTION: CollapseAccountBar()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will collapse accound bar
		[ ] // //
		[ ] // // PARAMETERS:		None
		[ ] // //
		[ ] // // RETURNS:			INTEGER	PASS	If AccountBar is collapsed
		[ ] // //									FAIL 	If AccountBar is not collapsed
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //	 Dec 06, 2012	Udita Dube created
	[ ] // // ==========================================================
	[+] // public INTEGER CollapseAccountBar()
		[ ] // 
		[+] // do
			[ ] // BOOLEAN  bState
			[ ] // QuickenMainWindow.SetActive ()
			[ ] // bState = QuickenMainWindow.QWNavigator.Accounts.IsEnabled()
			[+] // if(bState == TRUE)
				[ ] // // Account bar is already collapsed and do nothing
				[ ] // //print("Account Bar is already collapsed")
			[+] // else
				[ ] // QuickenMainWindow.QWNavigator.AccountExpand.Click()
				[ ] // 
			[ ] // iFunctionResult = PASS
		[+] // except
			[ ] // iFunctionResult = FAIL
		[ ] // 
		[ ] // return iFunctionResult
	[ ] // 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: NavigateQuickenTab()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will select tab and sub tab as per the parameter passed.
		[ ] //
		[ ] // PARAMETERS:		STRING	 	sTab		Tab to select
		[ ] //						STRING 		sSubTab	 subTab (tabs inside the tab) to select
		[ ] //
		[ ] // RETURNS:			INTEGER		0		If tab is selected
		[ ] //										1		If tab is not selected
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	 Dec 22, 2010	Mamta Jain created
		[ ] //  	 Jan 10, 2011 Udita Dube updated (Addded sSubTab related code)
	[ ] // ==========================================================
	[+] public INTEGER NavigateQuickenTab(STRING sTab, STRING sSubTab optional)
		[ ] 
		[+] // Variable Declaration
			[ ] STRING sCaption
		[+] if(IsNULL(sSubTab))
			[ ] sSubTab=""
		[+] do
			[ ] 
			[ ] QuickenWindow.SetActive()
			[+] switch(sTab)
				[+] case "Home"
					[ ] QuickenMainWindow.QWNavigator.Home.DoubleClick ()
					[ ] 
					[+] switch(sSubTab)
						[+] case "Main View"
							[ ] QuickenMainWindow.QWNavigator.MainView.Click()
							[ ] 
						[+] default
							[+] if (sSubTab!="")
								[ ] LogError("Tab {sSubTab} is not found under {sTab}")
								[ ] break
								[ ] 
							[ ] 
				[+] case "Spending"
					[ ] QuickenMainWindow.QWNavigator.Spending.DoubleClick()
					[+] switch(sSubTab)
						[+] case "Transactions"
							[ ] QuickenMainWindow.QWNavigator.Transactions.Click()
						[+] default
							[+] if (sSubTab!="")
								[ ] LogError("Tab {sSubTab} is not found under {sTab}")
								[ ] break
								[ ] 
							[ ] 
					[ ] 
				[+] case "Bills"
					[ ] QuickenMainWindow.QWNavigator.Bills.DoubleClick()
					[ ] // QuickenMainWindow.QWNavigator.Bills.Click()
					[+] switch(sSubTab)
						[+] case "Online Bills"
							[ ] QuickenMainWindow.QWNavigator.OnlineBills.Click()
						[ ] 
						[+] case "Upcoming",""
							[ ] QuickenMainWindow.QWNavigator.Upcoming.Click()
							[ ] 
						[+] case "Projected Balances"
							[ ] QuickenMainWindow.QWNavigator.ProjectedBalances.Click()
							[ ] 
						[+] default
							[+] if (sSubTab!="")
								[ ] LogError("Tab {sSubTab} is not found under {sTab}")
								[ ] break
								[ ] 
						[ ] 
				[+] case "Planning"
					[ ] QuickenMainWindow.QWNavigator.Planning.DoubleClick ()
					[+] if(DlgBudgetMessageBox.Exists(3))
						[ ] DlgBudgetMessageBox.SetActive()
						[ ] DlgBudgetMessageBox.OKButton.Click()
						[ ] 
					[ ] 
					[+] switch(sSubTab)
						[+] case "Budget"
							[ ] QuickenMainWindow.QWNavigator.Budgets.Click()
							[+] if(DlgBudgetMessageBox.Exists(3))
								[ ] DlgBudgetMessageBox.SetActive()
								[ ] DlgBudgetMessageBox.OKButton.Click()
							[ ] 
						[+] case "Debt Reduction"
							[ ] QuickenMainWindow.QWNavigator.DebtReduction.Click()
						[+] case "Lifetime Planner"
							[ ] QuickenMainWindow.QWNavigator.LifetimePlanner.Click()
						[+] case "Tax Center"
							[ ] QuickenMainWindow.QWNavigator.TaxCenter.Click()
							[ ] 
						[+] case "Saving Goals"
							[ ] QuickenMainWindow.QWNavigator.SavingGoals.Click()
							[ ] QuickenMainWindow.QWNavigator.SavingGoals.Click()
						[ ] 
						[+] default
							[+] if (sSubTab!="")
								[ ] LogError("Tab {sSubTab} is not found under {sTab}")
								[ ] break
								[ ] 
							[ ] 
					[ ] 
				[+] case "Rental Property"
					[ ] QuickenMainWindow.QWNavigator.RentalProperty.DoubleClick ()
					[+] switch(sSubTab)
						[+] case "Rent Center"
							[ ] QuickenMainWindow.QWNavigator.RentCenter.DoubleClick()
						[+] case "Profit Loss"
							[ ] QuickenMainWindow.QWNavigator.ProfitLoss.DoubleClick()
						[+] case "Account Overview"
							[ ] QuickenMainWindow.QWNavigator.AccountOverview.DoubleClick()
						[+] case "Cash Flow"
							[ ] QuickenMainWindow.QWNavigator.CashFlow.Click()
						[+] default
							[+] if (sSubTab!="")
								[ ] LogError("Tab {sSubTab} is not found under {sTab}")
								[ ] break
								[ ] 
							[ ] 
						[ ] 
				[+] case "Investing"
					[ ] 
					[ ] QuickenMainWindow.QWNavigator.Investing.DoubleClick()
					[ ] sleep(2)
					[+] switch(sSubTab)
						[+] case "Portfolio"
							[ ] QuickenMainWindow.QWNavigator.Portfolio.DoubleClick()
							[ ] sleep(2)
						[+] case "Performance"
							[ ] QuickenMainWindow.QWNavigator.Performance.DoubleClick()
							[ ] sleep(2)
						[+] case "Allocations"
							[ ] QuickenMainWindow.QWNavigator.Allocations.DoubleClick()
							[ ] sleep(2)
						[+] default
							[+] if (sSubTab!="")
								[ ] LogError("Tab {sSubTab} is not found under {sTab}")
								[ ] break
								[ ] 
							[ ] 
						[ ] 
				[+] case "Property & Debt"
					[ ] QuickenMainWindow.QWNavigator.PropertyDebt.DoubleClick ()
					[+] switch(sSubTab)
						[+] case sTAB_NET_WORTH
							[ ] QuickenMainWindow.QWNavigator.NetWorth.DoubleClick()
						[+] case "Account Overview"
							[ ] QuickenMainWindow.QWNavigator.DebtAccountOverview.DoubleClick()
						[+] case "Debt"
							[ ] QuickenMainWindow.QWNavigator.Debt.DoubleClick()
						[+] default
							[+] if (sSubTab!="")
								[ ] LogError("Tab {sSubTab} is not found under {sTab}")
								[ ] break
								[ ] 
							[ ] 
				[+] case "Business"
					[ ] QuickenMainWindow.QWNavigator.Business.DoubleClick ()
					[ ] // QuickenMainWindow.QWNavigator.Business.Click ()
					[+] switch(sSubTab)
						[+] case "Profit Loss"
							[ ] QuickenMainWindow.QWNavigator.BusinessProfitLoss.Click()
							[ ] QuickenMainWindow.QWNavigator.BusinessProfitLoss.Click()
						[ ] 
						[+] case "Cash Flow"								// Added by Udita on 06 May 2013
							[ ] QuickenMainWindow.QWNavigator.CashFlow.Click()
							[ ] QuickenMainWindow.QWNavigator.CashFlow.Click()
						[ ] 
						[+] case "Account Overview"
							[ ] QuickenMainWindow.QWNavigator.AccountOverview.Click()
							[ ] QuickenMainWindow.QWNavigator.AccountOverview.Click()
						[ ] 
						[+] default
							[+] if (sSubTab!="")
								[ ] LogError("Tab {sSubTab} is not found under {sTab}")
								[ ] break
								[ ] 
				[+] case "Mobile Alerts"
					[ ] QuickenMainWindow.QWNavigator.MobileAlerts.DoubleClick ()
					[+] switch(sSubTab)
						[+] case "Quicken Mobile"
							[ ] QuickenMainWindow.QWNavigator.QuickenMobile.Click()
						[+] default
							[+] if (sSubTab!="")
								[ ] LogError("Tab {sSubTab} is not found under {sTab}")
								[ ] break
								[ ] 
				[ ] 
				[+] default
					[ ] iFunctionResult = FAIL
				[ ] 
				[ ] sleep(5)
			[+] if(QuickenWindow.Exists(2))
				[ ] QuickenWindow.SetActive()
				[ ] sCaption = QuickenWindow.GetCaption ()
				[+] if(sSubTab=="Budget")
					[ ] bMatch = MatchStr("*{sSubTab}*", sCaption)
					[+] if (bMatch == TRUE)
						[ ] iFunctionResult = PASS
					[+] else
						[ ] iFunctionResult = FAIL
						[ ] ReportStatus("Validate Window name", FAIL, "Actual - {sCaption} is not matching with Expected  - {sSubTab}")
					[ ] 
				[+] else if(sTab=="Mobile Alerts")  // Need to remove this code when QW-1482 is fixed
					[ ] iFunctionResult = PASS
					[ ] 
				[+] else
					[ ] sleep(2)
					[ ] bMatch = MatchStr("*{sTab}*", sCaption)
					[+] if (bMatch == TRUE)
						[ ] iFunctionResult = PASS
					[+] else
						[ ] iFunctionResult = FAIL
						[ ] ReportStatus("Validate Window name", FAIL, "Actual - {sCaption} is not matching with Expected  - {sTab}")
					[ ] 
			[+] else
				[ ] iFunctionResult = FAIL
				[ ] ReportStatus("Validate Quicken Window", FAIL, "Quicken is not available") 
				[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: ShowQuickenTab()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will Check whether tab (Planning) is checked or not: View Menu > Tabs to Show > Planning {any tab name}
		[ ] //
		[ ] // PARAMETERS:		STRING	 	sTab		Tab to show
		[ ] //
		[ ] // RETURNS:			INTEGER		PASS		If tab is selected
		[ ] //										FAIL		If tab is not selected
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //  	 May 03, 2013 Udita Dube created
	[ ] // ==========================================================
	[+] public INTEGER ShowQuickenTab(STRING sTab,BOOLEAN bShow)
		[+] do
			[ ] 
			[+] do
				[ ] QuickenWindow.SetActive()
				[ ] QuickenWindow.View.Click()
				[ ] QuickenWindow.View.TabsToShow.Click()
			[+] except
				[ ] QuickenWindow.SetActive()
				[ ] QuickenWindow.MainMenu.Select("/*View/Tabs to Sho_w*")
			[+] switch(sTab)
				[+] case sTAB_SPENDING
					[+] if(bShow==TRUE)
						[+] if(QuickenWindow.View.TabsToShow.Spending.IsChecked == FALSE)
							[ ] QuickenWindow.View.TabsToShow.Spending.Select()
							[ ] iFunctionResult = PASS
					[+] else
						[+] if(QuickenWindow.View.TabsToShow.Spending.IsChecked == TRUE)
							[ ] QuickenWindow.View.TabsToShow.Spending.Select()
							[ ] iFunctionResult = PASS
						[ ] 
				[+] case sTAB_BILL
					[+] if(bShow==TRUE)
						[+] if(QuickenWindow.View.TabsToShow.Bills.IsChecked == FALSE)
							[ ] QuickenWindow.View.TabsToShow.Bills.Select()
							[ ] iFunctionResult = PASS
					[+] else
						[+] if(QuickenWindow.View.TabsToShow.Bills.IsChecked == TRUE)
							[ ] QuickenWindow.View.TabsToShow.Bills.Select()
							[ ] iFunctionResult = PASS
				[+] case sTAB_PLANNING
					[+] if(bShow==TRUE)
						[+] if(QuickenWindow.View.TabsToShow.Planning.IsChecked == FALSE)
							[ ] QuickenWindow.View.TabsToShow.Planning.Select()
							[ ] iFunctionResult = PASS
					[+] else
						[+] if(QuickenWindow.View.TabsToShow.Planning.IsChecked == TRUE)
							[ ] QuickenWindow.View.TabsToShow.Planning.Select()
							[ ] iFunctionResult = PASS
					[ ] 
				[+] case sTAB_RENTAL_PROPERTY
					[+] if(bShow==TRUE)
						[+] if(QuickenWindow.View.TabsToShow.RentalProperty.IsChecked == FALSE)
							[ ] QuickenWindow.View.TabsToShow.RentalProperty.Select()
							[ ] iFunctionResult = PASS
					[+] else
						[+] if(QuickenWindow.View.TabsToShow.RentalProperty.IsChecked == TRUE)
							[ ] QuickenWindow.View.TabsToShow.RentalProperty.Select()
							[ ] iFunctionResult = PASS
				[+] case sTAB_INVESTING
					[ ] 
					[+] if(bShow==TRUE)
						[+] if(QuickenWindow.View.TabsToShow.Investing.IsChecked == FALSE)
							[ ] QuickenWindow.View.TabsToShow.Investing.Select()
							[ ] iFunctionResult = PASS
					[+] else
						[+] if(QuickenWindow.View.TabsToShow.Investing.IsChecked == TRUE)
							[ ] QuickenWindow.View.TabsToShow.Investing.Select()
							[ ] iFunctionResult = PASS
				[+] case sTAB_PROPERTY_DEBT
					[+] if(bShow==TRUE)
						[+] if(QuickenWindow.View.TabsToShow.PropertyDebt.IsChecked == FALSE)
							[ ] QuickenWindow.View.TabsToShow.PropertyDebt.Select()
							[ ] iFunctionResult = PASS
					[+] else
						[+] if(QuickenWindow.View.TabsToShow.PropertyDebt.IsChecked == TRUE)
							[ ] QuickenWindow.View.TabsToShow.PropertyDebt.Select()
							[ ] iFunctionResult = PASS
				[+] case sTAB_BUSINESS
					[+] if(bShow==TRUE)
						[+] if(QuickenWindow.View.TabsToShow.Business.IsChecked == FALSE)
							[ ] QuickenWindow.View.TabsToShow.Business.Select()
							[ ] iFunctionResult = PASS
					[+] else
						[+] if(QuickenWindow.View.TabsToShow.Business.IsChecked == TRUE)
							[ ] QuickenWindow.View.TabsToShow.Business.Select()
							[ ] iFunctionResult = PASS
				[+] case sTAB_MOBILE_ALERTS
					[+] if(bShow==TRUE)
						[+] if(QuickenWindow.View.TabsToShow.MobileAlerts.IsChecked == FALSE)
							[ ] QuickenWindow.View.TabsToShow.MobileAlerts.Select()
							[ ] iFunctionResult = PASS
					[+] else
						[+] if(QuickenWindow.View.TabsToShow.MobileAlerts.IsChecked == TRUE)
							[ ] QuickenWindow.View.TabsToShow.MobileAlerts.Select()
							[ ] iFunctionResult = PASS
				[+] case sTAB_TIPS_TUTORIALS
					[+] if(bShow==TRUE)
						[+] if(QuickenWindow.View.TabsToShow.TipsTutorials.IsChecked == FALSE)
							[ ] QuickenWindow.View.TabsToShow.TipsTutorials.Select()
							[ ] iFunctionResult = PASS
					[+] else
						[+] if(QuickenWindow.View.TabsToShow.TipsTutorials.IsChecked == TRUE)
							[ ] QuickenWindow.View.TabsToShow.TipsTutorials.Select()
							[ ] iFunctionResult = PASS
				[ ] 
				[+] default
					[ ] iFunctionResult = FAIL
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: NavigateQuickenTools()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will select the menuitem from the Tools menu as per input parameter.
		[ ] //
		[ ] // PARAMETERS:		STRING 		sOption	Menuitem that needs to be selected from Tools
		[ ] //
		[ ] // RETURNS:			INTEGER		0		As per input, return 0 if selected menu is opened successfully
		[ ] //										1		If any error occured during opening
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	 Dec 23, 2010	Mamta Jain created
	[ ] // ==========================================================
	[+] public INTEGER NavigateQuickenTools(STRING sOption)
		[+] do
			[ ] QuickenWindow.SetActive ()
			[ ] 
			[+] switch (sOption)
				[+] case TOOLS_ACCOUNT_LIST
					[ ] QuickenWindow.Tools.Click()
					[ ] QuickenWindow.Tools.AccountList.Select()
					[ ] iFunctionResult = PASS
				[ ] 
				[+] case TOOLS_CATEGORY_LIST
					[ ] QuickenWindow.Tools.Click()
					[ ] QuickenWindow.Tools.CategoryList.Select()
					[ ] iFunctionResult = PASS
				[ ] 
				[+] case TOOLS_MEMORIZE_PAYEE_LIST
					[ ] QuickenWindow.Tools.Click()
					[ ] QuickenWindow.Tools.MemorizedPayeeList.Select()
					[ ] iFunctionResult = PASS
				[ ] 
				[+] case TOOLS_ONE_STEP_UPDATE
					[ ] QuickenWindow.Tools.Click()
					[ ] QuickenWindow.Tools.OneStepUpdate.Select()
					[ ] iFunctionResult = PASS
					[ ] 
				[ ] 
				[+] case  MANAGE_BILL_AND_INCOME_REMINDER
					[ ] QuickenWindow.Bills.Click()
					[ ] QuickenWindow.Bills.ManageBillIncomeReminders.Select()
					[ ] iFunctionResult = PASS
					[ ] 
				[ ] 
				[+] case  TOOLS_CURRENCY_LIST
					[ ] QuickenWindow.Tools.click()
					[ ] QuickenWindow.Tools.CurrencyList.Select()
					[ ] iFunctionResult = PASS
				[ ] 
				[+] default
					[ ] iFunctionResult = FAIL
				[ ] 
			[ ] sleep(SHORT_SLEEP)
		[+] except
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: SetViewMode()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will set the supplied Menu Style.
		[ ] // If same menu style is already active then it will not do anything.
		[ ] //
		[ ] // PARAMETERS:		STRING		sMenu		Standard menu or Classic menu 	
		[ ] //
		[ ] // RETURNS:			INTEGER		0		If menu is selected
		[ ] //										1		If menu is not selected
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	 Dec 22, 2010	Mamta Jain created
	[ ] // ==========================================================
	[+] public INTEGER SetViewMode(STRING sMenu)
		[+] do
			[ ] BOOLEAN bCheckStatus
			[ ] QuickenWindow.SetActive()
			[ ] QuickenWindow.View.Click()
			[+] switch(sMenu)
				[+] case VIEW_STANDARD_MENU
					[ ] QuickenWindow.View.Click()
					[+] if (QuickenWindow.View.StandardMenusRecommended.GetProperty("IsChecked") == FALSE)
						[ ] QuickenWindow.View.Click()
						[ ] QuickenWindow.View.StandardMenusRecommended.Select()
						[ ] iFunctionResult = PASS
					[+] else
						[ ] iFunctionResult = PASS
				[ ] 
				[+] case VIEW_CLASSIC_MENU
					[ ] QuickenWindow.View.Click()
					[+] if (QuickenWindow.View.ClassicMenus.GetProperty("IsChecked")  == FALSE)
						[ ] QuickenWindow.View.Click()
						[ ] QuickenWindow.View.ClassicMenus.Select()
						[ ] iFunctionResult = PASS
					[+] else
						[ ] iFunctionResult = PASS
					[ ] 
				[ ] 
				[+] default
					[ ] iFunctionResult = FAIL
			[ ] QuickenWindow.TypeKeys(KEY_ESC)
		[+] except
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: UsePopupRegister()
		[ ] // 
		[ ] // DESCRIPTION:
		[ ] // This function will turn on or off Popup register mode as per input parameter passed.
		[ ] // 
		[ ] // PARAMETERS:		STRING 		sSwitch	ON or OFF values
		[ ] // 
		[ ] // RETURNS:			INTEGER		0		As per input, return 0 if switching is done successfully 
		[ ] // 1		If any error occured during switching
		[ ] // 
		[ ] // REVISION HISTORY:
		[ ] // Dec 22, 2010	Mamta Jain created
	[ ] // ==========================================================
	[+] public INTEGER UsePopupRegister(STRING sSwitch)
		[+] do
			[ ] BOOLEAN bCheckStatus
			[ ] QuickenWindow.SetActive ()
			[ ] QuickenWindow.View.Click()
			[ ] sleep(1)
			[+] switch(sSwitch)
				[+] case "ON"
					[ ] bCheckStatus = QuickenWindow.View.UsePopUpRegisters.GetProperty("IsChecked")
					[+] if (bCheckStatus == FALSE)
						[ ] QuickenWindow.View.UsePopUpRegisters.Select()
						[ ] iFunctionResult = PASS
					[+] else
						[ ] iFunctionResult = PASS
					[ ] 
				[+] case "OFF"
					[ ] bCheckStatus = QuickenWindow.View.UsePopUpRegisters.GetProperty("IsChecked")
					[+] if (bCheckStatus == TRUE)
						[ ] QuickenWindow.View.UsePopUpRegisters.Select()
						[ ] iFunctionResult = PASS
					[+] else
						[ ] iFunctionResult = PASS
				[ ] 
				[+] default
					[ ] iFunctionResult = FAIL
			[ ] QuickenWindow.TypeKeys(KEY_ESC)
		[+] except
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[+] // public INTEGER UsePopupRegister(STRING sSwitch)
		[+] // do
			[ ] // BOOLEAN bCheckStatus
			[ ] // INTEGER iFunctionResult
			[ ] // QuickenWindow.SetActive ()
			[ ] // QuickenWindow.View.Click()
			[ ] // bCheckStatus = QuickenWindow.View.UsePopUpRegisters.GetProperty("IsChecked")
			[ ] // 
			[+] // switch(sSwitch)
				[+] // case "ON"
					[+] // if (bCheckStatus == FALSE)
						[ ] // QuickenWindow.View.UsePopUpRegisters.Select()
						[ ] // iFunctionResult = PASS
					[+] // else
						[ ] // iFunctionResult = PASS
					[ ] // 
				[+] // case "OFF"
					[+] // if (bCheckStatus == TRUE)
						[ ] // QuickenWindow.View.UsePopUpRegisters.Select()
						[ ] // iFunctionResult = PASS
					[+] // else
						[ ] // iFunctionResult = PASS
				[ ] // 
				[+] // default
					[ ] // iFunctionResult = FAIL
			[ ] // QuickenWindow.TypeKeys(KEY_ESC)
		[+] // except
			[ ] // iFunctionResult = FAIL
		[ ] // return iFunctionResult
	[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: ShowToolBar()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will turn on or off Show tool bar menuitem as per input parameter passed.
		[ ] //
		[ ] // PARAMETERS:		STRING 		sShow		ON/ OFF  values
		[ ] //
		[ ] // RETURNS:			INTEGER		0		As per input, return 0 if switching is done successfully 
		[ ] //										1		If any error occured during switching
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	 Dec 23, 2010	Mamta Jain created
	[ ] // ==========================================================
	[+] public INTEGER ShowToolBar(STRING sShow)
		[+] do
			[ ] BOOLEAN bCheck, bEnable
			[ ] QuickenWindow.SetActive ()
			[ ] QuickenWindow.View.Click()
			[+] switch (sShow)
				[+] case "ON"
					[ ] 
					[+] if (QuickenWindow.View.ShowToolBar.GetProperty("IsChecked") == FALSE)
						[ ] QuickenWindow.View.ShowToolBar.Select()
					[ ] iFunctionResult = PASS
				[ ] 
				[+] case "OFF"
					[ ] 
					[+] if (QuickenWindow.View.ShowToolBar.GetProperty("IsChecked") == TRUE)
						[ ] QuickenWindow.View.ShowToolBar.Select()
					[ ] iFunctionResult = PASS
				[ ] 
				[+] default
					[ ] iFunctionResult = FAIL
			[ ] QuickenWindow.TypeKeys(KEY_ESC)
			[ ] QuickenWindow.SetActive()
		[+] except
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] //
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: ResetAlerts()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will turn will rest Quicken Warnings
		[ ] //
		[ ] //
		[ ] // RETURNS:			INTEGER		0		 Quicken Warnings are reset successfully 
		[ ] //										1		If Quicken Warnings couldn't be reset 
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // Nov 27, 2014	Mamta Jain created
	[ ] // ==========================================================
	[+] public INTEGER ResetAlerts()
		[ ] INTEGER iResult
		[ ] STRING sType="Alerts"
		[+] do
			[ ] 
			[ ] iResult=SelectPreferenceType(sType)
			[+] if (iResult==PASS)
				[ ] Preferences.SetActive()
				[ ] Preferences.ResetQuickenWarnings.Click()
				[ ] Preferences.OK.Click()
				[ ] WaitForState(Preferences,FALSE,5)
				[ ] iFunctionResult = PASS
				[ ] 
			[+] else
				[ ] ReportStatus("Verify preference option: {sType} selected",FAIL," Preference option: {sType} couldn't be selected")
				[ ] iFunctionResult = FAIL
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] //
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: AccountBarSelectionForPerformanceLargeFile()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will select different account type
		[ ] //
		[ ] // PARAMETERS:		ANYTYPE 	sWindowType			MDI or Popup
		[ ] //						
		[ ] //						
		[ ] //
		[ ] // RETURNS:			INTEGER	PASS			 if requested action is performed successfully
		[ ] //									FAIL  			 if any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //   Feb 10, 2011  Puja Verma  Created
	[ ] // ==========================================================
	[+] public INTEGER AccountBarSelectForPerformanceLargeFile(STRING sAccountType,  INTEGER iRowNum)
		[+] // Variable declaration
			[ ] INTEGER iCounter
			[ ] INTEGER iXCords,iYCords
			[ ] iXCords = 38
			[ ] iYCords = 5
		[ ] 
		[+] do
			[ ] QuickenWindow.SetActive ()      
			[ ] ExpandAccountBar()
			[ ] 
			[+] for ( iCounter = 1; iCounter<iRowNum; iCounter++)
				[ ] iYCords = iYCords + 21
				[ ] 
			[+] switch(sAccountType)
				[+] case "Banking"
					[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer1.ListBox.Click(1,iXCords, iYCords)
					[ ] iFunctionResult = PASS
				[+] case "Investing"
					[ ] Sleep(SHORT_SLEEP)
					[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer4.ListBox.Click(1,iXCords, iYCords)
					[ ] iFunctionResult = PASS
				[+] case "Property"
					[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer5.ListBox.Click(1,iXCords, iYCords)
					[ ] iFunctionResult = PASS
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: EditButtonFromAccountList()
		[ ] //
		[ ] // DESCRIPTION:		This function will click on Edit button of specified account from Account List
		[ ] // 
		[ ] //
		[ ] // PARAMETERS:		STRING 	sWindowType			                  MDI or Popup
		[ ] //						STRING 	sSearchString		                        Search string in transaction
		[ ] //
		[ ] //
		[ ] //
		[ ] // RETURNS:			INTEGER	PASS  If Edit button of specified account is clicked
		[ ] //									FAIL    If any error occurs 
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // Feb 27, 2014	Dean Paes created
	[ ] // ==========================================================
	[+] public INTEGER EditButtonFromAccountList(STRING sAccountName,STRING sAccountListTab optional)
		[ ] 
		[ ] 
		[+] //Variable Declaration
			[ ] STRING sHandle,sActual
			[ ] BOOLEAN bMatch1,bMatch2
			[ ] STRING sEditText="Edit"
			[ ] 
			[ ] INTEGER iOccurence=0
			[ ] INTEGER iCount
			[ ] 
			[ ] 
			[ ] 
		[ ] 
		[ ] 
		[+] do
			[ ] 
			[+] if(AccountList.Exists(5))
				[ ] 
				[ ] AccountList.SetActive()
				[ ] 
				[+] if(sAccountListTab!=NULL)
					[ ] 
					[+] switch(sAccountListTab)
						[ ] 
						[+] case "PersonalBanking"
							[ ] AccountList.QWinChild.PersonalBanking.Click()
							[ ] 
							[ ] 
							[ ] 
						[+] case "PersonalInvestments"
							[ ] AccountList.QWinChild.PersonalInvestments.Click()
							[ ] 
							[ ] 
							[ ] 
						[+] case "PersonalNetWorth"
							[ ] AccountList.QWinChild.PersonalNetWorth.Click()
							[ ] 
							[ ] 
							[ ] 
						[+] case "BusinessBanking"
							[ ] AccountList.QWinChild.BusinessBanking.Click()
							[ ] 
							[ ] 
							[ ] 
						[+] case "BusinessInvestments"
							[ ] AccountList.QWinChild.BusinessInvestments.Click()
							[ ] 
							[ ] 
							[ ] 
						[+] case "BusinessNetWorth"
							[ ] AccountList.QWinChild.BusinessNetWorth.Click()
							[ ] 
							[ ] 
							[ ] 
						[+] case "RentalProperty"
							[ ] AccountList.QWinChild.RentalProperty.Click()
							[ ] 
							[ ] 
							[ ] 
						[+] case "AllAccounts"
							[ ] AccountList.QWinChild.AllAccounts.Click()
							[ ] 
							[ ] 
							[ ] 
						[ ] 
						[ ] 
						[ ] 
					[ ] 
					[ ] 
				[ ] 
				[ ] sHandle = Str(AccountList.QWinChild.Order.ListBox.GetHandle())
				[+] for(iCount=1;iCount<=AccountList.QWinChild.Order.ListBox.GetItemCount()*4;iCount++)
					[ ] 
					[ ] 
					[ ] sActual = QwAutoExecuteCommand("LISTBOX_GETFULLROW", sHandle, "{iCount}")
					[ ] 
					[ ] bMatch1=MatchStr("*{sEditText}*",sActual)
					[+] if(bMatch1==TRUE)
						[ ] iOccurence++
						[ ] 
						[ ] bMatch2=MatchStr("*{sAccountName}*",sActual)
						[+] if(bMatch2==TRUE)
							[ ] AccountList.QWinChild.Order.ListBox.TextClick(sEditText,iOccurence)
							[ ] iFunctionResult=PASS
							[ ] break
						[ ] 
					[ ] 
				[ ] 
				[ ] 
				[+] if(bMatch2==FALSE)
					[ ] ReportStatus("Verify if Account exists in Account List",FAIL,"Account not found in Account List")
					[ ] iFunctionResult=FAIL
				[ ] 
			[+] else
				[ ] ReportStatus("Verify Account List Exists",FAIL,"Account List does not Exist" )
				[ ] 
			[ ] 
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult=FAIL
			[ ] 
			[ ] 
			[ ] 
		[ ] return iFunctionResult
		[ ] 
		[ ] 
		[ ] 
		[ ] 
		[ ] 
		[ ] 
		[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: SetMultiCurrencySupportMode()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will select required Preference Type and select Multicurrency support mode
		[ ] //
		[ ] // PARAMETERS:		STRING 	sPreferenceType e.g. Mobile & Alerts
		[ ] //
		[ ] // RETURNS:			INTEGER	PASS	If correct Preference Type is selected
		[ ] //									FAIL 	If any error
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	 Jan 14,2014                  Anagha created
	[ ] // ==========================================================
	[+] public INTEGER SetMultiCurrencySupportMode(STRING sMode)
		[ ] 
		[+] // Variable declaration
			[ ] INTEGER iSelect
			[ ] STRING sPreferenceType
			[ ] sPreferenceType="Calendar and currency"
		[ ] 
		[+] do
			[ ] QuickenWindow.SetActive ()
			[ ] // Navigate to Edit > Preferences > Calendar and currency
			[ ] iSelect=SelectPreferenceType(sPreferenceType)
			[ ] ReportStatus("Select Preference type",iSelect,"Preference type {sPreferenceType} is selected")
			[ ] 
			[ ] Waitforstate(Preferences,TRUE,SHORT_SLEEP)
			[ ] Preferences.SetActive()
			[ ] 
			[+] if(Preferences.MulticurrencySupport.Exists(SHORT_SLEEP))
				[ ] // Check the checkbox if it is unchecked
				[+] if(Preferences.MulticurrencySupport.IsChecked())
					[+] if(sMode=="ON")
						[ ] ReportStatus("MulticurrencySupport check", PASS, "MulticurrencySupport Checkbox is checked") 
						[ ] iFunctionResult=PASS
					[+] else if (sMode=="OFF")
						[ ] Preferences.MulticurrencySupport.uncheck()
						[ ] ReportStatus("MulticurrencySupport Uncheck", PASS, "MulticurrencySupport Checkbox is unchecked") 
						[ ] iFunctionResult=PASS
					[+] else
						[ ] ReportStatus("'Verify sMode '", FAIL, "Value of sMode is incorrect, it should be ON or OFF") 
						[ ] iFunctionResult=FAIL
					[ ] 
				[+] else
					[+] if(sMode=="ON")
						[ ] Preferences.MulticurrencySupport.Check()
						[ ] ReportStatus("MulticurrencySupport Uncheck'", PASS, "MulticurrencySupport Checkbox is checked")
						[ ] iFunctionResult=PASS 
					[+] else if (sMode=="OFF")
						[ ] ReportStatus("MulticurrencySupport check'", PASS, "MulticurrencySupport Checkbox is unchecked") 
						[ ] iFunctionResult=PASS
					[+] else
						[ ] ReportStatus("'Verify sMode '", FAIL, "Value of sMode is incorrect, it should be ON or OFF")
						[ ] iFunctionResult=FAIL 
					[ ] 
					[ ] 
				[ ] Preferences.OK.Click()
			[+] else
				[ ] ReportStatus("Validate checkbox for MulticurrencySupport entry'", FAIL, "Checkbox is not available") 
				[ ] iFunctionResult=FAIL
				[ ] 
			[ ] 
			[ ] 
		[+] except
			[ ] iFunctionResult = FAIL
			[ ] ExceptLog()
		[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: GetAccountNamesAndBalances()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function reads all the account names and their balances from account bar.
		[ ] // And, returns them in a two-dimensional array.
		[ ] //
		[ ] // PARAMETERS:		NONE
		[ ] //
		[ ] // RETURNS:			ARRAY OF ANYTYPE	A two-dimensional array 
		[ ] //												consisting account names and their balances.
		[ ] // REVISION HISTORY:
		[ ] //	Jan 28, 2014	Govind Babhulgaonkar	Created
	[ ] // ==========================================================
	[+] public ARRAY OF ANYTYPE GetAccountNamesAndBalances()
		[ ] STRING sHandle,sActual,sInputString
		[ ] INTEGER i,iLength,iCount
		[ ] STRING sDelim = "@"
		[ ] STRING sAcctNameString, sAcctNameActual, sBalanceActual
		[ ] INTEGER iNoOfAccounts = 0
		[ ] INTEGER j = 1
		[ ] ARRAY[10][2] OF STRING AcctNameBalArray
		[+] do
			[ ] iNoOfAccounts = GetNoOfAccountsOnAccountBar()
			[ ] ArrayResize (AcctNameBalArray, iNoOfAccounts)
			[ ] QuickenWindow.SetActive()
			[ ] sHandle = Str(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer1.ListBox.GetHandle())
			[ ] iCount=QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer1.ListBox.GetItemCount()
			[+] for (i=0; i<=iCount; i++)
				[ ] sActual= QwAutoExecuteCommand("LISTBOX_GETFULLROW", sHandle,Str(i))
				[ ] sAcctNameString = GetField (sActual, sDelim, 2)
				[ ] sBalanceActual = GetField (sActual, sDelim, 3)
				[ ] iLength = Len (sAcctNameString)
				[ ] sAcctNameActual = SubStr (sAcctNameString, 15, (iLength - 18))
				[+] if (iLength != 0)
					[ ] AcctNameBalArray[j][1] = sAcctNameActual
					[ ] AcctNameBalArray[j][2] = sBalanceActual
					[ ] j++
				[ ] //print(SplitString (sAcctNameString, sDelim))
			[ ] //print (AcctNameBalArray)
		[+] except
			[ ] ExceptLog()
		[+] return AcctNameBalArray
			[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: GetNoOfAccountsOnAccountBar()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function reads the number of accounts on the account bar.
		[ ] //
		[ ] // PARAMETERS:		NONE
		[ ] //
		[ ] // RETURNS:			INTEGER	Number of accounts
		[ ] //												
		[ ] // REVISION HISTORY:
		[ ] //	Jan 28, 2014	Govind Babhulgaonkar	Created
		[ ] //     Jul 29,2014   Udita Dube  Modified (updated it to cover all account types)
	[ ] // ==========================================================
	[+] public INTEGER GetNoOfAccountsOnAccountBar(STRING sAccountType optional)
		[ ] STRING sHandle,sActual,sAcctNameString
		[ ] INTEGER i,iLength,iCount
		[ ] INTEGER iNoOfAccounts = 0
		[ ] STRING sDelim = "@"
		[+] if(IsNULL(sAccountType))
			[ ] sAccountType=ACCOUNT_BANKING
		[ ] 
		[+] do
			[ ] QuickenWindow.SetActive()
			[ ] 
			[+] switch(sAccountType)
				[+] case ACCOUNT_BANKING
					[+] if(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer1.ListBox.Exists(2))
						[ ] sHandle = Str(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer1.ListBox.GetHandle())
						[ ] iCount=QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer1.ListBox.GetItemCount()
					[+] else
						[ ] iNoOfAccounts=0
						[ ] goto RESULT
				[ ] 
				[+] case ACCOUNT_RENTALPROPERTY
					[+] if(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer2.ListBox.Exists(2))
						[ ] sHandle = Str(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer2.ListBox.GetHandle())
						[ ] iCount=QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer2.ListBox.GetItemCount()
					[+] else
						[ ] iNoOfAccounts=0
						[ ] goto RESULT
						[ ] 
				[+] case ACCOUNT_BUSINESS
					[+] if(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer3.ListBox.Exists(2))
						[ ] sHandle = Str(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer3.ListBox.GetHandle())
						[ ] iCount=QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer3.ListBox.GetItemCount()
					[+] else
						[ ] iNoOfAccounts=0
						[ ] goto RESULT
						[ ] 
				[ ] 
				[+] case ACCOUNT_INVESTING
					[+] if(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer4.ListBox.Exists(2))
						[ ] sHandle = Str(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer4.ListBox.GetHandle())
						[ ] iCount=QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer4.ListBox.GetItemCount()
					[+] else
						[ ] iNoOfAccounts=0
						[ ] goto RESULT
						[ ] 
				[ ] 
				[+] case ACCOUNT_PROPERTYDEBT
					[+] if(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer5.ListBox.Exists(2))
						[ ] sHandle = Str(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer5.ListBox.GetHandle())
						[ ] iCount=QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer5.ListBox.GetItemCount()
					[+] else
						[ ] iNoOfAccounts=0
						[ ] goto RESULT
						[ ] 
				[ ] 
				[+] case ACCOUNT_SAVINGGOALS
					[+] if(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer6.ListBox.Exists(2))
						[ ] sHandle = Str(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer6.ListBox.GetHandle())
						[ ] iCount=QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer6.ListBox.GetItemCount()
					[+] else
						[ ] iNoOfAccounts=0
						[ ] goto RESULT
						[ ] 
				[ ] 
				[+] case ACCOUNT_SEPARATE
					[+] if(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer7.ListBox.Exists(2))
						[ ] sHandle = Str(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer7.ListBox.GetHandle())
						[ ] iCount=QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer7.ListBox.GetItemCount()
					[+] else
						[ ] iNoOfAccounts=0
						[ ] goto RESULT
						[ ] 
				[ ] 
				[+] case ACCOUNT_BUSINESS_BANKING
					[+] if(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer3.ListBox.Exists(2))
						[ ] sHandle = Str(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer3.ListBox.GetHandle())
						[ ] iCount=QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer3.ListBox.GetItemCount()
					[+] else
						[ ] iNoOfAccounts=0
						[ ] goto RESULT
						[ ] 
			[ ] 
			[+] for (i=0; i<iCount; i++)
				[ ] sActual= QwAutoExecuteCommand("LISTBOX_GETFULLROW", sHandle,Str(i))
				[ ] //ListAppend(lsRawList, sActual)
				[ ] sAcctNameString = GetField (sActual, sDelim, 2)
				[ ] iLength = Len (sAcctNameString)
				[+] if (iLength != 0)
					[ ] iNoOfAccounts++
			[ ] 
			[ ] RESULT:
			[ ] ReportStatus("Get the number of accounts in Account Bar", PASS, "Found {iNoOfAccounts} {sAccountType} accounts in Account bar")
			[ ] //print ("Here is the raw list : {lsRawList}")
			[ ] 
		[+] except
			[ ] Exceptlog()
			[ ] iNoOfAccounts=FAIL
		[ ] return iNoOfAccounts
		[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: GetBalanceForAnAccount()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function reads the balance from account bar for the requested account name.
		[ ] //
		[ ] // PARAMETERS:		STRING		Name of the account
		[ ] //
		[ ] // RETURNS:			STRING		Balance amount for the account (as string)
		[ ] //												
		[ ] // REVISION HISTORY:
		[ ] //	Jan 28, 2014	Govind Babhulgaonkar	Created
	[ ] // ==========================================================
	[+] public STRING GetBalanceForAnAccount(STRING sAccountName)
		[ ] STRING sBalanceAmount
		[ ] ANYTYPE saAccountsAndbalances[][]
		[ ] INTEGER iPos, iArraySize, i, iFind
		[ ] 
		[+] do
			[ ] saAccountsAndbalances = GetAccountNamesAndBalances()
			[ ] print(saAccountsAndbalances)
			[ ] iArraySize = ArraySize (saAccountsAndbalances) 
			[ ] print("Array size is : {iArraySize}")
			[+] for (i=1; i<=iArraySize; i++)
				[ ] iFind = ArrayFind (saAccountsAndbalances[i], sAccountName)
				[+] if (iFind != 0)
					[ ] iPos = i
			[+] if (iPos != 0)
				[ ] ReportStatus("Get the account balance from Account Bar", PASS, "Found account : '{sAccountName}' at position : '{iPos}'")
				[ ] sBalanceAmount = saAccountsAndbalances[iPos][2]
				[ ] ReportStatus("Get the account balance from Account Bar", PASS, "Balance for Account : '{sAccountName}' is : '{sBalanceAmount}'")
			[+] else
				[ ] ReportStatus("Get the account balance from Account Bar", FAIL, "Faied to find the account in account bar.")
				[ ] sBalanceAmount = "0"
		[+] except
			[ ] Exceptlog()
		[ ] return sBalanceAmount
		[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: TurnONShowCentsInAccountBarPreference()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function turns ON the 'Show Cents in Account Bar balances' preference
		[ ] //
		[ ] // PARAMETERS:		NONE
		[ ] //
		[ ] // RETURNS:			INTEGER	PASS	If 'Show Cents in Account Bar balances' preference 
		[ ] //											is turned ON successfully.
		[ ] //									FAIL  	if any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	Feb 17, 2014	Govind Babhulgaonkar	Created
	[ ] // ==========================================================
	[+] public INTEGER TurnONShowCentsInAccountBarPreference()
		[ ] 
		[ ] BOOLEAN bIsChecked = FALSE
		[ ] iFunctionResult=FAIL
		[+] do
			[+] if (QuickenWindow.Exists(5))
				[ ] QuickenWindow.SetActive()
				[ ] //----Verify the preference to show the cents in Account Bar is turned ON----
				[ ] QuickenWindow.Edit.Click()
				[ ] QuickenWindow.Edit.Preferences.Select()
				[+] if (Preferences.Exists(5))
					[ ] Preferences.SelectPreferenceType1.ListBox.Select(2)
					[ ] bIsChecked = Preferences.ShowCentsInAccountBarBalanceCheckBox.GetState()
					[+] if (bIsChecked == TRUE)
						[ ] ReportStatus("Turn ON the 'Show Cents in Account Bar balances' preference", PASS, "The 'Show Cents in Account Bar balances' preference check box is already checked")
						[ ] iFunctionResult=PASS
					[+] else
						[ ] Preferences.ShowCentsInAccountBarBalanceCheckBox.Check()
						[ ] ReportStatus("Turn ON the 'Show Cents in Account Bar balances' preference", PASS, "The 'Show Cents in Account Bar balances' preference check box is NOW enabled")
						[ ] iFunctionResult=PASS
					[ ] Preferences.OK.Click()
					[ ] WaitForState(Preferences,FALSE,5)
				[+] else
					[ ] ReportStatus("Verify Preferences window is present", FAIL, "Preferences window not found")
			[+] else
				[ ] ReportStatus("Validate Quicken Window", FAIL, "Quicken is not available") 
		[+] except
			[ ] Exceptlog()
			[ ] iFunctionResult=FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: VerifyContextMenuItemOnAccountBar()
		[ ] //
		[ ] // DESCRIPTION:		This function will right click on the account bar and verify if a given context menu is available
		[ ] // 
		[ ] //
		[ ] // PARAMETERS:		STRING 	sMenuItem			                  Menu Item in the context menu 
		[ ] //
		[ ] //
		[ ] //
		[ ] // RETURNS:			INTEGER	PASS  If context menu is available
		[ ] //									FAIL    If any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // May 12, 2014	Jayashree Nagaraja created
	[ ] // ==========================================================
	[+] public INTEGER VerifyContextMenuItemOnAccountBar(STRING sMenuItem)
		[ ] 
		[ ] 
		[+] //Variable Declaration
			[ ] STRING sActualItem
			[ ] 
		[ ] 
		[+] do
			[ ] 
			[ ] QuickenWindow.SetActive()
			[ ] NavigateQuickenTab(sTAB_HOME)
			[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.Click(2)
			[ ] sleep(3)
			[ ] 
			[ ] //Get the MenuItem caption from the context menu
			[+] switch(sMenuItem)
				[+] case "Show Current Balance in Account Bar"
					[ ] sActualItem = QuickenMainWindow.QWNavigator.CurrentBalance.GetCaption()
					[ ] print (sActualItem)
					[ ] //QuickenMainWindow.QWNavigator.CurrentBalance.Click()
					[ ] 
				[+] case "Show Ending Balance in Account Bar"
					[ ] sActualItem = QuickenMainWindow.QWNavigator.EndingBalance.GetCaption()
					[ ] print (sActualItem)
					[ ] //QuickenMainWindow.QWNavigator.EndingBalance.Click()
					[ ] 
				[+] case "Show Savings Goal transactions in register and reports"
					[ ] sActualItem = QuickenMainWindow.QWNavigator.SavingsGoalRegisterAndReports.GetCaption()
				[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.Click(1,26,285)
			[ ] bMatch = MatchStr("*{sActualItem}*" , sMenuItem)
			[+] if (bMatch ==TRUE)
				[ ] iFunctionResult = PASS
			[+] else
				[ ] iFunctionResult = FAIL
		[ ] 
		[+] except
			[ ] Exceptlog()
			[ ] iFunctionResult=FAIL
			[ ] 
		[ ] sleep(2)
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: UpdateNow()
		[ ] //
		[ ] // DESCRIPTION:		This function will click on Update Now on One step update window (Used in IUS script)
		[ ] // 
		[ ] //
		[ ] // PARAMETERS:		
		[ ] //
		[ ] //
		[ ] //
		[ ] // RETURNS:			INTEGER	PASS  
		[ ] //									FAIL   
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // Nov 20, 2014	Udita Dube created
	[ ] // ==========================================================
	[+] public INTEGER UpdateNow()
		[ ] 
		[ ] 
		[+] ////Variable declaration
			[ ] INTEGER iNavigate
			[ ] 
		[+] do
			[ ] 
			[ ] iNavigate = NavigateQuickenTools(TOOLS_ONE_STEP_UPDATE)
			[ ] 
			[+] if(iNavigate == PASS)
				[+] if(OneStepUpdate.Exists(800))
					[ ] OneStepUpdate.SetActive ()
					[ ] OneStepUpdate.UpdateNow.Click ()	
					[ ] WaitForState(OneStepUpdate, false , 200)
					[+] if(OneStepUpdateSummary.Exists(200))
						[ ] OneStepUpdateSummary.SetActive()
						[ ] OneStepUpdateSummary.Close.Click ()
						[ ] ReportStatus("Verify OSU after registering the datafile ",PASS, " OSU was successful after registering the datafile")
						[ ] iFunctionResult=PASS
					[+] else
						[ ] ReportStatus("Verify OSU after registering the datafile ",FAIL, " OSU after registering the datafile didn't succeed")
						[ ] iFunctionResult=FAIL
					[ ] 
				[+] else
					[ ] ReportStatus("OneStepUpdate ",FAIL, "OneStepUpdate window is not launched")
					[ ] iFunctionResult=FAIL
				[ ] 
			[+] else
				[ ] ReportStatus("Validate Quotes down loaded ",FAIL, "Quotes down updated unsucesfull")
				[ ] iFunctionResult=FAIL
			[ ] 
		[+] except
			[ ] Exceptlog()
			[ ] iFunctionResult=FAIL
			[ ] 
		[ ] sleep(2)
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] 
[ ] // 
[+] // //********************** Accounts Related Functions*************************************************************
	[ ] // 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: SelectAccountFromAccountBar()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will close a perticular account
		[ ] //
		[ ] // 			
		[ ] //PARAMETERS:			STRING      sAccountName		            Name of account to be searched in Account Bar
		[ ] //							STRING  	sAccountType		            E.g. Banking,Property & Debt
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If Account register is opened
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // Feb 7 , 2013   Dean Paes created.
	[ ] // ==========================================================
	[+] public INTEGER SelectAccountFromAccountBar(STRING sAccountName,STRING sAccountType)
		[ ] 
		[ ] 
		[+] //Variable Declaration
			[ ] STRING sHandle,sActual
			[ ] BOOLEAN bPattern
			[ ] INTEGER iRow,iCount,i
			[ ] INTEGER iXCords=38
			[ ] INTEGER iYCords=5
			[ ] STRING sPattern="^^@@@"
			[ ] INTEGER iIncrement1=21  //Increment for Account
			[ ] INTEGER iIncrement2=1   //Increment for Pattern
			[ ] INTEGER iDecriment=15
			[ ] INTEGER iAccountNotFound
			[ ] 
		[ ] 
		[+] do
			[ ] 
			[ ] QuickenWindow.SetActive()
			[ ] 
			[ ] 
			[ ] //Get Handle and List count from specific account type on Account Bar
			[+] switch(sAccountType)
				[+] case "Banking"
					[ ] sHandle = Str(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer1.ListBox.GetHandle())
					[ ] iCount=QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer1.ListBox.GetItemCount()
				[ ] 
				[+] case "Rental Property"
					[ ] sHandle = Str(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer2.ListBox.GetHandle())
					[ ] iCount=QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer2.ListBox.GetItemCount()
				[ ] 
				[+] case "Business"
					[ ] sHandle = Str(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer3.ListBox.GetHandle())
					[ ] iCount=QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer3.ListBox.GetItemCount()
				[ ] 
				[+] case "Investing"
					[ ] sHandle = Str(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer4.ListBox.GetHandle())
					[ ] iCount=QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer4.ListBox.GetItemCount()
				[ ] 
				[+] case "Property & Debt"
					[ ] sHandle = Str(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer5.ListBox.GetHandle())
					[ ] iCount=QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer5.ListBox.GetItemCount()
				[ ] 
				[+] case "Savings Goals"
					[ ] sHandle = Str(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer6.ListBox.GetHandle())
					[ ] iCount=QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer6.ListBox.GetItemCount()
				[ ] 
				[+] case "Separate"
					[ ] sHandle = Str(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer7.ListBox.GetHandle())
					[ ] iCount=QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer7.ListBox.GetItemCount()
				[ ] 
				[+] case "Business Banking"
					[ ] sHandle = Str(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer3.ListBox.GetHandle())
					[ ] iCount=QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer3.ListBox.GetItemCount()
			[ ] 
			[ ] 
			[ ] //Find Co-ordinates of Account in Account Bar
			[+] for(i=0;i<=iCount;i++)
				[ ] 
				[ ] 
				[ ] sActual= QwAutoExecuteCommand("LISTBOX_GETFULLROW", sHandle,Str(i))
				[ ] 
				[ ] bPattern=MatchStr("*{sPattern}*" , sActual)
				[+] if(i>0)
					[ ] 
					[+] if(bPattern==FALSE)
						[ ] iYCords = iYCords + iIncrement1
						[+] if(i%7==0)
							[ ] iYCords = iYCords - iDecriment
							[ ] 
					[+] else
						[ ] iYCords = iYCords + iIncrement2
						[ ] 
						[ ] 
						[ ] 
						[ ] 
					[ ] 
				[ ] 
				[ ] 
				[ ] bMatch = MatchStr("*{sAccountName}*", sActual)
				[+] if(bMatch == TRUE)
					[ ] 
					[ ] ReportStatus("Find Account in Account Bar", PASS, "{sAccountName} account is available in Account bar")
					[ ] 
					[+] switch(sAccountType)
						[+] case "Banking"
							[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer1.ListBox.Click(1,iXCords,iYCords)
							[ ] iFunctionResult=PASS
						[+] case "Business Banking"
							[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer3.ListBox.Click(1,iXCords,iYCords)
							[ ] iFunctionResult=PASS
						[+] case "Rental Property"
							[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer2.ListBox.Click(1,iXCords,iYCords)
							[ ] iFunctionResult=PASS
						[+] case "Business"
							[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer3.ListBox.Click(1,iXCords,iYCords)
							[ ] iFunctionResult=PASS
						[+] case "Investing"
							[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer4.ListBox.Click(1,iXCords,iYCords)
							[ ] iFunctionResult=PASS
						[+] case "Property & Debt"
							[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer5.ListBox.Click(1,iXCords,iYCords)
							[ ] iFunctionResult=PASS
						[+] case "Savings Goals"
							[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer6.ListBox.Click(1,iXCords,iYCords)
							[ ] iFunctionResult=PASS
						[+] case "Separate"
							[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer7.ListBox.Click(1,iXCords,iYCords)
							[ ] iFunctionResult=PASS
						[+] default
							[ ] iFunctionResult=FAIL
					[ ] 
					[ ] CloseRegisterReminderInfoPopup()
					[ ] 
					[ ] break
					[ ] 
				[+] else
					[ ] iFunctionResult=FAIL
					[ ] 
					[ ] 
					[ ] 
					[ ] 
			[ ] 
		[+] except
			[ ] Exceptlog()
			[ ] iFunctionResult=FAIL
			[ ] 
		[ ] sleep(2)
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] // 30-Jun-2015 KalyanG: Re-written SelectAccountFromAccountBar method to use AutoAPI methods to select acct from the bar.
	[+] public STRING getAccountTypeHandle (STRING sAccountType)
		[ ] 
		[ ] STRING sAccountHandle
		[ ] 
		[+] switch(sAccountType)
			[+] case "Banking"
				[ ] sAccountHandle = Str(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer1.ListBox.GetHandle())
			[ ] 
			[+] case "Rental Property"
				[ ] sAccountHandle = Str(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer2.ListBox.GetHandle())
			[ ] 
			[+] case "Business"
				[ ] sAccountHandle = Str(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer3.ListBox.GetHandle())
			[ ] 
			[+] case "Investing"
				[ ] sAccountHandle = Str(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer4.ListBox.GetHandle())
			[ ] 
			[+] case "Property & Debt"
				[ ] sAccountHandle = Str(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer5.ListBox.GetHandle())
			[ ] 
			[+] case "Savings Goals"
				[ ] sAccountHandle = Str(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer6.ListBox.GetHandle())
			[ ] 
			[+] case "Separate"
				[ ] sAccountHandle = Str(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer7.ListBox.GetHandle())
			[ ] 
			[+] case "Business Banking"
				[ ] sAccountHandle = Str(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer3.ListBox.GetHandle())
			[ ] 
			[+] default
				[ ] raise -1, "Invalid AccountType [{sAccountType}]"
			[ ] 
		[ ] return sAccountHandle
		[ ] 
	[+] public LIST OF STRING getAccounts (STRING sAccountType)
		[ ] 
		[ ] LIST OF STRING lsAccounts
		[ ] INTEGER iCount = 2
		[ ] BOOLEAN bLoop = TRUE
		[ ] STRING sAcct, sDelim = "@", sAcctHandle
		[ ] 
		[ ] QuickenWindow.SetActive()
		[ ] sAcctHandle = getAccountTypeHandle(sAccountType)
		[ ] STRING sActual= QwAutoExecuteCommand("ACCOUNTBAR_GETACCOUNTS", sAcctHandle)
		[ ] 
		[+] while (bLoop)
			[ ] 
			[ ] sAcct = getField(sActual, sDelim, iCount)
			[ ] 
			[+] if (sAcct == "" || sAcct == "@")
				[ ] break
			[ ] 
			[ ] ListAppend(lsAccounts, StrTran(StrTran(sAcct, "<af href=acct>", ""),"</a>",""))
			[ ] 
			[ ] iCount ++
		[ ] Print("Below Accounts are Found for type [{sAccountType}] :")
		[ ] ListPrint(lsAccounts)
		[ ] return lsAccounts
	[+] // public INTEGER SelectAccountFromAccountBar(STRING sAccountName,STRING sAccountType)
		[ ] // STRING sAccount
		[ ] // INTEGER iAccountPos
		[ ] // LIST OF STRING lsAccounts = getAccounts (sAccountType)
		[ ] // //Commented as ListFind looks for exact match
		[ ] // //iAccountPos = ListFind (lsAccounts, sAccountName)
		[ ] // iAccountPos=0
		[+] // for each sAccount in lsAccounts
			[ ] // bMatch=MatchStr("*{sAccountName}*",sAccount)
			[ ] // iAccountPos=iAccountPos+1
			[+] // if (bMatch)
				[ ] // break
		[ ] // 
		[ ] // STRING sAcctHandle
		[ ] // 
		[+] // if (bMatch==false)
			[ ] // ReportStatus("Account not found in account bar", FAIL, "Account[{sAccountName}] of type [{sAccountType}] not found in account bar") 
			[ ] // return FAIL
		[ ] // 
		[ ] // sAcctHandle = getAccountTypeHandle(sAccountType)
		[ ] // 
		[ ] // // click on the account
		[+] // if (Trim (QwAutoExecuteCommand("ACCOUNTBAR_CLICK", sAcctHandle, "{iAccountPos-1}")) == "Passed")
			[ ] // // CloseRegisterReminderInfoPopup() // added by abhijit S, July 2015
			[ ] // return PASS
		[ ] // CloseRegisterReminderInfoPopup()
		[ ] // // failed to click
		[ ] // ReportStatus("Account found in account bar but could not click on it", FAIL, "Account[{sAccountName}] of type [{sAccountType}] found in account bar, but failed to click on it!") 
		[ ] // return FAIL
	[ ] 
	[ ] 
	[ ] 
	[ ] 
	[ ] 
	[+] // // FUNCTION: AddManualSpendingAccount()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will add accounts using manual option..
		[ ] // // If account is added successfully TRUE is returned else FALSE with error message is returned.
		[ ] // 
		[ ] // //
		[ ] // // PARAMETERS:		STRING 	sAccountType		Type of the account to be created
		[ ] // //						STRING     sAccounName	Name of the account
		[ ] // //						STRING 	sAccountBalance	Account balance of the new account to be created
		[ ] // //                                  STRING      sAccountIntent         Account Intent of the new account to be created
		[ ] // //
		[ ] // // RETURNS:			INTEGER	0 = If account is created successfully
		[ ] // //									1 = if any error occurs while adding account
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // // //	 Dec 03, 2010	Mamta Jain created
		[ ] // // //	 Dec 23, 2010 Udita Dube  Changed window declarations
		[ ] // // // 	Jan 04, 2011 Udita Dube	  Added Code for Saving Account / Credit Card Account / Cash Account
		[ ] // // //	Jan 18, 2011 Udita Dube	 Added do except block and updated except block
		[ ] // //	 Jan 02, 2013  Dean Paes Added sAccountIntentString
		[ ] // 
	[ ] // // ==========================================================
	[+] // public INTEGER AddManualSpendingAccount(STRING sAccountType, STRING sAccountName, STRING sAccountBalance, STRING sAccountCreateDate optional,STRING sAccountIntent optional)
		[+] // // Variable declaration
			[ ] // STRING sDateStamp = FormatDateTime (GetDateTime(), "m/d/yyyy") 
			[ ] // 
			[ ] // 
		[+] // do
			[+] // if(sAccountCreateDate == NULL) 
				[ ] // sAccountCreateDate =sDateStamp
			[ ] // ExpandAccountBar()
			[ ] // sleep(2)
			[ ] // QuickenWindow.SetActive()
			[ ] // 
			[ ] // 
			[ ] // 
			[+] // switch(sAccountType)
				[+] // case "Checking"
					[ ] // 
					[ ] // sleep(3)
					[ ] // QuickenMainWindow.QWNavigator.QWNavBtnTray.AddAnAccount.Click()
					[ ] // WaitForState(AddAccount,TRUE,10)
					[ ] // 
					[ ] // //AddAccount.PushButton(sAccountType).Click()
					[ ] // WaitForState(AddAccount.Checking,TRUE,10)
					[ ] // AddAccount.Checking.Click()
					[ ] // 
					[ ] // WaitForState(AddAnyAccount.Panel.QWHtmlView1,TRUE,700)
					[ ] // //WaitForState(AddAnyAccount,TRUE,700)
					[+] // if(AddAnyAccount.Exists(SHORT_SLEEP) && AddAnyAccount.IsEnabled())
						[ ] // ADDACC:
						[ ] // AddAnyAccount.SetActive()
						[ ] // AddAnyAccount.Panel.QWHtmlView1.Click (1, 62, 5)
						[ ] // AddAnyAccount.AddCheckingAccount.Select("I want to enter my transactions manually")
						[ ] // WaitForState(AddAnyAccount.Next,true,2)
						[ ] // AddAnyAccount.Next.Click()
					[+] // else
						[ ] // sleep(10)
						[+] // if(AddAnyAccount.Exists(SHORT_SLEEP) )
							[ ] // goto ADDACC
						[+] // else
							[ ] // ReportStatus("Validate Add {sAccountType} Account Window", FAIL, "Add {sAccountType} Account window is not available") 
				[+] // case "Savings"
					[ ] // 
					[ ] // 
					[ ] // // Click on Add Account button
					[ ] // QuickenMainWindow.QWNavigator.QWNavBtnTray.AddAnAccount.Click()
					[ ] // // Select Account Type
					[ ] // //AddAccount.CustomWin(sAccountType).Click()
					[ ] // AddAccount.Savings.Click()
					[ ] // 
					[+] // // if(MessageBox.Exists(2))
						[ ] // // //QuickenUpdateStatus.SetActive()
						[ ] // // MessageBox.TypeKeys(KEY_ENTER)
						[ ] // // 
					[ ] // WaitForState(AddAnyAccount.Panel.QWHtmlView1,TRUE,100)
					[ ] // //WaitForState(AddAnyAccount,TRUE,700)
					[+] // if(AddAnyAccount.Exists(SHORT_SLEEP))
						[ ] // ADDSAVINGACC:
						[ ] // AddAnyAccount.SetActive()
						[ ] // AddAnyAccount.Panel.QWHtmlView1.Click (1, 65, 5)
						[ ] // AddAnyAccount.AddCheckingAccount.Select("I want to enter my transactions manually")
						[ ] // AddAnyAccount.Next.Click()
						[ ] // 
					[+] // else
						[ ] // sleep(10)
						[+] // if(AddAnyAccount.Exists(700) )
							[ ] // goto ADDSAVINGACC
						[+] // else
							[ ] // ReportStatus("Validate Add {sAccountType} Account Window", FAIL, "Add {sAccountType} Account window is not available") 
					[ ] // 
					[ ] // 
				[+] // case "Credit Card"
					[ ] // ExpandAccountBar()
					[ ] // QuickenWindow.SetActive()
					[ ] // // Click on Add Account button
					[ ] // QuickenMainWindow.QWNavigator.QWNavBtnTray.AddAnAccount.Click()
					[ ] // // Select Account Type
					[ ] // //AddAccount.CustomWin(sAccountType).Click()
					[ ] // AddAccount.CreditCard.Click()
					[+] // if(QuickenUpdateStatus.Exists(10))
						[ ] // QuickenUpdateStatus.StopUpdate.Click()
						[ ] // 
					[ ] // 
					[+] // // if(MessageBox.Exists(2))
						[ ] // // //QuickenUpdateStatus.SetActive()
						[ ] // // MessageBox.TypeKeys(KEY_ENTER)
						[ ] // // 
					[ ] // WaitForState(AddAnyAccount.Panel.QWHtmlView1,TRUE,700)
					[ ] // //WaitForState(AddAnyAccount,TRUE,700)
					[+] // if(AddAnyAccount.Exists(SHORT_SLEEP))
						[ ] // AddAnyAccount.Panel.QWHtmlView1.Click (1, 65, 5)
						[ ] // AddAnyAccount.AddCheckingAccount.Select("I want to enter my transactions manually")
						[ ] // AddAnyAccount.Next.Click()
					[+] // else
						[ ] // ReportStatus("Validate Add {sAccountType} Account Window", FAIL, "Add {sAccountType} Account window is not available") 
					[ ] // 
					[ ] // 
				[+] // case "Cash"
					[ ] // ExpandAccountBar()
					[ ] // QuickenWindow.SetActive()
					[ ] // // Click on Add Account button
					[ ] // QuickenMainWindow.QWNavigator.QWNavBtnTray.AddAnAccount.Click()
					[ ] // // Select Account Type
					[ ] // //AddAccount.CustomWin(sAccountType).Click()
					[ ] //  AddAccount.CashButton.Click()
					[+] // if(QuickenUpdateStatus.Exists(10))
						[ ] // QuickenUpdateStatus.StopUpdate.Click()
						[ ] // 
					[ ] // 
					[ ] // //AddAccount.Next.Click()
					[ ] // 
				[+] // default
					[ ] // print(sAccountType + "not found")
					[ ] // iFunctionResult = FAIL
			[ ] // AddAnyAccount.VerifyEnabled(TRUE, EXTRA_LONG_SLEEP)
			[+] // if(AddAnyAccount.Exists(SHORT_SLEEP))
				[ ] // // Enter Account Name
				[ ] // AddAnyAccount.AccountName.SetText(sAccountName)
				[+] // switch(sAccountIntent)
					[+] // case "BUSINESS"
						[ ] // AddAnyAccount.TypeKeys(KEY_TAB)
						[ ] // AddAnyAccount.TypeKeys(KEY_DN)
					[+] // case "RENTAL"
						[ ] // AddAnyAccount.TypeKeys(KEY_TAB)
						[ ] // AddAnyAccount.TypeKeys(KEY_DN)
						[ ] // AddAnyAccount.TypeKeys(KEY_DN)
						[ ] // 
				[ ] // AddAnyAccount.Next.Click()
				[ ] // // Enter Statement Ending Date
				[ ] // AddAnyAccount.StatementEndingDate.SetText (sAccountCreateDate)
				[ ] // // Enter Account Balance
				[ ] // AddAnyAccount.StatementEndingBalance.SetText(sAccountBalance)
				[ ] // AddAnyAccount.Next.Click()
				[ ] // // If date format is not correct
				[+] // if(AddAnyAccount.AlertMessage.Exists(5))
					[ ] // AddAnyAccount.AlertMessage.SetActive()
					[ ] // AddAnyAccount.AlertMessage.OK.Click()
					[ ] // LogError("Date format is not valid")
					[ ] // iFunctionResult = FAIL
					[ ] // return iFunctionResult
				[ ] // // Click on Finish
				[ ] // AccountAdded.Finish.Click()
				[ ] // iFunctionResult = PASS
			[+] // else
				[ ] // ReportStatus("Validate Add {sAccountType} Account Window", FAIL, "Add {sAccountType} Account window is not available") 
				[ ] // 
			[ ] // 
		[+] // except
			[+] // if(AddAnyAccount.Exists(SHORT_SLEEP))
				[ ] // AddAnyAccount.Close()
				[+] // if(DeleteTransaction.Exists(SHORT_SLEEP))
					[ ] // DeleteTransaction.Yes.Click()
				[ ] // 
				[ ] // 
			[ ] // // Close Alert message
			[+] // if (AddAnyAccount.AlertMessage.Exists(SHORT_SLEEP))
				[ ] // AddAnyAccount.AlertMessage.SetActive()
				[ ] // AddAnyAccount.AlertMessage.TypeKeys("<Ctrl-y>")
				[ ] // 
			[+] // if(AddAccount.Exists(SHORT_SLEEP))
				[ ] // AddAccount.Close()
			[ ] // // QuickenMainWindow.kill()
			[ ] // 
			[ ] // iFunctionResult = FAIL
		[ ] // return iFunctionResult
	[ ] 
	[+] // FUNCTION: AddManualSpendingAccount()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will add accounts using manual option..
		[ ] // If account is added successfully TRUE is returned else FALSE with error message is returned.
		[ ] 
		[ ] //
		[ ] // PARAMETERS:		STRING 	sAccountType		Type of the account to be created
		[ ] //						STRING     sAccounName	Name of the account
		[ ] //						STRING 	sAccountBalance	Account balance of the new account to be created
		[ ] //                                  STRING      sAccountIntent         Account Intent of the new account to be created
		[ ] //
		[ ] // RETURNS:			INTEGER	0 = If account is created successfully
		[ ] //									1 = if any error occurs while adding account
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // //	 Dec 03, 2010	Mamta Jain created
		[ ] // //	 Dec 23, 2010 Udita Dube  Changed window declarations
		[ ] // // 	Jan 04, 2011 Udita Dube	  Added Code for Saving Account / Credit Card Account / Cash Account
		[ ] // //	Jan 18, 2011 Udita Dube	 Added do except block and updated except block
		[ ] //	 Jan 02, 2013  Dean Paes Added sAccountIntentString
		[ ] 
	[ ] // ==========================================================
	[+] public INTEGER AddManualSpendingAccount(STRING sAccountType, STRING sAccountName, STRING sAccountBalance, STRING sAccountCreateDate optional,STRING sAccountIntent optional)
		[+] // Variable declaration
			[ ] STRING sDateStamp = FormatDateTime (GetDateTime(), "m/d/yyyy") 
			[ ] 
			[ ] 
		[+] do
			[+] if(sAccountCreateDate == NULL) 
				[ ] sAccountCreateDate =sDateStamp
			[ ] ExpandAccountBar()
			[ ] QuickenWindow.SetActive()
			[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.AddAnAccount.DoubleClick()
			[ ] 
			[+] if (AddAccount.Exists(30))
				[ ] AddAccount.SetActive()
				[+] switch(sAccountType)
					[+] case "Checking"
						[ ] //AddAccount.PushButton(sAccountType).Click()
						[ ] AddAccount.Checking.Click()
						[ ] 
						[ ] WaitForState(AddAnyAccount.Panel.QWHtmlView1,TRUE,700)
						[+] if(AddAnyAccount.Exists(SHORT_SLEEP) && AddAnyAccount.IsEnabled())
							[ ] ADDACC:
							[ ] AddAnyAccount.SetActive()
							[ ] AddAnyAccount.Panel.QWHtmlView1.Click (1, 62, 5)
							[ ] AddAnyAccount.AddCheckingAccount.Select("I want to enter my transactions manually")
							[ ] WaitForState(AddAnyAccount.Next,true,2)
							[ ] AddAnyAccount.Next.Click()
						[+] else
							[ ] sleep(10)
							[+] if(AddAnyAccount.Exists(700) )
								[ ] goto ADDACC
							[+] else
								[ ] ReportStatus("Validate Add {sAccountType} Account Window", FAIL, "Add {sAccountType} Account window is not available") 
					[+] case "Savings"
						[ ] AddAccount.Savings.Click()
						[ ] 
						[+] // if(MessageBox.Exists(2))
							[ ] // //QuickenUpdateStatus.SetActive()
							[ ] // MessageBox.TypeKeys(KEY_ENTER)
							[ ] // 
						[ ] WaitForState(AddAnyAccount.Panel.QWHtmlView1,TRUE,700)
						[+] if(AddAnyAccount.Exists(SHORT_SLEEP))
							[ ] ADDSAVINGACC:
							[ ] AddAnyAccount.SetActive()
							[ ] AddAnyAccount.Panel.QWHtmlView1.Click (1, 65, 5)
							[ ] AddAnyAccount.AddCheckingAccount.Select("I want to enter my transactions manually")
							[ ] AddAnyAccount.Next.Click()
							[ ] 
						[+] else
							[ ] sleep(10)
							[+] if(AddAnyAccount.Exists(700) )
								[ ] goto ADDSAVINGACC
							[+] else
								[ ] ReportStatus("Validate Add {sAccountType} Account Window", FAIL, "Add {sAccountType} Account window is not available") 
						[ ] 
						[ ] 
					[+] case "Credit Card"
						[ ] AddAccount.CreditCard.Click()
						[ ] 
						[+] // if(MessageBox.Exists(2))
							[ ] // //QuickenUpdateStatus.SetActive()
							[ ] // MessageBox.TypeKeys(KEY_ENTER)
							[ ] // 
						[ ] WaitForState(AddAnyAccount.Panel.QWHtmlView1,TRUE,700)
						[+] if(AddAnyAccount.Exists(SHORT_SLEEP))
							[ ] AddAnyAccount.Panel.QWHtmlView1.Click (1, 65, 5)
							[ ] AddAnyAccount.AddCheckingAccount.Select("I want to enter my transactions manually")
							[ ] AddAnyAccount.Next.Click()
						[+] else
							[ ] ReportStatus("Validate Add {sAccountType} Account Window", FAIL, "Add {sAccountType} Account window is not available") 
						[ ] 
						[ ] 
					[+] case "Cash"
						[ ]  AddAccount.CashButton.Click()
						[ ] //AddAccount.Next.Click()
						[ ] 
					[+] default
						[ ] print(sAccountType + "not found")
						[ ] iFunctionResult = FAIL
				[ ] AddAnyAccount.VerifyEnabled(TRUE, EXTRA_LONG_SLEEP)
				[+] if(AddAnyAccount.Exists(SHORT_SLEEP))
					[ ] // Enter Account Name
					[ ] AddAnyAccount.AccountName.SetText(sAccountName)
					[+] switch(sAccountIntent)
						[+] case "BUSINESS"
							[ ] AddAnyAccount.TypeKeys(KEY_TAB)
							[ ] AddAnyAccount.TypeKeys(KEY_DN)
						[+] case "RENTAL"
							[ ] AddAnyAccount.TypeKeys(KEY_TAB)
							[ ] AddAnyAccount.TypeKeys(KEY_DN)
							[ ] AddAnyAccount.TypeKeys(KEY_DN)
							[ ] 
					[ ] AddAnyAccount.Next.Click()
					[ ] // Enter Statement Ending Date
					[ ] AddAnyAccount.StatementEndingDate.SetText (sAccountCreateDate)
					[ ] // Enter Account Balance
					[ ] AddAnyAccount.StatementEndingBalance.SetText(sAccountBalance)
					[ ] AddAnyAccount.Next.Click()
					[ ] // If date format is not correct
					[+] if(AddAnyAccount.AlertMessage.Exists(5))
						[ ] AddAnyAccount.AlertMessage.SetActive()
						[ ] AddAnyAccount.AlertMessage.OK.Click()
						[ ] LogError("Date format is not valid")
						[ ] iFunctionResult = FAIL
						[ ] return iFunctionResult
					[ ] // Click on Finish
					[ ] AccountAdded.Finish.Click()
					[ ] 
					[ ] CloseMobileSyncInfoPopup()
					[ ] 
					[ ] iFunctionResult = PASS
				[+] else
					[ ] ReportStatus("Validate Add {sAccountType} Account Window", FAIL, "Add {sAccountType} Account window is not available") 
					[ ] 
				[ ] 
				[+] if(DlgReplaceExistingID.Exists(2))
					[ ] DlgReplaceExistingID.SetActive()
					[ ] DlgReplaceExistingID.Close()
				[ ] 
			[+] else
				[ ] ReportStatus("Validate Add Account Window", FAIL, "Add Account window is didn't display in 30 seconds.") 
			[ ] 
			[ ] 
		[+] except
			[+] if(AddAnyAccount.Exists(SHORT_SLEEP))
				[ ] AddAnyAccount.Close()
				[+] if(DeleteTransaction.Exists(SHORT_SLEEP))
					[ ] DeleteTransaction.Yes.Click()
				[ ] 
				[ ] 
			[ ] // Close Alert message
			[+] if (AddAnyAccount.AlertMessage.Exists(SHORT_SLEEP))
				[ ] AddAnyAccount.AlertMessage.SetActive()
				[ ] AddAnyAccount.AlertMessage.TypeKeys("<Ctrl-y>")
				[ ] 
			[+] if(AddAccount.Exists(SHORT_SLEEP))
				[ ] AddAccount.Close()
			[ ] // QuickenMainWindow.kill()
			[ ] ExceptLog()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: AddPropertyAccount()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will add property account. There are three account types under property
		[ ] //  Fields are as follows for specific account type: 
		[ ] // House: sAccountType,  sAccountName, sAcquireDate, sPurchasePrice,sEstimateValue [All are mandatory]
		[ ] //  Vehicle: MANDATORY: sAccountType,  sAccountName, sAcquireDate, sPurchasePrice,sEstimateValue, sVehicleYear. OPTIONAL: sManufacturer, sModel
		[ ] //  Other Asset: sAccountType,  sAccountName, sAcquireDate, sPurchasePrice [All are mandatory]
		[ ] //
		[ ] // PARAMETERS:		STRING 	sAccountType					Type of the account to be created i.e. House / Vehicle / Other Asset
		[ ] //						STRING     sAccounName				Name of the account
		[ ] //						STRING 	sAcquireDate					Acquire Date for any asset
		[ ] //						STRING 	sPurchasePrice				Purchase Price for any asset
		[ ] //						STRING 	sEstimateValue				Estimate of asset's Current Value
		[ ] //						STRING 	sAccountUsedPrimarilyFor	This account used primarily for
		[ ] //						STRING	sVehicleYear					Vehicle Year
		[ ] //						STRING 	sManufacturer					Vehicle Make / Manufacturer
		[ ] //						STRING	sModel						Vehicle Model
		[ ] //
		[ ] // RETURNS:			INTEGER	PASS = If asset account is created successfully
		[ ] //									FAIL = if any error occurs while adding asset account
		[ ] //
		[ ] // REVISION HISTORY:	
		[ ] // Jan 04, 2011 Udita Dube created
	[ ] // ==========================================================
	[+] public INTEGER AddPropertyAccount(STRING sAccountType, STRING sAccountName, STRING sAcquireDate, STRING sPurchasePrice, STRING sEstimateValue optional, STRING sAccountUsedPrimarily optional, STRING sVehicleYear optional, STRING sManufacturer optional, STRING sModel optional)
		[ ] 
		[+] // Variable declaration
			[ ] STRING sErrorMsg
			[ ] BOOLEAN bFlag = TRUE
		[+] if(IsNULL(sEstimateValue))
			[ ] sEstimateValue=""
		[+] if(IsNULL(sVehicleYear))
			[ ] sVehicleYear=""
		[+] if(IsNULL(sManufacturer))
			[ ] sManufacturer=""
		[+] if(IsNULL(sModel))
			[ ] sModel=""
		[+] if(IsNULL(sAccountUsedPrimarily))
				[ ] //sAccountUsedPrimarily ="Personal Transactions"
			[ ] 
		[+] if(SKU_TOBE_TESTED=="Premier")
			[ ] sAccountUsedPrimarily=""
		[ ] 
		[ ] 
		[+] do
			[ ] ExpandAccountBar()
			[ ] QuickenWindow.SetActive()
			[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.AddAnAccount.Click()
			[ ] sleep(10)
			[+] if (AddAccount.Exists(30))
				[ ] AddAccount.SetActive()
				[+] switch(sAccountType)
					[+] case "House"
						[+] do
							[ ] AddAccount.House.Click()
							[+] if(AddAnyAccount.Exists(5))
								[ ] // Enter Account Name
								[ ] AddAnyAccount.AccountName.SetText(sAccountName)
								[+] if(sAccountUsedPrimarily==NULL || sAccountUsedPrimarily == "")
									[ ] // Default value is selected i.e. Personal Transactions
								[+] else
									[ ] AddAnyAccount.AccountUsedPrimarily.Select(sAccountUsedPrimarily)
								[ ] AddAnyAccount.Next.Click()
								[ ] 
								[ ] // Alert Message is displayed if Account Name already exists
								[+] if(AddAnyAccount.AlertMessage.Exists(SHORT_SLEEP))
									[ ] AddAnyAccount.AlertMessage.SetActive ()
									[ ] sErrorMsg = AddAnyAccount.AlertMessage.TextMessage.GetText ()
									[+] if(sErrorMsg == "Name already in use.")
										[ ] ReportStatus("Validate Account name", FAIL, "Account - {sAccountName} already exists") 
									[+] else
										[ ] ReportStatus("Validate Account name", FAIL, "{sErrorMsg} is displayed") 
									[ ] AddAnyAccount.AlertMessage.OK.Click ()
									[ ] AddAnyAccount.SetActive ()
									[ ] AddAnyAccount.Cancel.Click()
									[+] if(AlertMessage.Exists(SHORT_SLEEP))
										[ ] AlertMessage.SetActive()
										[ ] AlertMessage.Yes.Click()
									[ ] bFlag = FALSE
									[ ] iFunctionResult=FAIL
								[ ] 
								[+] if(bFlag==TRUE)
									[ ] // Mandatory: Enter House Acquire Date
									[ ] AddAnyAccount.HouseAcquireDate.SetText(sAcquireDate)
									[ ] // Mandatory: Enter  Purchase Price
									[ ] AddAnyAccount.PurchasePrice.SetText(sPurchasePrice)
									[ ] // Mandatory: Enter Estimate Value
									[ ] AddAnyAccount.EstimateCurrentValue.SetText(sEstimateValue)
									[ ] AddAnyAccount.Next.Click()
									[ ] 
									[ ] // Alert Message displayed if Estimate Value is not entered
									[+] if(AddAnyAccount.AlertMessage.Exists(SHORT_SLEEP))
										[ ] AddAnyAccount.AlertMessage.OK.Click()
										[ ] LogError("Please enter value for 'Estimates of its Current Value'")
										[ ] AddAnyAccount.Cancel.Click()
										[+] if(AlertMessage.Exists(SHORT_SLEEP))
											[ ] AlertMessage.Yes.Click()
										[+] // if(AddAnyAccount.AlertMessage.Exists(SHORT_SLEEP))
											[ ] // //AddAnyAccount.AlertMessage.Yes.Click()
											[ ] iFunctionResult = FAIL
											[ ] return iFunctionResult
									[ ] 
									[ ] AddAnyAccount.Mortgage.Select("No")
									[ ] AddAnyAccount.Next.Click()
									[ ] AccountAdded.Finish.Click()
									[ ] iFunctionResult = PASS
							[+] else
								[ ] iFunctionResult=FAIL
								[ ] ReportStatus("Validate Add {sAccountType} Account window", FAIL, "Add {sAccountType} Account window not found")
								[ ] 
							[ ] 
						[+] except
							[ ] iFunctionResult = FAIL
						[ ] return iFunctionResult
					[+] case "Vehicle"
						[+] do
							[ ] AddAccount.Vehicle.Click()
							[+] if(AddAnyAccount.Exists(5))
								[ ] // Enter Account Name
								[ ] AddAnyAccount.AccountName.SetText(sAccountName)
								[+] if(sAccountUsedPrimarily==NULL || sAccountUsedPrimarily == "")
									[ ] // Default value is selected i.e. Personal Transactions
								[+] else
									[ ] AddAnyAccount.AccountUsedPrimarily.Select(sAccountUsedPrimarily)
								[ ] 
								[ ] AddAnyAccount.Next.Click()
								[ ] 
								[ ] // Alert Message is displayed if Account Name already exists
								[+] if(AddAnyAccount.AlertMessage.Exists(SHORT_SLEEP))
									[ ] AddAnyAccount.AlertMessage.SetActive ()
									[ ] sErrorMsg = AddAnyAccount.AlertMessage.TextMessage.GetText ()
									[+] if(sErrorMsg == "Name already in use.")
										[ ] ReportStatus("Validate Account name", FAIL, "Account - {sAccountName} already exists") 
									[+] else
										[ ] ReportStatus("Validate Account name", FAIL, "{sErrorMsg} is displayed") 
									[ ] AddAnyAccount.AlertMessage.OK.Click ()
									[ ] AddAnyAccount.SetActive ()
									[ ] AddAnyAccount.Cancel.Click()
									[+] if(AlertMessage.Exists(SHORT_SLEEP))
										[ ] AlertMessage.SetActive()
										[ ] AlertMessage.Yes.Click()
									[ ] bFlag = FALSE
									[ ] iFunctionResult=FAIL
									[ ] 
								[ ] 
								[+] if(bFlag==TRUE)
									[ ] // Optional: Enter Manufacturer
									[ ] AddAnyAccount.VehicleManufacturer.SetText(sManufacturer)
									[ ] // Optional: Enter Vehicle Model
									[ ] AddAnyAccount.VehicleModel.SetText(sModel)
									[ ] // Mandatory: Enter Vehicle Year
									[ ] AddAnyAccount.VehicleYear.SetText(sVehicleYear)
									[ ] // Mandatory: Enter Vehicle Acquire Date
									[ ] AddAnyAccount.HouseAcquireDate.SetText(sAcquireDate)
									[ ] // Mandatory: Enter  Purchase Price
									[ ] AddAnyAccount.PurchasePrice.SetText(sPurchasePrice)
									[ ] // Mandatory: Enter Estimate Value
									[ ] AddAnyAccount.EstimateCurrentValue.SetText(sEstimateValue)
									[ ] AddAnyAccount.Next.Click()
									[ ] 
									[ ] // Alert Message displayed if Vehicle Year is not entered
									[+] if(AddAnyAccount.AlertMessage.Exists(SHORT_SLEEP))
										[ ] AddAnyAccount.AlertMessage.OK.Click()
										[ ] LogError("Please enter value for Vehicle Year")
										[ ] AddAnyAccount.Cancel.Click()
										[+] if(AlertMessage.Exists(SHORT_SLEEP))
											[ ] AlertMessage.Yes.Click()
										[ ] // 
										[+] // if(AddAnyAccount.AlertMessage.Exists(SHORT_SLEEP))
											[ ] // AddAnyAccount.AlertMessage.Yes.Click()
											[ ] iFunctionResult = FAIL
											[ ] return iFunctionResult
									[ ] 
									[ ] AddAnyAccount.Mortgage.Select("No")
									[ ] AddAnyAccount.Next.Click()
									[ ] AccountAdded.Finish.Click()
									[ ] iFunctionResult = PASS
								[ ] 
							[+] else
								[ ] iFunctionResult=FAIL
								[ ] ReportStatus("Validate Add {sAccountType} Account window", FAIL, "Add {sAccountType} Account window not found")
								[ ] 
							[ ] 
						[+] except
							[ ] iFunctionResult = FAIL
						[ ] return iFunctionResult
						[ ] 
					[+] case "Other Asset"
						[+] do
							[ ] AddAccount.OtherAsset.Click()
							[+] if(AddAnyAccount.Exists(5))
								[ ] // Enter Account Name
								[ ] AddAnyAccount.AccountName.SetText(sAccountName)
								[+] if(sAccountUsedPrimarily==NULL || sAccountUsedPrimarily == "")
									[ ] // Default value is selected i.e. Personal Transactions
								[+] else
									[ ] AddAnyAccount.AccountUsedPrimarily.Select(sAccountUsedPrimarily)
								[ ] 
								[ ] AddAnyAccount.Next.Click()
								[ ] 
								[ ] // Alert Message is displayed if Account Name already exists
								[+] if(AddAnyAccount.AlertMessage.Exists(SHORT_SLEEP))
									[ ] AddAnyAccount.AlertMessage.SetActive ()
									[ ] sErrorMsg = AddAnyAccount.AlertMessage.TextMessage.GetText ()
									[+] if(sErrorMsg == "Name already in use.")
										[ ] ReportStatus("Validate Account name", FAIL, "Account - {sAccountName} already exists") 
									[+] else
										[ ] ReportStatus("Validate Account name", FAIL, "{sErrorMsg} is displayed") 
									[ ] AddAnyAccount.AlertMessage.OK.Click ()
									[ ] AddAnyAccount.SetActive ()
									[ ] AddAnyAccount.Cancel.Click()
									[+] if(AlertMessage.Exists(SHORT_SLEEP))
										[ ] AlertMessage.SetActive()
										[ ] AlertMessage.Yes.Click()
									[ ] bFlag = FALSE
									[ ] iFunctionResult=FAIL
									[ ] 
								[ ] 
								[+] if(bFlag==TRUE)
									[ ] // Mandatory: Enter "Date to start tracking"
									[ ] AddAnyAccount.DateToStartTracking.SetText(sAcquireDate)
									[ ] // Mandatory: Enter  "Asset Value"
									[ ] AddAnyAccount.AssetValue.SetText(sPurchasePrice)
									[ ] AddAnyAccount.Next.Click()
									[ ] AddAnyAccount.Mortgage.Select("No")
									[ ] AddAnyAccount.Next.Click()
									[ ] AccountAdded.Finish.Click()
									[ ] iFunctionResult = PASS
									[ ] 
							[+] else
								[ ] iFunctionResult=FAIL
								[ ] ReportStatus("Validate Add Asset Account window", FAIL, "Add Asset Account window not found")
								[ ] 
							[ ] 
						[+] except
							[ ] iFunctionResult = FAIL
						[ ] return iFunctionResult
						[ ] 
					[+] default
						[ ] LogError(sAccountType + "not found")
						[ ] iFunctionResult = FAIL
				[ ] CloseMobileSyncInfoPopup()
			[+] else
				[ ] ReportStatus("Validate Add Account Window", FAIL, "Add Account window is didn't display in 30 seconds.") 
			[ ] 
		[+] except
			[ ] ExceptLog()
			[+] if(AddAccount.Exists(SHORT_SLEEP))
				[ ] AddAccount.Close()
			[+] if(AddAnyAccount.Exists(SHORT_SLEEP))
				[ ] AddAnyAccount.Close()
				[+] if(DeleteTransaction.Exists(SHORT_SLEEP))
					[ ] DeleteTransaction.Yes.Click()
				[ ] 
				[+] // if(PopUpDeleteTransaction.Exists(SHORT_SLEEP))
					[ ] // PopUpDeleteTransaction.Yes.Click()
				[ ] 
			[ ] iFunctionResult = FAIL
		[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: AddOtherLiabilityAccount()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will add Other Liability  account.
		[ ] //
		[ ] // PARAMETERS:		STRING     sAccounName	Name of the other liability account
		[ ] //						STRING 	sStartDate			Date to Start Tracking
		[ ] //						STRING 	sLiabilityAmount	Liability Amount [Optional]
		[ ] //
		[ ] // RETURNS:			INTEGER	PASS = If Other Liability  account is created successfully
		[ ] //									FAIL = if any error occurs while adding other Liability  account
		[ ] //
		[ ] // REVISION HISTORY:	
		[ ] // Jan 05, 2011 Udita Dube created
	[ ] // ==========================================================
	[+] public INTEGER AddOtherLiabilityAccount( STRING sAccountType, STRING sAccountName, STRING sStartDate, STRING sAccountUsedPrimarily optional,STRING sLiabilityAmount optional)
		[ ] 
		[+] // Variable declaration
			[ ] STRING sErrorMsg
			[ ] BOOLEAN bFlag = TRUE
			[ ] 
		[ ] //sAccountType = "Other liability (not a credit card)"
		[+] if(IsNULL(sLiabilityAmount))
			[ ] sLiabilityAmount=""
		[+] if(IsNULL(sAccountUsedPrimarily))
			[ ] //sAccountUsedPrimarily="Personal Transactions"
		[+] if(SKU_TOBE_TESTED=="Premier")
			[ ] sAccountUsedPrimarily=""
		[+] do
			[ ] ExpandAccountBar()
			[ ] QuickenWindow.SetActive()
			[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.AddAnAccount.DoubleClick()
			[+] if (AddAccount.Exists(30))
				[ ] AddAccount.SetActive()
				[ ] AddAccount.OtherLiability.Click()
				[+] if(AddAnyAccount.Exists(MEDIUM_SLEEP))
					[ ] AddAnyAccount.VerifyEnabled(TRUE, 150)
					[ ] // Enter Account Name
					[ ] AddAnyAccount.AccountName.SetText(sAccountName)
					[+] if(sAccountUsedPrimarily==NULL || sAccountUsedPrimarily == "")
						[ ] // Default value is selected i.e. Personal Transactions
					[+] else
						[ ] AddAnyAccount.AccountUsedPrimarily.Select(sAccountUsedPrimarily)
						[ ] 
					[ ] 
					[ ] AddAnyAccount.Next.Click()
					[ ] 
					[ ] // Alert Message is displayed if Account Name already exists
					[+] if(AddAnyAccount.AlertMessage.Exists(SHORT_SLEEP))
						[ ] AddAnyAccount.AlertMessage.SetActive ()
						[ ] sErrorMsg = AddAnyAccount.AlertMessage.TextMessage.GetText ()
						[+] if(sErrorMsg == "Name already in use.")
							[ ] ReportStatus("Validate Account name", FAIL, "Account - {sAccountName} already exists") 
						[+] else
							[ ] ReportStatus("Validate Account name", FAIL, "{sErrorMsg} is displayed") 
						[ ] AddAnyAccount.AlertMessage.OK.Click ()
						[ ] AddAnyAccount.SetActive ()
						[ ] AddAnyAccount.Cancel.Click()
						[+] if(AlertMessage.Exists(SHORT_SLEEP))
							[ ] AlertMessage.SetActive()
							[ ] AlertMessage.Yes.Click()
						[ ] bFlag = FALSE
						[ ] iFunctionResult=FAIL
						[ ] 
					[ ] 
					[+] if(bFlag==TRUE)
						[ ] // Mandatory: Enter Date to Start Tracking
						[ ] AddAnyAccount.DateToStartTracking.SetText(sStartDate)
						[ ] // Optional: Enter  Liability Amount
						[ ] AddAnyAccount.LiabilityAmount.SetText(sLiabilityAmount)
						[ ] AddAnyAccount.Next.Click()
						[ ] AddAnyAccount.Mortgage.Select("No")
						[ ] AddAnyAccount.Next.Click()
						[ ] AccountAdded.Finish.Click()
						[ ] iFunctionResult = PASS
					[ ] 
				[+] else
					[ ] iFunctionResult=FAIL
					[ ] ReportStatus("Validate Add Debt Account window", FAIL, "Add Debt Account window not found")
					[ ] 
				[ ] CloseMobileSyncInfoPopup()
			[+] else
				[ ] ReportStatus("Validate Add Account Window", FAIL, "Add Account window is didn't display in 30 seconds.") 
				[ ] 
		[+] except
			[ ] ExceptLog()
			[+] if(AddAccount.Exists(SHORT_SLEEP))
				[ ] AddAccount.Close()
			[+] if(AddAnyAccount.Exists(SHORT_SLEEP))
				[ ] AddAnyAccount.Close()
				[+] if(DeleteTransaction.Exists(SHORT_SLEEP))
					[ ] DeleteTransaction.Yes.Click()
				[ ] 
				[+] // if(PopUpDeleteTransaction.Exists(SHORT_SLEEP))
					[ ] // PopUpDeleteTransaction.Yes.Click()
				[ ] 
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: AddBusinessAccount()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will add Business account. There are two options 1. Accounts Payable 2. Accounts Receivable
		[ ] //
		[ ] // PARAMETERS:		STRING 	sAccountType		Type of the account to be created i.e. Accounts Payable / Accounts Receivable
		[ ] //						STRING     sAccounName	Name of the account
		[ ] //
		[ ] // RETURNS:			INTEGER	PASS = If Business account is created successfully
		[ ] //									FAIL = if any error occurs while adding Business account
		[ ] //
		[ ] // REVISION HISTORY:	
		[ ] // Jan 05, 2011 Udita Dube created
	[ ] // ==========================================================
	[+] public INTEGER AddBusinessAccount(STRING sAccountType, STRING sAccountName)
		[ ] 
		[+] // Variable declaration
			[ ] STRING sErrorMsg
			[ ] BOOLEAN bFlag = TRUE
			[ ] 
		[ ] 
		[+] do
			[ ] ExpandAccountBar()
			[ ] QuickenWindow.SetActive()
			[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.AddAnAccount.DoubleClick()
			[ ] 
			[+] switch(sAccountType)
				[+] case "Accounts Payable"
					[+] if(!AddAccount.Exists(5))
						[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.AddAnAccount.Click()
					[ ] AddAccount.AccountsPayable.Click()
					[ ] 
					[ ] 
				[+] case "Accounts Receivable"
					[+] if(!AddAccount.Exists(5))
						[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.AddAnAccount.Click()
					[ ] AddAccount.AccountsReceivable.Click()
				[+] default
					[ ] LogError(sAccountType + "not found")
					[ ] iFunctionResult = FAIL
				[ ] 
			[ ] 
			[ ] 
			[+] if(AddAnyAccount.Exists(5))
				[ ] AddAnyAccount.SetActive()
				[ ] // Enter Account Name
				[ ] AddAnyAccount.AccountName.SetText(sAccountName)
				[ ] AddAnyAccount.Next.Click()
				[ ] 
				[ ] // Alert Message is displayed if Account Name already exists
				[+] if(AddAnyAccount.AlertMessage.Exists(SHORT_SLEEP))
					[ ] AddAnyAccount.AlertMessage.SetActive ()
					[ ] sErrorMsg = AddAnyAccount.AlertMessage.TextMessage.GetText ()
					[+] if(sErrorMsg == "Name already in use.")
						[ ] ReportStatus("Validate Account name", FAIL, "Account - {sAccountName} already exists") 
					[+] else
						[ ] ReportStatus("Validate Account name", FAIL, "{sErrorMsg} is displayed") 
					[ ] AddAnyAccount.AlertMessage.OK.Click ()
					[ ] AddAnyAccount.SetActive ()
					[ ] AddAnyAccount.Cancel.Click()
					[+] if(AlertMessage.Exists(SHORT_SLEEP))
						[ ] AlertMessage.SetActive()
						[ ] AlertMessage.Yes.Click()
					[ ] bFlag = FALSE
					[ ] iFunctionResult=FAIL
					[ ] 
				[ ] 
				[+] if(bFlag==TRUE)
					[ ] AccountAdded.Finish.Click()
					[ ] iFunctionResult = PASS
				[ ] 
			[+] else
				[ ] iFunctionResult=FAIL
				[ ] ReportStatus("Validate Add {sAccountType} Account window", FAIL, "Add {sAccountType} Account window not found")
			[ ] 
			[ ] CloseMobileSyncInfoPopup()
		[+] except
			[ ] ExceptLog()
			[+] if(AddAccount.Exists(SHORT_SLEEP))
				[ ] AddAccount.Close()
			[+] if(AddAnyAccount.Exists(SHORT_SLEEP))
				[ ] AddAnyAccount.Close()
				[+] if(DeleteTransaction.Exists(SHORT_SLEEP))
					[ ] DeleteTransaction.Yes.Click()
				[ ] 
				[+] // if(PopUpDeleteTransaction.Exists(SHORT_SLEEP))
					[ ] // PopUpDeleteTransaction.Yes.Click()
				[ ] 
			[ ] iFunctionResult=FAIL
			[ ] 
		[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] // // ==========================================================
	[+] // // FUNCTION: AddManualBrokerageAccount()
		[ ] // //
		[ ] // // DESCRIPTION:	This function will add Investment account i.e. Brokerage account  using manual option.
		[ ] // // 
		[ ] // //
		[ ] // // PARAMETERS IN:		STRING 	sAccountType		 		Type of the account to be created
		[ ] // //							STRING      sAccounName			Name of the account
		[ ] // //							STRING      sCash	       				Cash amount
		[ ] // //							STRING	sMoneyMarket 			Money Market amount
		[ ] // //							STRING	sStatementEndingDate   	Statement Ending Date
		[ ] // //							STRING	sAccountUsedPrimarilyFor Account used primarily for
		[ ] // //
		[ ] // // RETURNS:				INTEGER		PASS  = If investment account is created successfully
		[ ] // //											FAIL    = if any error occurs while adding account
		[ ] // //
		[ ] // // REVISION HISTORY:	22/12/2010   Created By	Udita Dube
		[ ] // //	 						03/05/2011			   Updated By	Udita Dube
		[ ] // //                                             29/05/2011			   Updated By	Puja Verma
	[ ] // // ==========================================================
	[+] public INTEGER AddManualBrokerageAccount( STRING sAccountType,STRING sAccountName, STRING sCash, STRING sStatementEndingDate,STRING sAccountUsedPrimarilyOrOwnerIRA optional,STRING sMoneyMarket optional,STRING sIRAType optional)
		[ ] 
		[+] //Variable declaration
			[ ] STRING sErrorMsg
			[ ] BOOLEAN bFlag = TRUE
			[ ] 
		[+] if(IsNULL(sMoneyMarket))
			[ ] sMoneyMarket=""
		[+] if(sAccountType!="IRA or Keogh Plan")
			[+] if(sAccountType!="Brokerage")
				[+] if(sAccountType!="529 Plan") 
					[ ] ReportStatus("Validate Account", FAIL, "Account Type - {sAccountType} not found") 
					[ ] iFunctionResult = FAIL
					[ ] goto FAIL
		[+] if(SKU_TOBE_TESTED=="Premier")
			[ ] sAccountUsedPrimarilyOrOwnerIRA=""
		[+] do
			[ ] 
			[ ] //Verify Account Bar is Expanded
			[ ] ExpandAccountBar()
			[ ] // Set active main Quicken window
			[ ] QuickenWindow.SetActive()
			[ ] // Click on Add Account
			[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.AddAnAccount.DoubleClick()
			[ ] //Check that "Add Account" window is opened or not
			[+] if(AddAccount.Exists(30))
				[ ] AddAccount.SetActive()
				[ ] //Enter Account Type
				[ ] 
				[+] switch(sAccountType)
					[+] case "IRA or Keogh Plan"
						[ ] AddAccount.IRAOrKeoghPlan.Click()
					[+] case "Brokerage"
						[ ] AddAccount.Brokerage.Click()
					[+] case "529 Plan"
						[ ] AddAccount.x529Plan.Click()
					[+] case "401(k) or 403(b)"
						[ ] AddAccount.x401kOr403b.Click()
				[ ] //Verify window is enabled
				[ ] WaitForState(AddAnyAccount.Panel.QWHtmlView1,TRUE,900)
				[ ] //AddAnyAccount.VerifyEnabled(TRUE, 150)
				[+] if(AddAnyAccount.Exists(SHORT_SLEEP))
					[ ] AddAnyAccount.SetActive()
					[ ] //Click on "Advanced Setup" link
					[ ] AddAnyAccount.Panel.QWHtmlView1.Click (1, 65, 5)
					[ ] //Select source of transactions
					[ ] AddAnyAccount.AddCheckingAccount.Select("I want to enter my transactions manually")
					[ ] //Click on Next
					[ ] AddAnyAccount.Next.Click()
					[ ] //Verify window is enabled
					[ ] AddAnyAccount.VerifyEnabled(TRUE, 150)
					[ ] 
					[ ] //Add Account Name
					[ ] AddAnyAccount.AccountName.SetText("{sAccountName}")  
					[+] if(sAccountType=="Brokerage")
						[+] if(sAccountUsedPrimarilyOrOwnerIRA==NULL|| sAccountUsedPrimarilyOrOwnerIRA=="")
							[ ] // Default value is selected i.e. Personal Transactions
						[+] else
							[ ] AddAnyAccount.AccountUsedPrimarily.Select(sAccountUsedPrimarilyOrOwnerIRA)
							[ ] 
					[ ] 
					[ ] //Click on Next
					[ ] AddAnyAccount.Next.Click()
					[ ] 
					[ ] //Verify that Account with same name already exists
					[+] if(AddAnyAccount.AlertMessage.Exists(SHORT_SLEEP))
						[ ] AddAnyAccount.AlertMessage.SetActive ()
						[ ] sErrorMsg = AddAnyAccount.AlertMessage.TextMessage.GetText ()
						[+] if(sErrorMsg == "Name already in use.")
							[ ] ReportStatus("Validate Account name", FAIL, "Account - {sAccountName} already exists") 
						[+] else
							[ ] ReportStatus("Validate Account name", FAIL, "{sErrorMsg} is displayed") 
						[ ] AddAnyAccount.AlertMessage.OK.Click ()
						[ ] AddAnyAccount.SetActive ()
						[ ] AddAnyAccount.Cancel.Click()
						[+] if(AlertMessage.Exists(SHORT_SLEEP))
							[ ] AlertMessage.SetActive()
							[ ] AlertMessage.Yes.Click()
						[ ] bFlag = FALSE
						[ ] iFunctionResult=FAIL
						[ ] 
					[ ] 
					[+] if(bFlag==TRUE)
						[ ] //Enter Statement Ending Date
						[ ] AddAnyAccount.StatementEndingDate.SetText(sStatementEndingDate) 
						[ ] //Enter value in Cash
						[ ] AddAnyAccount.Cash.SetText(sCash)
						[ ] //Enter value in MoneyMarket
						[ ] AddAnyAccount.MoneyMarket.SetText(sMoneyMarket)
						[ ] 
						[ ] //Click on Next
						[ ] AddAnyAccount.Next.Click()
						[ ] 
						[ ] //AddAnyAccount.Next.Click()
						[+] if(QuickenWindow.QuickenAccountSetup.Exists(15))
							[ ] //Account Security window is activated
							[ ] QuickenWindow.QuickenAccountSetup.SetActive()
							[ ] sleep(1)
							[ ] //Don't Enter any security and Click on Next
							[ ] QuickenWindow.QuickenAccountSetup.Next.Click()
							[ ] 
							[ ] sleep(1)
							[ ] //Agree on No Security: select Yes
							[ ] QuickenWindow.QuickenAccountSetup.NoSecurityAlert.SetActive()
							[ ] QuickenWindow.QuickenAccountSetup.NoSecurityAlert.Yes.Click()
							[ ] sleep(1)
							[ ] //Click on done
							[ ] QuickenWindow.QuickenAccountSetup.SetActive()
							[ ] QuickenWindow.QuickenAccountSetup.Done.Click()
							[ ] WaitForState(QuickenWindow.QuickenAccountSetup, false,5)
						[+] // else
							[ ] // ReportStatus("Verify Quicken Account Setup window",FAIL,"Quicken Account Setup window did not appear")
						[ ] 
						[+] if(sAccountType=="IRA or Keogh Plan")
							[+] if(sAccountUsedPrimarilyOrOwnerIRA!=NULL)
								[ ] AddAnyAccount.WhoOwnsThisIRA.Select(sAccountUsedPrimarilyOrOwnerIRA)
							[+] if(sIRAType!=NULL)
								[ ] AddAnyAccount.IRAType.Select(sIRAType)
							[ ] AddAnyAccount.Next.Click()
							[ ] 
						[ ] 
						[ ] //Click on Finish
						[ ] AccountAdded.SetActive()
						[ ] AccountAdded.Finish.Click()
						[ ] iFunctionResult=PASS
					[ ] 
				[+] else
					[ ] ReportStatus("Validate Add {sAccountType} Account Window", FAIL, "Add {sAccountType} Account window is not available") 
				[ ] 
			[+] else
				[ ] ReportStatus("Validate Add Accpopunt window", FAIL, "Add Account window is not opened")
				[ ] iFunctionResult=FAIL
			[ ] CloseMobileSyncInfoPopup()
		[+] except
			[ ] ExceptLog()
			[+] if(AddAccount.Exists(SHORT_SLEEP))
				[ ] AddAccount.Close()
			[+] if(AddAnyAccount.Exists(SHORT_SLEEP))
				[ ] AddAnyAccount.Close()
				[+] if(AlertMessage.Exists(SHORT_SLEEP))
					[ ] AlertMessage.Yes.Click()
				[ ] 
			[+] if(QuickenAccountSetup.Exists(SHORT_SLEEP))
				[ ] QuickenAccountSetup.Close()
				[+] if(AddAnyAccount.Exists(SHORT_SLEEP))
					[ ] AddAnyAccount.Close()
					[+] if(AlertMessage.Exists(SHORT_SLEEP))
						[ ] AlertMessage.Yes.Click()
					[ ] 
				[+] if(AlertMessage.Exists(SHORT_SLEEP))
					[ ] AlertMessage.SetActive()
					[ ] AlertMessage.Yes.Click()
			[ ] iFunctionResult=FAIL
			[ ] 
		[ ] FAIL:
		[ ] // Function return
		[ ] return iFunctionResult 
		[ ] 
	[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: AddManual401KAccount()
		[ ] //
		[ ] // DESCRIPTION:	This function will add Investment account i.e. 401(k) or 403(b) account  using manual option.
		[ ] // 
		[ ] //
		[ ] // PARAMETERS IN:		STRING 	sAccountType		 	Type of the account to be created e.g. 401(k) or 403(b)
		[ ] //							STRING      sAccounName			 Name of the account e.g. Intuit
		[ ] //							STRING      sEmployerName	      	 Employer Name e.g. PSL
		[ ] //							STRING	      sStatementEndingDate 	 Date
		[ ] //							STRING	      sSecurity   				 Security name e.g. Intu	
		[ ] //							INTEGER 	iTotalShares                    Total number of shares e.g. 10
		[ ] //
		[ ] // RETURNS:				INTEGER		PASS  = If investment account is created successfully
		[ ] //											FAIL    = if any error occurs while adding account
		[ ] //
		[ ] // REVISION HISTORY:	08/02/2013   Created By	Udita Dube
		[ ] //// updtaed Abhijit S, July 2015
	[ ] // ==========================================================
	[+] public INTEGER AddManual401KAccount( STRING sAccountType,STRING sAccountName, STRING sEmployerName, STRING sStatementEndingDate optional, STRING sSecurity optional,INTEGER iTotalShares)
		[ ] 
		[+] //Variable declaration
			[ ] INTEGER iFunctionResult
			[ ] STRING sDateFormat="m/d/yyyy"
			[+] if( IsNULL(sStatementEndingDate))
				[ ] sStatementEndingDate =Modifydate(-90 ,sDateFormat)
		[+] do
			[ ] 
			[ ] //Verify Account Bar is Expanded
			[ ] ExpandAccountBar()
			[ ] // Set active main Quicken window
			[ ] QuickenWindow.SetActive()
			[ ] // Click on Add Account
			[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.AddAnAccount.DoubleClick()
			[ ] //Check that "Add Account" window is opened or not
			[+] if(AddAccount.Exists(30))
				[ ] AddAccount.SetActive()
				[ ] //Enter Account Type
				[ ] AddAccount.x401kOr403b.DoubleClick()
				[ ] 
				[ ] Waitforstate(AddAnyAccount,TRUE,SHORT_SLEEP)
				[+] if(AddAnyAccount.Exists(SHORT_SLEEP))
					[ ] 
					[ ] //Click on "Addvanced Setup" link
					[ ] AddAnyAccount.Panel.QWHtmlView1.Click (1, 65, 5)
					[ ] //Select source of transactions
					[ ] AddAnyAccount.AddCheckingAccount.Select("I want to enter my transactions manually")
					[ ] //Click on Next
					[ ] AddAnyAccount.Next.Click()
					[ ] //Verify window is enabled
					[ ] Waitforstate(AddAnyAccount.Dlg401K403BSetup,TRUE,SHORT_SLEEP)
					[ ] 
					[+] if (Dlg401K403BSetup.Exists(5))
						[ ] Dlg401K403BSetup.SetActive()
						[ ] //Add Account Name
						[ ] Dlg401K403BSetup.NameThisAccountTextField.SetText("{sAccountName}")  
						[ ] 
						[ ] //Enter Statement Ending Date
						[ ] Dlg401K403BSetup.StatementEndingDateTextField.SetText(sStatementEndingDate) 
						[ ] //Enter value in Employer name
						[ ] Dlg401K403BSetup.EmployerNameTextField.SetText(sEmployerName) 
						[ ] //Click on Next
						[ ] Dlg401K403BSetup.Next.Click()
						[ ] Dlg401K403BSetup.Next.Click()
						[ ] 
						[+] if(sSecurity!=NULL)
							[ ] //AccountPasswordTextField.SetPosition (1, 1)
							[ ] Dlg401K403BSetup.QWListViewer.ListBox.TypeKeys(sSecurity)
							[ ] //AccountPasswordTextField.TypeKeys(sSecurity)
							[ ] Dlg401K403BSetup.Next.Click ()
							[ ] sleep(30)
							[+] if(QuickenAlertMessage.Exists())
								[ ] QuickenAlertMessage.OK.Click()
							[ ] 
							[ ] 
							[ ] Dlg401K403BSetup.QWListViewer.ListBox.TypeKeys(str(iTotalShares))
							[ ] Dlg401K403BSetup.Next.Click()
							[ ] 
						[ ] 
						[ ] 
						[+] if(AlertMessage.Exists(2))
							[ ] //Agree on No Security: select Yes
							[ ] AlertMessage.Yes.Click()
						[ ] 
						[ ] Waitforstate(Dlg401K403BSetup.Done,TRUE,SHORT_SLEEP)
						[ ] 
						[ ] //Click on done
						[ ] Dlg401K403BSetup.Done.Click()
						[ ] 
						[+] if(AlertMessage.Exists(SHORT_SLEEP))
							[ ] AlertMessage.SetActive()
							[ ] AlertMessage.No.Click()
						[ ] 
						[+] if(Dlg401K403BSetup.Done.Exists())
							[ ] Dlg401K403BSetup.SetActive()
							[ ] Dlg401K403BSetup.Done.Click()
						[ ] 
						[+] if(AlertMessage.Exists(SHORT_SLEEP))
							[ ] AlertMessage.SetActive()
							[ ] AlertMessage.No.Click()
						[ ] 
						[ ] //Click on Finish
						[ ] AccountAdded.Finish.Click()
						[ ] 
						[ ] iFunctionResult=PASS
					[+] else
						[ ] ReportStatus("Verify dialog 401K403BSetup", FAIL , "Dialog 401K403BSetup didn't appear.")
						[ ] iFunctionResult=FAIL
					[ ] 
				[+] else
					[ ] ReportStatus("Validate Add {sAccountType} Account Window", FAIL, "Add {sAccountType} Account window is not available")
					[ ] iFunctionResult=FAIL
					[ ] 
				[ ] CloseMobileSyncInfoPopup()
			[+] else
				[ ] ReportStatus("Validate Add Accpopunt window", FAIL, "Add Account window is not opened")
				[ ] iFunctionResult=FAIL
			[ ] 
		[+] except
			[ ] ExceptLog()
			[+] if(AddAccount.Exists(SHORT_SLEEP))
				[ ] AddAccount.Close()
			[+] if(AddAnyAccount.Exists(SHORT_SLEEP))
				[ ] AddAnyAccount.Close()
				[+] if(AlertMessage.Exists(SHORT_SLEEP))
					[ ] AlertMessage.Yes.Click()
				[ ] 
			[+] if(QuickenAccountSetup.Exists(SHORT_SLEEP))
				[ ] QuickenAccountSetup.Close()
				[+] if(AddAnyAccount.Exists(SHORT_SLEEP))
					[ ] AddAnyAccount.Close()
					[+] if(AlertMessage.Exists(SHORT_SLEEP))
						[ ] AlertMessage.Yes.Click()
					[ ] 
				[+] if(MessageBox.Exists(SHORT_SLEEP))
					[ ] MessageBox.Yes.Click()
			[ ] ExceptLog()
			[ ] iFunctionResult=FAIL
			[ ] 
		[ ] // Function return
		[ ] return iFunctionResult 
		[ ] 
	[ ] // 
	[ ] // // ==========================================================
	[+] // // FUNCTION: AddSpendingAccount()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will add banking accounts using manual option..
		[ ] // // If account is added successfully TRUE is returned else FALSE with error message is returned.
		[ ] // //
		[ ] // // PARAMETERS:		STRING 	sDataFile		Name of the data file
		[ ] // //						STRING     sWorkSheet	Name of the Sheet
		[ ] // //
		[ ] // // RETURNS:			INTEGER	PASS = If account is created successfully
		[ ] // //									FAIL = if any error occurs while adding account
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //	April 28, 2011 Mamta Jain	Created
	[ ] // // ==========================================================
	[+] // public INTEGER AddSpendingAccount(STRING sDataFile, STRING sWorkSheet)
		[+] // // Variable declaration
			[ ] // INTEGER iFunctionResult, i, j, iCount
			[ ] // LIST oF ANYTYPE lsExcelData
			[ ] // LIST OF STRING lsAccountsData
			[ ] // STRING sErrorMsg, sActual, sHandle
			[ ] // BOOLEAN bMatch, bErrorStatus = FALSE
			[ ] // iFunctionResult = FAIL
		[+] // do
			[+] // if(FileExists(sDataFile))
				[ ] // lsExcelData = ReadExcelTable(sDataFile, sWorkSheet)
				[ ] // 
				[+] // for(i = 1; i<= ListCount(lsExcelData); i++)
					[ ] // lsAccountsData = lsExcelData[i]
					[+] // if(IsNULL(lsAccountsData[1]))
						[ ] // lsAccountsData[1] = ""
					[+] // if(IsNULL(lsAccountsData[2]))
						[ ] // lsAccountsData[2] = ""
					[+] // if(IsNULL(lsAccountsData[3]))
						[ ] // lsAccountsData[3] = ""
					[+] // if(IsNULL(lsAccountsData[4]))
						[ ] // lsAccountsData[4] = ""
					[+] // if(IsNULL(lsAccountsData[5]))
						[ ] // lsAccountsData[5] = ""
					[ ] // print(lsAccountsData)
					[ ] // iFunctionResult=AddManualSpendingAccount(lsAccountsData[1], lsAccountsData[2], lsAccountsData[3], lsAccountsData[4])
					[+] // // switch(lsAccountsData[1])
						[+] // // case "Checking"
							[ ] // // ExpandAccountBar()
							[ ] // // QuickenWindow.SetActive()
							[ ] // // QuickenMainWindow.QWNavigator.QWNavBtnTray.AddAnAccount.Click()
							[ ] // // AddAccount.CustomWin(lsAccountsData[1]).Click()
							[+] // // if(AddAnyAccount.Exists(700) && AddAnyAccount.IsEnabled())
								[ ] // // AddAnyAccount.SetActive()
								[ ] // // AddAnyAccount.Panel.QWHtmlView1.Click (1, 62, 5)
								[ ] // // AddAnyAccount.AddCheckingAccount.Select("I want to enter my transactions manually")
								[ ] // // AddAnyAccount.Next.Click()
							[+] // // else
								[ ] // // ReportStatus("Validate Add {lsAccountsData[1]} Account Window", FAIL, "Add {lsAccountsData[1]} Account window is not available") 
							[+] // // if(AddAnyAccount.Exists(SHORT_SLEEP))
								[ ] // // // Enter Account Name
								[ ] // // AddAnyAccount.AccountName.SetText(lsAccountsData[2])
								[ ] // // AddAnyAccount.Next.Click()
								[ ] // // // Enter Statement Ending Date
								[ ] // // AddAnyAccount.StatementEndingDate.SetText (lsAccountsData[4])
								[ ] // // // Enter Account Balance
								[ ] // // AddAnyAccount.StatementEndingBalance.SetText(lsAccountsData[3])
								[ ] // // AddAnyAccount.Next.Click()
								[ ] // // // If date format is not correct
								[+] // // if(AddAnyAccount.AlertMessage.Exists(5))
									[ ] // // AddAnyAccount.AlertMessage.SetActive()
									[ ] // // AddAnyAccount.AlertMessage.OK.Click()
									[ ] // // LogError("Date format is not valid")
									[ ] // // iFunctionResult = FAIL
									[ ] // // return iFunctionResult
								[ ] // // // Click on Finish
								[ ] // // AccountAdded.Finish.Click()
								[ ] // // iFunctionResult = PASS
							[+] // // else
									[ ] // // ReportStatus("Validate Add {lsAccountsData[1]} Account Window", FAIL, "Add {lsAccountsData[1]} Account window is not available") 
							[ ] // // 
						[+] // // case "Savings"
							[ ] // // ExpandAccountBar()
							[ ] // // QuickenWindow.SetActive()
							[ ] // // // Click on Add Account button
							[ ] // // QuickenMainWindow.QWNavigator.QWNavBtnTray.AddAnAccount.Click()
							[ ] // // // Select Account Type
							[ ] // // AddAccount.Spending.Select(lsAccountsData[1])
							[ ] // // AddAccount.Next.Click()
							[ ] // // //AddAnyAccount.VerifyEnabled(TRUE, 300)
							[+] // // if(AddAnyAccount.Exists(500))
								[ ] // // AddAnyAccount.Panel.QWHtmlView1.Click (1, 65, 5)
								[ ] // // AddAnyAccount.AddCheckingAccount.Select("I want to enter my transactions manually")
								[ ] // // AddAnyAccount.Next.Click()
								[ ] // // 
							[+] // // else
								[ ] // // ReportStatus("Validate Add {lsAccountsData[1]} Account Window", FAIL, "Add {lsAccountsData[1]} Account window is not available") 
							[ ] // // 
							[ ] // // 
						[+] // // case "Credit Card"
							[ ] // // ExpandAccountBar()
							[ ] // // QuickenWindow.SetActive()
							[ ] // // // Click on Add Account button
							[ ] // // QuickenMainWindow.QWNavigator.QWNavBtnTray.AddAnAccount.Click()
							[ ] // // // Select Account Type
							[ ] // // AddAccount.Spending.Select(lsAccountsData[1])
							[ ] // // AddAccount.Next.Click()
							[ ] // // //AddAnyAccount.VerifyEnabled(TRUE, 300)
							[+] // // if(AddAnyAccount.Exists(500))
								[ ] // // AddAnyAccount.Panel.QWHtmlView1.Click (1, 65, 5)
								[ ] // // AddAnyAccount.AddCheckingAccount.Select("I want to enter my transactions manually")
								[ ] // // AddAnyAccount.Next.Click()
							[+] // // else
								[ ] // // ReportStatus("Validate Add {lsAccountsData[1]} Account Window", FAIL, "Add {lsAccountsData[1]} Account window is not available") 
							[ ] // // 
							[ ] // // 
						[+] // // case "Cash"
							[ ] // // ExpandAccountBar()
							[ ] // // QuickenWindow.SetActive()
							[ ] // // // Click on Add Account button
							[ ] // // QuickenMainWindow.QWNavigator.QWNavBtnTray.AddAnAccount.Click()
							[ ] // // // Select Account Type
							[ ] // // AddAccount.Spending.Select(lsAccountsData[1])
							[ ] // // AddAccount.Next.Click()
							[ ] // // 
						[+] // // default
							[ ] // // ReportStatus("Validate Account", FAIL, "Account Type - {lsAccountsData[1]} not found") 
							[ ] // // iFunctionResult = FAIL
							[ ] // // continue
					[+] // 
						[ ] // //ReportStatus("Validate Add {lsAccountsData[1]} Account Window", FAIL, "Add {lsAccountsData[1]} Account window is not available") 
						[ ] // 
			[+] // else
				[ ] // ReportStatus("Validate Data file", FAIL, "{sDataFile} Data file doesn't exists.")
			[ ] // 
		[+] // except
			[+] // if(AddAnyAccount.Exists(SHORT_SLEEP))
				[+] // if(AddAnyAccount.AlertMessage.Exists(SHORT_SLEEP))
					[ ] // AddAnyAccount.AlertMessage.OK.Click()
				[ ] // AddAnyAccount.Cancel.CLick()
				[+] // if(AddAnyAccount.AlertMessage.Exists(SHORT_SLEEP))
					[ ] // AddAnyAccount.AlertMessage.SetActive()
					[ ] // AddAnyAccount.AlertMessage.OK.Click()
					[ ] // 
			[ ] // iFunctionResult = FAIL
		[ ] // 
		[ ] // return iFunctionResult
	[ ] // 
	[ ] // // ==========================================================
	[+] // // FUNCTION: AddOnlineAccount()
		[ ] // //
		[ ] // // DESCRIPTION:		This function will add Online Accounts (Banking and Investing Accounts)
		[ ] // // 
		[ ] // //
		[ ] // // PARAMETERS:		STRING 	sDataFile			Name of the Data file
		[ ] // //						STRING 	sWorkSheet	Name of the worksheet
		[ ] // //
		[ ] // // RETURNS:			None
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // // March 18, 2011	Mamta Jain created
	[ ] // // ==========================================================
	[+] // public INTEGER AddOnlineAccount(STRING sDataFile, STRING sWorkSheet)
		[+] // // Variable Declaration
			[ ] // LIST OF ANYTYPE lsExcelData
			[ ] // LIST OF STRING lsAccountData, lsSplit, lsSplit1,lsQuestion, lsAnswer
			[ ] // INTEGER iCount, i, j,k
			[ ] // STRING sText, sActual, sErrorMsg
			[ ] // BOOLEAN bMatch, bEnabled, bErrorOccuredFlag
		[ ] // 
		[+] // // Variable Defination
			[ ] // sActual = "Select Connection Method"
			[ ] // bEnabled = FALSE
			[ ] // iFunctionResult = PASS
		[ ] // 
		[+] // do
			[+] // if(FileExists(sDataFile))
				[ ] // lsExcelData=ReadExcelTable(sDataFile, sWorkSheet)		// Get data from data file
				[ ] // iCount = ListCount(lsExcelData)			// Get the row count
				[ ] // QuickenMainWindow.SetActive ()
				[ ] // ExpandAccountBar()				// Expand Account bar
				[+] // for (i = 1; i<=iCount; i++)
					[+] // do
						[ ] // 
						[ ] //  // Fetch rows from the given sheet
						[ ] // lsAccountData = lsExcelData[i]
						[ ] // bErrorOccuredFlag = FALSE
						[+] // if(IsNULL(lsAccountData[1]))
							[ ] // lsAccountData[1] = ""
						[+] // if(IsNULL(lsAccountData[2]))
							[ ] // lsAccountData[2] = ""
						[+] // if(IsNULL(lsAccountData[3]))
							[ ] // lsAccountData[3] = ""
						[+] // if(IsNULL(lsAccountData[4]))
							[ ] // lsAccountData[4] = ""
						[+] // if(IsNULL(lsAccountData[5]))
							[ ] // lsAccountData[5] = ""
						[+] // else
							[ ] // lsSplit = Split(lsAccountData[5], ",")			// splitting the Question/Answer pairs
							[+] // for(k=1; k<=ListCount(lsSplit); k++)
								[ ] // lsSplit1 = Split(lsSplit[k], ":")
								[+] // for(j= 1; j<= ListCount(lsSplit1); j++)
									[+] // if(j%2 == 0)
										[ ] // ListAppend(lsAnswer, lsSplit1[j])		// creating a list of Answers
									[+] // else
										[ ] // ListAppend(lsQuestion, lsSplit1[j])	// creating a list of Questions
							[ ] // 
						[+] // if(IsNULL(lsAccountData[6]))
							[ ] // lsAccountData[6] = ""
						[+] // if(IsNULL(lsAccountData[7]))
							[ ] // lsAccountData[7] = ""
						[ ] // 
						[ ] // 
						[ ] // QuickenWindow.SetActive()
						[ ] // QuickenMainWindow.QWNavigator.QWNavBtnTray.AddAnAccount.Click()
						[ ] // AddAccount.CustomWin(lsAccountData[1]).Click()
						[+] // if(AddAnyAccount.Exists(700) && AddAnyAccount.IsEnabled())
							[ ] // AddAnyAccount.SetActive()
							[ ] // //AddAnyAccount.Panel.QWHtmlView1.Click (1, 62, 5)
						[ ] // 
						[ ] // 
						[ ] // // QuickenMainWindow.SetActive ()
						[ ] // // QuickenMainWindow.QWNavigator.QWNavBtnTray.AddAnAccount.Click ()
						[ ] // // AddAccount.VerifyEnabled(TRUE, 150)		// Verify window is enable as connection is established
						[ ] // // AddAccount.SetActive ()
						[ ] // // AddAccount.Spending.Select (lsAccountData[1])	// Select type of account
						[ ] // 
						[ ] // // AddAccount.Next.Click ()
						[ ] // AddAnyAccount.VerifyEnabled(TRUE,150)
						[ ] // AddAnyAccount.BankName.SetText(lsAccountData[2])  // Enter the name of the bank
						[ ] // 
						[ ] // AddAnyAccount.SetActive ()
						[+] // if(AddAnyAccount.BankList.ListBox1.GetContents () == {})			// Check whether entered bank name is valid or not
							[ ] // ReportStatus("Verify Bank Name", WARN, "Bank name - {lsAccountData[2]}, you entered doen't exists")
							[ ] // goto CloseWindow
						[ ] // 
						[ ] // AddAnyAccount.Next.Click ()
						[ ] // AddAnyAccount.VerifyEnabled(TRUE,150)
						[ ] // AddAnyAccount.SetActive ()
						[ ] // sText = Quicken2012Popup.CurrentDir.GetText ()		// for Wells Fargo, it asks for Connection type
						[ ] // bMatch = MatchStr("*{sText}*", sActual)
						[+] // if(bMatch == TRUE)
							[ ] // AddAnyAccount.AddSavingsAccount.Select(lsAccountData[6])
							[ ] // AddAnyAccount.Next.Click ()
						[ ] // 
						[ ] // AddAnyAccount.BankUserID.SetText(lsAccountData[3])      // Enter user id      d_knievel17	Quicken70
						[ ] // AddAnyAccount.BankPassword.SetText(lsAccountData[4])   // Enter password
						[+] // if(AddAnyAccount.AccountNumber.Exists(SHORT_SLEEP) == TRUE)			// Enter Account no. (for some bank it is mandatory e.g. Scottrade )
							[ ] // AddAnyAccount.AccountNumber.SetText(lsAccountData[7])
						[ ] // 
						[+] // if(AddAnyAccount.Next.IsEnabled() == FALSE)			// Connect/Next button is disabled for blank user id and password, verify the status
							[ ] // ReportStatus("Verify Next Button Status", WARN, "Connect (Next) button is disabled")
							[ ] // bErrorOccuredFlag = TRUE
							[ ] // 
						[+] // else
							[ ] // AddAnyAccount.Next.Click ()
							[+] // if(AddAnyAccount.Exists(150) == TRUE)
								[+] // while(UnableToConnect.Exists(10))		// check whether any error message "Quicken is not able to connect to internet" is displayed or not
									[ ] // UnableToConnect.OK.Click ()
									[ ] // goto ErrorMessage				
									[ ] // 
								[+] // // if(UnableToConnect.Exists(10))				
									[ ] // // UnableToConnect.OK.Click ()
								[ ] // // if(UnableToConnect.Exists(10))
								[ ] // 
								[+] // if(BankAccess.Exists(10))				// for some bank security key / MFA is asked, so check the security window is displayed
									[ ] // BankAccess.SetActive()
									[+] // if(ListCount(lsQuestion)>0 && ListCount(lsAnswer)>0)					// check whether list of Question and answer is not empty
										[ ] // sText = BankAccess.SecurityMessage.SecurityQuestion.GetText()	// get the question from security window
										[+] // for(j=1;j<=ListCount(lsQuestion);j++)			
											[ ] // bMatch = MatchStr("*{lsQuestion[j]}*", sText)				// verify the question displayed in security window matches with any of the questions mentioned in data sheet
											[+] // if(bMatch == TRUE)
												[ ] // BankAccess.SecurityMessage.SecurityAnswer.SetText(lsAnswer[j])	// enter the answer after the match is successful
												[ ] // break
											[+] // else
												[ ] // continue
									[ ] // 
									[ ] // BankAccess.OK.Click()
									[+] // if(MessageBox.Exists(SHORT_SLEEP))
										[ ] // MessageBox.SetActive()
										[ ] // MessageBox.OK.Click()
										[ ] // BankAccess.Cancel.Click()
								[ ] // 
								[+] // if(AddAnyAccount.Exists(150))
									[ ] // 
									[+] // if(AddAnyAccount.Nickname.Exists (10))			// For some account type Account nick name window is displayed
										[ ] // AddAnyAccount.SetActive ()
										[ ] // AddAnyAccount.Next.Click()
										[ ] // AddAnyAccount.VerifyEnabled(TRUE, 150)
										[ ] // AddAnyAccount.SetActive()
									[ ] // 
									[+] // if(AddAnyAccount.SignUpNow.Exists (5))			// for brokerage window, on entering invalid user id/ password different window is displayed with error message
										[ ] // AddAnyAccount.SetActive ()
										[ ] // sText  = AddAnyAccount.NeedACustomerIDAndPasswor.GetText ()
										[ ] // ReportStatus("Verify Error Message", WARN, "Message - {sText} is displayed")
										[ ] // //bErrorOccuredFlag = TRUE
										[ ] // goto CloseWindow				// execute the close window part and skip rest of the execution
									[ ] // 
									[ ] // ErrorMessage:
									[+] // if(AddAnyAccount.ErrorMessage.Exists (10))
										[ ] // AddAnyAccount.SetActive()
										[ ] // sErrorMsg = AddAnyAccount.ErrorMessage.GetText ()
										[ ] // ReportStatus("Verify Error Message", WARN, "Error Message - {sErrorMsg} is displayed")
										[ ] // goto CloseWindow
										[ ] // 
									[ ] // 
									[+] // if(SKU_TOBE_TESTED == "RPM" || SKU_TOBE_TESTED == "HAB")
										[+] // if(AddAnyAccount.BankAccounts.ListBox1.Exists (300))			// for valid user id and password, verify Listbox presence for HAB and RPM sku
											[ ] // bErrorOccuredFlag = FALSE
											[ ] // AddAnyAccount.SetActive ()
											[ ] // AddAnyAccount.BankAccounts.ListBox1.Select ("#4")
											[+] // if(AddAnyAccount.BankAccounts.ListBox1.PopupList1.Exists(SHORT_SLEEP))
												[ ] // AddAnyAccount.BankAccounts.ListBox1.PopupList1.Select (lsAccountData[1])		// Select correct account type
											[ ] // AddAnyAccount.Next.Click ()	
									[ ] // AddAnyAccount.Next.Click ()
									[+] // if(AccountAdded.Exists(100) == TRUE)			// check for last window i.e."Account added" window on successful account creation
										[ ] // AccountAdded.VerifyEnabled(TRUE, 100)
										[ ] // AccountAdded.SetActive ()
										[ ] // AccountAdded.Finish.Click ()
									[ ] // 
									[+] // else if(AccountAdded.Exists(SHORT_SLEEP) == FALSE)
										[ ] // ReportStatus("Verify Account", PASS, "{lsAccountData[1]} account with FI name - {lsAccountData[2]} is already added")
								[ ] // 
							[+] // else
								[ ] // bErrorOccuredFlag = TRUE
								[ ] // 
						[ ] // 
						[+] // if(bErrorOccuredFlag == TRUE)
							[+] // CloseWindow:								// Close the window
								[ ] // bErrorOccuredFlag = TRUE
								[ ] // AddAnyAccount.SetActive()
								[ ] // AddAnyAccount.Cancel.Click()  				
								[+] // if(MessageBox.Exists(SHORT_SLEEP))
									[ ] // MessageBox.SetActive()
									[ ] // MessageBox.OK1.Click()
						[ ] // 
						[+] // if(bErrorOccuredFlag == FALSE)
							[ ] // ReportStatus("Verify Account", PASS, "{lsAccountData[1]} account with FI name - {lsAccountData[2]} is added")
						[ ] // 
					[+] // except
						[ ] // ExceptLog()
						[ ] // AddAnyAccount.Cancel.Click()  				 //Close the window
						[+] // if(MessageBox.Exists(SHORT_SLEEP))		// on clicking cancel button, message box is displayed for confirmation of closing the window
							[ ] // MessageBox.SetActive()
							[ ] // MessageBox.OK1.Click()
						[ ] // 
						[ ] // continue
			[ ] // 
			[+] // else
				[ ] // ReportStatus("Validate Data file", FAIL, "{sDataFile} Data file doesn't exists.")
			[ ] // 
		[+] // except
			[ ] // LogException("Some error has occurred")
			[ ] // iFunctionResult = FAIL
		[ ] // return iFunctionResult
	[ ] // 
	[ ] // ==========================================================
	[+] // FUNCTION: ModifyAccount()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will perform different actions i.e. Edit Account name and Delete account.
		[ ] //
		[ ] // PARAMETERS:		ANYTYPE 	sWindowType			MDI or Popup
		[ ] //						STRING	sAccount				New Account name for editting
		[ ] //						STRING 	sAction				Edit / Delete 
		[ ] //
		[ ] // RETURNS:			INTEGER	PASS			 if requested action is performed successfully
		[ ] //									FAIL  			 if any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //   	Jan 10, 2011  Mamta Jain  Created
		[ ] //     May 18, 2012 Udita Dube   Updated for QW2013
	[ ] // ==========================================================
	[+] public INTEGER ModifyAccount(ANYTYPE sWindow, STRING sAccount, STRING sAction )
		[+] do
			[ ] 
			[+] switch(sWindow)
				[+] case "MDI"
					[ ] 
					[ ] QuickenWindow.SetActive ()
					[+] // Account Action is not identified in QW2013 hence updated
						[ ] // BankingMDI.AccountActions.Click ()
						[ ] // BankingMDI.AccountActions.TypeKeys(  Replicate (KEY_DN, 3))    // Type down key 3 times to select Edit option 
						[ ] // BankingMDI.AccountActions.TypeKeys(KEY_ENTER)		// type enter to open Edit page
					[ ] //MDIClient.AccountRegister.TxList.PressKeys(KEY_CONTROL+ KEY_SHIFT)	
					[ ] // MDIClient.AccountRegister.TxList.TypeKeys("<Ctrl-Shift-E>")
					[ ] //MDIClient.AccountRegister.TxList.ReleaseKeys(KEY_CONTROL+ KEY_SHIFT)
					[ ] 
					[+] do
						[ ] 
						[ ] // 2015-10-31: KalyanG: There seems to be a focus issue in quicken since build
						[ ] // 25.0.0.337, typekeys are not working. Workaround- click on menu and then do type
						[ ] // keys to keep QuickenWindow focus
						[ ] QuickenWindow.Edit.Click()
						[ ] 
						[ ] QuickenWindow.TypeKeys("<Ctrl-Shift-E>")
						[ ] 
						[ ] LogWarning("[ModifyAccount method] Workaround added to nagate the focus issue..Once the build is fixed remove the workaround, QW-5788")
						[ ] 
						[+] if !(AccountDetails.Exists(SHORT_SLEEP))
							[ ] raise
						[ ] 
					[+] except
						[ ] LogWarning("***Attempt1: [AccountDetails] dialog could not be invoked..")
					[ ] 
					[ ] 
					[ ] 
					[+] if (AccountDetails.Exists(SHORT_SLEEP))
						[ ] AccountDetails.SetActive ()
						[+] if (sAction == "Edit")
							[ ] AccountDetails.AccountName.SetText (sAccount)
							[ ] AccountDetails.OK.Click ()
							[ ] iFunctionResult = PASS
						[+] else if (sAction == "Delete")
							[ ] AccountDetails.SetActive ()
							[ ] AccountDetails.DeleteAccountButton.Click ()
							[+] if (DeleteAccount.Exists(SHORT_SLEEP))
								[ ] DeleteAccount.SetActive ()
								[ ] DeleteAccount.YesField.SetPosition (1, 1)
								[ ] DeleteAccount.YesField.SetText ("yes")
								[ ] DeleteAccount.OK.Click ()
								[ ] iFunctionResult = PASS
							[+] else
								[ ] LogException("Delete Account window is not displayed")
								[ ] iFunctionResult = FAIL
							[ ] 
							[ ] 
						[ ] 
						[+] else
							[ ] ReportStatus("Validate Action", FAIL, "{sAction} not found")
							[ ] iFunctionResult = FAIL
					[ ] 
					[+] else
						[ ] LogException("Account Details Window is not open")
						[ ] iFunctionResult = FAIL
					[ ] 
				[ ] 
				[+] case "PopUp"
					[ ] BankingPopUp.SetActive ()
					[+] // Account Action is not identified in QW2013 hence updated
						[ ] // BankingPopUp.AccountActions.Click ()
						[ ] // BankingPopUp.AccountActions.TypeKeys(  Replicate (KEY_DN, 3))    // Type down key 3 times to select Edit option 
						[ ] // BankingPopUp.AccountActions.TypeKeys(KEY_ENTER)		// type enter to open Edit page
					[ ] BankingPopUp.PressKeys(KEY_CONTROL+ KEY_SHIFT)	
					[ ] BankingPopUp.TypeKeys("E")
					[ ] BankingPopUp.ReleaseKeys(KEY_CONTROL+ KEY_SHIFT)	
					[ ] 
					[+] if(AccountDetails.Exists(SHORT_SLEEP))
						[ ] AccountDetails.SetActive ()
						[+] if (sAction == "Edit")
							[ ] AccountDetails.AccountName.SetText (sAccount)
							[ ] AccountDetails.OK.Click ()
							[ ] BankingPopUp.Close()
							[ ] iFunctionResult = PASS
						[ ] 
						[+] else if (sAction == "Delete")
							[ ] AccountDetails.DeleteAccountButton.Click (1, 71, 10)			// click delete account button
							[+] if (DeleteAccount.Exists(SHORT_SLEEP))
								[ ] DeleteAccount.SetActive ()
								[ ] DeleteAccount.YesField.SetPosition (1, 1)
								[ ] DeleteAccount.YesField.SetText ("yes")
								[ ] DeleteAccount.OK.Click ()
								[ ] iFunctionResult = PASS
							[+] else
								[ ] LogException("Delete Account window is not displayed")
								[ ] iFunctionResult = FAIL
						[ ] 
						[+] else
							[ ] ReportStatus("Validate Action", FAIL, "{sAction} not found")
							[ ] iFunctionResult = FAIL
					[ ] 
					[+] else
						[ ] LogException("Account Details Window is not open")
						[ ] iFunctionResult = FAIL
					[ ] 
				[ ] 
				[+] default
					[ ] iFunctionResult = FAIL
					[ ] 
					[ ] 
				[ ] 
		[+] except
			[ ] ExceptLog()
			[+] if(AccountDetails.Exists(SHORT_SLEEP))
				[ ] AccountDetails.Close()
			[+] if(BankingPopUp.Exists(SHORT_SLEEP))
				[ ] BankingPopUp.Close()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: NavigateToAccountDetails()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will open the Account Details window for banking account
		[ ] //
		[ ] // PARAMETERS:			STRING  	sAccountType		E.g. Banking
		[ ] // 							INTEGER    iRow				Row number for the account
		[ ] // 							STRING      sTab				E.g. General, Online Services, Display Option
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If Account Details window opened successfully
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //  Sep 26, 2012	Udita Dube Created
	[ ] // ==========================================================
	[+] public INTEGER NavigateToAccountDetails(STRING sAccountName)
		[+] // Variable declaration
			[ ] INTEGER iNavigate
			[ ] STRING sActualAccountName
		[ ] 
		[+] do
			[ ] 
			[ ] // Activate Quicken window
			[ ] QuickenWindow.SetActive()
			[ ] 
			[ ] QuickenWindow.TypeKeys(KEY_CTRL_SHIFT_E)
			[ ] 
			[ ] WaitforState(AccountDetails,TRUE,10)
			[ ] 
			[ ] // Check Account name
			[+] if (AccountDetails.Exists(2))
				[ ] AccountDetails.SetActive()
				[ ] sActualAccountName=AccountDetails.AccountName.GetText()
				[+] if(sActualAccountName==sAccountName)
					[ ] ReportStatus("Validate Edit Account Details window", PASS, "Account Details window is available for {sAccountName}")
					[ ] iFunctionResult = PASS
					[ ] 
				[+] else
					[ ] ReportStatus("Validate Edit Account Details window", WARN, "Account Details window is available for {sActualAccountName} but expected account is {sAccountName}")
					[ ] iFunctionResult = FAIL
					[ ] 
			[+] else
				[ ] ReportStatus("Validate Account Details window", FAIL, "Account Details window is not opened")
				[ ] iFunctionResult = FAIL
				[ ] 
			[ ] 
			[ ] 
			[ ] 
		[+] except
			[ ] ExceptLog()
			[+] if(AccountDetails.Exists(SHORT_SLEEP))
				[ ] AccountDetails.SetActive()
				[ ] AccountDetails.Close()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: SelectAccountDetailsTabs()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will select the tab if Account Details window for any account is already opened
		[ ] //
		[ ] // PARAMETERS:			STRING  	sAccountType		E.g. Banking
		[ ] //							STRING      sTab				E.g. General, Online Services, Display Option
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If Account Details window opened successfully
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //  Oct 17, 2012	Udita Dube Created
	[ ] // ==========================================================
	[+] public INTEGER SelectAccountDetailsTabs(STRING sAccountType, STRING sTab)
		[ ] // Variable declaration
		[ ] 
		[+] do
			[ ] 
			[ ] 
			[+] if(AccountDetails.Exists(SHORT_SLEEP))
				[ ] 
				[ ] AccountDetails.SetActive()
				[ ] 
				[+] switch(sTab)
					[+] case sTAB_DISPLAY_OPTIONS
							[ ] AccountDetails.TextClick(sTAB_DISPLAY_OPTIONS) 
							[ ] iFunctionResult = PASS
					[+] case sTAB_ONLINE_SERVICES
							[ ] AccountDetails.TextClick(sTAB_ONLINE_SERVICES)
							[ ] iFunctionResult = PASS
					[+] case sTAB_GENERAL
						[ ] AccountDetails.TextClick(sTAB_GENERAL)
						[ ] iFunctionResult = PASS
						[ ] 
					[ ] 
				[ ] 
			[+] else
				[ ] iFunctionResult = FAIL
				[ ] ReportStatus("Account Details Window", FAIL, "Account Details window is not opened")
				[ ] 
			[ ] 
			[ ] 
			[ ] 
		[+] except
			[ ] ExceptLog()
			[+] if(AccountDetails.Exists(SHORT_SLEEP))
				[ ] AccountDetails.SetActive()
				[ ] AccountDetails.Close()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: NavigateToAccountDetails()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will open the Account Details window for any account and navigate to desired tab
		[ ] //
		[ ] // PARAMETERS:			STRING  	sAccountType		E.g. Banking
		[ ] // 							INTEGER    iRow				Row number for the account
		[ ] // 							STRING      sTab				E.g. General, Online Services, Display Option
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If navigation is successful
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //  Sep 26, 2012	Udita Dube Created
	[ ] // ==========================================================
	[+] // // public INTEGER NavigateToAccountDetailsTab(STRING sAccountType, INTEGER iRow, STRING sAccountName, STRING sTab optional)
		[+] // // // Variable declaration
			[ ] // // INTEGER iNavigate,iSelect
		[ ] // // 
		[+] // // do
			[ ] // // 
			[+] // // if(sTab == NULL)
				[ ] // // sTab="General"
			[ ] // // 
			[ ] // // // Activate Quicken window
			[ ] // // QuickenWindow.SetActive()
			[ ] // // 
			[ ] // // iSelect = AccountBarSelect(sAccountType, iRow)			// Select account
			[+] // // if (iSelect == PASS)
				[ ] // // iNavigate= NavigateToAccountDetails(sAccountName)
				[+] // // if (iNavigate == PASS)
					[ ] // // 
					[+] // // switch(sTab)
						[+] // // case "Display Options"
							[+] // // if((sAccountType==ACCOUNT_BANKING)||(sAccountType==ACCOUNT_INVESTING))
								[ ] // // AccountAdded.Click(1,256,58) 
								[ ] // // iFunctionResult = PASS
							[+] // // else
								[ ] // // AccountAdded.Click(1,144,53) 
								[ ] // // iFunctionResult = PASS
								[ ] // // 
						[+] // // case "Online Services"
							[+] // // if((sAccountType==ACCOUNT_BANKING)||(sAccountType==ACCOUNT_INVESTING))
								[ ] // // AccountAdded.Click(1,145,54)
								[ ] // // iFunctionResult = PASS
								[ ] // // 
							[+] // // else
								[ ] // // // This tab does not exist for Business and Property and Debt Account
						[+] // // case "General"
							[ ] // // AccountAdded.Click(1,64,54)
							[ ] // // iFunctionResult = PASS
							[ ] // // 
						[ ] // // 
					[ ] // // 
				[+] // // else
					[ ] // // iFunctionResult = FAIL
					[ ] // // ReportStatus("Validate Account Details window", FAIL, "Account Details window is not opened")
					[ ] // // 
			[+] // // else
				[ ] // // iFunctionResult = FAIL
				[ ] // // ReportStatus("Verification of navigation to Account Details", FAIL, "Account Details window is not opened")
				[ ] // // 
			[ ] // // 
			[ ] // // 
		[+] // // except
			[+] // // if(AccountAdded.Exists(SHORT_SLEEP))
				[ ] // // AccountAdded.Close()
			[ ] // // iFunctionResult = FAIL
		[ ] // // return iFunctionResult
		[ ] // // 
	[+] // public INTEGER NavigateToAccountDetailsTab(STRING sAccountType, INTEGER iRow, STRING sAccountName, STRING sTab optional)
		[+] // // Variable declaration
			[ ] // INTEGER iFunctionResult,iNavigate,iSelect,iTab
		[ ] // 
		[+] // do
			[ ] // 
			[+] // if(sTab == NULL)
				[ ] // sTab="General"
			[ ] // 
			[ ] // // Activate Quicken window
			[ ] // QuickenWindow.SetActive()
			[ ] // 
			[ ] // // iSelect = AccountBarSelect(sAccountType, iRow)			// Select account
			[ ] // iSelect = SelectAccountFromAccountBar(sAccountName,sAccountType)			// Select account
			[ ] // sleep(2)
			[+] // if (iSelect == PASS)
				[ ] // iNavigate= NavigateToAccountDetails(sAccountName)
				[+] // if (iNavigate == PASS)
					[ ] // sleep(2)
					[ ] // iTab=SelectAccountDetailsTabs(sAccountType,sTab)
					[+] // if(iTab==PASS)
						[ ] // iFunctionResult = PASS
					[ ] // 
				[+] // else
					[ ] // iFunctionResult = FAIL
					[ ] // ReportStatus("Validate Account Details window", FAIL, "Account Details window is not opened")
					[ ] // 
			[+] // else
				[ ] // iFunctionResult = FAIL
				[ ] // ReportStatus("Verification of navigation to Account Details", FAIL, "Account Details window is not opened")
				[ ] // 
			[ ] // 
			[ ] // 
		[+] // except
			[ ] // ExceptLog()
			[+] // if(AccountDetails.Exists(SHORT_SLEEP))
				[ ] // AccountDetails.SetActive()
				[ ] // AccountDetails.Close()
			[ ] // iFunctionResult = FAIL
		[ ] // return iFunctionResult
		[ ] // 
	[ ] 
	[+] // FUNCTION: NavigateToAccountDetails()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will open the Account Details window for any account and navigate to desired tab
		[ ] //
		[ ] // PARAMETERS:			STRING  	sAccountType		E.g. Banking
		[ ] // 							INTEGER    iRow				Row number for the account
		[ ] // 							STRING      sTab				E.g. General, Online Services, Display Option
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If navigation is successful
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //  Sep 26, 2012	Udita Dube Created
	[ ] // ==========================================================
	[ ] 
	[+] // public INTEGER NavigateToAccountDetailsTab(STRING sAccountType, INTEGER iRow, STRING sAccountName, STRING sTab optional)
		[+] // // Variable declaration
			[ ] // INTEGER iNavigate,iSelect,iTab
		[ ] // 
		[+] // do
			[ ] // 
			[+] // if(sTab == NULL)
				[ ] // sTab="General"
			[ ] // 
			[ ] // // Activate Quicken window
			[ ] // QuickenWindow.SetActive()
			[ ] // 
			[ ] // // iSelect = AccountBarSelect(sAccountType, iRow)			// Select account
			[ ] // iSelect = SelectAccountFromAccountBar(sAccountName,sAccountType)			// Select account
			[ ] // sleep(2)
			[+] // if (iSelect == PASS)
				[ ] // iNavigate= NavigateToAccountDetails(sAccountName)
				[+] // if (iNavigate == PASS)
					[ ] // sleep(2)
					[ ] // iTab=SelectAccountDetailsTabs(sAccountType,sTab)
					[+] // if(iTab==PASS)
						[ ] // iFunctionResult = PASS
					[ ] // 
				[+] // else
					[ ] // iFunctionResult = FAIL
					[ ] // ReportStatus("Validate Account Details window", FAIL, "Account Details window is not opened")
					[ ] // 
			[+] // else
				[ ] // iFunctionResult = FAIL
				[ ] // ReportStatus("Verification of navigation to Account Details", FAIL, "Account Details window is not opened")
				[ ] // 
			[ ] // 
			[ ] // 
		[+] // except
			[ ] // ExceptLog()
			[+] // if(AccountDetails.Exists(SHORT_SLEEP))
				[ ] // AccountDetails.SetActive()
				[ ] // AccountDetails.Close()
			[ ] // iFunctionResult = FAIL
		[ ] // return iFunctionResult
		[ ] // 
	[ ] 
	[+] public INTEGER NavigateToAccountDetailsTab(STRING sAccountType, STRING sAccountName, STRING sTab optional)
		[+] // Variable declaration
			[ ] INTEGER iNavigate,iSelect,iTab
		[ ] 
		[+] do
			[ ] 
			[+] if(sTab == NULL)
				[ ] sTab="General"
			[ ] 
			[ ] // Activate Quicken window
			[ ] QuickenWindow.SetActive()
			[ ] 
			[ ] // iSelect = AccountBarSelect(sAccountType, iRow)			// Select account
			[ ] iSelect = SelectAccountFromAccountBar(sAccountName,sAccountType)			// Select account
			[ ] sleep(2)
			[+] if (iSelect == PASS)
				[ ] iNavigate= NavigateToAccountDetails(sAccountName)
				[+] if (iNavigate == PASS)
					[ ] sleep(2)
					[ ] iTab=SelectAccountDetailsTabs(sAccountType,sTab)
					[+] if(iTab==PASS)
						[ ] iFunctionResult = PASS
					[+] else
						[ ] iFunctionResult = FAIL
				[+] else
					[ ] iFunctionResult = FAIL
					[ ] ReportStatus("Validate Account Details window", FAIL, "Account Details window is not opened")
					[ ] 
			[+] else
				[ ] iFunctionResult = FAIL
				[ ] ReportStatus("Verification of navigation to Account Details", FAIL, "Account Details window is not opened")
				[ ] 
			[ ] 
			[ ] 
		[+] except
			[ ] ExceptLog()
			[+] if(AccountDetails.Exists(SHORT_SLEEP))
				[ ] AccountDetails.SetActive()
				[ ] AccountDetails.Close()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: CloseAccount()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will close a perticular account
		[ ] //
		[ ] // PARAMETERS:			STRING  	sAccountType		E.g. Banking
		[ ] //							STRING      sAccountName		Account name which needs to be closed
		[ ] //							INTEGER    iRow 				Row number where accout is present      
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If Account closed successfully
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //  Dec 27, 2012	Udita Dube Created
	[ ] // ==========================================================
	[+] public INTEGER CloseAccount(STRING sAccountType, STRING sAccountName, INTEGER iRow optional)
		[+] // Variable declaration
			[ ] INTEGER iSelect,iNavigate,iValidate
			[ ] STRING sTab = "Display Options"
			[ ] STRING sWindowType = "MDI"
			[ ] STRING sSearch = "Balance Offset Tx"
			[ ] 
		[ ] 
		[+] do
			[ ] 
			[ ] iNavigate=NavigateToAccountDetailsTab(sAccountType,sAccountName,sTab)
			[ ] ReportStatus("Navigate to Display Options tab", PASS, "Display Option tab is opened for {sAccountName}")
			[ ] 
			[+] if(AccountDetails.Exists(SHORT_SLEEP))
				[ ] AccountDetails.SetActive()
				[ ] 
				[ ] // Check "Close Account" button
				[+] if(AccountDetails.CloseAccount.Exists(SHORT_SLEEP))
					[ ] AccountDetails.CloseAccount.Click()
					[+] if(PermanentlyCloseAccount.Exists(SHORT_SLEEP))
						[ ] ReportStatus("Check Permanently Close Account window", PASS, "Permanently Close Account window is available")
						[ ] PermanentlyCloseAccount.TypeYesToConfirm.SetText("yes")
						[ ] PermanentlyCloseAccount.OK.Click()
						[+] if(AlertMessage.Exists(SHORT_SLEEP))
							[ ] AlertMessage.SetActive()
							[ ] AlertMessage.OK.Click()
							[ ] 
						[ ] AccountDetails.Close()
						[ ] 
						[+] if(sAccountType==ACCOUNT_INVESTING)
							[ ] //iSelect = AccountBarSelect(sAccountType, iRow)	// select account
							[ ] iSelect = SelectAccountFromAccountBar(sAccountName,sAccountType)
							[+] if(iSelect==PASS)
								[ ] ReportStatus("Select Closed Account", iSelect, "Closed Account is selected") 
								[ ] QuickenWindow.SetActive ()
								[ ] BrokerageAccount.EnterTransactions.Click()
								[ ] wEnterTransaction.EnterTransaction.TypeKeys("<Alt-g>")
								[ ] wEnterTransaction.UseCashForThisTransaction.Select("#2")
								[ ] //Find Closed Account Name 
								[+] if(wEnterTransaction.FromAccountList.FindItem(sAccountName)==0)
									[ ] ReportStatus("Verify Closed Account availability in From Account list",PASS,"Closed investing account {sAccountName} is not available in From Account list for entering transaction")
									[ ] iFunctionResult=PASS
									[ ] 
								[+] else
									[ ] ReportStatus("Verify Closed Account availability in From Account list",FAIL,"Closed investing account {sAccountName} is available in From Account list for entering transaction")
									[ ] iFunctionResult=FAIL
								[ ] 
								[ ] 
								[ ] wEnterTransaction.Close()
								[ ] 
							[+] else
								[ ] ReportStatus("Select Closed Account", iSelect, "Closed Account is not selected") 
								[ ] iFunctionResult=FAIL
								[ ] 
						[+] else
							[ ] // Verify offset entry
							[ ] // iSelect = AccountBarSelect(sAccountType, iRow)	// select account
							[ ] iSelect = SelectAccountFromAccountBar(sAccountName,sAccountType)
							[+] if(iSelect==PASS)
								[ ] ReportStatus("Select Closed Account", iSelect, "Closed Account is selected") 
								[ ] 
								[ ] iValidate = FindTransaction(sWindowType,sSearch)		// find transaction
								[+] if(iValidate == PASS)
									[ ] ReportStatus("Validate Offset Transaction", iValidate, "Transaction with Input - {sSearch} is found") 
									[ ] iFunctionResult=PASS
								[+] else
									[ ] sleep(SHORT_SLEEP)
									[ ] NavigateToAccountDetailsTab(sAccountType,sAccountName,sTab)
									[+] if(!AccountDetails.CloseAccount.IsEnabled())
										[ ] ReportStatus("Verify Close Account button is disabled", PASS, "Close Account button is disabled hence {sAccountName} is closed")
										[ ] iFunctionResult=PASS 
									[+] else
										[ ] ReportStatus("Verify Close Account button is disabled", FAIL, "Close Account button is enabled hence {sAccountName} is not closed") 
										[ ] iFunctionResult=FAIL
									[ ] AccountDetails.Close()
									[ ] 
								[ ] 
							[+] else
								[ ] ReportStatus("SelectClosed  Account", iSelect, "Closed Account is not selected") 
								[ ] iFunctionResult=FAIL
							[ ] 
						[ ] 
						[ ] 
					[+] else
						[ ] ReportStatus("Check Permanently Close Account window", FAIL, "Permanently Close Account window is not available")
						[ ] iFunctionResult=FAIL
				[+] else
					[ ] ReportStatus("Verify Close Account button", FAIL, "Close Account button is not displayed")
					[ ] iFunctionResult=FAIL
			[+] else
				[ ] iFunctionResult = FAIL
				[ ] ReportStatus("Account Details Window", FAIL, "Account Details window is not opened")
				[ ] 
			[ ] 
			[ ] 
			[ ] 
		[+] except
			[ ] ExceptLog()
			[+] if(AccountDetails.Exists(SHORT_SLEEP))
				[ ] AccountDetails.Close()
			[ ] iFunctionResult = FAIL
		[ ] 
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: SeparateAccount()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will make a perticular account separate
		[ ] //
		[ ] // PARAMETERS:			STRING  	sAccountType		E.g. Banking
		[ ] //							STRING      sAccountName		Account name which needs to be closed
		[ ] //							INTEGER    iRow 				Row number where accout is present      
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If Account separated successfully
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //  Dec 27, 2012	Udita Dube Created
	[ ] // ==========================================================
	[+] public INTEGER SeparateAccount(STRING sAccountType, STRING sAccountName, INTEGER iRow optional)
		[+] // Variable declaration
			[ ] INTEGER iSelect
			[ ] STRING sTab = "Display Options"
			[ ] STRING sWindowType = "MDI"
			[ ] 
		[ ] 
		[+] do
			[ ] 
			[ ] iSelect = NavigateToAccountDetailsTab(sAccountType,sAccountName,sTab)			// Select first checking account
			[+] if (iSelect == PASS)
				[ ] 
				[ ] // Check "Keep This Account Separate" checkbox
				[+] if(AccountDetails.KeepThisAccountSeparate.Exists(SHORT_SLEEP))
					[ ] AccountDetails.KeepThisAccountSeparate.Check()
					[ ] AccountDetails.OK.Click()
					[ ] ReportStatus("Check KeepThisAccountSeparate checkbox", PASS, "First Checkbox: Keep this account separate- account will be excluded from Quicken reports and features is checked")
					[ ] iFunctionResult = PASS
					[ ] 
				[+] else
					[ ] ReportStatus("Check KeepThisAccountSeparate checkbox", FAIL, "First Checkbox: Keep this account separate- account will be excluded from Quicken reports and features is checked")
					[ ] iFunctionResult = FAIL
			[+] else
				[ ] ReportStatus("Verify navigation to Account Details", FAIL, "Navigation to Account Details tab is failed")
				[+] if(AccountDetails.Exists(SHORT_SLEEP))
					[ ] AccountDetails.Close()
				[ ] iFunctionResult=FAIL
			[ ] 
		[+] except
			[ ] ExceptLog()
			[+] if(AccountDetails.Exists(SHORT_SLEEP))
				[ ] AccountDetails.Close()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: AccountHideInTransactionList()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will make a perticular account hidden from transaction list
		[ ] //
		[ ] // PARAMETERS:			STRING  	sAccountType		E.g. Banking
		[ ] //							STRING      sAccountName		Account name which needs to be closed
		[ ] //							INTEGER    iRow 				Row number where accout is present      
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If Account is made hidden from transaction list successfully
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //  Dec 28, 2012	Udita Dube Created
	[ ] // ==========================================================
	[+] public INTEGER AccountHideInTransactionList(STRING sAccountType, STRING sAccountName, INTEGER iRow optional)
		[+] // Variable declaration
			[ ] INTEGER iSelect
			[ ] STRING sTab = "Display Options"
			[ ] STRING sWindowType = "MDI"
			[ ] 
		[ ] 
		[+] do
			[ ] 
			[ ] iSelect = NavigateToAccountDetailsTab(sAccountType,sAccountName,sTab)			// Select first checking account
			[+] if (iSelect == PASS)
				[ ] 
				[ ] // Check "Hide In Transaction Entry List" checkbox
				[+] if(AccountDetails.HideInTransactionEntryList.Exists(SHORT_SLEEP))
					[ ] AccountDetails.HideInTransactionEntryList.Check()
					[ ] AccountDetails.OK.Click()
					[ ] ReportStatus("Check Hide in Transaction Entry List checkbox", PASS, "Second Checkbox: Hide in transaction entry lists is checked")
					[ ] iFunctionResult = PASS
				[+] else
					[ ] ReportStatus("Check Hide in Transaction entry lists checkbox", FAIL, "Second Checkbox: Keep this account separate- account will be excluded from Quicken reports and features is not available")
					[ ] iFunctionResult = FAIL
			[+] else
				[ ] ReportStatus("Verify navigation to Account Details", FAIL, "Navigation to Account Details tab is failed")
				[ ] iFunctionResult = FAIL
			[ ] 
		[+] except
			[ ] ExceptLog()
			[+] if(AccountDetails.Exists(SHORT_SLEEP))
				[ ] AccountDetails.Close()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] // 
	[ ] // ==========================================================
	[+] // FUNCTION: AccountHideInAccountBarAccountList()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will make a perticular account hidden from Account Bar and Account List
		[ ] //
		[ ] // PARAMETERS:			STRING  	sAccountType		E.g. Banking
		[ ] //							STRING      sAccountName		Account name which needs to be closed
		[ ] //							INTEGER    iRow 				Row number where accout is present      
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If Account is made hidden from account bar and account list successfully
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //  Dec 28, 2012	Udita Dube Created
	[ ] // ==========================================================
	[+] public INTEGER AccountHideInAccountBarAccountList(STRING sAccountType, STRING sAccountName, INTEGER iRow optional)
		[+] // Variable declaration
			[ ] INTEGER iSelect
			[ ] STRING sTab = "Display Options"
			[ ] STRING sWindowType = "MDI"
			[ ] 
		[ ] 
		[+] do
			[ ] 
			[ ] iSelect = NavigateToAccountDetailsTab(sAccountType,sAccountName,sTab)			// Select first checking account
			[ ] 
			[+] if (iSelect == PASS)
				[ ] 
				[ ] // Check "Hide account name from account bar and account list" checkbox
				[+] if(AccountDetails.HideAccountNameInAccountB.Exists(SHORT_SLEEP))
					[ ] AccountDetails.HideAccountNameInAccountB.Check()
					[ ] AccountDetails.OK.Click()
					[ ] ReportStatus("Check Hide account name from account bar and account list checkbox", PASS, "Third Checkbox: Hide account name from account bar and account list is checked")
					[ ] iFunctionResult = PASS
				[+] else
					[ ] ReportStatus("Check Hide account name from account bar and account list checkbox", FAIL, "Third Checkbox: Hide account name from account bar and account list is not available")
					[ ] iFunctionResult = FAIL
				[ ] 
			[+] else
				[ ] ReportStatus("Verify navigation to Account Details", FAIL, "Navigation to Account Details tab is failed")
				[ ] iFunctionResult = FAIL
			[ ] 
		[+] except
			[+] if(AccountDetails.Exists(SHORT_SLEEP))
				[ ] AccountDetails.Close()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
		[ ] 
	[ ] // 
	[ ] // ==========================================================
	[+] // FUNCTION: AddCCMintBankAccount()
		[ ] //
		[ ] // DESCRIPTION:		This function will add Online Accounts (CCMintBank)
		[ ] // 
		[ ] //
		[ ] // PARAMETERS:		STRING 	sUserName			Username
		[ ] //						STRING 	sPassword	      	Password
		[ ] //						STRING      sAccountType		Checking 
		[ ] //						STRING 	sBankName			CCMintBank
		[ ] //
		[ ] // RETURNS:			None
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // 01 Jan, 2013	Udita Dube created
	[ ] // ==========================================================
	[+] public INTEGER AddCCMintBankAccount(STRING sUserName, STRING sPassword, STRING sAccountType optional,STRING sBankName optional,INTEGER iLinkAccount optional)
		[+] // Variable Declaration
			[ ] INTEGER iSelect, iFunctionResult
			[ ] STRING sErrorMsg
			[ ] BOOLEAN  bFlag
		[ ] 
		[ ] // Variable Defination
		[+] if (sAccountType==NULL)
			[ ] sAccountType="Checking"
		[+] if (sBankName==NULL)
			[ ] sBankName="CCMintBank"
		[+] if(IsNull(iLinkAccount))
			[ ] iLinkAccount=0
		[ ] bFlag = FALSE
		[ ] 
		[+] do
			[ ] QuickenWindow.SetActive()
			[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.AddAnAccount.Click()
			[+] if (AddAccount.Exists(30))
				[ ] AddAccount.SetActive()
				[ ] AddAccount.Checking.Click()
				[+] if(AddAnyAccount.BankName.Exists(700))
					[ ] AddAnyAccount.SetActive()
					[ ] sleep(3)
					[ ] AddAnyAccount.BankName.SetFocus()
					[ ] AddAnyAccount.BankName.TypeKeys(sBankName)  // Enter the name of the bank
					[ ] AddAnyAccount.Next.Click()
					[ ] WaitForstate(AddAnyAccount,TRUE,200)
					[+] if(AddAnyAccount.BankUserID.Exists(200))
						[ ] AddAnyAccount.SetActive ()
						[ ] AddAnyAccount.BankUserID.TypeKeys(sUserName)      //Enter user id      d_knievel17	Quicken70
						[ ] AddAnyAccount.BankPassword.TypeKeys(sPassword)   // Enter password
						[ ] //WaitforState(AddAnyAccount,TRUE,40)
						[+] if(AddAnyAccount.Next.IsEnabled() == FALSE)			// Connect/Next button is disabled for blank user id and password
							[ ] ReportStatus("Verify Next Button Status", WARN, "Connect (Next) button is disabled")
							[ ] bFlag = TRUE
							[ ] 
						[+] else
							[ ] AddAnyAccount.Next.Click ()
							[ ] // WaitforState(AddAnyAccount,TRUE,150)
							[ ] sleep(60)
							[ ] AddAnyAccount.SetActive()
							[ ] //added by shrivardhan ...................................for linking new account to an existing account
							[+] if(iLinkAccount>0)
								[ ] AddAnyAccount.ListBox.Click()
								[ ] AddAnyAccount.ListBox.TypeKeys(Replicate(KEY_DN,2))
								[ ] AddAnyAccount.ListBox.TypeKeys(KEY_RT)
								[ ] AddAnyAccount.ListBox.TypeKeys(Replicate(KEY_DN,iLinkAccount-1))
								[ ] AddAnyAccount.ListBox.TypeKeys(KEY_ENTER)
							[ ] AddAnyAccount.Next.Click ()
							[ ] 
							[ ] //WaitForstate(AddAnyAccount,FALSE,150)
							[ ] 
							[+] if(AddAnyAccount.Exists(30) == TRUE)
								[+] while(AlertMessage.Exists(10))		// check whether any error message "Quicken is not able to connect to internet" is displayed or not
									[ ] AlertMessage.OK.Click ()
									[ ] goto ErrorMessage				
									[ ] 
								[ ] 
								[+] if(AddAnyAccount.Exists(10))
									[+] if(AddAnyAccount.BankUserID.Exists () == TRUE)			// for invalid user id/password, login window is displayed again with error message
										[ ] sErrorMsg = AddAnyAccount.ErrorMessage.GetText ()
										[ ] ReportStatus("Verify Error Message", WARN, "Error Message - {sErrorMsg} is displayed")
										[ ] bFlag = TRUE
									[ ] 
									[ ] ErrorMessage:
									[+] if(AddAnyAccount.ErrorMessage.Exists (10))
										[ ] AddAnyAccount.SetActive()
										[ ] sErrorMsg = AddAnyAccount.ErrorMessage.GetText ()
										[ ] ReportStatus("Verify Error Message", WARN, "Error Message - {sErrorMsg} is displayed")
										[ ] goto CloseWindow
										[ ] 
									[ ] 
									[+] if(SKU_TOBE_TESTED == "RPM" || SKU_TOBE_TESTED == "HAB")
										[+] // if(AddAnyAccount.BankAccounts.ListBox1.Exists (300))			// for valid user id and password, verify Listbox presence for HAB and RPM sku
											[ ] // bFlag = FALSE
											[ ] // //AddAnyAccount.WellsFargoBank.ListBox1.TextField1.SetText(lsAccountData[5])		// Enter Account name
											[ ] // AddAnyAccount.SetActive ()
											[ ] // AddAnyAccount.BankAccounts.ListBox1.Select ("#4")
											[ ] // AddAnyAccount.BankAccounts.ListBox1.PopupList1.Select (lsAccountData[1])		// Select correct account type
											[ ] // AddAnyAccount.Next.Click ()	
									[ ] 
							[+] if(AccountAdded.Exists(140) == TRUE)
									[ ] AccountAdded.VerifyEnabled(TRUE, 5)
									[ ] AccountAdded.SetActive ()
									[ ] AccountAdded.Finish.Click()
									[ ] bFlag = FALSE
						[+] if(bFlag == TRUE)
							[+] CloseWindow:								// Close the window
								[ ] bFlag = TRUE
								[ ] AddAnyAccount.SetActive()
								[ ] AddAnyAccount.Cancel.Click()  				
								[+] if(AlertMessage.Exists(SHORT_SLEEP))
									[ ] AlertMessage.SetActive()
									[ ] AlertMessage.OK.Click()
						[ ] 
						[+] if(bFlag == FALSE)
							[ ] ReportStatus("Verify Account", PASS, "{sBankName} account is added")
							[ ] iFunctionResult = PASS
					[+] else
						[ ] ReportStatus("Verify BankUserID text field",FAIL,"BankUserID text field is not displayed")
				[+] else
					[ ] AddAnyAccount.SetActive()
					[ ] AddAnyAccount.Close()
					[ ] ReportStatus("Verify Bank name text field",FAIL,"Bank name field is not displayed")
			[+] else
				[ ] ReportStatus("Validate Add Account Window", FAIL, "Add Account window didn't display in 30 seconds.") 
				[ ] iFunctionResult = FAIL
			[ ] CloseMobileSyncInfoPopup()
		[+] except
			[ ] ExceptLog()
			[ ] AddAnyAccount.Cancel.Click()  				 //Close the window
			[+] if(AlertMessage.Exists(SHORT_SLEEP))		// on clicking cancel button, message box is displayed for confirmation of closing the window
				[ ] AlertMessage.SetActive()
				[ ] AlertMessage.OK.Click()
			[ ] iFunctionResult = FAIL
		[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: DeleteAccount()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will delete the mentioned account
		[ ] //
		[ ] // PARAMETERS:			STRING  	sAccountType		E.g. Banking
		[ ] //							STRING      sAccountName		Account name which needs to be closed
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If Account separated successfully
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //  April 08, 2013	MukeshCreated
	[ ] // ==========================================================
	[+] public INTEGER DeleteAccount(STRING sAccountType, STRING sAccountName)
		[+] // Variable declaration
			[ ] INTEGER iSelect
		[ ] 
		[+] do
			[ ] UsePopupRegister("OFF")
			[ ] iSelect = SelectAccountFromAccountBar( sAccountName, sAccountType)
			[+] if (iSelect==PASS)
				[ ] iSelect = NavigateToAccountDetails(sAccountName)
				[+] if (iSelect==PASS)
					[+] if (AccountDetails.Exists(SHORT_SLEEP))
						[ ] AccountDetails.SetActive ()
						[ ] AccountDetails.TypeKeys(KEY_ALT_D)
						[+] if (DeleteAccount.Exists(SHORT_SLEEP))
							[ ] DeleteAccount.YesField.SetText("YES")
							[ ] DeleteAccount.OK.Click()
							[ ] WaitForState(DeleteAccount,False,5)
							[+] while(AccountDetails.Exists())
								[ ] sleep(1)
							[+] if (!AccountDetails.Exists(3))
								[ ] iFunctionResult=PASS
								[ ] 
							[+] else
								[ ] iFunctionResult=FAIL
						[+] else
							[ ] iFunctionResult=FAIL
					[+] else
						[ ] iFunctionResult=FAIL
				[+] else
					[ ] iFunctionResult=FAIL
			[+] else
				[ ] iFunctionResult=FAIL
		[+] except
			[ ] ExceptLog()
			[+] if(AccountDetails.Exists(SHORT_SLEEP))
				[ ] AccountDetails.Cancel.Click()
				[ ] WaitForState(AccountDetails,false,1)
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
		[ ] 
	[ ] // 
	[ ] // 
	[ ] // // ==========================================================
	[+] // // FUNCTION: AddManualLoanAccount()  
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will add manual loan accounts using manual option..
		[ ] // // If account is added successfully TRUE is returned else FALSE with error message is returned.
		[ ] // //
		[ ] // // PARAMETERS:		STRING sAccountType     Name of the Account Type i.e Loan
		[ ] // // 						STRING sAccountName   Name of the Loan account
		[ ] // // 						STRING sOpeningDate     Opening date of the loan
		[ ] // // 						STRING sOrgBalance	   Original Balance of loan
		[ ] // // 						STRING sInterestRt		    Interest Rate
		[ ] // // 						STRING sOrgLength		    Original Length
		[ ] // //
		[ ] // // RETURNS:			INTEGER	PASS = If account is created successfully
		[ ] // //									FAIL = if any error occurs while adding account
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //	April 08, 2013                      Anagha created
	[ ] // // ==========================================================
	[+] // public INTEGER AddManualLoanAccount( STRING sAccountName, STRING sOpeningDate, STRING sOrgBalance,STRING sInterestRt,STRING sOrgLength,STRING sLoanType optional,STRING sPaymentSchedule optional)
		[ ] // 
		[+] // // Variable declaration
			[ ] // INTEGER iFunctionResult
			[ ] // STRING sErrorMsg
			[ ] // BOOLEAN bFlag = TRUE
		[+] // do
			[ ] // 
			[ ] // QuickenWindow.SetActive()
			[ ] // ExpandAccountBar()
			[ ] // QuickenWindow.SetActive()
			[ ] // QuickenMainWindow.QWNavigator.QWNavBtnTray.AddAnAccount.Click()
			[ ] // 
			[ ] // AddAccount.Loan.Click()
			[ ] // 
			[+] // if(AddAnyAccount.Exists(30))
				[ ] // 
				[ ] // AddAnyAccount.SetActive()
				[ ] // 
				[ ] // 
				[ ] // AddAnyAccount.Panel.QWHtmlView1.Click (1, 199, 5)
				[ ] // 
				[ ] // //AddAnyAccount.Next.Click()
				[ ] // 
				[+] // if(LoanDetails.Exists(SHORT_SLEEP))
					[ ] // 
					[ ] // //Set Loan Name
					[ ] // LoanDetails.LoanNameTextField.SetText(sAccountName)
					[ ] // 
					[ ] // //Set Loan Type
					[+] // if(sLoanType!=NULL)
						[ ] // LoanDetails.LoanTypePopupList.Select(sLoanType)
					[ ] // 
					[ ] // //Set Opening Date
					[ ] // LoanDetails.OpeningDateTextField.SetText(sOpeningDate)
					[ ] // 
					[ ] // //Set Original Balance
					[ ] // LoanDetails.OriginalBalanceTextField.SetText(sOrgBalance)
					[ ] // 
					[ ] // //Set Current Interest Rate
					[ ] // LoanDetails.CurrentInterestRateTextField.SetText(sInterestRt)
					[ ] // 
					[ ] // //Set Current Interest Rate
					[ ] // LoanDetails.OriginalLengthTextField.SetText(sOrgLength)
					[ ] // 
					[ ] // //Set Current Interest Rate
					[ ] // LoanDetails.TypeKeys(KEY_TAB)
					[ ] // 
					[+] // if(sPaymentSchedule!=NULL)
						[ ] // LoanDetails.PaymentScheduleComboBox.Select(sPaymentSchedule)
						[ ] // 
					[ ] // 
					[ ] // 
					[ ] // LoanDetails.NextButton.Click()
					[ ] // 
					[ ] // // Alert Message is displayed if Account Name already exists
					[+] // if(AlertMessage.Exists(SHORT_SLEEP))
						[ ] // AlertMessage.SetActive ()
						[ ] // sErrorMsg = AlertMessage.MessageText.GetText ()
						[+] // if(sErrorMsg == "Name already in use.")
							[ ] // ReportStatus("Validate Account name", FAIL, "Account - {sAccountName} already exists") 
						[+] // else
							[ ] // ReportStatus("Validate Account name", FAIL, "{sErrorMsg} is displayed") 
						[ ] // AlertMessage.OK.Click ()
						[ ] // sleep(2)
						[ ] // LoanDetails.SetActive ()
						[ ] // LoanDetails.CancelButton.Click()
						[+] // if(AlertMessage.Exists(SHORT_SLEEP))
							[ ] // AlertMessage.SetActive()
							[ ] // AlertMessage.Yes.Click()
						[ ] // bFlag = FALSE
						[ ] // iFunctionResult=FAIL
						[ ] // 
					[ ] // 
					[+] // if(bFlag==TRUE)
						[ ] // LoanDetails.SetActive ()
						[ ] // LoanDetails.NextButton.Click()
						[ ] // YourLoanReminder.Next.Click()
						[ ] // sleep(2)
						[ ] // YourLoanReminder.LoanPaymentReminder.SetActive()
						[ ] // YourLoanReminder.LoanPaymentReminder.DoneButton.Click()
						[ ] // sleep(2)
						[ ] // AccountAdded.Done.Click()
						[ ] // iFunctionResult = PASS
					[+] // else
						[ ] // iFunctionResult=FAIL
						[ ] // ReportStatus("Validate Add Loan Account window", FAIL, "Add Loan Account window not found")
						[ ] // 
					[ ] // 
					[+] // if(AddAccount.Exists(SHORT_SLEEP))
						[ ] // AddAccount.Close()
					[+] // if(AddAnyAccount.Exists(SHORT_SLEEP))
						[ ] // AddAnyAccount.Close()
						[+] // if(DeleteTransaction.Exists(SHORT_SLEEP))
							[ ] // DeleteTransaction.SetActive()
							[ ] // DeleteTransaction.Yes.Click()
					[ ] // 
					[ ] // 
				[+] // else
					[ ] // ReportStatus("Verify loan details window open",FAIL,"Loan details window did not open")
					[ ] // iFunctionResult=FAIL
				[ ] // 
			[+] // else
				[ ] // ReportStatus("Verify Add Account window open",FAIL,"Add Account window did not open")
				[ ] // iFunctionResult=FAIL
				[ ] // 
			[ ] // 
			[ ] // 
			[ ] // 
		[+] // except
			[ ] // exceptlog()
			[ ] // iFunctionResult=FAIL
		[ ] // return iFunctionResult
	[ ] 
	[ ] // // ==========================================================
	[+] // // FUNCTION: AddEditManualLoanAccount()  
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will add manual loan accounts using manual option..
		[ ] // // If account is added successfully TRUE is returned else FALSE with error message is returned.
		[ ] // //
		[ ] // // PARAMETERS:		STRING sAccountType     Name of the Account Type i.e Loan
		[ ] // // 						STRING sAccountName   Name of the Loan account
		[ ] // // 			AddEditManualLoanAccount			STRING sOpeningDate     Opening date of the loan
		[ ] // // 						STRING sOrgBalance	   Original Balance of loan
		[ ] // // 						STRING sInterestRt		    Interest Rate
		[ ] // // 						STRING sOrgLength		    Original Length
		[ ] // //
		[ ] // // RETURNS:			INTEGER	PASS = If account is created successfully
		[ ] // //									FAIL = if any error occurs while adding account
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //	April 08, 2013                      Anagha created
		[ ] // // Dec 5th 2013                          Dean Paes modified
		[ ] // // Jan 7th 2014			Udita Dube modified
	[ ] // // ==========================================================
	[+] // public INTEGER AddEditManualLoanAccount(STRING sAction, STRING sAccountName, STRING sOpeningDate, STRING sOrgBalance,STRING sInterestRt,STRING sOrgLength,STRING sLoanType optional,STRING sPaymentSchedule optional,STRING sOrgLengthCombobox optional, STRING sCompoundingPeriod optional, STRING sNextPaymentDue optional)
		[ ] // 
		[+] // // Variable declaration
			[ ] // INTEGER iFunctionResult,iValidate
			[ ] // STRING sErrorMsg
			[ ] // BOOLEAN bFlag = TRUE
			[ ] // 
			[ ] // 
		[+] // do
			[ ] // 
			[+] // switch(sAction)
				[ ] // 
				[+] // case("Add")
					[ ] // 
					[ ] // 
					[ ] // //----------------Navigate to Add An Account window-----------------
					[ ] // ExpandAccountBar()
					[ ] // QuickenWindow.SetActive()
					[ ] // QuickenMainWindow.QWNavigator.QWNavBtnTray.AddAnAccount.Click()
					[ ] // //AddAccount.CustomWin(sAccountType).Click()
					[ ] // AddAccount.Loan.Click()
					[ ] // 
					[ ] // 
					[ ] // //----------------Navigate to Loan details window-----------------
					[+] // if(AddAnyAccount.Exists(MEDIUM_SLEEP))
						[ ] // 
						[ ] // AddAnyAccount.SetActive()
						[ ] // AddAnyAccount.Panel.QWHtmlView1.Click (1, 199, 5)
						[ ] // 
					[+] // else
						[ ] // ReportStatus("Verify Add Account window open",FAIL,"Add Account window did not open")
						[ ] // iFunctionResult=FAIL
						[ ] // 
				[+] // case ("Edit")
						[ ] // // Click on Edit Terms button
						[ ] // MDIClientLoans.LoanWindow.EditTerms.Click()
						[ ] // WaitForState(LoanDetails,TRUE,5)
					[ ] // 
				[ ] // 
			[ ] // //---------------------Add Loan Details---------------------------------
			[+] // if(LoanDetails.Exists(5))
				[ ] // 
				[ ] // //Set Loan Name
				[+] // if(LoanDetails.LoanNameTextField.Exists(2))
					[ ] // LoanDetails.LoanNameTextField.SetText(sAccountName)
					[ ] // 
					[ ] // 
					[ ] // 
					[ ] // 
					[ ] // 
				[+] // else
					[ ] // ReportStatus("Verify Loan Name Text field",FAIL,"Loan name text field not found")
					[ ] // 
					[ ] // 
				[ ] // 
				[ ] // //Set Loan Type
				[+] // if(sLoanType!=NULL)
					[ ] // 
					[+] // if(LoanDetails.LoanTypePopupList.Exists(2))
						[ ] // LoanDetails.LoanTypePopupList.Select(sLoanType)
					[+] // else
						[ ] // ReportStatus("Verify Loan Type Popuplist",FAIL,"Loan type popup list not found")
				[ ] // 
				[ ] // //Set Opening Date
				[+] // if(LoanDetails.OpeningDateTextField.Exists(2))
					[ ] // LoanDetails.OpeningDateTextField.SetText(sOpeningDate)
				[+] // else
					[ ] // ReportStatus("Verify Opening Date Text field",FAIL,"Opening Date text field not found")
				[ ] // 
				[ ] // 
				[ ] // //Set Original Balance
				[+] // if(LoanDetails.OriginalBalanceTextField.Exists(2))
					[ ] // LoanDetails.OriginalBalanceTextField.SetText(sOrgBalance)
				[+] // else
					[ ] // ReportStatus("Verify Original Balance Text Field",FAIL,"Original Balance Text Field not found")
				[ ] // 
				[ ] // 
				[ ] // //Set Current Interest Rate
				[+] // if(LoanDetails.CurrentInterestRateTextField.Exists(2))
					[ ] // LoanDetails.CurrentInterestRateTextField.SetText(sInterestRt)
				[+] // else
					[ ] // ReportStatus("Verify Current Interest Rate Text Field",FAIL,"Current Interest Rate Text Field not found")
				[ ] // 
				[ ] // 
				[ ] // //Set Current Interest Rate
				[+] // if(LoanDetails.OriginalLengthTextField.Exists(2))
					[ ] // LoanDetails.OriginalLengthTextField.SetText(sOrgLength)
					[ ] // 
				[+] // else
					[ ] // ReportStatus("Verify Original Length Text Field",FAIL,"Original Length Text Field not found")
				[ ] // 
				[+] // if(sOrgLengthCombobox!=NULL)
					[ ] // LoanDetails.OriginalLength.Select(sOrgLengthCombobox)
				[ ] // 
				[+] // if(sCompoundingPeriod!=NULL)
					[ ] // LoanDetails.CompoundingPeriod.Select(sCompoundingPeriod)
				[ ] // 
				[+] // if(sPaymentSchedule!=NULL)
					[ ] // LoanDetails.PaymentScheduleComboBox.Select(sPaymentSchedule)
					[ ] // 
				[ ] // 
				[ ] // 
				[ ] // //Type keys to recalculate values on page
				[ ] // LoanDetails.OpeningDateTextField.TypeKeys(KEY_TAB)
				[ ] //  LoanDetails.OpeningDateTextField.TypeKeys(KEY_TAB)
				[ ] // 
				[ ] // 
				[+] // if(sAction=="Add")
					[ ] // 
					[ ] // LoanDetails.NextButton.Click()
					[ ] // 
					[+] // if(sNextPaymentDue!=NULL)
						[ ] // LoanDetails.NextPaymentDueTextField.SetText(sNextPaymentDue)
						[ ] // 
						[ ] // 
					[ ] // 
					[ ] // // Alert Message is displayed if Account Name already exists
					[+] // if(AlertMessage.Exists(SHORT_SLEEP))
						[ ] // AlertMessage.SetActive ()
						[ ] // sErrorMsg = AlertMessage.MessageText.GetText ()
						[+] // if(sErrorMsg == "Name already in use.")
							[ ] // ReportStatus("Validate Account name", FAIL, "Account - {sAccountName} already exists") 
						[+] // else
							[ ] // ReportStatus("Validate Account name", FAIL, "{sErrorMsg} is displayed") 
						[ ] // AlertMessage.OK.Click ()
						[ ] // sleep(2)
						[ ] // LoanDetails.SetActive ()
						[ ] // LoanDetails.CancelButton.Click()
						[+] // if(AlertMessage.Exists(SHORT_SLEEP))
							[ ] // AlertMessage.SetActive()
							[ ] // AlertMessage.Yes.Click()
						[ ] // bFlag = FALSE
						[ ] // iFunctionResult=FAIL
						[ ] // 
					[ ] // 
					[+] // if(bFlag==TRUE)
						[ ] // LoanDetails.SetActive ()
						[ ] // LoanDetails.NextButton.Click()
						[ ] // YourLoanReminder.Next.Click()
						[ ] // sleep(2)
						[ ] // LoanPaymentReminder.SetActive()
						[ ] // LoanPaymentReminder.DoneButton.Click()
						[ ] // sleep(2)
						[ ] // AccountAdded.Done.Click()
						[ ] // iFunctionResult = PASS
					[+] // else
						[ ] // iFunctionResult=FAIL
						[ ] // ReportStatus("Validate Add Loan Account", FAIL, "Loan account is not added")
						[ ] // 
				[+] // else
					[ ] // LoanDetails.OKButton.Click()
					[+] // if(AlertMessage.Exists(2))
						[ ] // AlertMessage.SetActive()
						[ ] // AlertMessage.OK.Click()
						[ ] // WaitForState(AlertMessage,FALSE,2)
						[ ] // iFunctionResult=PASS
					[+] // else
						[ ] // ReportStatus("Verify Alert Message",FAIL,"Alert message is not displayed")
						[ ] // iFunctionResult=FAIL
						[ ] // 
				[ ] // 
				[ ] // 
			[+] // else
				[ ] // ReportStatus("Verify loan details window open",FAIL,"Loan details window did not open")
				[ ] // iFunctionResult=FAIL
				[ ] // 
				[ ] // 
				[ ] // 
			[ ] // 
		[+] // except
			[ ] // Exceptlog()
			[ ] // iFunctionResult=FAIL
			[ ] // 
		[ ] // return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: AddEditManualLoanAccount()  
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will add manual loan accounts using manual option..
		[ ] // If account is added successfully TRUE is returned else FALSE with error message is returned.
		[ ] //
		[ ] // PARAMETERS:		STRING sAccountType     Name of the Account Type i.e Loan
		[ ] // 						STRING sAccountName   Name of the Loan account
		[ ] // 			AddEditManualLoanAccount			STRING sOpeningDate     Opening date of the loan
		[ ] // 						STRING sOrgBalance	   Original Balance of loan
		[ ] // 						STRING sInterestRt		    Interest Rate
		[ ] // 						STRING sOrgLength		    Original Length
		[ ] //
		[ ] // RETURNS:			INTEGER	PASS = If account is created successfully
		[ ] //									FAIL = if any error occurs while adding account
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	April 08, 2013                      Anagha created
		[ ] // Dec 5th 2013                          Dean Paes modified
		[ ] // Jan 7th 2014			Udita Dube modified
	[ ] // ==========================================================
	[+] public INTEGER AddEditManualLoanAccount(STRING sAction, STRING sAccountName, STRING sOpeningDate, STRING sOrgBalance,STRING sInterestRt,STRING sOrgLength,STRING sLoanType optional,STRING sPaymentSchedule optional,STRING sOrgLengthCombobox optional, STRING sCompoundingPeriod optional, STRING sNextPaymentDue optional  , STRING sOther optional , STRING sExtraPrincipal optional )
		[ ] 
		[+] // Variable declaration
			[ ] INTEGER iValidate
			[ ] STRING sErrorMsg
			[ ] BOOLEAN bFlag = TRUE
			[ ] 
			[ ] 
		[+] do
			[ ] 
			[+] switch(sAction)
				[ ] 
				[+] case("Add")
					[ ] 
					[ ] 
					[ ] //----------------Navigate to Add An Account window-----------------
					[ ] ExpandAccountBar()
					[ ] QuickenWindow.SetActive()
					[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.AddAnAccount.Click()
					[ ] sleep(5)
					[ ] AddAccount.SetActive()
					[ ] AddAccount.Loan.Click()
					[ ] sleep(30)
					[ ] 
					[ ] //----------------Navigate to Loan details window-----------------
					[+] if(AddAnyAccount.Exists(200) && AddAnyAccount.IsEnabled())
						[ ] 
						[ ] AddAnyAccount.SetActive()
						[ ] // AddAnyAccount.Panel.QWHtmlView1.Click (1, 199, 5)
						[ ] AddAnyAccount.Panel.QWHtmlView1.TextClick ("manual loan account")
						[ ] 
					[+] else
						[ ] ReportStatus("Verify Add Account window open",FAIL,"Add Account window did not open")
						[ ] iFunctionResult=FAIL
						[ ] 
				[+] case ("Edit")
						[ ] // Click on Edit Terms button
						[ ] MDIClientLoans.LoanWindow.EditTerms.Click()
						[ ] WaitForState(LoanDetails,TRUE,5)
					[ ] 
				[ ] 
			[ ] //---------------------Add Loan Details---------------------------------
			[+] if(LoanDetails.Exists(5))
				[ ] 
				[ ] //Set Loan Name
				[+] if(LoanDetails.LoanNameTextField.Exists(2))
					[ ] LoanDetails.LoanNameTextField.SetText(sAccountName)
					[ ] 
					[ ] 
					[ ] 
					[ ] 
					[ ] 
				[+] else
					[ ] ReportStatus("Verify Loan Name Text field",FAIL,"Loan name text field not found")
					[ ] 
					[ ] 
				[ ] 
				[ ] //Set Loan Type
				[+] if(sLoanType!=NULL)
					[ ] 
					[+] if(LoanDetails.LoanTypePopupList.Exists(2))
						[ ] LoanDetails.LoanTypePopupList.Select(sLoanType)
					[+] else
						[ ] ReportStatus("Verify Loan Type Popuplist",FAIL,"Loan type popup list not found")
				[ ] 
				[ ] //Set Opening Date
				[+] if(LoanDetails.OpeningDateTextField.Exists(2))
					[ ] LoanDetails.OpeningDateTextField.SetText(sOpeningDate)
				[+] else
					[ ] ReportStatus("Verify Opening Date Text field",FAIL,"Opening Date text field not found")
				[ ] 
				[ ] 
				[ ] //Set Original Balance
				[+] if(LoanDetails.OriginalBalanceTextField.Exists(2))
					[ ] LoanDetails.OriginalBalanceTextField.SetText(sOrgBalance)
				[+] else
					[ ] ReportStatus("Verify Original Balance Text Field",FAIL,"Original Balance Text Field not found")
				[ ] 
				[ ] 
				[ ] //Set Current Interest Rate
				[+] if(LoanDetails.CurrentInterestRateTextField.Exists(2))
					[ ] LoanDetails.CurrentInterestRateTextField.SetText(sInterestRt)
				[+] else
					[ ] ReportStatus("Verify Current Interest Rate Text Field",FAIL,"Current Interest Rate Text Field not found")
				[ ] 
				[ ] 
				[ ] //Set Current Interest Rate
				[+] if(LoanDetails.OriginalLengthTextField.Exists(2))
					[ ] LoanDetails.OriginalLengthTextField.SetText(sOrgLength)
					[ ] 
				[+] else
					[ ] ReportStatus("Verify Original Length Text Field",FAIL,"Original Length Text Field not found")
				[ ] 
				[+] if(sOrgLengthCombobox!=NULL)
					[ ] LoanDetails.OriginalLength.Select(sOrgLengthCombobox)
				[ ] 
				[+] if(sCompoundingPeriod!=NULL)
					[ ] LoanDetails.CompoundingPeriod.Select(sCompoundingPeriod)
				[ ] 
				[+] if(sPaymentSchedule!=NULL)
					[ ] LoanDetails.PaymentScheduleComboBox.Select(sPaymentSchedule)
					[ ] 
				[ ] 
				[ ] 
				[ ] //Type keys to recalculate values on page
				[ ] LoanDetails.OpeningDateTextField.TypeKeys(KEY_TAB)
				[ ]  LoanDetails.OpeningDateTextField.TypeKeys(KEY_TAB)
				[ ] 
				[ ] 
				[+] if(sAction=="Add")
					[ ] 
					[ ] LoanDetails.NextButton.Click()
					[ ] 
					[+] if(sNextPaymentDue!=NULL)
						[ ] LoanDetails.NextPaymentDueTextField.SetText(sNextPaymentDue)
						[ ] 
						[ ] 
					[+] if(sOther!=NULL)
						[ ] LoanDetails.OtherTextField.SetText(sOther)
						[ ] 
						[ ] 
					[+] if(sExtraPrincipal!=NULL)
						[ ] LoanDetails.ExtraPrincipalPaidMonthly.SetText(sExtraPrincipal)
					[ ] 
					[ ] 
					[ ] // Alert Message is displayed if Account Name already exists
					[+] if(AlertMessage.Exists(SHORT_SLEEP))
						[ ] AlertMessage.SetActive ()
						[ ] sErrorMsg = AlertMessage.MessageText.GetText ()
						[+] if(sErrorMsg == "Name already in use.")
							[ ] ReportStatus("Validate Account name", FAIL, "Account - {sAccountName} already exists") 
						[+] else
							[ ] ReportStatus("Validate Account name", FAIL, "{sErrorMsg} is displayed") 
						[ ] AlertMessage.OK.Click ()
						[ ] sleep(2)
						[ ] LoanDetails.SetActive ()
						[ ] LoanDetails.CancelButton.Click()
						[+] if(AlertMessage.Exists(SHORT_SLEEP))
							[ ] AlertMessage.SetActive()
							[ ] AlertMessage.Yes.Click()
						[ ] bFlag = FALSE
						[ ] iFunctionResult=FAIL
						[ ] 
					[ ] 
					[+] if(bFlag==TRUE)
						[ ] LoanDetails.SetActive ()
						[ ] LoanDetails.NextButton.Click()
						[ ] YourLoanReminder.Next.Click()
						[ ] sleep(2)
						[ ] LoanPaymentReminder.SetActive()
						[ ] LoanPaymentReminder.DoneButton.Click()
						[ ] sleep(2)
						[ ] AccountAdded.Done.Click()
						[ ] iFunctionResult = PASS
					[+] else
						[ ] iFunctionResult=FAIL
						[ ] ReportStatus("Validate Add Loan Account", FAIL, "Loan account is not added")
						[ ] 
				[+] else
					[ ] LoanDetails.OKButton.Click()
					[+] if(AlertMessage.Exists(2))
						[ ] AlertMessage.SetActive()
						[ ] AlertMessage.OK.Click()
						[ ] WaitForState(AlertMessage,FALSE,2)
						[ ] iFunctionResult=PASS
					[+] else
						[ ] ReportStatus("Verify Alert Message",FAIL,"Alert message is not displayed")
						[ ] iFunctionResult=FAIL
						[ ] 
				[ ] 
				[ ] 
			[+] else
				[ ] ReportStatus("Verify loan details window open",FAIL,"Loan details window did not open")
				[ ] iFunctionResult=FAIL
				[ ] 
				[ ] 
				[ ] 
			[ ] 
		[+] except
			[ ] Exceptlog()
			[ ] iFunctionResult=FAIL
			[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: NavigateToAccountAction()
		[ ] // 
		[ ] // DESCRIPTION:		This function will add Online Accounts (CCMintBank)
		[ ] // 
		[ ] // 
		[ ] // PARAMETERS:		STRING 	sUserName			Username
		[ ] // STRING 	sPassword	      	Password
		[ ] // STRING      sAccountType		Checking 
		[ ] // STRING 	sBankName			CCMintBank
		[ ] // 
		[ ] // RETURNS:			None
		[ ] // 
		[ ] // REVISION HISTORY:
		[ ] // 01 Jan, 2013	Udita Dube created
	[ ] // ==========================================================
	[+] // public INTEGER NavigateToAccountAction(INTEGER iSelect,STRING sWindowType optional)
		[+] // // Variable Declaration
			[ ] // INTEGER i
		[+] // if(sWindowType == NULL)
			[ ] // sWindowType = "MDI"
		[+] // do
			[ ] // 
			[+] // switch(sWindowType)
				[+] // case "MDI"
					[ ] // QuickenWindow.SetActive()
					[ ] // QuickenMainWindow.TypeKeys(KEY_CTRL_SHIFT_N)
					[ ] // 
					[+] // for(i=1;i<=iSelect;i++)
						[ ] // QuickenMainWindow.TypeKeys(KEY_DN)
					[ ] // 
					[ ] // QuickenMainWindow.TypeKeys(KEY_ENTER)
					[ ] // 
					[ ] // iFunctionResult = PASS
					[ ] // 
				[+] // case "PopUp"
					[ ] // InvestingAccountPopup.SetActive()
					[ ] // InvestingAccountPopup.TypeKeys(KEY_CTRL_SHIFT_N)
					[ ] // 
					[+] // for(i=1;i<=iSelect;i++)
						[ ] // InvestingAccountPopup.TypeKeys(KEY_DN)
					[ ] // 
					[ ] // InvestingAccountPopup.TypeKeys(KEY_ENTER)
					[ ] // 
					[ ] // iFunctionResult = PASS
					[ ] // 
			[ ] //  
		[+] // except
			[ ] // ExceptLog()
			[ ] // iFunctionResult = FAIL
			[ ] // 
		[ ] // return iFunctionResult
	[+] public INTEGER NavigateToAccountActionBanking(INTEGER iSelect,STRING sWindowType optional)
		[+] // Variable Declaration
			[ ] INTEGER i
		[+] if(sWindowType == NULL)
			[ ] sWindowType = "MDI"
		[+] do
			[ ] 
			[+] switch(sWindowType)
				[+] case "MDI"
					[ ] QuickenWindow.SetActive()
					[ ] QuickenWindow.TypeKeys(KEY_CTRL_SHIFT_N)
					[ ] sleep(1)
					[+] for(i=1;i<=iSelect;i++)
						[ ] QuickenWindow.TypeKeys(KEY_DN)
					[ ] sleep(1)
					[ ] QuickenWindow.TypeKeys(KEY_ENTER)
					[ ] 
					[ ] iFunctionResult = PASS
					[ ] 
				[+] case "PopUp"
					[ ] BankingPopUp.SetActive() 
					[ ] AccountActionsPopUpButton.Click(1,52,11)
					[ ] 
					[+] for(i=1;i<=iSelect;i++)
						[ ] sleep(0.02)
						[ ] BankingPopUp.TypeKeys(KEY_DN)
					[ ] 
					[ ] BankingPopUp.TypeKeys(KEY_ENTER)
					[ ] 
					[ ] iFunctionResult = PASS
					[ ] 
			[ ]  
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult = FAIL
			[ ] 
		[ ] 
		[ ] return iFunctionResult
	[ ] 
	[+] public INTEGER NavigateToAccountActionInvesting(INTEGER iSelect,STRING sWindowType optional)
		[+] // Variable Declaration
			[ ] INTEGER i
		[+] if(sWindowType == NULL)
			[ ] sWindowType = "MDI"
		[+] do
			[ ] 
			[+] switch(sWindowType)
				[+] case "MDI"
					[ ] QuickenWindow.SetActive()
					[ ] //AccountActionsButton.Click(1,21,11)
					[ ] QuickenWindow.TypeKeys("<Ctrl-Shift-n>")
					[ ] Sleep (3)
					[ ] 
					[ ] 
					[+] for(i=1;i<=iSelect;i++)
						[ ] QuickenWindow.TypeKeys(KEY_DN)
						[ ] //InvestingAccountPopup.TypeKeys(KEY_DN)
					[ ] //InvestingAccountPopup.TypeKeys(KEY_ENTER)
					[ ] QuickenWindow.TypeKeys(KEY_ENTER)
					[ ] 
					[ ] iFunctionResult = PASS
					[ ] 
				[+] case "PopUp"
					[ ] InvestingAccountPopup.SetActive() 
					[ ] 
					[ ] AccountActionsButton.Click()
					[ ] 
					[+] for(i=1;i<=iSelect;i++)
						[ ] InvestingAccountPopup.TypeKeys(KEY_DN)
					[ ] 
					[ ] InvestingAccountPopup.TypeKeys(KEY_ENTER)
					[ ] 
					[ ] iFunctionResult = PASS
					[ ] 
			[ ]  
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult = FAIL
			[ ] 
		[ ] 
		[ ] return iFunctionResult
	[ ] 
	[+] public Integer SetUpDownload(STRING sBankName , STRING sUserName, STRING sPassword)
		[+] // Variable Declaration
			[ ] STRING sErrorMsg
			[ ] BOOLEAN  bFlag
		[ ] 
		[ ] // Variable Defination
		[+] if (sBankName==NULL)
			[ ] sBankName="CCMintBank"
		[ ] bFlag = FALSE
		[ ] 
		[+] do
			[+] if(AddAnyAccount.Exists(20) && AddAnyAccount.IsEnabled())
				[ ] AddAnyAccount.SetActive()
				[ ] AddAnyAccount.Panel.QWHtmlView1.Click (1, 62, 5)
				[ ] AddAnyAccount.SetActive ()
				[ ] AddAnyAccount.EnterFIName.SetText(sBankName)  // Enter the name of the bank
				[ ] AddAnyAccount.SetActive ()
				[ ] AddAnyAccount.Next.Click ()
				[ ] sleep(10)
				[ ] AddAnyAccount.SetActive ()
				[ ] 
				[ ] AddAnyAccount.BankUserID.TypeKeys(sUserName)      //Enter user id      d_knievel17	Quicken70
				[ ] AddAnyAccount.BankPassword.TypeKeys(sPassword)   // Enter password
				[ ] AddAnyAccount.Next.Click ()
				[ ] sleep(30)
				[ ] WaitforState(AddAnyAccount.Next,TRUE,20)
				[+] if(AddAnyAccount.Next.IsEnabled() == FALSE)			// Connect/Next button is disabled for blank user id and password
					[ ] ReportStatus("Verify Next Button Status", FAIL, "Connect (Next) button is disabled")
					[ ] bFlag = TRUE
					[ ] 
				[+] else
					[ ] AddAnyAccount.SetActive()
					[ ] AddAnyAccount.Next.Click ()
					[ ] sleep(60)
					[ ] 
					[ ] WaitForstate(AddAnyAccount,FALSE,180)
					[+] if(AddAnyAccount.Exists(30) == TRUE)
						[+] while(AlertMessage.Exists(10))		// check whether any error message "Quicken is not able to connect to internet" is displayed or not
							[ ] AlertMessage.OK.Click ()
							[ ] goto ErrorMessage				
							[ ] 
						[ ] 
						[+] if(AddAnyAccount.Exists(10))
							[+] if(AddAnyAccount.BankUserID.Exists () == TRUE)			// for invalid user id/password, login window is displayed again with error message
								[ ] sErrorMsg = AddAnyAccount.ErrorMessage.GetText ()
								[ ] ReportStatus("Verify Error Message", WARN, "Error Message - {sErrorMsg} is displayed")
								[ ] bFlag = TRUE
							[ ] 
							[ ] ErrorMessage:
							[+] if(AddAnyAccount.ErrorMessage.Exists (10))
								[ ] AddAnyAccount.SetActive()
								[ ] sErrorMsg = AddAnyAccount.ErrorMessage.GetText ()
								[ ] ReportStatus("Verify Error Message", WARN, "Error Message - {sErrorMsg} is displayed")
								[ ] goto CloseWindow
								[ ] 
					[+] if(AccountAdded.Exists(140) == TRUE)
							[ ] AccountAdded.VerifyEnabled(TRUE, 5)
							[ ] AccountAdded.SetActive ()
							[ ] AccountAdded.Finish.Click()
							[ ] bFlag = FALSE
				[+] if(bFlag == TRUE)
					[+] CloseWindow:								// Close the window
						[ ] bFlag = TRUE
						[ ] AddAnyAccount.SetActive()
						[ ] AddAnyAccount.Cancel.Click()  				
						[+] if(AlertMessage.Exists(SHORT_SLEEP))
							[ ] AlertMessage.SetActive()
							[ ] AlertMessage.OK.Click()
				[ ] 
				[+] if(bFlag == FALSE)
					[ ] ReportStatus("Verify Account", PASS, "{sBankName} account is added")
			[+] else
				[ ] ReportStatus("Verify Activate One Step Update dialog exists.", FAIL, "Verify Activate One Step Update dialog exists: Activate One Step Update dialog didn't appear.")
			[ ] 
			[ ] iFunctionResult = PASS
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult = FAIL
			[ ] 
		[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] 
[ ] // 
[+] // //********************** Transactions Related Functions**********************************************************
	[ ] // 
	[ ] // ==========================================================
	[+] // FUNCTION: AddCheckingTransaction()
		[ ] //
		[ ] // DESCRIPTION:		This function will add Transaction to Checking account
		[ ] // 
		[ ] //
		[ ] // PARAMETERS:		STRING 	sWindowType			MDI or Popup
		[ ] //						STRING 	sTransactionType		Payment or Deposit
		[ ] //						STRING 	sAmount				Transaction Amount
		[ ] //						STRING	sDate					Date of the transaction
		[ ] //						STRING	sChequeNo			Cheque number [Optional]
		[ ] //						STRING	sPayee				Payee	[Optional]
		[ ] //						STRING 	sMemo				Memo [Optional]
		[ ] //						STRING 	sCategory				Category [Optional]
		[ ] //						STRING 	sTag					Tag [Optional]
		[ ] //
		[ ] // RETURNS:			INTEGER	0 = If Transaction is created successfully
		[ ] //									1 = if any error occurs while adding Transaction
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // Dec 03, 2010	Mamta Jain created
		[ ] // Dec 27, 2010  	Udita Dube  Created
		[ ] // Dec 30, 2010	Udita Dube  merged functions for MDI and Popup
	[ ] // ==========================================================
	[+] public INTEGER AddCheckingTransaction(STRING sWindowType,STRING sTransactionType, STRING sAmount, STRING sDate , STRING sChequeNo optional, STRING sPayee optional, STRING sMemo  optional, STRING sCategory optional, STRING sTag optional)
		[+] // Variable declaration
			[ ] BOOLEAN bBalanceCheck
			[ ] INTEGER iSelect
			[ ] STRING sActual
		[+] do
			[+] if(IsNULL(sDate))
				[ ] sDate =FormatDateTime (GetDateTime(), "m/d/yyyy") 
			[+] if(IsNULL(sChequeNo))
				[ ] sChequeNo = ""
				[ ] 
			[+] if(IsNULL(sPayee))
				[ ] sPayee = ""
				[ ] 
			[+] if(IsNULL(sMemo))
				[ ] sMemo = ""
			[+] if( IsNULL(sCategory))
				[ ] sCategory = ""
			[+] if(IsNULL(sTag ))
				[ ] sTag = ""
			[ ] 
			[ ] 
			[+] switch(sWindowType)
				[ ] 
				[+] case("MDI")
					[ ] 
					[ ] // Turn Off "Use Popup Register" option for MDI window type
					[ ] iSelect=UsePopupRegister("OFF")
					[+] if(iSelect==PASS)
						[ ] 
						[ ] QuickenWindow.SetActive()
						[ ] QuickenWindow.TypeKeys(KEY_CTRL_N)
						[ ] 
						[ ] 
						[ ] // // For Premier and Deluxe SKU's, tag column is not selected. Include the tag column from Account Settings options.
						[+] // if(SKU_TOBE_TESTED == "PREMIER" || SKU_TOBE_TESTED == "DELUXE")
							[ ] // AccountActionsButton.Click ()
							[ ] // AccountActionsButton.TypeKeys(  Replicate (KEY_DN, 16)) 
							[ ] // AccountActionsButton.TypeKeys(KEY_ENTER)
							[ ] // // MDICalloutHolder.SetActive ()
							[ ] // // MDICalloutHolder.CalloutPopup.Tag.Click (1, 12, 12)
							[ ] // // MDICalloutHolder.CalloutPopup.Done.Click (1, 29, 11)
						[ ] 
						[+] switch(sTransactionType) 
							[+] case("Payment")
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_CTRL_N)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sDate)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sChequeNo)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sPayee)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sMemo)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sCategory)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] // For Premier and Deluxe SKU's, tag column is not selected. Include the tag column from Account Settings options.
								[+] if(SKU_TOBE_TESTED != "QNUE"|| SKU_TOBE_TESTED == "RPM" || SKU_TOBE_TESTED == "HAB")
									[ ] MDIClient.AccountRegister.TxList.TypeKeys (sTag)
									[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sAmount)
								[ ] sleep(SHORT_SLEEP)
								[ ] MDIClient.AccountRegister.TxList.TxToolBar.Save.Click()
								[ ] iFunctionResult = PASS
							[ ] 
							[+] case("Deposit")
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_CTRL_N)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sDate)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sChequeNo) // Need to add set up to add Check number column to support add transaction for Saving account
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sPayee)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sMemo)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sCategory)
								[ ] // For Premier and Deluxe SKU's, tag column is not selected. Include the tag column from Account Settings options.
								[+] if(SKU_TOBE_TESTED == "RPM" || SKU_TOBE_TESTED == "HAB")
									[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
									[ ] MDIClient.AccountRegister.TxList.TypeKeys (sTag)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sAmount)
								[ ] sleep(SHORT_SLEEP)
								[ ] MDIClient.AccountRegister.TxList.TxToolBar.Save.Click()
								[ ] iFunctionResult = PASS
							[ ] 
							[+] default
								[ ] iFunctionResult = FAIL
							[ ] 
							[ ] 
						[ ] 
						[+] if(AlertMessage.Exists(SHORT_SLEEP)) // Handle message - You are entering a transaction over a year away. Is this correct?
							[ ] AlertMessage.SetActive()
							[ ] AlertMessage.Yes.Click()
						[+] // else if(DeleteTransaction.Exists(SHORT_SLEEP))
							[ ] // DeleteTransaction.DonTShowAgain.Check()
							[ ] // DeleteTransaction.Yes.Click()
						[+] // else
							[ ] // // do nothing
						[ ] 
					[+] else
						[ ] ReportStatus("Verify Popup Register Option", FAIL, "Popup register couldn't be set as OFF") 
						[ ] 
					[ ] 
				[ ] 
				[ ] 
				[ ] 
				[+] case("PopUp")
					[ ] 
					[ ] // Turn ON "Use Popup Register" option for Popup window type
					[ ] iSelect=UsePopupRegister("ON")
					[ ] 
					[+] if(iSelect==PASS)
						[ ] 
						[ ] BankingPopUp.VerifyEnabled(TRUE, 20)
						[ ] // Maximize the Checking account window as Popup Register is on
						[ ] BankingPopUp.Maximize()
						[ ] 
						[ ] 
						[+] switch(sTransactionType) 
							[+] case("Payment")
								[ ] BankingPopUp.SetActive()
								[ ] BankingPopUp.TxList.TypeKeys (sDate)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sChequeNo)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sPayee)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sMemo)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sCategory)
								[ ] // For Premier and Deluxe SKU's, tag column is not selected. Include the tag column from Account Settings options.
								[+] if(SKU_TOBE_TESTED == "RPM" || SKU_TOBE_TESTED == "HAB")
									[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
									[ ] BankingPopUp.TxList.TypeKeys (sTag)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sAmount)
								[ ] sleep(SHORT_SLEEP)
								[ ] 
								[ ] BankingPopUp.TxList.TxToolbar.Save.Click()
								[ ] iFunctionResult = PASS
								[ ] 
							[+] case("Deposit")
								[ ] BankingPopUp.SetActive()
								[ ] BankingPopUp.TypeKeys(KEY_CTRL_N)
								[ ] BankingPopUp.TxList.TypeKeys (sDate)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sChequeNo)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sPayee)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sMemo)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sCategory)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sTag)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] //BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sAmount)
								[ ] sleep(SHORT_SLEEP)
								[ ] BankingPopUp.TxList.TxToolbar.Save.Click()
								[ ] iFunctionResult = PASS
							[ ] 
							[+] default
								[ ] iFunctionResult = FAIL
						[ ] 
						[+] // if(Quicken2012Popup.Exists(SHORT_SLEEP)) // Handle message - You are entering a transaction over a year away. Is this correct?
							[ ] // Quicken2012Popup.SetActive()
							[ ] // Quicken2012Popup.DonTShowAgain.Check()
							[ ] // Quicken2012Popup.Yes.Click()
						[+] // else if(PopUpDeleteTransaction.Exists(SHORT_SLEEP))
							[ ] // PopUpDeleteTransaction.DonTShowAgain.Check()
							[ ] // PopUpDeleteTransaction.Yes.Click()
						[+] // else
							[ ] // // do nothing
						[ ] 
					[+] else
						[ ] ReportStatus("Verify Popup Register Option", FAIL, "Popup register is not ON for Popup") 
						[ ] 
					[ ] 
			[ ] 
		[+] except
			[ ] ExceptLog()
			[+] if(BankingPopUp.Exists(SHORT_SLEEP))
				[ ] BankingPopUp.Close()
				[ ] 
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: AddSuperRegisterTransaction()
		[ ] //
		[ ] // DESCRIPTION:		This function will add Transaction to Checking account
		[ ] // 
		[ ] //
		[ ] // PARAMETERS:		STRING 	sWindowType			MDI or Popup
		[ ] //						STRING 	sTransactionType		Payment or Deposit
		[ ] //						STRING 	sAmount				Transaction Amount
		[ ] //						STRING	sDate					Date of the transaction
		[ ] //						STRING	sChequeNo			Cheque number [Optional]
		[ ] //						STRING	sPayee				Payee	[Optional]
		[ ] //						STRING 	sMemo				Memo [Optional]
		[ ] //						STRING 	sCategory				Category [Optional]
		[ ] //						STRING 	sTag					Tag [Optional]
		[ ] //
		[ ] // RETURNS:			INTEGER	0 = If Transaction is created successfully
		[ ] //									1 = if any error occurs while adding Transaction
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // Dec 03, 2010	Mamta Jain created
		[ ] // Dec 27, 2010  	Udita Dube  Created
		[ ] // Dec 30, 2010	Udita Dube  merged functions for MDI and Popup
	[ ] // ==========================================================
	[ ] 
	[+] public INTEGER AddSuperRegisterTransaction(STRING sWindowType,STRING sTransactionType,STRING sAccountName, STRING sAmount, STRING sDate , STRING sChequeNo optional, STRING sPayee optional, STRING sMemo  optional, STRING sCategory optional, STRING sTag optional)
		[+] // Variable declaration
			[ ] BOOLEAN bBalanceCheck
			[ ] INTEGER  iSelect
			[ ] STRING sActual
		[+] do
			[+] if(IsNULL(sDate))
				[ ] sDate =FormatDateTime (GetDateTime(), "m/d/yyyy") 
			[+] if(IsNULL(sChequeNo))
				[ ] sChequeNo = ""
				[ ] 
			[+] if(IsNULL(sPayee))
				[ ] sPayee = ""
				[ ] 
			[+] if(IsNULL(sMemo))
				[ ] sMemo = ""
			[+] if( IsNULL(sCategory))
				[ ] sCategory = ""
			[+] if(IsNULL(sTag ))
				[ ] sTag = ""
			[ ] 
			[ ] QuickenWindow.SetActive()
			[ ] QuickenMainWindow.QWNavigator.AllTransactions.Click()
			[ ] sleep(2)
			[ ] 
			[+] switch(sWindowType)
				[ ] 
				[+] case("MDI")
					[ ] 
					[ ] // Turn Off "Use Popup Register" option for MDI window type
					[ ] // iSelect=UsePopupRegister("OFF")
					[+] // if(iSelect==PASS)
						[ ] // ReportStatus("Verify Popup Register Option", PASS, "Popup register is OFF for MDI") 
						[ ] QuickenWindow.SetActive()
						[ ] QuickenWindow.TypeKeys(KEY_CTRL_N)
						[ ] 
						[ ] 
						[ ] // // For Premier and Deluxe SKU's, tag column is not selected. Include the tag column from Account Settings options.
						[+] // if(SKU_TOBE_TESTED == "PREMIER" || SKU_TOBE_TESTED == "DELUXE")
							[ ] // AccountActionsButton.Click ()
							[ ] // AccountActionsButton.TypeKeys(  Replicate (KEY_DN, 16)) 
							[ ] // AccountActionsButton.TypeKeys(KEY_ENTER)
							[ ] // // MDICalloutHolder.SetActive ()
							[ ] // // MDICalloutHolder.CalloutPopup.Tag.Click (1, 12, 12)
							[ ] // // MDICalloutHolder.CalloutPopup.Done.Click (1, 29, 11)
						[ ] 
						[+] switch(sTransactionType) 
							[+] case("Payment")
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_CTRL_N)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sDate)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sAccountName)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sChequeNo)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sPayee)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sMemo)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sCategory)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] // For Premier and Deluxe SKU's, tag column is not selected. Include the tag column from Account Settings options.
								[+] if(SKU_TOBE_TESTED != "QNUE"|| SKU_TOBE_TESTED == "RPM" || SKU_TOBE_TESTED == "HAB")
									[ ] MDIClient.AccountRegister.TxList.TypeKeys (sTag)
									[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sAmount)
								[ ] sleep(SHORT_SLEEP)
								[ ] MDIClient.AccountRegister.TxList.TxToolBar.Save.Click()
								[ ] iFunctionResult = PASS
							[ ] 
							[+] case("Deposit")
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_CTRL_N)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sDate)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sAccountName)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sChequeNo) // Need to add set up to add Check number column to support add transaction for Saving account
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sPayee)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sMemo)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sCategory)
								[ ] // For Premier and Deluxe SKU's, tag column is not selected. Include the tag column from Account Settings options.
								[+] if(SKU_TOBE_TESTED == "RPM" || SKU_TOBE_TESTED == "HAB")
									[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
									[ ] MDIClient.AccountRegister.TxList.TypeKeys (sTag)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sAmount)
								[ ] sleep(SHORT_SLEEP)
								[ ] MDIClient.AccountRegister.TxList.TxToolBar.Save.Click()
								[ ] iFunctionResult = PASS
							[ ] 
							[+] default
								[ ] iFunctionResult = FAIL
							[ ] 
							[ ] 
						[ ] 
						[+] if(AlertMessage.Exists(SHORT_SLEEP)) // Handle message - You are entering a transaction over a year away. Is this correct?
							[ ] AlertMessage.SetActive()
							[ ] AlertMessage.Yes.Click()
						[+] // else if(DeleteTransaction.Exists(SHORT_SLEEP))
							[ ] // DeleteTransaction.DonTShowAgain.Check()
							[ ] // DeleteTransaction.Yes.Click()
						[+] // else
							[ ] // // do nothing
						[ ] 
					[+] // else
						[ ] // ReportStatus("Verify Popup Register Option", FAIL, "Popup register is not OFF for MDI") 
						[ ] 
					[ ] 
				[ ] 
				[ ] 
				[ ] 
				[+] case("PopUp")
					[ ] 
					[ ] // Turn ON "Use Popup Register" option for Popup window type
					[ ] iSelect=UsePopupRegister("ON")
					[ ] 
					[+] if(iSelect==PASS)
						[ ] ReportStatus("Verify Popup Register Option", PASS, "Popup register is ON for Popup") 
						[ ] 
						[ ] BankingPopUp.VerifyEnabled(TRUE, 20)
						[ ] // Maximize the Checking account window as Popup Register is on
						[ ] BankingPopUp.Maximize()
						[ ] 
						[ ] 
						[+] switch(sTransactionType) 
							[+] case("Payment")
								[ ] BankingPopUp.SetActive()
								[ ] BankingPopUp.TxList.TypeKeys (sDate)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sAccountName)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sChequeNo)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sPayee)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sMemo)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sCategory)
								[ ] // For Premier and Deluxe SKU's, tag column is not selected. Include the tag column from Account Settings options.
								[+] if(SKU_TOBE_TESTED == "RPM" || SKU_TOBE_TESTED == "HAB")
									[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
									[ ] BankingPopUp.TxList.TypeKeys (sTag)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sAmount)
								[ ] sleep(SHORT_SLEEP)
								[ ] 
								[ ] BankingPopUp.TxList.TxToolbar.Save.Click()
								[ ] iFunctionResult = PASS
								[ ] 
							[+] case("Deposit")
								[ ] BankingPopUp.SetActive()
								[ ] BankingPopUp.TypeKeys(KEY_CTRL_N)
								[ ] BankingPopUp.TxList.TypeKeys (sDate)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sAccountName)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sChequeNo)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sPayee)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sMemo)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sCategory)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sTag)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] //BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sAmount)
								[ ] sleep(SHORT_SLEEP)
								[ ] BankingPopUp.TxList.TxToolbar.Save.Click()
								[ ] iFunctionResult = PASS
							[ ] 
							[+] default
								[ ] iFunctionResult = FAIL
						[ ] 
						[ ] 
					[+] else
						[ ] ReportStatus("Verify Popup Register Option", FAIL, "Popup register is not ON for Popup") 
						[ ] 
					[ ] 
			[ ] 
		[+] except
			[ ] ExceptLog()
			[+] if(BankingPopUp.Exists(SHORT_SLEEP))
				[ ] BankingPopUp.Close()
				[ ] 
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: AddSavingCreditCashTransaction()
		[ ] //
		[ ] // DESCRIPTION:		This function will add Transaction to Savings, Credit, Cash account
		[ ] // 
		[ ] //
		[ ] // PARAMETERS:		STRING 	sWindowType			MDI or Popup
		[ ] //						STRING 	sTransactionType		Payment or Deposit
		[ ] //						STRING 	sAmount				Transaction Amount
		[ ] //						STRING	sDate					Date of the transaction
		[ ] //						STRING	sPayee				Payee	[Optional]
		[ ] //						STRING 	sMemo				Memo [Optional]
		[ ] //						STRING 	sCategory				Category [Optional]
		[ ] //						STRING 	sTag					Tag [Optional]
		[ ] //
		[ ] // RETURNS:			INTEGER	0 = If Transaction is created successfully
		[ ] //									1 = if any error occurs while adding Transaction
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // Feb 05, 2013	Mukesh
	[ ] // ==========================================================
	[+] public INTEGER AddSavingCreditCashTransaction(STRING sWindowType,STRING sTransactionType, STRING sAmount, STRING sDate , STRING sPayee optional, STRING sMemo  optional, STRING sCategory optional, STRING sTag optional)
		[+] // Variable declaration
			[ ] BOOLEAN bBalanceCheck
			[ ] INTEGER  iSelect
			[ ] STRING sActual
		[+] do
			[+] if(IsNULL(sDate))
				[ ] sDate = ""
			[+] if(IsNULL(sPayee))
				[ ] sPayee = ""
				[ ] 
			[+] if(IsNULL(sMemo))
				[ ] sMemo = ""
			[+] if( IsNULL(sCategory))
				[ ] sCategory = ""
			[+] if(IsNULL(sTag ))
				[ ] sTag = ""
			[ ] 
			[ ] 
			[+] switch(sWindowType)
				[ ] 
				[+] case("MDI")
					[ ] 
					[ ] // Turn Off "Use Popup Register" option for MDI window type
					[ ] iSelect=UsePopupRegister("OFF")
					[+] if(iSelect==PASS)
						[ ] 
						[ ] QuickenWindow.SetActive ()
						[ ] QuickenWindow.TypeKeys(KEY_CTRL_N)
						[ ] 
						[ ] // For Premier and Deluxe SKU's, tag column is not selected. Include the tag column from Account Settings options.
						[+] // if(SKU_TOBE_TESTED == "PREMIER" || SKU_TOBE_TESTED == "DELUXE")
							[ ] // BankingMDI.AccountActions.Click ()
							[ ] // BankingMDI.AccountActions.TypeKeys(  Replicate (KEY_DN, 16)) 
							[ ] // BankingMDI.AccountActions.TypeKeys(KEY_ENTER)
							[ ] // MDICalloutHolder.SetActive ()
							[ ] // MDICalloutHolder.CalloutPopup.Tag.Click (1, 12, 12)
							[ ] // MDICalloutHolder.CalloutPopup.Done.Click (1, 29, 11)
						[ ] 
						[+] switch(sTransactionType) 
							[+] case("Payment")
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sDate)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sPayee)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sMemo)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sCategory)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(sTag)
								[+] if(SKU_TOBE_TESTED != "QNUE")
									[ ] MDIClient.AccountRegister.TxList.TypeKeys (sTag)
									[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sAmount)
								[ ] sleep(SHORT_SLEEP)
								[ ] MDIClient.AccountRegister.TxList.TxToolBar.Save.Click()
								[ ] iFunctionResult = PASS
							[ ] 
							[+] case("Deposit")
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (KEY_CTRL_N)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sDate)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sPayee)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sMemo)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sCategory)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(sTag)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sAmount)
								[ ] sleep(SHORT_SLEEP)
								[ ] MDIClient.AccountRegister.TxList.TxToolBar.Save.Click()
								[ ] iFunctionResult = PASS
							[ ] 
							[+] default
								[ ] iFunctionResult = FAIL
							[ ] 
							[ ] 
						[ ] 
						[+] if(AlertMessage.Exists(SHORT_SLEEP)) // Handle message - You are entering a transaction over a year away. Is this correct?
							[ ] AlertMessage.SetActive()
							[ ] AlertMessage.DonTShowAgain.Check()
							[ ] AlertMessage.Yes.Click()
						[+] else if(AlertMessage.Exists(SHORT_SLEEP))
							[ ] AlertMessage.DonTShowAgain.Check()
							[ ] AlertMessage.Yes.Click()
						[ ] 
					[+] else
						[ ] ReportStatus("Verify Popup Register Option", FAIL, "Popup register is not OFF for MDI") 
						[ ] 
					[ ] 
				[ ] 
				[+] case("PopUp")
					[ ] 
					[ ] // Turn ON "Use Popup Register" option for Popup window type
					[ ] iSelect=UsePopupRegister("ON")
					[ ] 
					[+] if(iSelect==PASS)
						[ ] ReportStatus("Verify Popup Register Option", PASS, "Popup register is ON for Popup") 
						[ ] 
						[ ] BankingPopUp.VerifyEnabled(TRUE, 20)
						[ ] // Maximize the Checking account window as Popup Register is on
						[ ] BankingPopUp.Maximize()
						[ ] 
						[ ] // For Premier and Deluxe SKU's, tag column is not selected. Include the tag column from Account Settings options.
						[+] // if(SKU_TOBE_TESTED == "PREMIER" || SKU_TOBE_TESTED == "DELUXE")
							[ ] // BankingPopUp.AccountActions.Click ()
							[ ] // BankingPopUp.AccountActions.TypeKeys(  Replicate (KEY_DN, 16)) 
							[ ] // BankingPopUp.AccountActions.TypeKeys(KEY_ENTER)
							[ ] // PopUpCalloutHolder.SetActive ()
							[ ] // PopUpCalloutHolder.CalloutPopup.Tag.Click (1, 12, 12)
							[ ] // PopUpCalloutHolder.CalloutPopup.Done.Click (1, 29, 11)
						[ ] 
						[+] switch(sTransactionType) 
							[+] case("Payment")
								[ ] BankingPopUp.SetActive()
								[ ] BankingPopUp.TypeKeys (sDate)
								[ ] BankingPopUp.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TypeKeys (sPayee)
								[ ] BankingPopUp.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TypeKeys (sMemo)
								[ ] BankingPopUp.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TypeKeys (sCategory)
								[ ] BankingPopUp.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TypeKeys (sTag)
								[ ] BankingPopUp.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TypeKeys (sAmount)
								[ ] sleep(SHORT_SLEEP)
								[ ] BankingPopUp.TxList.TxToolbar.Save.Click()
								[ ] 
								[ ] iFunctionResult = PASS
							[ ] 
							[+] case("Deposit")
								[ ] BankingPopUp.SetActive()
								[ ] BankingPopUp.TxList.TypeKeys (sDate)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sPayee)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sMemo)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sCategory)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sTag)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] //BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sAmount)
								[ ] sleep(SHORT_SLEEP)
								[ ] BankingPopUp.TxList.TxToolbar.Save.Click()
								[ ] iFunctionResult = PASS
							[ ] 
							[+] default
								[ ] iFunctionResult = FAIL
						[ ] 
					[+] else
						[ ] ReportStatus("Verify Popup Register Option", FAIL, "Popup register is not ON for Popup") 
						[ ] 
					[ ] 
			[ ] 
		[+] except
			[+] if(BankingPopUp.Exists(SHORT_SLEEP))
				[ ] BankingPopUp.Close()
				[ ] 
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: FindTransaction()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will find the transaction as per input (eg. Payee name)
		[ ] //
		[ ] // PARAMETERS:		ANYTYPE		WindowName		 MDI/PopUp
		[ ] //						STRING		sInput		 		Input parameter to be searched
		[ ] //
		[ ] // RETURNS:			INTEGER	PASS			 if search is successful
		[ ] //									FAIL  			 if any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //   	Jan 5, 2011  Mamta Jain  Created
		[ ] //    May25, 2012 Udita Dube	Updated 
	[ ] // ==========================================================
	[ ] 
	[+] public INTEGER FindTransaction (ANYTYPE WindowName, STRING sInput, STRING sAccountType optional)
		[+] // Variable Declaration
			[ ] INTEGER  iSelect
			[ ] STRING sStaticText, sContinue, sNotransaction
			[ ] BOOLEAN bCheck
			[ ] 
			[ ] sContinue ="Continue"
			[ ] sNotransaction = "No matching transactions were found."
		[ ] 
		[+] do
			[+] switch(WindowName)
				[+] case "MDI"
					[+] if(sAccountType!=ACCOUNT_INVESTING)
						[ ] QuickenWindow.SetActive()
						[ ] QuickenWindow.TypeKeys(KEY_CTRL_N)
						[+] do
							[ ] QuickenWindow.Edit.Click()
							[ ] QuickenWindow.Edit.Find.Select()
						[+] except
							[ ] QuickenWindow.TypeKeys(KEY_CTRL_F)
							[ ] 
					[+] else
						[ ] QuickenWindow.TypeKeys(KEY_CTRL_N)
						[+] if(wEnterTransaction.Exists(SHORT_SLEEP))
							[ ] wEnterTransaction.SetActive()
							[ ] bCheck=wEnterTransaction.Account.IsEnabled()
							[+] if(bCheck ==FALSE)
								[ ] iFunctionResult = PASS
								[ ] wEnterTransaction.Close()
							[+] else
								[ ] iFunctionResult = FAIL
								[ ] wEnterTransaction.Close()
								[ ] 
						[+] else
							[ ] iFunctionResult = FAIL
						[ ] QuickenWindow.SetActive()
						[ ] QuickenWindow.Edit.Click()
						[ ] QuickenWindow.Edit.Find.Select()
						[ ] 
					[+] if(QuickenFind.Exists(SHORT_SLEEP))
						[ ] QuickenFind.SetActive()
						[ ] // 2015-10-27 KalyanG: Added selecting 'Any Field', more info QW-5494
						[ ] QuickenFind.FindAnyField.Select("Any Field")
						[ ] QuickenFind.QuickenFind.SetText(sInput)
						[ ] QuickenFind.SearchBackwards.Check()
						[ ] QuickenFind.SetActive()
						[ ] QuickenFind.Find.Click()
						[+] if(AlertMessage.Yes.Exists(5))   //added by Anagha 
							[ ] AlertMessage.SetActive ()
							[ ] AlertMessage.Yes.Click ()
							[ ] iFunctionResult = PASS
						[+] if(AlertMessage.Exists(5))   //added by Mukesh when no transaction found
							[ ] AlertMessage.SetActive ()
							[ ] AlertMessage.OK.Click()
							[ ] iFunctionResult = FAIL
							[ ] 
							[ ] 
						[+] else
							[ ] iFunctionResult = PASS
						[ ] 
						[ ] QuickenFind.Close()
						[ ] 
						[ ] iFunctionResult = PASS
						[ ] 
						[ ] 
					[+] else
						[ ] ReportStatus("Validate Window", FAIL, "Quicken Find window doesn't exists")
						[ ] iFunctionResult = FAIL
						[ ] 
				[ ] 
				[+] case "PopUp"
					[+] if(BankingPopUp.Exists(SHORT_SLEEP))
						[ ] BankingPopUp.SetActive()
						[ ] BankingPopUp.SearchWindow.SetText(sInput)
						[ ] BankingPopUp.TxList.TypeKeys(KEY_UP)	
						[ ] iFunctionResult = PASS
						[ ] 
					[+] else
						[ ] ReportStatus("Validate Window", FAIL, "Window doesn't exists")
						[ ] iFunctionResult = FAIL
					[ ] 
				[ ] 
				[+] default
					[ ] iFunctionResult = FAIL
		[+] except
			[ ] ExceptLog()
			[+] if(QuickenFind.Exists(SHORT_SLEEP))
				[ ] QuickenFind.SetActive()
				[ ] QuickenFind.TypeKeys("<Alt-f4>")
				[ ] 
				[ ] 
			[+] if(BankingPopUp.Exists(SHORT_SLEEP))
				[ ] BankingPopUp.Close()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: EditCheckingTransaction()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will edit the transaction as per input (e.g. Payee name)
		[ ] //
		[ ] // PARAMETERS:		ANYTYPE 	sWindowType			MDI or Popup
		[ ] //						STRING 	sAmount				Transaction Amount 
		[ ] //						STRING	sDate					Date of the transaction [Optional]
		[ ] //						STRING	sChequeNo			Cheque number [Optional]
		[ ] //						STRING	sPayee				Payee
		[ ] //						STRING 	sCategory				Category
		[ ] //
		[ ] // RETURNS:			INTEGER	PASS			 if transaction is editted successfully
		[ ] //									FAIL  			 if any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //   	Jan 6, 2011  Mamta Jain  Created
	[ ] // ==========================================================
	[+] // public INTEGER EditCheckingTransaction(ANYTYPE sWindowType, TransactionRecord rTransaction)
		[+] // // Variable declaration
			[ ] // BOOLEAN bBalanceCheck
			[ ] // INTEGER  iSelect
			[ ] // STRING sActual
		[+] // do
			[+] // if(IsNULL(rTransaction.sDate))
				[ ] // rTransaction.sDate = ""
			[+] // if(IsNULL(rTransaction.sChequeNo))
				[ ] // rTransaction.sChequeNo = ""
				[ ] // 
			[+] // if(IsNULL(rTransaction.sPayee))
				[ ] // rTransaction.sPayee = ""
				[ ] // 
			[+] // if( IsNULL(rTransaction.sCategory))
				[ ] // rTransaction.sCategory = ""
			[+] // if( IsNULL(rTransaction.sTransactionType))
				[ ] // rTransaction.sTransactionType = ""
			[+] // if( IsNULL(rTransaction.sMemo))
				[ ] // rTransaction.sMemo = ""
			[+] // if( IsNULL(rTransaction.sTotal))
				[ ] // rTransaction.sTotal = ""
			[ ] // 
			[ ] // 
			[+] // switch(sWindowType)
				[ ] // 
				[+] // case("MDI")
					[ ] // QuickenWindow.SetActive()
					[ ] // // FindTransaction(sWindowType,rTransaction.sPayee)
					[ ] // 
					[+] // if (rTransaction.sDate != "")
						[ ] // MDIClient.AccountRegister.TxList.TypeKeys (rTransaction.sDate)
					[ ] // MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
					[+] // if(rTransaction.sChequeNo != "")
						[ ] // MDIClient.AccountRegister.TxList.TypeKeys (rTransaction.sChequeNo)
					[ ] // MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
					[+] // if(rTransaction.sPayee != "")
						[ ] // MDIClient.AccountRegister.TxList.TypeKeys (rTransaction.sPayee)
					[ ] // MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
					[+] // if(rTransaction.sMemo != "")
						[ ] // MDIClient.AccountRegister.TxList.TypeKeys (rTransaction.sMemo)
					[ ] // MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
					[+] // if(rTransaction.sCategory != "")
						[ ] // MDIClient.AccountRegister.TxList.TypeKeys (rTransaction.sCategory)
					[ ] // MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
					[ ] // MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
					[+] // if (rTransaction.sAmount != "")
						[ ] // MDIClient.AccountRegister.TxList.TypeKeys (rTransaction.sAmount)
					[ ] // sleep(SHORT_SLEEP)
					[ ] // MDIClient.AccountRegister.TxList.TxToolBar.Save.Click()
					[ ] // iFunctionResult = PASS
					[ ] // 
					[+] // // switch(sTransactionType) 
						[+] // // case("Payment")
							[ ] // // 
						[ ] // // 
						[+] // // case("Deposit")
							[ ] // // MDIClient.AccountRegister.TxList.TypeKeys (sDate)
							[ ] // // MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
							[ ] // // MDIClient.AccountRegister.TxList.TypeKeys (sChequeNo)
							[ ] // // MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
							[ ] // // MDIClient.AccountRegister.TxList.TypeKeys (sPayee)
							[ ] // // MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
							[ ] // // MDIClient.AccountRegister.TxList.TypeKeys (sMemo)
							[ ] // // MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
							[ ] // // MDIClient.AccountRegister.TxList.TypeKeys (sCategory)
							[ ] // // MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
							[ ] // // MDIClient.AccountRegister.TxList.TypeKeys (sTag)
							[ ] // // MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
							[ ] // // MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
							[ ] // // MDIClient.AccountRegister.TxList.TypeKeys (sAmount)
							[ ] // // sleep(SHORT_SLEEP)
							[ ] // // MDIClient.AccountRegister.TxList.TxToolbar.Save.Click()
							[ ] // // iFunctionResult = PASS
						[ ] // // 
						[+] // // default
								[ ] // // iFunctionResult = FAIL
					[ ] // 
				[ ] // 
				[+] // case("PopUp")
					[ ] // 
					[ ] // // Turn ON "Use Popup Register" option for Popup window type
					[ ] // iSelect=UsePopupRegister("ON")
					[+] // if(iSelect==PASS)
						[ ] // ReportStatus("Verify Popup Register Option", PASS, "Popup register is ON for Popup") 
					[+] // else
						[ ] // ReportStatus("Verify Popup Register Option", FAIL, "Popup register is not ON for Popup") 
						[ ] // 
					[ ] // 
					[ ] // BankingPopUp.VerifyEnabled(TRUE, 20)
					[ ] // BankingPopUp.SetActive ()
					[+] // if(rTransaction.sDate != "")
						[ ] // BankingPopUp.TypeKeys (rTransaction.sDate)
					[ ] // BankingPopUp.TypeKeys(KEY_TAB)
					[+] // if(rTransaction.sChequeNo != "")
						[ ] // BankingPopUp.TypeKeys (rTransaction.sChequeNo)
					[ ] // BankingPopUp.TypeKeys(KEY_TAB)
					[+] // if(rTransaction.sPayee != "")
						[ ] // BankingPopUp.TypeKeys (rTransaction.sPayee)
					[ ] // BankingPopUp.TypeKeys(KEY_TAB)
					[ ] // BankingPopUp.TypeKeys(KEY_TAB)
					[+] // if(rTransaction.sCategory != "")
						[ ] // BankingPopUp.TypeKeys (rTransaction.sCategory)
					[ ] // BankingPopUp.TypeKeys(KEY_TAB)
					[ ] // BankingPopUp.TypeKeys(KEY_TAB)
					[+] // if(rTransaction.sAmount != "")
						[ ] // BankingPopUp.TypeKeys (rTransaction.sAmount)
					[ ] // sleep(SHORT_SLEEP)
					[ ] // BankingPopUp.TxList.TxToolbar.Save.Click()
					[ ] // 
					[ ] // iFunctionResult = PASS
					[ ] // 
					[+] // // switch(sTransactionType) 
						[ ] // // case("Payment")
						[ ] // // 
						[+] // // case("Deposit")
							[ ] // // BankingPopUp.SetActive()
							[ ] // // BankingPopUp.TxList.TypeKeys (sDate)
							[ ] // // BankingPopUp.TxList.TypeKeys(KEY_TAB)
							[ ] // // BankingPopUp.TxList.TypeKeys (sChequeNo)
							[ ] // // BankingPopUp.TxList.TypeKeys(KEY_TAB)
							[ ] // // BankingPopUp.TxList.TypeKeys (sPayee)
							[ ] // // BankingPopUp.TxList.TypeKeys(KEY_TAB)
							[ ] // // BankingPopUp.TxList.TypeKeys (sMemo)
							[ ] // // BankingPopUp.TxList.TypeKeys(KEY_TAB)
							[ ] // // BankingPopUp.TxList.TypeKeys (sCategory)
							[ ] // // BankingPopUp.TxList.TypeKeys(KEY_TAB)
							[ ] // // BankingPopUp.TxList.TypeKeys (sTag)
							[ ] // // BankingPopUp.TxList.TypeKeys(KEY_TAB)
							[ ] // // //BankingPopUp.TxList.TypeKeys(KEY_TAB)
							[ ] // // BankingPopUp.TxList.TypeKeys (sAmount)
							[ ] // // sleep(SHORT_SLEEP)
							[ ] // // BankingPopUp.TxList.TxToolbar.Save.Click()
							[ ] // // iFunctionResult = PASS
						[ ] // // 
						[+] // // default
								[ ] // // iFunctionResult = FAIL
					[ ] // BankingPopUp.Close()
			[ ] // 
		[+] // except
			[+] // if(BankingPopUp.Exists(SHORT_SLEEP))
				[ ] // BankingPopUp.Close()
			[ ] // iFunctionResult = FAIL
		[ ] // return iFunctionResult
		[ ] // 
	[+] public INTEGER EditCheckingTransaction(ANYTYPE sWindowType, TransactionRecord rTransaction)
		[+] // Variable declaration
			[ ] BOOLEAN bBalanceCheck
			[ ] INTEGER  iSelect
			[ ] STRING sActual
		[+] do
			[+] if(IsNULL(rTransaction.sDate))
				[ ] rTransaction.sDate = ""
			[+] if(IsNULL(rTransaction.sChequeNo))
				[ ] rTransaction.sChequeNo = ""
				[ ] 
			[+] if(IsNULL(rTransaction.sPayee))
				[ ] rTransaction.sPayee = ""
				[ ] 
			[+] if( IsNULL(rTransaction.sCategory))
				[ ] rTransaction.sCategory = ""
			[+] if( IsNULL(rTransaction.sTransactionType))
				[ ] rTransaction.sTransactionType = ""
			[+] if( IsNULL(rTransaction.sMemo))
				[ ] rTransaction.sMemo = ""
			[+] if( IsNULL(rTransaction.sTotal))
				[ ] rTransaction.sTotal = ""
			[ ] 
			[ ] 
			[+] switch(sWindowType)
				[ ] 
				[+] case("MDI")
					[ ] QuickenWindow.SetActive()
					[ ] // FindTransaction(sWindowType,rTransaction.sPayee)
					[ ] 
					[+] if (rTransaction.sDate != "")
						[ ] print("****EDIT TRANS****[{rTransaction.sDate}]")
						[ ] MDIClient.AccountRegister.TxList.captureBitmap("c:\automation\{GetTestCaseName()}_before.bmp")
						[ ] MDIClient.AccountRegister.TxList.TypeKeys (rTransaction.sDate)
						[ ] MDIClient.AccountRegister.TxList.captureBitmap("c:\automation\{GetTestCaseName()}_after.bmp")
						[ ] print("****EDIT TRANS****[{rTransaction.sDate}]")
					[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
					[+] if(rTransaction.sChequeNo != "")
						[ ] MDIClient.AccountRegister.TxList.TypeKeys (rTransaction.sChequeNo)
					[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
					[+] if(rTransaction.sPayee != "")
						[ ] MDIClient.AccountRegister.TxList.TypeKeys (rTransaction.sPayee)
					[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
					[+] if(rTransaction.sMemo != "")
						[ ] MDIClient.AccountRegister.TxList.TypeKeys (rTransaction.sMemo)
					[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
					[+] if(rTransaction.sCategory != "")
						[ ] MDIClient.AccountRegister.TxList.TypeKeys (rTransaction.sCategory)
					[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
					[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
					[+] if (rTransaction.sAmount != "")
						[ ] MDIClient.AccountRegister.TxList.TypeKeys (rTransaction.sAmount)
					[ ] sleep(SHORT_SLEEP)
					[ ] MDIClient.AccountRegister.TxList.TxToolBar.Save.Click()
					[ ] iFunctionResult = PASS
					[ ] 
					[+] // switch(sTransactionType) 
						[+] // case("Payment")
							[ ] // 
						[ ] // 
						[+] // case("Deposit")
							[ ] // MDIClient.AccountRegister.TxList.TypeKeys (sDate)
							[ ] // MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
							[ ] // MDIClient.AccountRegister.TxList.TypeKeys (sChequeNo)
							[ ] // MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
							[ ] // MDIClient.AccountRegister.TxList.TypeKeys (sPayee)
							[ ] // MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
							[ ] // MDIClient.AccountRegister.TxList.TypeKeys (sMemo)
							[ ] // MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
							[ ] // MDIClient.AccountRegister.TxList.TypeKeys (sCategory)
							[ ] // MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
							[ ] // MDIClient.AccountRegister.TxList.TypeKeys (sTag)
							[ ] // MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
							[ ] // MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
							[ ] // MDIClient.AccountRegister.TxList.TypeKeys (sAmount)
							[ ] // sleep(SHORT_SLEEP)
							[ ] // MDIClient.AccountRegister.TxList.TxToolbar.Save.Click()
							[ ] // iFunctionResult = PASS
						[ ] // 
						[+] // default
								[ ] // iFunctionResult = FAIL
					[ ] 
				[ ] 
				[+] case("PopUp")
					[ ] 
					[ ] // Turn ON "Use Popup Register" option for Popup window type
					[ ] iSelect=UsePopupRegister("ON")
					[+] if(iSelect==PASS)
						[ ] ReportStatus("Verify Popup Register Option", PASS, "Popup register is ON for Popup") 
					[+] else
						[ ] ReportStatus("Verify Popup Register Option", FAIL, "Popup register is not ON for Popup") 
						[ ] 
					[ ] 
					[ ] BankingPopUp.VerifyEnabled(TRUE, 20)
					[ ] BankingPopUp.SetActive ()
					[+] if(rTransaction.sDate != "")
						[ ] BankingPopUp.TypeKeys (rTransaction.sDate)
					[ ] BankingPopUp.TypeKeys(KEY_TAB)
					[+] if(rTransaction.sChequeNo != "")
						[ ] BankingPopUp.TypeKeys (rTransaction.sChequeNo)
					[ ] BankingPopUp.TypeKeys(KEY_TAB)
					[+] if(rTransaction.sPayee != "")
						[ ] BankingPopUp.TypeKeys (rTransaction.sPayee)
					[ ] BankingPopUp.TypeKeys(KEY_TAB)
					[ ] BankingPopUp.TypeKeys(KEY_TAB)
					[+] if(rTransaction.sCategory != "")
						[ ] BankingPopUp.TypeKeys (rTransaction.sCategory)
					[ ] BankingPopUp.TypeKeys(KEY_TAB)
					[ ] BankingPopUp.TypeKeys(KEY_TAB)
					[+] if(rTransaction.sAmount != "")
						[ ] BankingPopUp.TypeKeys (rTransaction.sAmount)
					[ ] sleep(SHORT_SLEEP)
					[ ] BankingPopUp.TxList.TxToolbar.Save.Click()
					[ ] 
					[ ] iFunctionResult = PASS
					[ ] 
					[+] // switch(sTransactionType) 
						[ ] // case("Payment")
						[ ] // 
						[+] // case("Deposit")
							[ ] // BankingPopUp.SetActive()
							[ ] // BankingPopUp.TxList.TypeKeys (sDate)
							[ ] // BankingPopUp.TxList.TypeKeys(KEY_TAB)
							[ ] // BankingPopUp.TxList.TypeKeys (sChequeNo)
							[ ] // BankingPopUp.TxList.TypeKeys(KEY_TAB)
							[ ] // BankingPopUp.TxList.TypeKeys (sPayee)
							[ ] // BankingPopUp.TxList.TypeKeys(KEY_TAB)
							[ ] // BankingPopUp.TxList.TypeKeys (sMemo)
							[ ] // BankingPopUp.TxList.TypeKeys(KEY_TAB)
							[ ] // BankingPopUp.TxList.TypeKeys (sCategory)
							[ ] // BankingPopUp.TxList.TypeKeys(KEY_TAB)
							[ ] // BankingPopUp.TxList.TypeKeys (sTag)
							[ ] // BankingPopUp.TxList.TypeKeys(KEY_TAB)
							[ ] // //BankingPopUp.TxList.TypeKeys(KEY_TAB)
							[ ] // BankingPopUp.TxList.TypeKeys (sAmount)
							[ ] // sleep(SHORT_SLEEP)
							[ ] // BankingPopUp.TxList.TxToolbar.Save.Click()
							[ ] // iFunctionResult = PASS
						[ ] // 
						[+] // default
								[ ] // iFunctionResult = FAIL
					[ ] BankingPopUp.Close()
			[ ] 
		[+] except
			[+] if(BankingPopUp.Exists(SHORT_SLEEP))
				[ ] BankingPopUp.Close()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: DeleteTransaction()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will delete the transaction as per input (e.g. Payee name)
		[ ] //
		[ ] // PARAMETERS:		ANYTYPE 	sWindowType			MDI or Popup
		[ ] //						STRING	sInput					Input parameter to be searched
		[ ] //
		[ ] // RETURNS:			INTEGER	PASS			 if transaction is deleted successfully
		[ ] //									FAIL  			 if any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //   	Jan 6, 2011  Mamta Jain  Created
	[ ] // ==========================================================
	[+] public INTEGER DeleteTransaction(STRING sWindowType, STRING sInput, STRING sAccountType optional)
		[+] // Variable Declaration
			[ ] INTEGER  iValidate
		[+] do
			[ ] 
			[+] if(sAccountType!=NULL)
				[ ] iValidate = FindTransaction(sWindowType, sInput,sAccountType)	// find transaction withh editted value
			[+] else
				[ ] iValidate = FindTransaction(sWindowType, sInput)
				[ ] 
			[+] if(iValidate == PASS)
				[ ] 
				[+] switch(sWindowType)
					[+] case "MDI"
						[ ] //MDIClient.SetActive()
						[ ] //QuickenWindow.TypeKeys(KEY_CTRL_D)
						[ ] // QuickenWindow.TypeKeys("<Ctrl-d>")		// To delete the transaction
						[ ] 
						[ ] // 2015-10-27 KalyanG: Added attempts to select delete transaction
						[+] do
							[ ] QuickenWindow.Edit.Click()
							[ ] QuickenWindow.Edit.Transaction.Click()
							[ ] QuickenWindow.Edit.Transaction.Delete.Select()
							[ ] 
							[+] if !(DeleteTransaction.Exists(2))
								[ ] LogWarning("Attempt1: Unable to select Edit>Transaction>Delete")
								[ ] raise
								[ ] 
						[+] except
							[+] do
								[ ] QuickenWindow.MainMenu.Select("/_Edit/_Transaction/_Delete")
								[ ] 
								[+] if !(DeleteTransaction.Exists(2))
									[ ] LogWarning("Attempt2: Unable to select Edit>Transaction>Delete")
									[ ] raise
									[ ] 
								[ ] 
							[+] except
								[ ] LogWarning("Attempt3: select Edit>Transaction>Delete")
								[ ] QuickenWindow.TypeKeys("<Ctrl-d>")
							[ ] 
							[ ] 
							[ ] 
						[ ] 
						[+] if(DeleteTransaction.Exists(SHORT_SLEEP))
							[ ] DeleteTransaction.SetActive ()
							[ ] DeleteTransaction.Yes.Click ()
							[ ] iFunctionResult = PASS 
						[+] else
							[ ] iFunctionResult = FAIL 
						[ ] 
					[ ] 
					[+] case "PopUp"
						[ ] BankingPopUp.SetActive()
						[ ] BankingPopUp.TypeKeys("<Ctrl-d>")		// To delete the transaction
						[+] if(DeleteTransaction.Exists(SHORT_SLEEP))
							[ ] DeleteTransaction.SetActive ()
							[ ] DeleteTransaction.Yes.Click ()
							[ ] iFunctionResult = PASS 
						[+] else
							[ ] iFunctionResult = FAIL 
						[ ] 
						[ ] BankingPopUp.Close()
						[ ] 
					[ ] 
					[+] default
						[ ] iFunctionResult = FAIL
						[ ] 
			[+] else
				[ ] ReportStatus("Validate Editted Transaction", iValidate, "Transaction with Input - {sInput} is not found") 
				[ ] iFunctionResult = FAIL
			[ ] 
		[+] except
			[+] if(DeleteTransaction.Exists(SHORT_SLEEP))
				[ ] DeleteTransaction.Close()
			[+] // if(PopUpDeleteTransaction.Exists(SHORT_SLEEP))
				[ ] // PopUpDeleteTransaction.Close()
			[+] if(BankingPopUp.Exists(SHORT_SLEEP))
				[ ] BankingPopUp.Close()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // // FUNCTION: AddInvestingTransaction()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will find the transaction as per input (eg. Payee name)
		[ ] // //
		[ ] // // PARAMETERS:		ANYTYPE		WindowName		 MDI/PopUp
		[ ] // //						STRING		sInput		 		Input parameter to be searched
		[ ] // //
		[ ] // // RETURNS:			INTEGER	PASS			 if search is successful
		[ ] // //									FAIL  			 if any error occurs
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //   	Jan 5, 2011  Mamta Jain  Created
		[ ] // //    May25, 2012 Udita Dube	Updated 
	[ ] // // ==========================================================
	[+] // public INTEGER FindTransaction(ANYTYPE WindowName, STRING sInput)
		[+] // // Variable Declaration
			[ ] // INTEGER iFunctionResult, iSelect
			[ ] // STRING sStaticText, sContinue, sNotransaction
			[ ] // 
			[ ] // sContinue = "Continue"
			[ ] // sNotransaction = "No matching transactions were found."
		[ ] // 
		[+] // do
			[+] // switch(WindowName)
				[+] // case "MDI"
					[ ] // BankingMDI.SetActive ()
					[ ] // BankingMDI.TypeKeys("<Ctrl-n>")	// highlight the new row
					[ ] // //BankingMDI.Find.Click (1, 29, 9)		// Click on Find Link         [QW2012 compatible]
					[ ] // BankingMDI.TypeKeys("<Ctrl-f>")           // Launch Quicken Find window         [QW2013 compatible]
					[+] // if(QuickenFind.Exists(SHORT_SLEEP))
						[ ] // QuickenFind.SetActive()
						[ ] // QuickenFind.QuickenFind.SetText(sInput)
						[ ] // QuickenFind.Find.Click()
						[+] // // if(MessageBox.Exists(SHORT_SLEEP))   //commented by Puja
							[ ] // // MessageBox.SetActive ()
							[ ] // // sStaticText = MessageBox.ContinueSearchFromEndOfRe.GetText()
							[ ] // // bMatch = Matchstr("*{sContinue}*",  sStaticText)
							[+] // // if(bMatch == TRUE)
								[ ] // // MessageBox.Yes.Click ()
								[ ] // // 
							[ ] // // 
							[+] // // if(MessageBox.Exists(SHORT_SLEEP))
								[ ] // // MessageBox.SetActive ()
								[ ] // // sStaticText = MessageBox.ContinueSearchFromEndOfRe.GetText()
								[ ] // // bMatch = Matchstr("*{sNotransaction}*",  sStaticText)
								[+] // // if(bMatch == TRUE)
									[ ] // // MessageBox.OK.Click ()
									[ ] // // iFunctionResult = FAIL
								[+] // // else
									[ ] // // LogException("Error message - {sStaticText} is displayed")
									[ ] // // iFunctionResult = FAIL
								[ ] // // 
							[+] // // else
								[ ] // // iFunctionResult = PASS
						[+] // // else
							[ ] // // iFunctionResult = PASS
						[ ] // // 
						[ ] // //QuickenFind.Close()
						[ ] // QuickenFind.TypeKeys("<Alt-f4>")
						[ ] // iFunctionResult = PASS
					[+] // else
						[ ] // ReportStatus("Validate Window", FAIL, "Quicken Find window doesn't exists")
						[ ] // iFunctionResult = FAIL
						[ ] // 
				[ ] // 
				[+] // case "PopUp"
					[ ] // BankingPopUp.VerifyEnabled(TRUE,20)
					[+] // if(BankingPopUp.Exists(SHORT_SLEEP) == TRUE)
						[ ] // BankingPopUp.SetActive ()
						[ ] // BankingPopUp.TypeKeys("<Ctrl-n>")	// highlight the new row
						[ ] // //BankingPopUp.Find.Click (1, 31, 10)     // [QW2012 compatible]
						[ ] // BankingPopUp.TypeKeys("<Ctrl-f>")      // Launch Quicken Find window         [QW2013 compatible]
						[+] // if(QuickenFind.Exists(SHORT_SLEEP))
							[ ] // QuickenFind.SetActive()
							[ ] // QuickenFind.QuickenFind.SetText(sInput)
							[ ] // QuickenFind.Find.Click()
							[ ] // iFunctionResult=PASS
							[+] // // if(MessageBox.Exists(SHORT_SLEEP))  /// Commented by Puja
								[ ] // // MessageBox.SetActive ()
								[ ] // // sStaticText = MessageBox.ContinueSearchFromEndOfRe.GetText()
								[ ] // // bMatch = Matchstr("*{sContinue}*",  sStaticText)
								[+] // // if(bMatch == TRUE)
									[ ] // // MessageBox.Yes.Click ()
									[ ] // // 
								[+] // // if(MessageBox.Exists(SHORT_SLEEP))
									[ ] // // MessageBox.SetActive ()
									[ ] // // sStaticText = MessageBox.ContinueSearchFromEndOfRe.GetText()
									[ ] // // bMatch = Matchstr("*{sNotransaction}*",  sStaticText)
									[+] // // if(bMatch == TRUE)
										[ ] // // MessageBox.OK.Click ()
										[ ] // // iFunctionResult = FAIL
									[+] // // else
										[ ] // // LogException("Error message - {sStaticText} is displayed")
										[ ] // // iFunctionResult = FAIL
								[+] // // else
									[ ] // // iFunctionResult = PASS
								[ ] // // 
							[+] // // else
								[ ] // // iFunctionResult = PASS
							[ ] // 
							[ ] // //QuickenFind.Close()
							[ ] // QuickenFind.TypeKeys("<Alt-f4>")
							[ ] // iFunctionResult=PASS
						[+] // else
							[ ] // ReportStatus("Validate Window", FAIL, "Quicken Find window doesn't exists")
							[ ] // iFunctionResult = FAIL
							[ ] // 
						[ ] // 
					[+] // else
						[ ] // ReportStatus("Validate Window", FAIL, "Window doesn't exists")
						[ ] // iFunctionResult = FAIL
					[ ] // 
				[ ] // 
				[+] // default
					[ ] // iFunctionResult = FAIL
		[+] // except
			[+] // if(QuickenFind.Exists(SHORT_SLEEP))
				[ ] // //QuickenFind.Close()
				[ ] // QuickenFind.SetActive()
				[ ] // QuickenFind.TypeKeys("<Alt-f4>")
				[ ] // 
			[+] // if(BankingPopUp.Exists(SHORT_SLEEP))
				[ ] // BankingPopUp.Close()
			[ ] // iFunctionResult = FAIL
		[ ] // return iFunctionResult
		[ ] // 
	[ ] // 
	[ ] //  // ==========================================================
	[+] // // FUNCTION: EditCheckingTransaction()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will edit the transaction as per input (e.g. Payee name)
		[ ] // //
		[ ] // // PARAMETERS:		ANYTYPE 	sWindowType			MDI or Popup
		[ ] // //						STRING 	sAmount				Transaction Amount 
		[ ] // //						STRING	sDate					Date of the transaction [Optional]
		[ ] // //						STRING	sChequeNo			Cheque number [Optional]
		[ ] // //						STRING	sPayee				Payee
		[ ] // //						STRING 	sCategory				Category
		[ ] // //
		[ ] // // RETURNS:			INTEGER	PASS			 if transaction is editted successfully
		[ ] // //									FAIL  			 if any error occurs
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //   	Jan 6, 2011  Mamta Jain  Created
	[ ] // // ==========================================================
	[+] // public INTEGER EditCheckingTransaction(ANYTYPE sWindowType, TransactionRecord rTransaction)
		[+] // // Variable declaration
			[ ] // BOOLEAN bBalanceCheck
			[ ] // INTEGER iFunctionResult, iSelect
			[ ] // STRING sActual
		[+] // do
			[+] // if(IsNULL(rTransaction.sDate))
				[ ] // rTransaction.sDate = ""
			[+] // if(IsNULL(rTransaction.sChequeNo))
				[ ] // rTransaction.sChequeNo = ""
				[ ] // 
			[+] // if(IsNULL(rTransaction.sPayee))
				[ ] // rTransaction.sPayee = ""
				[ ] // 
			[+] // if( IsNULL(rTransaction.sCategory))
				[ ] // rTransaction.sCategory = ""
			[+] // if( IsNULL(rTransaction.sTransactionType))
				[ ] // rTransaction.sTransactionType = ""
			[+] // if( IsNULL(rTransaction.sMemo))
				[ ] // rTransaction.sMemo = ""
			[+] // if( IsNULL(rTransaction.sTotal))
				[ ] // rTransaction.sTotal = ""
			[ ] // 
			[ ] // 
			[+] // switch(sWindowType)
				[ ] // 
				[+] // case("MDI")
					[ ] // 
					[ ] // BankingMDI.VerifyEnabled(TRUE, 20)
					[ ] // BankingMDI.SetActive ()
					[+] // if (rTransaction.sDate != "")
						[ ] // BankingMDI.TxList.TypeKeys (rTransaction.sDate)
					[ ] // BankingMDI.TxList.TypeKeys(KEY_TAB)
					[+] // if(rTransaction.sChequeNo != "")
						[ ] // BankingMDI.TxList.TypeKeys (rTransaction.sChequeNo)
					[ ] // BankingMDI.TxList.TypeKeys(KEY_TAB)
					[+] // if(rTransaction.sPayee != "")
						[ ] // BankingMDI.TxList.TypeKeys (rTransaction.sPayee)
					[ ] // BankingMDI.TxList.TypeKeys(KEY_TAB)
					[ ] // BankingMDI.TxList.TypeKeys(KEY_TAB)
					[+] // if(rTransaction.sCategory != "")
						[ ] // BankingMDI.TxList.TypeKeys (rTransaction.sCategory)
					[ ] // BankingMDI.TxList.TypeKeys(KEY_TAB)
					[ ] // BankingMDI.TxList.TypeKeys(KEY_TAB)
					[+] // if (rTransaction.sAmount != "")
						[ ] // BankingMDI.TxList.TypeKeys (rTransaction.sAmount)
					[ ] // sleep(SHORT_SLEEP)
					[ ] // BankingMDI.TxList.TxToolbar.Save.Click()
					[ ] // iFunctionResult = PASS
					[ ] // 
					[+] // // switch(sTransactionType) 
						[+] // // case("Payment")
							[ ] // // 
						[ ] // // 
						[+] // // case("Deposit")
							[ ] // // BankingMDI.TxList.TypeKeys (sDate)
							[ ] // // BankingMDI.TxList.TypeKeys(KEY_TAB)
							[ ] // // BankingMDI.TxList.TypeKeys (sChequeNo)
							[ ] // // BankingMDI.TxList.TypeKeys(KEY_TAB)
							[ ] // // BankingMDI.TxList.TypeKeys (sPayee)
							[ ] // // BankingMDI.TxList.TypeKeys(KEY_TAB)
							[ ] // // BankingMDI.TxList.TypeKeys (sMemo)
							[ ] // // BankingMDI.TxList.TypeKeys(KEY_TAB)
							[ ] // // BankingMDI.TxList.TypeKeys (sCategory)
							[ ] // // BankingMDI.TxList.TypeKeys(KEY_TAB)
							[ ] // // BankingMDI.TxList.TypeKeys (sTag)
							[ ] // // BankingMDI.TxList.TypeKeys(KEY_TAB)
							[ ] // // BankingMDI.TxList.TypeKeys(KEY_TAB)
							[ ] // // BankingMDI.TxList.TypeKeys (sAmount)
							[ ] // // sleep(SHORT_SLEEP)
							[ ] // // BankingMDI.TxList.TxToolbar.Save.Click()
							[ ] // // iFunctionResult = PASS
						[ ] // // 
						[+] // // default
								[ ] // // iFunctionResult = FAIL
					[ ] // 
				[ ] // 
				[+] // case("PopUp")
					[ ] // 
					[ ] // // Turn ON "Use Popup Register" option for Popup window type
					[ ] // iSelect=UsePopupRegister("ON")
					[+] // if(iSelect==PASS)
						[ ] // ReportStatus("Verify Popup Register Option", PASS, "Popup register is ON for Popup") 
					[+] // else
						[ ] // ReportStatus("Verify Popup Register Option", FAIL, "Popup register is not ON for Popup") 
						[ ] // 
					[ ] // 
					[ ] // BankingPopUp.VerifyEnabled(TRUE, 20)
					[ ] // BankingPopUp.SetActive ()
					[+] // if(rTransaction.sDate != "")
						[ ] // BankingPopUp.TypeKeys (rTransaction.sDate)
					[ ] // BankingPopUp.TypeKeys(KEY_TAB)
					[+] // if(rTransaction.sChequeNo != "")
						[ ] // BankingPopUp.TypeKeys (rTransaction.sChequeNo)
					[ ] // BankingPopUp.TypeKeys(KEY_TAB)
					[+] // if(rTransaction.sPayee != "")
						[ ] // BankingPopUp.TypeKeys (rTransaction.sPayee)
					[ ] // BankingPopUp.TypeKeys(KEY_TAB)
					[ ] // BankingPopUp.TypeKeys(KEY_TAB)
					[+] // if(rTransaction.sCategory != "")
						[ ] // BankingPopUp.TypeKeys (rTransaction.sCategory)
					[ ] // BankingPopUp.TypeKeys(KEY_TAB)
					[ ] // BankingPopUp.TypeKeys(KEY_TAB)
					[+] // if(rTransaction.sAmount != "")
						[ ] // BankingPopUp.TypeKeys (rTransaction.sAmount)
					[ ] // sleep(SHORT_SLEEP)
					[ ] // BankingPopUp.TxList.TxToolbar.Save.Click()
					[ ] // 
					[ ] // iFunctionResult = PASS
					[ ] // 
					[+] // // switch(sTransactionType) 
						[ ] // // case("Payment")
						[ ] // // 
						[+] // // case("Deposit")
							[ ] // // BankingPopUp.SetActive()
							[ ] // // BankingPopUp.TxList.TypeKeys (sDate)
							[ ] // // BankingPopUp.TxList.TypeKeys(KEY_TAB)
							[ ] // // BankingPopUp.TxList.TypeKeys (sChequeNo)
							[ ] // // BankingPopUp.TxList.TypeKeys(KEY_TAB)
							[ ] // // BankingPopUp.TxList.TypeKeys (sPayee)
							[ ] // // BankingPopUp.TxList.TypeKeys(KEY_TAB)
							[ ] // // BankingPopUp.TxList.TypeKeys (sMemo)
							[ ] // // BankingPopUp.TxList.TypeKeys(KEY_TAB)
							[ ] // // BankingPopUp.TxList.TypeKeys (sCategory)
							[ ] // // BankingPopUp.TxList.TypeKeys(KEY_TAB)
							[ ] // // BankingPopUp.TxList.TypeKeys (sTag)
							[ ] // // BankingPopUp.TxList.TypeKeys(KEY_TAB)
							[ ] // // //BankingPopUp.TxList.TypeKeys(KEY_TAB)
							[ ] // // BankingPopUp.TxList.TypeKeys (sAmount)
							[ ] // // sleep(SHORT_SLEEP)
							[ ] // // BankingPopUp.TxList.TxToolbar.Save.Click()
							[ ] // // iFunctionResult = PASS
						[ ] // // 
						[+] // // default
								[ ] // // iFunctionResult = FAIL
					[ ] // BankingPopUp.Close()
			[ ] // 
		[+] // except
			[+] // if(BankingPopUp.Exists(SHORT_SLEEP))
				[ ] // BankingPopUp.Close()
			[ ] // iFunctionResult = FAIL
		[ ] // return iFunctionResult
		[ ] // 
	[ ] // 
	[ ] // // ==========================================================
	[+] // // FUNCTION: DeleteTransaction()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will delete the transaction as per input (e.g. Payee name)
		[ ] // //
		[ ] // // PARAMETERS:		ANYTYPE 	sWindowType			MDI or Popup
		[ ] // //						STRING	sInput					Input parameter to be searched
		[ ] // //
		[ ] // // RETURNS:			INTEGER	PASS			 if transaction is deleted successfully
		[ ] // //									FAIL  			 if any error occurs
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //   	Jan 6, 2011  Mamta Jain  Created
	[ ] // // ==========================================================
	[+] // public INTEGER DeleteTransaction(STRING sWindowType, STRING sInput)
		[+] // // Variable Declaration
			[ ] // INTEGER iFunctionResult, iValidate
		[+] // do
			[ ] // 
			[ ] // iValidate = FindTransaction(sWindowType, sInput)	// find transaction withh editted value
			[+] // if(iValidate == PASS)
				[ ] // 
				[+] // switch(sWindowType)
					[+] // case "MDI"
						[ ] // BankingMDI.SetActive()
						[ ] // BankingMDI.TypeKeys("<Ctrl-d>")		// To delete the transaction
						[+] // if(DeleteTransaction.Exists(SHORT_SLEEP))
							[ ] // DeleteTransaction.SetActive ()
							[ ] // DeleteTransaction.Yes.Click ()
							[ ] // iFunctionResult = PASS 
						[+] // else
							[ ] // iFunctionResult = FAIL 
						[ ] // 
					[ ] // 
					[+] // case "PopUp"
						[ ] // BankingPopUp.SetActive()
						[ ] // BankingPopUp.TypeKeys("<Ctrl-d>")		// To delete the transaction
						[+] // if(PopUpDeleteTransaction.Exists(SHORT_SLEEP))
							[ ] // PopUpDeleteTransaction.SetActive ()
							[ ] // PopUpDeleteTransaction.Yes.Click ()
							[ ] // iFunctionResult = PASS 
						[+] // else
							[ ] // iFunctionResult = FAIL 
						[ ] // 
						[ ] // BankingPopUp.Close()
						[ ] // 
					[ ] // 
					[+] // default
						[ ] // iFunctionResult = FAIL
						[ ] // 
			[+] // else
				[ ] // ReportStatus("Validate Editted Transaction", iValidate, "Transaction with Input - {sInput} is not found") 
				[ ] // iFunctionResult = FAIL
			[ ] // 
		[+] // except
			[+] // if(DeleteTransaction.Exists(SHORT_SLEEP))
				[ ] // DeleteTransaction.Close()
			[+] // if(PopUpDeleteTransaction.Exists(SHORT_SLEEP))
				[ ] // PopUpDeleteTransaction.Close()
			[+] // if(BankingPopUp.Exists(SHORT_SLEEP))
				[ ] // BankingPopUp.Close()
			[ ] // iFunctionResult = FAIL
		[ ] // return iFunctionResult
	[ ] // 
	[ ] // ==========================================================
	[+] // FUNCTION: AddInvestingTransaction()
		[ ] //
		[ ] // DESCRIPTION:	This function will add transaction i.e. Buy / Sell 
		[ ] // 
		[ ] //
		[ ] // PARAMETERS IN:		STRING 	sTransactionType		 		Type of Transaction Buy / Sell
		[ ] //							STRING     sExpectedAccountName		Name of the account
		[ ] //							STRING     sTickerSymbol	       		Ticker Symbol as Security Name
		[ ] //							STRING	sNumberOfShares 			Number of shares to buy / sell
		[ ] //							STRING	sPricePaid   					Amount paid per share
		[ ] //							STRING 	sCommission					Commision amount : OPTIONAL
		[ ] //							STRING 	sTransactionDate				Transaction date (Default : Today's date) : OPTIONAL
		[ ] //							STRING 	sUseCashTransaction		Source for payment (Default : Cash): OPTIONAL
		[ ] //							STRING 	sMemo						Memo: OPTIONAL
		[ ] //
		[ ] // RETURNS:				INTEGER		PASS  = If transaction for Brokerage account is created successfully
		[ ] //											FAIL   = if any error occurs while adding transaction
		[ ] //
		[ ] // REVISION HISTORY:	22/12/2010   Created By	Mamta Jain
		[ ] //	 									   
	[ ] // ==========================================================
	[+] public INTEGER AddInvestingTransaction(STRING sWindowType,STRING sTransactionType, STRING sExpectedAccountName, STRING sTransactionDate, STRING sTickerSymbol, STRING sNumberOfShares, STRING sPricePaid, STRING sCommission optional, STRING sUseCashTransaction optional, STRING sMemo optional)
		[ ] 
		[+] //  Variable declaration
			[ ] INTEGER iSelect
			[ ] STRING sAccountName,sWindowTitle,sSellWindowTitle,sBuyWindowTitle,sUseCash
			[ ] sUseCash="From Account"
			[ ] sBuyWindowTitle="Buy - Shares Bought"
			[ ] sSellWindowTitle="Sell - Shares Sold"
			[ ] STRING sDateStamp = FormatDateTime (GetDateTime(), "m/d/yyyy") 
			[ ] sTransactionDate=sDateStamp
		[+] do
			[ ] 
			[+] if(IsNull(sCommission))
				[ ] sCommission=""
			[+] if(IsNull(sCommission))
				[ ] sCommission=""
			[+] if(IsNull(sUseCashTransaction))
				[ ] sUseCashTransaction=""
			[+] if(IsNull(sMemo))
				[ ] sMemo=""
			[ ] 
			[ ] 
			[ ] // Set Active Brokerage Account window
			[ ] //MessageBox.VerifyEnabled(TRUE, 20)
			[+] switch(sWindowType)
				[ ] 
				[+] case("PopUp")
					[ ] 
					[ ] // Turn ON "Use Popup Register" option for Popup window type
					[ ] iSelect=UsePopupRegister("ON")
					[ ] 
					[ ] InvestingAccountPopup.SetActive ()
					[ ] 
					[ ] // Check that Brokerage window is opened or not
					[+] if(InvestingAccountPopup.Exists(SHORT_SLEEP) == TRUE)
						[ ] 
						[ ] InvestingAccountPopup.SetActive ()
						[ ] InvestingAccountPopup.Maximize()
						[ ] InvestingAccountPopup.EnterTransactionsButton.Click()
						[ ] 
						[ ] // Pass the Transaction Type
						[+] switch(sTransactionType) 
							[ ] //BUY Transaction
							[+] case("Buy")
								[+] if(wEnterTransaction.Exists(3))
									[ ] wEnterTransaction.SetActive()
									[ ] // Open Buy transaction window
									[ ] wEnterTransaction.EnterTransaction.SetFocus()
									[ ] wEnterTransaction.EnterTransaction.TypeKeys("<Alt-g>")
									[ ] 
									[ ] // Enter transaction date
									[ ] wEnterTransaction.TransactionDate.SetText(sTransactionDate)
									[ ] 
									[ ] // Enter Security Name
									[ ] wEnterTransaction.SecurityName.SetText(sTickerSymbol)
									[ ] wEnterTransaction.TypeKeys(KEY_TAB)
									[ ] sleep(2)
									[ ] // Check if Add security window is present
									[+] if(AddSecurityToQuicken.Exists(5))
										[ ] // Add Ticker Symbol
										[ ] AddSecurityToQuicken.SetActive()
										[ ] AddSecurityToQuicken.TickerSymbol.SetText(sTickerSymbol)
										[ ] //Click on Next
										[ ] AddSecurityToQuicken.Next.Click()
										[ ] 
										[ ] // This code is written to handle Connection error
										[+] if (AddSecurityToQuicken.ConnectionError.Exists(MEDIUM_SLEEP) == TRUE)
											[ ] AddSecurityToQuicken.AddManually.Select("Add manually")
											[ ] AddSecurityToQuicken.Next.Click()
											[ ] 
										[ ] 
										[ ] //Click on Done
										[ ] //AddSecurityToQuicken.VerifyEnabled(TRUE, 20)
										[ ] AddSecurityToQuicken.Done.Click()
									[ ] 
									[ ] // Enter number of shares
									[ ] wEnterTransaction.NumberOfShares.SetText(sNumberOfShares)
									[ ] // Enter Price Paid
									[ ] wEnterTransaction.PricePaid.SetText(sPricePaid)
									[ ] // Enter Commission
									[ ] wEnterTransaction.Commission.SetText(sCommission)
									[ ] // Enter Memo
									[ ] wEnterTransaction.Memo.SetText(sMemo)
									[ ] // Select Use Cash Transaction method : Cash account or selected account
									[ ] 
									[ ] // Click on Enter Done
									[ ] wEnterTransaction.EnterDone.Click()
									[ ] 
									[ ] // Check if Add security window is present
									[+] if(AddSecurityToQuicken.Exists(5))
										[ ] // Add Ticker Symbol
										[ ] AddSecurityToQuicken.SetActive()
										[ ] AddSecurityToQuicken.TickerSymbol.SetText(sTickerSymbol)
										[ ] //Click on Next
										[ ] AddSecurityToQuicken.Next.Click()
										[ ] 
										[ ] // This code is written to handle Connection error
										[+] if (AddSecurityToQuicken.ConnectionError.Exists(MEDIUM_SLEEP) == TRUE)
											[ ] AddSecurityToQuicken.AddManually.Select("Add manually")
											[ ] AddSecurityToQuicken.Next.Click()
											[ ] 
										[ ] 
										[ ] //Click on Done
										[ ] AddSecurityToQuicken.VerifyEnabled(TRUE, 20)
										[ ] AddSecurityToQuicken.Done.Click()
									[ ] 
									[ ] iFunctionResult = PASS
									[ ] 
									[ ] // Alert if date format is wrong
									[+] if(AlertMessage.Exists(SHORT_SLEEP))
										[ ] AlertMessage.OK.Click()
										[+] if(wEnterTransaction.Exists(SHORT_SLEEP))
											[ ] wEnterTransaction.Close()
											[ ] LogError("Date Formate is wrong")
										[ ] iFunctionResult = FAIL
										[ ] return iFunctionResult
										[ ] 
									[ ] // Return Pass to the function
									[ ] iFunctionResult = PASS
								[+] else
									[ ] iFunctionResult = FAIL
									[ ] wEnterTransaction.Close()
									[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sBuyWindowTitle}")
									[ ] return iFunctionResult
									[ ] 
								[ ] 
							[ ] 
							[ ] // SELL Transaction
							[+] case("Sell")
								[+] if(wEnterTransaction.Exists(SHORT_SLEEP))
									[ ] wEnterTransaction.SetActive()
									[ ] // Open Sell transaction window
									[ ] wEnterTransaction.EnterTransaction.SetFocus()
									[ ] //wEnterTransaction.EnterTransaction.TypeKeys("<Alt-r>")
									[ ] wEnterTransaction.EnterTransaction.Select(sSellWindowTitle)
									[ ] // Enter transaction date
									[ ] wEnterTransaction.TransactionDate.SetText(sTransactionDate)
									[ ] // Enter Security Name
									[ ] wEnterTransaction.SecurityName.SetText(sTickerSymbol)
									[ ] wEnterTransaction.TypeKeys(KEY_TAB)
									[ ] 
									[ ] // Check if Add security window is present
									[+] if(AddSecurityToQuicken.Exists(3))
										[ ] // Add Ticker Symbol
										[ ] AddSecurityToQuicken.SetActive()
										[ ] AddSecurityToQuicken.TickerSymbol.SetText(sTickerSymbol)
										[ ] // Click on Next
										[ ] AddSecurityToQuicken.Next.Click()
										[ ] 
										[ ] // Click on Done
										[ ] AddSecurityToQuicken.VerifyEnabled(TRUE, 20)
										[ ] AddSecurityToQuicken.Done.Click()
									[ ] 
									[ ] 
									[ ] // Enter number of shares
									[ ] wEnterTransaction.NumberOfShares.SetText(sNumberOfShares)
									[ ] // Enter Price Paid
									[ ] wEnterTransaction.PriceRecieved.SetText(sPricePaid)
									[ ] // Enter Commission
									[ ] wEnterTransaction.Commission.SetText(sCommission)
									[ ] // Enter Memo
									[ ] wEnterTransaction.Memo.SetText(sMemo)
									[ ] 
									[ ] // Click on Enter Done
									[ ] wEnterTransaction.EnterDone.Click()
									[ ] iFunctionResult = PASS
									[ ] 
									[ ] // Check if Add security window is present
									[+] if(AddSecurityToQuicken.Exists(10))
										[ ] // Add Ticker Symbol
										[ ] AddSecurityToQuicken.SetActive()
										[ ] AddSecurityToQuicken.TickerSymbol.SetText(sTickerSymbol)
										[ ] // Click on Next
										[ ] AddSecurityToQuicken.Next.Click()
										[ ] 
										[ ] // Click on Done
										[ ] AddSecurityToQuicken.VerifyEnabled(TRUE, 20)
										[ ] AddSecurityToQuicken.Done.Click()
									[ ] 
									[ ] // Alert if date format is wrong
									[+] if(AlertMessage.Exists(SHORT_SLEEP))
										[ ] AlertMessage.OK.Click()
										[+] if(wEnterTransaction.Exists(SHORT_SLEEP))
											[ ] wEnterTransaction.Close()
											[ ] LogError("Date Formate is wrong")
										[ ] iFunctionResult = FAIL
										[ ] return iFunctionResult
									[ ] 
									[ ] // Return Pass to the function
									[ ] iFunctionResult = PASS
									[ ] 
								[+] else
									[ ] iFunctionResult = FAIL
									[ ] wEnterTransaction.Close()
									[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sSellWindowTitle}")
									[ ] return iFunctionResult
									[ ] 
								[ ] 
							[ ] 
							[+] default
								[ ] // If Transaction Type not found 
								[ ] print(sTransactionType + "TransactionType Not found")
								[ ] // Return Fail  to the function
								[ ] iFunctionResult = FAIL
						[ ] 
					[+] else
						[ ] ReportStatus(" Account Page Open", FAIL, " Account is not invoked from AccountBar") 
			[ ] 
			[ ] 
		[+] except
			[+] if (wEnterTransaction.Exists(SHORT_SLEEP))
				[ ] wEnterTransaction.SetActive()
				[ ] wEnterTransaction.close()
				[ ] 
			[ ] ExceptLog()
			[ ] // Return FAIL to the function
			[ ] iFunctionResult = FAIL
			[ ] 
		[ ] 
		[ ] return iFunctionResult
	[ ] // 
	[ ] // ==========================================================
	[+] // FUNCTION: AddCheckingTransactionPerformance()
		[ ] //
		[ ] // DESCRIPTION:		This function will add Transaction to Checking account
		[ ] // 
		[ ] //
		[ ] // PARAMETERS:		STRING 	sWindowType			MDI or Popup
		[ ] //						STRING 	sTransactionType		Payment or Deposit
		[ ] //						STRING 	sAmount				Transaction Amount
		[ ] //						STRING	sDate					Date of the transaction
		[ ] //						STRING	sChequeNo			Cheque number [Optional]
		[ ] //						STRING	sPayee				Payee	[Optional]
		[ ] //						STRING 	sMemo				Memo [Optional]
		[ ] //						STRING 	sCategory				Category [Optional]
		[ ] //						STRING 	sTag					Tag [Optional]
		[ ] //
		[ ] // RETURNS:			INTEGER	0 = If Transaction is created successfully
		[ ] //									1 = if any error occurs while adding Transaction
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // Feb 14, 2010	Puja Verma created
	[ ] // ==========================================================
	[+] public INTEGER AddCheckingTransactionForPerformance(STRING sWindowType,STRING sTransactionType, STRING sAmount,STRING sDate,STRING sChequeNo optional, STRING sPayee optional,STRING sTag optional,STRING sCategory optional,STRING sMemo optional,STRING account optional,STRING SplitTag optional,STRING SplitMemo optional,STRING SplitAmount optional)
		[+] // Variable declaration
			[ ] BOOLEAN bBalanceCheck
			[ ] INTEGER  iSelect
			[ ] STRING sActual
			[ ] iFunctionResult = FAIL
			[ ] STRING sDateStamp = FormatDateTime (GetDateTime(), "m/d/yyyy") 
			[ ] 
		[+] do
			[+] if(IsNULL(sDate))
				[ ] sDate = ""
			[+] if(IsNULL(sChequeNo))
				[ ] sChequeNo = ""
				[ ] 
			[+] if(IsNULL(sPayee))
				[ ] sPayee = ""
				[ ] 
			[+] if(IsNULL(sMemo))
				[ ] sMemo = ""
			[+] if( IsNULL(sCategory))
				[ ] sCategory = ""
			[+] if(IsNULL(sTag ))
				[ ] sTag = ""
			[ ] 
			[ ] 
			[+] switch(sWindowType)
				[ ] 
				[+] case("PopUp")
					[ ] 
					[ ] // Turn ON "Use Popup Register" option for Popup window type
					[ ] iSelect=UsePopupRegister("ON")
					[+] if(iSelect==PASS)
						[ ] ReportStatus("Verify Popup Register Option", PASS, "Popup register is ON for Popup") 
						[ ] 
						[+] if(BankingPopUp.Exists(SHORT_SLEEP))
							[ ] BankingPopUp.SetActive()
							[ ] 
							[+] switch(sTransactionType) 
								[+] case("Payment")
									[ ] WaitForState(BankingPopUp,True,5)
									[ ] BankingPopUp.SetActive()
									[ ] BankingPopUp.Maximize()
									[ ] BankingPopUp.TxList.TypeKeys (sDateStamp)
									[ ] //commented by Mukesh
									[ ] //BankingPopUp.TxList.TypeKeys (sDate)
									[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
									[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
									[ ] //commented by Mukesh
									[ ] //BankingPopUp.TxList.TypeKeys (sChequeNo)
									[ ] sChequeNo="{RandInt(1000,9000)}"
									[ ] WaitForState(BankingPopUp.TxList,True,5)
									[ ] BankingPopUp.TxList.TypeKeys (sChequeNo)
									[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
									[ ] sleep(1)
									[ ] BankingPopUp.TxList.TypeKeys (sPayee)
									[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
									[ ] sleep(1)
									[ ] //Added by mukesh
									[ ] BankingPopUp.TxList.TypeKeys (sAmount)
									[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
									[ ] //Added by mukesh
									[ ] BankingPopUp.TxList.TypeKeys (sCategory)
									[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
									[+] if(NewCategory.Exists(SHORT_SLEEP))
										[ ] NewCategory.SetActive()
										[ ] NewCategory.Yes.Click()
										[ ] sleep(1)
									[+] if(SetUpCategory.Exists(SHORT_SLEEP))
										[ ] SetUpCategory.SetActive()
										[ ] SetUpCategory.OK.Click(1,5,5)
										[ ] 
									[+] // if(SetUpCategoryPopup.Exists(SHORT_SLEEP))
										[ ] // SetUpCategoryPopup.OK.Click(1,5,5)
									[ ] 
									[+] BankingPopUp.TxList.TypeKeys (sTag)
										[ ] BankingPopUp.TxList.TxToolbar.Save.Click()
										[ ] Sleep(1)
									[ ] 
									[ ] 
									[+] //----------------------Need to remove 
										[ ] ///commented by Mukesh 08/25/2012///
										[ ] 
										[ ] // BankingPopUp.SetActive()
										[ ] // BankingPopUp.TypeKeys (sDate)
										[ ] // BankingPopUp.TypeKeys(KEY_TAB)
										[ ] // BankingPopUp.TypeKeys (sChequeNo)
										[ ] // BankingPopUp.TypeKeys(KEY_TAB)
										[ ] // BankingPopUp.TypeKeys (sPayee)
										[ ] // BankingPopUp.TypeKeys(KEY_TAB)
										[ ] // BankingPopUp.TypeKeys (sCategory)
										[ ] // BankingPopUp.TypeKeys(KEY_TAB)
										[+] // if(NewCategory.Exists(SHORT_SLEEP))
											[ ] // NewCategory.Yes.Click()
										[+] // if(SetUpCategoryPopup.Exists(SHORT_SLEEP))
											[ ] // SetUpCategoryPopup.OK.Click(1,5,5)
										[ ] // BankingPopUp.TypeKeys (sTag)
										[ ] // BankingPopUp.TypeKeys(KEY_TAB)
										[ ] // BankingPopUp.TypeKeys (sMemo)
										[ ] // BankingPopUp.TypeKeys(KEY_TAB)
										[ ] // BankingPopUp.TypeKeys (sAmount)
										[ ] // BankingPopUp.TxList.TxToolbar.Save.Click()
										[ ] ///commented by Mukesh 08/25/2012///
									[ ] 
									[ ] iFunctionResult = PASS
									[ ] 
								[+] case("SplitTransaction")
									[ ] WaitForState(BankingPopUp,True,5)
									[ ] BankingPopUp.SetActive()
									[ ] BankingPopUp.Maximize()
									[ ] BankingPopUp.TxList.TypeKeys (sDateStamp)
									[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
									[ ] sChequeNo="{RandInt(500,9000)}"
									[ ] WaitForState(BankingPopUp.TxList,True,5)
									[ ] BankingPopUp.TxList.TypeKeys (sChequeNo)
									[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
									[ ] BankingPopUp.TxList.TypeKeys (sPayee)
									[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
									[ ] //Added by mukesh
									[ ] BankingPopUp.TxList.TypeKeys (sAmount)
									[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
									[ ] //Added by mukesh
									[ ] BankingPopUp.TxList.TypeKeys (sCategory)
									[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
									[+] if(NewCategory.Exists(SHORT_SLEEP))
										[ ] NewCategory.SetActive()
										[ ] NewCategory.Yes.Click()
										[ ] sleep(1)
									[+] if(SetUpCategory.Exists(SHORT_SLEEP))
										[ ] SetUpCategory.SetActive()
										[ ] SetUpCategory.OK.Click(1,5,5)
										[ ] 
									[+] // if(SetUpCategoryPopup.Exists(SHORT_SLEEP))
										[ ] // SetUpCategoryPopup.OK.Click(1,5,5)
									[ ] BankingPopUp.TxList.TypeKeys (sTag)
									[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
									[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
									[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
									[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
									[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
									[ ] sleep(1)
									[ ] BankingPopUp.TxList.TxToolbar.SplitButton.Click()
									[ ] WaitForState(SplitTransaction,True,5)
									[+] if(SplitTransaction.Exists(SHORT_SLEEP))
										[ ] SplitTransaction.SetActive()
										[ ] SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField1.TypeKeys(KEY_ENTER)
										[ ] SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField1.SetText("Education")
										[ ] SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField1.TypeKeys(KEY_TAB)
										[ ] SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField2.SetText("Test")
										[ ] SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField2.TypeKeys(KEY_TAB)
										[+] if(SplitTransaction.NewTagForSplit.Exists(SHORT_SLEEP))
											[ ] SplitTransaction.NewTagForSplit.SetActive()
											[ ] SplitTransaction.NewTagForSplit.OK.Click()
										[ ] SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField3.SetText("Memo01")
										[+] //----------------need to remove--------------
											[ ] // SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField1.TypeKeys(KEY_ENTER)
											[ ] // SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField1.SetText("Education")
											[ ] // //Added by mukesh 08/20/2012
											[ ] // SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField1.TypeKeys(KEY_TAB)
											[ ] // //SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField1.SetText("Test")
											[ ] // //SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField1.TypeKeys(KEY_TAB)
										[+] //----------------need to remove--------------
											[ ] //SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField1.SetText("Memo01")
											[ ] // SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField1.TypeKeys(KEY_TAB)
											[ ] // SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField1.TypeKeys(KEY_TAB)
											[ ] // //SplitTransactionPopUp.EnterMultipleCategoriesToI2.ListBox1.TextField1.SetText(SplitAmount)
										[ ] SplitTransaction.OK.Click()
										[ ] BankingPopUp.Exists(2)
										[ ] BankingPopUp.TxList.TxToolbar.Save.Click()
										[ ] Sleep(1)
										[ ] iFunctionResult = PASS
										[ ] //Added by mukesh
										[+] // if (SaveTransaction.Exists(3))
											[ ] // SaveTransaction.SetActive ()
											[ ] // SaveTransaction.VerifyEnabled(2)
											[ ] // SaveTransaction.Cancel.Click ()
											[ ] //iFunctionResult = FAIL
											[ ] //Added by mukesh
								[ ] 
								[+] default
									[ ] iFunctionResult = FAIL
						[ ] 
					[+] else
						[ ] ReportStatus("Verify Popup Register Option", FAIL, "Popup register is not ON for Popup") 
						[ ] 
					[ ] 
			[ ] 
		[+] except
			[+] if(BankingPopUp.Exists(SHORT_SLEEP))
				[ ] 
				[ ] BankingPopUp.Close()
				[ ] 
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: AddBusinessTransaction()
		[ ] //
		[ ] // DESCRIPTION:		This function will add Transaction to Business account
		[ ] // 
		[ ] //
		[ ] // PARAMETERS:		STRING 	sWindowType			MDI or Popup
		[ ] //						STRING 	sTransactionType		Payment or Deposit
		[ ] //						STRING 	sAmount				Transaction Amount
		[ ] //						STRING	sDate					Date of the transaction
		[ ] //						STRING	sChequeNo			Cheque number [Optional]
		[ ] //						STRING	sPayee				Payee	[Optional]
		[ ] //						STRING 	sMemo				Memo [Optional]
		[ ] //						STRING 	sCategory				Category [Optional]
		[ ] //						STRING 	sTag					Tag [Optional]
		[ ] //
		[ ] // RETURNS:			INTEGER	0 = If Transaction is created successfully
		[ ] //									1 = if any error occurs while adding Transaction
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // March 14, 2013	Mukesh
	[ ] // ==========================================================
	[+] public INTEGER AddBusinessTransaction(STRING sWindowType, STRING sInvoiceType, STRING sAmount, STRING sDate , STRING sInvoiceNo optional, STRING sCustomerVendor optional, STRING sMemo  optional, STRING sCategory optional, STRING sDueDate optional)
		[+] // Variable declaration
			[ ] BOOLEAN bBalanceCheck
			[ ] INTEGER  iSelect
			[ ] STRING sActual
		[+] do
			[+] if(IsNULL(sDate))
				[ ] sDate = ""
			[+] if(IsNULL(sInvoiceNo))
				[ ] sInvoiceNo = ""
				[ ] 
			[+] if(IsNULL(sInvoiceType))
				[ ] sInvoiceType = ""
				[ ] 
			[+] if(IsNULL(sCustomerVendor))
				[ ] sCustomerVendor = ""
				[ ] 
			[+] if(IsNULL(sMemo))
				[ ] sMemo = ""
			[+] if( IsNULL(sCategory))
				[ ] sCategory = ""
			[+] if(IsNULL(sDueDate ))
				[ ] sDueDate = ""
			[ ] 
			[ ] 
			[+] switch(sWindowType)
				[ ] 
				[+] case("MDI")
					[ ] 
					[ ] // Turn Off "Use Popup Register" option for MDI window type
					[ ] iSelect=UsePopupRegister("OFF")
					[+] if(iSelect==PASS)
						[ ] ReportStatus("Verify Popup Register Option", PASS, "Popup register is OFF for MDI") 
						[ ] 
						[ ] QuickenWindow.SetActive ()
						[ ] QuickenWindow.TypeKeys (KEY_CTRL_N)
						[ ] MDIClient.AccountRegister.TxList.TypeKeys (sDate)
						[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
						[ ] MDIClient.AccountRegister.TxList.TypeKeys (sInvoiceNo)
						[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
						[ ] MDIClient.AccountRegister.TxList.TypeKeys (sInvoiceType)
						[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
						[ ] MDIClient.AccountRegister.TxList.TypeKeys (sCustomerVendor)
						[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
						[ ] MDIClient.AccountRegister.TxList.TypeKeys (sMemo)
						[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
						[ ] MDIClient.AccountRegister.TxList.TypeKeys (sCategory)
						[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
						[ ] MDIClient.AccountRegister.TxList.TypeKeys (sDueDate)
						[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
						[ ] MDIClient.AccountRegister.TxList.TypeKeys (sAmount)
						[ ] MDIClient.AccountRegister.TxList.TxToolBar.Save.Click()
						[+] if (DlgEnteringBusinessTransactions.Exists(2))
							[ ] DlgEnteringBusinessTransactions.SetActive()
							[ ] DlgEnteringBusinessTransactions.NoButton.Click()
							[ ] WaitForState(DlgEnteringBusinessTransactions,False,1)
						[+] if(AlertMessage.Exists(SHORT_SLEEP)) // Handle message - You are entering a transaction over a year away. Is this correct?
							[ ] AlertMessage.SetActive()
							[ ] AlertMessage.DonTShowAgain.Check()
							[ ] AlertMessage.Yes.Click()
						[+] else if(AlertMessage.Exists(SHORT_SLEEP))
							[ ] AlertMessage.DonTShowAgain.Check()
							[ ] AlertMessage.Yes.Click()
						[+] else
							[ ] // do nothing
						[ ] sleep(SHORT_SLEEP)
						[ ] iFunctionResult = PASS
						[ ] 
					[+] else
						[ ] ReportStatus("Verify Popup Register Option", FAIL, "Popup register is not OFF for MDI") 
						[ ] iFunctionResult = FAIL
				[ ] 
				[+] case("PopUp")
					[ ] 
					[ ] // Turn ON "Use Popup Register" option for Popup window type
					[ ] iSelect=UsePopupRegister("ON")
					[ ] 
					[+] if(iSelect==PASS)
						[ ] ReportStatus("Verify Popup Register Option", PASS, "Popup register is ON for Popup") 
						[ ] 
						[ ] BankingPopUp.VerifyEnabled(TRUE, 20)
						[ ] // Maximize the Checking account window as Popup Register is on
						[ ] BankingPopUp.Maximize()
						[ ] 
						[ ] BankingPopUp.SetActive() 
						[ ] BankingPopUp.TypeKeys (KEY_CTRL_N)
						[ ] BankingPopUp.SetActive ()
						[ ] BankingPopUp.TxList.TypeKeys (KEY_CTRL_N)
						[ ] BankingPopUp.TxList.TypeKeys (sDate)
						[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
						[ ] BankingPopUp.TxList.TypeKeys (sInvoiceNo)
						[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
						[ ] BankingPopUp.TxList.TypeKeys (sInvoiceType)
						[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
						[ ] BankingPopUp.TxList.TypeKeys (sCustomerVendor)
						[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
						[ ] BankingPopUp.TxList.TypeKeys (sMemo)
						[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
						[ ] BankingPopUp.TxList.TypeKeys (sCategory)
						[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
						[ ] BankingPopUp.TxList.TypeKeys (sDueDate)
						[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
						[ ] BankingPopUp.TxList.TypeKeys (sAmount)
						[ ] BankingPopUp.TxList.TxToolbar.Save.Click()
						[ ] 
						[+] if (DlgEnteringBusinessTransactions.Exists(SHORT_SLEEP))
							[ ] DlgEnteringBusinessTransactions.NoButton.Click()
							[ ] WaitForState(DlgEnteringBusinessTransactions,False,1)
							[ ] 
						[ ] 
						[+] if(AlertMessage.Exists(SHORT_SLEEP)) // Handle message - You are entering a transaction over a year away. Is this correct?
							[ ] AlertMessage.SetActive()
							[ ] AlertMessage.DonTShowAgain.Check()
							[ ] AlertMessage.Yes.Click()
						[+] else if (AlertMessage.Exists(SHORT_SLEEP))
							[ ] AlertMessage.DonTShowAgain.Check()
							[ ] AlertMessage.Yes.Click()
						[ ] iFunctionResult = PASS
						[ ] 
					[+] else
						[ ] ReportStatus("Verify Popup Register Option", FAIL, "Popup register is not ON for Popup") 
						[ ] iFunctionResult = FAIL
						[ ] 
						[ ] 
					[ ] 
			[ ] 
		[+] except
			[+] if(BankingPopUp.Exists(SHORT_SLEEP))
				[ ] BankingPopUp.Close()
				[ ] 
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: AddBrokerageTransaction()
		[ ] //
		[ ] // DESCRIPTION:	This function will add transaction i.e. Buy / Sell to the brokerage account
		[ ] // 
		[ ] //
		[ ] // PARAMETERS IN:		STRING 	sTransactionType		 		Type of Transaction Buy / Sell
		[ ] //							STRING     sExpectedAccountName		Name of the account
		[ ] //							STRING     sTickerSymbol	       		Ticker Symbol as Security Name
		[ ] //							STRING	sNumberOfShares 			Number of shares to buy / sell
		[ ] //							STRING	sPricePaid   					Amount paid per share
		[ ] //							STRING 	sCommission					Commision amount : OPTIONAL
		[ ] //							STRING 	sTransactionDate				Transaction date (Default : Today's date) : OPTIONAL
		[ ] //							STRING 	sUseCashTransaction		Source for payment (Default : Cash): OPTIONAL
		[ ] //							STRING 	sMemo						Memo: OPTIONAL
		[ ] //
		[ ] // RETURNS:				INTEGER		PASS  = If transaction for Brokerage account is created successfully
		[ ] //											FAIL   = if any error occurs while adding transaction
		[ ] //
		[ ] // REVISION HISTORY:	22/12/2010   Created By	Udita Dube
		[ ] //	 								 Updated By
	[ ] // ==========================================================
	[+] public INTEGER AddBrokerageTransaction(Inv_TransactionRecord rInv_TransactionRecord)
		[ ] 
		[+] //  Variable declaration
			[ ] INTEGER iSelect
			[ ] STRING sAccountName,sWindowTitle,sSellWindowTitle,sBuyWindowTitle,sUseCash,sAddSharesWindowTitle,sRemoveSharesWindowTitle,sBondBoughtWindowTitle,sErrorMsg,sShortSaleWindowTitle,sCoverShortSaleWindowTitle, sAdjustShareBalanceWindowTitle
			[ ] sUseCash="From Account"
			[ ] sBuyWindowTitle="Buy - Shares Bought"
			[ ] sSellWindowTitle="Sell - Shares Sold"
			[ ] sAddSharesWindowTitle="Add - Shares Added"
			[ ] sRemoveSharesWindowTitle="Remove - Shares Removed"
			[ ] sBondBoughtWindowTitle="Bonds Bought"
			[ ] sShortSaleWindowTitle = "Short Sale"
			[ ] sCoverShortSaleWindowTitle = "Cover Short Sale"
			[ ] sAdjustShareBalanceWindowTitle = "Adjust Share Balance"
			[ ] STRING sActualStaticText, sStaticText = "You are entering a transaction over a year away"
			[ ] 
		[+] do
			[ ] 
			[+] if(IsNull(rInv_TransactionRecord.sCommission))
				[ ] rInv_TransactionRecord.sCommission=""
			[+] if(IsNull(rInv_TransactionRecord.sExpectedCashBalance))
				[ ] rInv_TransactionRecord.sExpectedCashBalance=""
			[+] if(IsNull(rInv_TransactionRecord.sUseCash))
				[ ] rInv_TransactionRecord.sUseCash=""
			[+] if(IsNull(rInv_TransactionRecord.sMemo))
				[ ] rInv_TransactionRecord.sMemo=""
			[+] if(IsNull(rInv_TransactionRecord.sDateAcquired))
				[ ] rInv_TransactionRecord.sDateAcquired=""
			[+] if(IsNull(rInv_TransactionRecord.sAccountUsedPrimarily))
				[ ] rInv_TransactionRecord.sAccountUsedPrimarily = "Personal Transactions"
			[+] if(IsNull(rInv_TransactionRecord.sAccruedInt))
				[ ] rInv_TransactionRecord.sAccruedInt=""
			[ ] 
			[ ] 
			[+] switch(rInv_TransactionRecord.sWindowType)
				[ ] 
				[+] case("MDI")
					[ ] 
					[+] if(QuickenWindow.Exists(SHORT_SLEEP))
						[ ] QuickenWindow.SetActive ()
						[ ] BrokerageAccount.EnterTransactions.Click()
						[ ] 
						[ ] // Pass the Transaction Type
						[+] switch(rInv_TransactionRecord.sTransactionType) 
							[ ] // BUY Transaction
							[+] case("Buy")
								[ ] wEnterTransaction.SetActive()
								[ ] sleep(SHORT_SLEEP)
								[ ] // Open Buy transaction window
								[ ] wEnterTransaction.EnterTransaction.SetFocus()
								[ ] wEnterTransaction.EnterTransaction.TypeKeys("<Alt-g>")
								[ ] sleep(2)
								[ ] sWindowTitle=wEnterTransaction.getcaption()
								[+] if(sWindowTitle==sBuyWindowTitle)
									[ ] // Check Account Name selected
									[ ] sAccountName=wEnterTransaction.Account.GetSelectedItem()
									[ ] // Verify that correct account is selected for the transaction
									[+] if (sAccountName!=rInv_TransactionRecord.sAccount)
										[ ] // If Account name is not correct report Fail
										[ ] ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
										[ ] iFunctionResult = FAIL
										[ ] 
									[+] else
										[ ] // Enter transaction date
										[ ] wEnterTransaction.TransactionDate.SetText(rInv_TransactionRecord.sTransactionDate)
										[ ] 
										[ ] // Enter Security Name
										[ ] wEnterTransaction.SecurityName.SetText(rInv_TransactionRecord.sSecurity)
										[ ] wEnterTransaction.SecurityName.Click()
										[ ] // Enter number of shares
										[ ] wEnterTransaction.NumberOfShares.SetText(rInv_TransactionRecord.sNumberOfShares)
										[ ] // Enter Price Paid
										[ ] wEnterTransaction.PricePaid.SetText(rInv_TransactionRecord.sPricePaid)
										[ ] // Enter Commission
										[ ] wEnterTransaction.Commission.SetText(rInv_TransactionRecord.sCommission)
										[ ] // Enter Memo
										[ ] wEnterTransaction.Memo.SetText(rInv_TransactionRecord.sMemo)
										[ ] // Select Use Cash Transaction method : Cash account or selected account
										[+] if (rInv_TransactionRecord.sUseCash==sUseCash)
											[ ] // Select "From" radio button
											[ ] wEnterTransaction.UseCashForThisTransaction.Select("#2")
											[ ] //Select Account Name from which amount should be deducted.
											[ ] wEnterTransaction.FromAccountList.Select(rInv_TransactionRecord.sAccount)
										[ ] 
										[ ] // Click on Enter Done
										[ ] wEnterTransaction.EnterDone.Click()
										[ ] 
										[ ] 
										[+] // if(AddSecurityToQuicken.Exists(LONG_SLEEP))
											[ ] // // Add Ticker Symbol
											[ ] // AddSecurityToQuicken.SetActive()
											[ ] // AddSecurityToQuicken.TickerSymbol.SetText(rInv_TransactionRecord.sSecurity)
											[ ] // //Click on Next
											[ ] // AddSecurityToQuicken.Next.Click()
											[ ] // 
											[ ] // sleep(SHORT_SLEEP)
											[ ] // 
											[ ] // // This code is written to handle Connection error
											[+] // if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
												[+] // if(AddSecurityToQuicken.SelectTickerSymbol.Exists(SHORT_SLEEP))
													[ ] // AddSecurityToQuicken.SelectTickerSymbol.Select("Add manually")
													[ ] // AddSecurityToQuicken.Next.Click()
												[ ] // 
											[ ] // //Click on Done
											[ ] // AddSecurityToQuicken.VerifyEnabled(TRUE, 20)
											[ ] // AddSecurityToQuicken.SetActive()
											[ ] // AddSecurityToQuicken.Done.DoubleClick()
										[+] if(AddSecurityToQuicken2.Exists(120))
											[ ] AddSecurityToQuicken2.SetActive()
											[+] if (AddSecurityToQuicken2.SecurityListBox.Exists(10))
												[ ] AddSecurityToQuicken2.SecurityListBox.Select(1)
												[+] if (AddSecurityToQuicken2.NextButton.Exists(5))
													[ ] AddSecurityToQuicken2.NextButton.Click()
													[ ] sleep(2)
												[ ] 
											[ ] 
											[ ] 
											[ ] sleep(SHORT_SLEEP)
											[ ] 
											[ ] // This code is written to handle Connection error
											[+] if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
												[+] if(AddSecurityToQuicken.SelectTickerSymbol.Exists(SHORT_SLEEP))
													[ ] AddSecurityToQuicken.SelectTickerSymbol.Select("Add manually")
													[ ] AddSecurityToQuicken.Next.Click()
												[ ] 
											[ ] //Click on Done
											[ ] AddSecurityToQuicken.VerifyEnabled(TRUE, 20)
											[ ] AddSecurityToQuicken.SetActive()
											[ ] AddSecurityToQuicken.Done.DoubleClick()
											[ ] 
										[ ] 
										[ ] // 2015-09-30 KalyanG: if the date entered is a year or more
										[+] if (AlertMessage.Exists(4))
											[ ] 
											[ ] sActualStaticText = AlertMessage.StaticText.GetText()
											[ ] 
											[+] if (MatchStr("{sStaticText}*", sActualStaticText))
												[ ] 
												[ ] print ("[{sActualStaticText}] dialog got displayed, dismissing the dialog by clicking yes button..")
												[ ] AlertMessage.Yes.Click()
												[ ] sleep(2)
											[+] else
												[ ] LogError("[{sActualStaticText}] dialog appeared which was not expected and not handled in the script")
											[ ] 
										[ ] 
										[ ] 
										[ ] // Return Pass to the function
										[ ] iFunctionResult = PASS
									[ ] 
								[+] else
									[ ] iFunctionResult = FAIL
									[ ] wEnterTransaction.Close()
									[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sBuyWindowTitle}")
									[ ] return iFunctionResult
									[ ] 
								[ ] 
							[ ] 
							[ ] // SELL Transaction
							[+] case("Sell")
								[ ] 
								[ ] wEnterTransaction.SetActive()
								[ ] 
								[ ] // Open Sell transaction window
								[+] do
									[ ] wEnterTransaction.EnterTransaction.SetFocus()
									[ ] wEnterTransaction.EnterTransaction.TypeKeys("s")
								[+] except
									[ ] wEnterTransaction.EnterTransaction.TypeKeys("<Alt-r>")
								[ ] 
								[ ] sWindowTitle=wEnterTransaction.getcaption()
								[+] if(sWindowTitle==sSellWindowTitle)
									[ ] // Check Account Name selected
									[ ] sAccountName=wEnterTransaction.Account.GetSelectedItem()
									[ ] // Verify that correct account is selected for the transaction
									[+] if (sAccountName!=rInv_TransactionRecord.sAccount)
										[ ] //If Account name is not correct report Fail
										[ ] ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
										[ ] iFunctionResult = FAIL
										[ ] 
									[+] else
										[ ] 
										[ ] // Enter transaction date
										[ ] wEnterTransaction.TransactionDate.SetText(rInv_TransactionRecord.sTransactionDate)
										[ ] // Enter Security Name
										[ ] wEnterTransaction.SecurityName.SetText(rInv_TransactionRecord.sSecurity)
										[ ] wEnterTransaction.SecurityName.Click()
										[ ] // Enter number of shares
										[ ] wEnterTransaction.NumberOfShares.SetText(rInv_TransactionRecord.sNumberOfShares)
										[ ] // Enter Price Paid
										[ ] wEnterTransaction.PricePaid.SetText(rInv_TransactionRecord.sPricePaid)
										[ ] // Enter Commission
										[ ] wEnterTransaction.Commission.SetText(rInv_TransactionRecord.sCommission)
										[ ] // Enter Memo
										[ ] wEnterTransaction.Memo.SetText(rInv_TransactionRecord.sMemo)
										[ ] // Select Use Cash Transaction method : Cash account or selected account
										[ ] 
										[+] if (rInv_TransactionRecord.sUseCash==sUseCash)
											[ ] // Select "From" radio button
											[ ] wEnterTransaction.UseCashForThisTransaction.Select("#2")
											[ ] //Select Account Name from which amount should be deducted.
											[ ] wEnterTransaction.FromAccountList.Select(rInv_TransactionRecord.sAccount)
										[ ] 
										[ ] // Click on Enter Done
										[ ] wEnterTransaction.EnterDone.Click()
										[+] if(AddSecurityToQuicken2.Exists(10))
											[ ] AddSecurityToQuicken2.SetActive()
											[+] if (AddSecurityToQuicken2.SecurityListBox.Exists(10))
												[ ] AddSecurityToQuicken2.SecurityListBox.Select(1)
												[ ] 
											[ ] 
											[ ] sleep(2)
											[ ] 
											[ ] AddSecurityToQuicken2.NextButton.Click()
											[ ] 
											[ ] sleep(SHORT_SLEEP)
											[ ] 
											[ ] // This code is written to handle Connection error
											[+] if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
												[+] if(AddSecurityToQuicken.SelectTickerSymbol.Exists(SHORT_SLEEP))
													[ ] AddSecurityToQuicken.SelectTickerSymbol.Select("Add manually")
													[ ] AddSecurityToQuicken.Next.Click()
												[ ] 
											[ ] //Click on Done
											[ ] AddSecurityToQuicken.VerifyEnabled(TRUE, 20)
											[ ] AddSecurityToQuicken.SetActive()
											[+] if (AddSecurityToQuicken.Next.Exists(5))
												[ ] AddSecurityToQuicken.Next.Click()
											[ ] sleep(2)
											[ ] 
											[ ] AddSecurityToQuicken.Done.DoubleClick()
										[+] if(Quicken2012ForWindows.Exists(SHORT_SLEEP))		// if date is very old or for later date, message is displayed
											[ ] Quicken2012ForWindows.SetActive ()
											[ ] sErrorMsg = Quicken2012ForWindows.Message.GetText()
											[ ] ReportStatus("Validate Error Meassage", WARN, "Error Message - '{sErrorMsg}' is observed")
											[ ] Quicken2012ForWindows.Yes.Click ()
											[ ] 
										[ ] 
										[ ] // 2015-09-30 KalyanG: if the date entered is a year or more
										[+] if (AlertMessage.Exists(4))
											[ ] 
											[ ] sActualStaticText = AlertMessage.StaticText.GetText()
											[ ] 
											[+] if (MatchStr("{sStaticText}*", sActualStaticText))
												[ ] 
												[ ] print ("[{sActualStaticText}] dialog got displayed, dismissing the dialog by clicking yes button..")
												[ ] AlertMessage.Yes.Click()
												[ ] sleep(2)
											[ ] 
										[ ] 
										[ ] 
										[ ] // Alert if date format is wrong
										[+] if(AlertMessage.Exists(SHORT_SLEEP))
											[ ] 
											[ ] // 2015-09-30 KalyanG: updated error message for better logging..
											[ ] LogError("Dialog unhandled [{AlertMessage.StaticText.GetText()}]")
											[ ] 
											[ ] AlertMessage.OK.Click()
											[ ] 
											[ ] iFunctionResult = FAIL
											[ ] return iFunctionResult
											[ ] 
										[ ] 
										[ ] // Return Pass to the function
										[ ] iFunctionResult = PASS
									[ ] 
								[+] else
									[ ] iFunctionResult = FAIL
									[ ] wEnterTransaction.Close()
									[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sSellWindowTitle}")
									[ ] return iFunctionResult
									[ ] 
								[ ] 
							[ ] 
							[ ] // Add - Shares Added Transaction
							[+] case("Add - Shares Added")
								[ ] 
								[ ] wEnterTransaction.SetActive()
								[ ] 
								[ ] // Open "Add - Shares Added" transaction window
								[ ] wEnterTransaction.EnterTransaction.SetFocus()
								[ ] wEnterTransaction.EnterTransaction.TypeKeys("<Alt-z>")
								[ ] 
								[ ] sWindowTitle=wEnterTransaction.GetCaption()
								[+] if(trim(sWindowTitle)==trim(sAddSharesWindowTitle))
									[ ] // Check Account Name selected
									[ ] sAccountName=wEnterTransaction.Account.GetSelectedItem()
									[ ] 
									[ ] // Verify that correct account is selected for the transaction
									[+] if (trim(sAccountName)!=trim(rInv_TransactionRecord.sAccount))
										[ ] //If Account name is not correct report Fail
										[ ] ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
										[ ] iFunctionResult = FAIL
										[ ] 
									[+] else
										[ ] 
										[ ] // Enter transaction date
										[ ] wEnterTransaction.TransactionDate.SetText(rInv_TransactionRecord.sTransactionDate)
										[ ] // Enter Security Name
										[ ] wEnterTransaction.SecurityName.SetText(rInv_TransactionRecord.sSecurity)
										[ ] 
										[ ] 
										[ ] // Enter number of shares
										[ ] wEnterTransaction.NumberOfShares.SetText(rInv_TransactionRecord.sNumberOfShares)
										[ ] // Enter Price Paid
										[ ] wEnterTransaction.PricePaid.SetText(rInv_TransactionRecord.sPricePaid)
										[ ] 
										[ ] // Enter Memo
										[ ] wEnterTransaction.Memo.SetText(rInv_TransactionRecord.sMemo)
										[ ] // Enter Date Acquired
										[ ] wEnterTransaction.DateAcquired.SetText(rInv_TransactionRecord.sDateAcquired)
										[ ] 
										[ ] 
										[ ] // Click on Enter Done
										[ ] wEnterTransaction.EnterDone.Click()
										[ ] // Check if Add security window is present
										[+] if(AddSecurityToQuicken2.Exists(10))
											[ ] AddSecurityToQuicken2.SetActive()
											[+] if (AddSecurityToQuicken2.SecurityListBox.Exists(10))
												[ ] AddSecurityToQuicken2.SecurityListBox.Select(1)
												[+] if (AddSecurityToQuicken2.NextButton.Exists(5))
													[ ] AddSecurityToQuicken2.NextButton.Click()
													[ ] sleep(SHORT_SLEEP)
												[ ] 
											[ ] 
											[ ] 
											[ ] 
											[ ] 
											[ ] 
											[ ] sleep(SHORT_SLEEP)
											[ ] 
											[ ] // This code is written to handle Connection error
											[+] if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
												[+] if(AddSecurityToQuicken.SelectTickerSymbol.Exists(SHORT_SLEEP))
													[ ] AddSecurityToQuicken.SelectTickerSymbol.Select("Add manually")
													[ ] AddSecurityToQuicken.Next.Click()
												[ ] 
											[ ] //Click on Done
											[+] if (AddSecurityToQuicken.Next.Exists(5))
												[ ] AddSecurityToQuicken.Next.Click()
											[ ] sleep(2)
											[ ] 
											[ ] AddSecurityToQuicken.Done.DoubleClick()
										[ ] 
										[ ] // Alert if date format is wrong
										[+] if(AlertMessage.Exists(SHORT_SLEEP))
											[ ] 
											[ ] // 2015-09-30 KalyanG: updated logging error with meaningful msg
											[ ] LogError("[{AlertMessage.StaticText.GetText()}] dialog got displayed, Unexpected dialog, not handled in the script")
											[ ] 
											[ ] AlertMessage.OK.Click()
											[ ] iFunctionResult = FAIL
											[ ] return iFunctionResult
											[ ] 
										[ ] 
										[ ] // Return Pass to the function
										[ ] iFunctionResult = PASS
									[ ] 
								[+] else
									[ ] iFunctionResult = FAIL
									[ ] wEnterTransaction.Close()
									[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sAddSharesWindowTitle}")
									[ ] return iFunctionResult
									[ ] 
								[ ] 
							[ ] 
							[ ] // Remove - Shares Removed Transaction
							[+] case("Remove - Shares Removed")
								[ ] 
								[ ] wEnterTransaction.SetActive()
								[ ] 
								[ ] // Open "Add - Shares Added" transaction window
								[ ] wEnterTransaction.EnterTransaction.SetFocus()
								[ ] wEnterTransaction.EnterTransaction.TypeKeys("<Alt-x>")
								[ ] 
								[ ] sWindowTitle=wEnterTransaction.GetCaption()
								[+] if(trim(sWindowTitle)==trim(sRemoveSharesWindowTitle))
									[ ] // Check Account Name selected
									[ ] sAccountName=wEnterTransaction.Account.GetSelectedItem()
									[ ] 
									[ ] // Verify that correct account is selected for the transaction
									[+] if (trim(sAccountName)!=trim(rInv_TransactionRecord.sAccount))
										[ ] //If Account name is not correct report Fail
										[ ] ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
										[ ] iFunctionResult = FAIL
										[ ] 
									[+] else
										[ ] 
										[ ] // Enter transaction date
										[ ] wEnterTransaction.TransactionDate.SetText(rInv_TransactionRecord.sTransactionDate)
										[ ] // Enter Security Name
										[ ] wEnterTransaction.SecurityName.SetText(rInv_TransactionRecord.sSecurity)
										[ ] 
										[ ] // Enter number of shares
										[ ] wEnterTransaction.NumberOfShares.SetText(rInv_TransactionRecord.sNumberOfShares)
										[ ] 
										[ ] // Enter Memo
										[ ] wEnterTransaction.Memo.SetText(rInv_TransactionRecord.sMemo)
										[ ] 
										[ ] // Click on Enter Done
										[ ] wEnterTransaction.EnterDone.Click()
										[ ] // Check if Add security window is present
										[+] if(AddSecurityToQuicken2.Exists(10))
											[ ] AddSecurityToQuicken2.SetActive()
											[+] if (AddSecurityToQuicken2.SecurityListBox.Exists(10))
												[ ] AddSecurityToQuicken2.SecurityListBox.Select(1)
												[+] if (AddSecurityToQuicken2.NextButton.Exists(5))
													[ ] AddSecurityToQuicken2.NextButton.Click()
													[ ] sleep(SHORT_SLEEP)
												[ ] 
											[ ] 
											[ ] 
											[ ] 
											[ ] 
											[ ] 
											[ ] sleep(SHORT_SLEEP)
											[ ] 
											[ ] // This code is written to handle Connection error
											[+] if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
												[+] if(AddSecurityToQuicken.SelectTickerSymbol.Exists(SHORT_SLEEP))
													[ ] AddSecurityToQuicken.SelectTickerSymbol.Select("Add manually")
													[ ] AddSecurityToQuicken.Next.Click()
												[ ] 
											[ ] //Click on Done
											[+] if (AddSecurityToQuicken.Next.Exists(5))
												[ ] AddSecurityToQuicken.Next.Click()
											[ ] sleep(2)
											[ ] 
											[ ] AddSecurityToQuicken.Done.DoubleClick()
										[ ] 
										[ ] // Alert if date format is wrong
										[+] if(AlertMessage.Exists(SHORT_SLEEP))
											[ ] AlertMessage.OK.Click()
											[ ] LogError("Date Formate is wrong")
											[ ] iFunctionResult = FAIL
											[ ] return iFunctionResult
											[ ] 
										[ ] 
										[ ] // Return Pass to the function
										[ ] iFunctionResult = PASS
									[ ] 
								[+] else
									[ ] iFunctionResult = FAIL
									[ ] wEnterTransaction.Close()
									[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sRemoveSharesWindowTitle}")
									[ ] return iFunctionResult
									[ ] 
								[ ] 
							[ ] 
							[ ] // Bonds Bought Transaction
							[+] case("Bonds Bought")
								[ ] 
								[ ] wEnterTransaction.SetActive()
								[ ] 
								[ ] // Open "Add - Shares Added" transaction window
								[ ] wEnterTransaction.EnterTransaction.SetFocus()
								[ ] wEnterTransaction.EnterTransaction.TypeKeys("b")
								[ ] 
								[ ] sWindowTitle=wEnterTransaction.GetCaption()
								[+] if(trim(sWindowTitle)==trim(sBondBoughtWindowTitle))
									[ ] // Check Account Name selected
									[ ] sAccountName=wEnterTransaction.Account.GetSelectedItem()
									[ ] 
									[ ] // Verify that correct account is selected for the transaction
									[+] if (trim(sAccountName)!=trim(rInv_TransactionRecord.sAccount))
										[ ] //If Account name is not correct report Fail
										[ ] ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
										[ ] iFunctionResult = FAIL
										[ ] 
									[+] else
										[ ] 
										[ ] // Enter transaction date
										[ ] wEnterTransaction.TransactionDate.SetText(rInv_TransactionRecord.sTransactionDate)
										[ ] // Enter Security Name
										[ ] wEnterTransaction.SecurityName.SetText(rInv_TransactionRecord.sSecurity)
										[ ] 
										[ ] // Enter number of shares
										[ ] wEnterTransaction.NumberOfBonds.SetText(rInv_TransactionRecord.sNumberOfShares)
										[ ] // Enter Price 
										[ ] wEnterTransaction.Price.SetText(rInv_TransactionRecord.sPricePaid)
										[ ] // Enter Commission
										[ ] wEnterTransaction.Commission.SetText(rInv_TransactionRecord.sCommission)
										[ ] // Enter AccruedInt
										[ ] wEnterTransaction.AccruedInt.SetText(rInv_TransactionRecord.sAccruedInt)
										[ ] // Enter Memo
										[ ] wEnterTransaction.Memo.SetText(rInv_TransactionRecord.sMemo)
										[ ] // Select Use Cash Transaction method : Cash account or selected account
										[+] if (rInv_TransactionRecord.sUseCash==sUseCash)
											[ ] // Select "From" radio button
											[ ] wEnterTransaction.UseCashForThisTransaction.Select("#2")
											[ ] //Select Account Name from which amount should be deducted.
											[ ] wEnterTransaction.FromAccountList.Select(rInv_TransactionRecord.sAccount)
										[ ] 
										[ ] // Click on Enter Done
										[ ] wEnterTransaction.EnterDone.Click()
										[ ] 
										[ ] // Check if Add security window is present
										[+] if(AddSecurityToQuicken2.Exists(10))
											[ ] AddSecurityToQuicken2.SetActive()
											[+] if (AddSecurityToQuicken2.SecurityListBox.Exists(10))
												[ ] AddSecurityToQuicken2.SecurityListBox.Select(1)
												[+] if (AddSecurityToQuicken2.NextButton.Exists(5))
													[ ] AddSecurityToQuicken2.NextButton.Click()
													[ ] sleep(SHORT_SLEEP)
												[ ] 
											[ ] 
											[ ] 
											[ ] 
											[ ] 
											[ ] 
											[ ] sleep(SHORT_SLEEP)
											[ ] 
											[ ] // This code is written to handle Connection error
											[+] if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
												[+] if(AddSecurityToQuicken.SelectTickerSymbol.Exists(SHORT_SLEEP))
													[ ] AddSecurityToQuicken.SelectTickerSymbol.Select("Add manually")
													[ ] AddSecurityToQuicken.Next.Click()
												[ ] 
											[ ] //Click on Done
											[+] if (AddSecurityToQuicken.Next.Exists(5))
												[ ] AddSecurityToQuicken.Next.Click()
											[ ] sleep(2)
											[ ] 
											[ ] AddSecurityToQuicken.Done.DoubleClick()
										[ ] 
										[ ] // Alert if date format is wrong
										[+] if(AlertMessage.Exists(SHORT_SLEEP))
											[ ] AlertMessage.OK.Click()
											[ ] LogError("Date Formate is wrong")
											[ ] iFunctionResult = FAIL
											[ ] return iFunctionResult
											[ ] 
										[ ] 
										[ ] // Return Pass to the function
										[ ] iFunctionResult = PASS
									[ ] 
								[+] else
									[ ] iFunctionResult = FAIL
									[ ] wEnterTransaction.Close()
									[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sRemoveSharesWindowTitle}")
									[ ] return iFunctionResult
									[ ] 
								[ ] 
							[ ] 
							[ ] // Short Sale Transaction
							[+] case("Short Sale")
								[ ] 
								[ ] wEnterTransaction.SetActive()
								[ ] // Open Short Sale transaction window
								[ ] wEnterTransaction.EnterTransaction.SetFocus()
								[ ] wEnterTransaction.EnterTransaction.TypeKeys("Short Sale")
								[ ] 
								[ ] sWindowTitle=wEnterTransaction.getcaption()
								[+] if(sWindowTitle==sShortSaleWindowTitle)
									[ ] // Check Account Name selected
									[ ] sAccountName=wEnterTransaction.Account.GetSelectedItem()
									[ ] // Verify that correct account is selected for the transaction
									[+] if (sAccountName!=rInv_TransactionRecord.sAccount)
										[ ] // If Account name is not correct report Fail
										[ ] ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
										[ ] iFunctionResult = FAIL
										[ ] 
									[+] else
										[ ] // Enter transaction date
										[ ] wEnterTransaction.TransactionDate.SetText(rInv_TransactionRecord.sTransactionDate)
										[ ] 
										[ ] // Enter Security Name
										[ ] wEnterTransaction.SecurityName.SetText(rInv_TransactionRecord.sSecurity)
										[ ] wEnterTransaction.SecurityName.Click()
										[ ] 
										[ ] // Enter number of shares
										[ ] wEnterTransaction.NumberOfShares.SetText(rInv_TransactionRecord.sNumberOfShares)
										[ ] // Enter Price Paid
										[ ] wEnterTransaction.PricePaid.SetText(rInv_TransactionRecord.sPricePaid)
										[ ] // Enter Commission
										[ ] wEnterTransaction.Commission.SetText(rInv_TransactionRecord.sCommission)
										[ ] // Enter Memo
										[ ] wEnterTransaction.Memo.SetText(rInv_TransactionRecord.sMemo)
										[ ] // Select Use Cash Transaction method : Cash account or selected account
										[+] if (rInv_TransactionRecord.sUseCash==sUseCash)
											[ ] // Select "From" radio button
											[ ] wEnterTransaction.UseCashForThisTransaction.Select("#2")
											[ ] //Select Account Name from which amount should be deducted.
											[ ] wEnterTransaction.FromAccountList.Select(rInv_TransactionRecord.sAccount)
										[ ] 
										[ ] // Click on Enter Done
										[ ] wEnterTransaction.EnterDone.Click()
										[ ] // Check if Add security window is present
										[+] if(AddSecurityToQuicken2.Exists(10))
											[ ] AddSecurityToQuicken2.SetActive()
											[+] if (AddSecurityToQuicken2.SecurityListBox.Exists(10))
												[ ] AddSecurityToQuicken2.SecurityListBox.Select(1)
												[+] if (AddSecurityToQuicken2.NextButton.Exists(5))
													[ ] AddSecurityToQuicken2.NextButton.Click()
													[ ] sleep(SHORT_SLEEP)
												[ ] 
											[ ] 
											[ ] 
											[ ] 
											[ ] 
											[ ] 
											[ ] sleep(SHORT_SLEEP)
											[ ] 
											[ ] // This code is written to handle Connection error
											[+] if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
												[+] if(AddSecurityToQuicken.SelectTickerSymbol.Exists(SHORT_SLEEP))
													[ ] AddSecurityToQuicken.SelectTickerSymbol.Select("Add manually")
													[ ] AddSecurityToQuicken.Next.Click()
												[ ] 
											[ ] //Click on Done
											[+] if (AddSecurityToQuicken.Next.Exists(5))
												[ ] AddSecurityToQuicken.Next.Click()
											[ ] sleep(2)
											[ ] 
											[ ] AddSecurityToQuicken.Done.DoubleClick()
										[ ] 
										[ ] // Alert if date format is wrong
										[+] if(AlertMessage.Exists(SHORT_SLEEP))
											[ ] AlertMessage.OK.Click()
											[ ] LogError("Date Formate is wrong")
											[ ] iFunctionResult = FAIL
											[ ] return iFunctionResult
											[ ] 
										[ ] 
										[ ] // Return Pass to the function
										[ ] iFunctionResult = PASS
									[ ] 
								[+] else
									[ ] iFunctionResult = FAIL
									[ ] wEnterTransaction.Close()
									[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sBuyWindowTitle}")
									[ ] return iFunctionResult
									[ ] 
								[ ] 
							[ ] 
							[ ] // Cover Short Sale Transaction
							[+] case("Cover Short Sale")
								[ ] 
								[ ] wEnterTransaction.SetActive()
								[ ] // Open Short Sale transaction window
								[ ] wEnterTransaction.EnterTransaction.SetFocus()
								[ ] wEnterTransaction.EnterTransaction.TypeKeys("c")
								[ ] 
								[ ] sWindowTitle=wEnterTransaction.getcaption()
								[+] if(sWindowTitle==sCoverShortSaleWindowTitle)
									[ ] // Check Account Name selected
									[ ] sAccountName=wEnterTransaction.Account.GetSelectedItem()
									[ ] // Verify that correct account is selected for the transaction
									[+] if (sAccountName!=rInv_TransactionRecord.sAccount)
										[ ] // If Account name is not correct report Fail
										[ ] ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
										[ ] iFunctionResult = FAIL
										[ ] 
									[+] else
										[ ] // Enter transaction date
										[ ] wEnterTransaction.TransactionDate.SetText(rInv_TransactionRecord.sTransactionDate)
										[ ] 
										[ ] // Enter Security Name
										[ ] wEnterTransaction.SecurityName.SetText(rInv_TransactionRecord.sSecurity)
										[ ] wEnterTransaction.SecurityName.Click()
										[ ] 
										[ ] // Enter number of shares
										[ ] wEnterTransaction.NumberOfShares.SetText(rInv_TransactionRecord.sNumberOfShares)
										[ ] // Enter Price Paid
										[ ] wEnterTransaction.PricePaid.SetText(rInv_TransactionRecord.sPricePaid)
										[ ] // Enter Commission
										[ ] wEnterTransaction.Commission.SetText(rInv_TransactionRecord.sCommission)
										[ ] // Enter Memo
										[ ] wEnterTransaction.Memo.SetText(rInv_TransactionRecord.sMemo)
										[ ] // Select Use Cash Transaction method : Cash account or selected account
										[+] if (rInv_TransactionRecord.sUseCash==sUseCash)
											[ ] // Select "From" radio button
											[ ] wEnterTransaction.UseCashForThisTransaction.Select("#2")
											[ ] //Select Account Name from which amount should be deducted.
											[ ] wEnterTransaction.FromAccountList.Select(rInv_TransactionRecord.sAccount)
										[ ] 
										[ ] // Click on Enter Done
										[ ] wEnterTransaction.EnterDone.Click()
										[ ] // Check if Add security window is present
										[+] if(AddSecurityToQuicken2.Exists(10))
											[ ] AddSecurityToQuicken2.SetActive()
											[+] if (AddSecurityToQuicken2.SecurityListBox.Exists(10))
												[ ] AddSecurityToQuicken2.SecurityListBox.Select(1)
												[+] if (AddSecurityToQuicken2.NextButton.Exists(5))
													[ ] AddSecurityToQuicken2.NextButton.Click()
													[ ] sleep(SHORT_SLEEP)
												[ ] 
											[ ] 
											[ ] 
											[ ] 
											[ ] 
											[ ] 
											[ ] sleep(SHORT_SLEEP)
											[ ] 
											[ ] // This code is written to handle Connection error
											[+] if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
												[+] if(AddSecurityToQuicken.SelectTickerSymbol.Exists(SHORT_SLEEP))
													[ ] AddSecurityToQuicken.SelectTickerSymbol.Select("Add manually")
													[ ] AddSecurityToQuicken.Next.Click()
												[ ] 
											[ ] //Click on Done
											[+] if (AddSecurityToQuicken.Next.Exists(5))
												[ ] AddSecurityToQuicken.Next.Click()
											[ ] sleep(2)
											[ ] 
											[ ] AddSecurityToQuicken.Done.DoubleClick()
										[ ] 
										[ ] // Alert if date format is wrong
										[+] if(AlertMessage.Exists(SHORT_SLEEP))
											[ ] AlertMessage.OK.Click()
											[ ] LogError("Date Formate is wrong")
											[ ] iFunctionResult = FAIL
											[ ] return iFunctionResult
											[ ] 
										[ ] 
										[ ] // Return Pass to the function
										[ ] iFunctionResult = PASS
									[ ] 
								[+] else
									[ ] iFunctionResult = FAIL
									[ ] wEnterTransaction.Close()
									[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sBuyWindowTitle}")
									[ ] return iFunctionResult
									[ ] 
								[ ] 
							[ ] 
							[ ] // Adjust Share Balance Transaction
							[+] case("Adjust Share Balance")
								[+] if(IsNull(rInv_TransactionRecord.sSecurity))
									[ ] rInv_TransactionRecord.sSecurity = ""
								[+] if(IsNull(rInv_TransactionRecord.sNumberOfShares))
									[ ] rInv_TransactionRecord.sNumberOfShares = ""
								[ ] 
								[ ] wEnterTransaction.SetActive()
								[ ] 
								[ ] wEnterTransaction.EnterTransaction.SetFocus()
								[ ] wEnterTransaction.EnterTransaction.Select(rInv_TransactionRecord.sTransactionType)
								[ ] 
								[ ] sWindowTitle = wEnterTransaction.GetCaption()
								[+] if(trim(sWindowTitle)==trim(sAdjustShareBalanceWindowTitle))
									[ ] 
									[ ] // Check Account Name selected
									[ ] sAccountName=wEnterTransaction.Account.GetSelectedItem()
									[ ] 
									[ ] // Verify that correct account is selected for the transaction
									[+] if (trim(sAccountName)!=trim(rInv_TransactionRecord.sAccount))
										[ ] // If Account name is not correct report Fail
										[ ] ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
										[ ] iFunctionResult = FAIL
										[ ] 
									[+] else
										[ ] // Enter transaction date
										[ ] wEnterTransaction.TransactionDate.SetText(rInv_TransactionRecord.sTransactionDate)
										[ ] // Enter Security Name
										[ ] wEnterTransaction.SecurityName.SetText(rInv_TransactionRecord.sSecurity)
										[ ] 
										[ ] // Enter number of shares
										[ ] wEnterTransaction.NumberOfShares.SetText(rInv_TransactionRecord.sNumberOfShares)
										[ ] 
										[ ] // Click on Enter Done
										[ ] wEnterTransaction.EnterDone.Click()
										[ ] 
										[ ] // Check if Add security window is present
										[+] if(AddSecurityToQuicken2.Exists(10))
											[ ] AddSecurityToQuicken2.SetActive()
											[+] if (AddSecurityToQuicken2.SecurityListBox.Exists(10))
												[ ] AddSecurityToQuicken2.SecurityListBox.Select(1)
												[+] if (AddSecurityToQuicken2.NextButton.Exists(5))
													[ ] AddSecurityToQuicken2.NextButton.Click()
													[ ] sleep(SHORT_SLEEP)
												[ ] 
											[ ] 
											[ ] 
											[ ] 
											[ ] 
											[ ] 
											[ ] sleep(SHORT_SLEEP)
											[ ] 
											[ ] // This code is written to handle Connection error
											[+] if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
												[+] if(AddSecurityToQuicken.SelectTickerSymbol.Exists(SHORT_SLEEP))
													[ ] AddSecurityToQuicken.SelectTickerSymbol.Select("Add manually")
													[ ] AddSecurityToQuicken.Next.Click()
												[ ] 
											[ ] //Click on Done
											[+] if (AddSecurityToQuicken.Next.Exists(5))
												[ ] AddSecurityToQuicken.Next.Click()
											[ ] sleep(2)
											[ ] 
											[ ] AddSecurityToQuicken.Done.DoubleClick()
										[ ] 
										[ ] // Alert if error message is observed
										[+] if(AlertMessage.Exists(SHORT_SLEEP))
											[ ] AlertMessage.OK.Click()
											[ ] LogError("Date Formate is wrong")
											[ ] iFunctionResult = FAIL
											[ ] return iFunctionResult
											[ ] 
										[ ] 
										[+] else
											[ ] // Return Pass to the function
											[ ] iFunctionResult = PASS
									[ ] 
								[+] else
									[ ] iFunctionResult = FAIL
									[ ] wEnterTransaction.Close()
									[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sAddSharesWindowTitle}")
									[ ] return iFunctionResult
									[ ] 
							[ ] 
							[+] default
								[ ] // If Transaction Type not found 
								[ ] LogError(rInv_TransactionRecord.sTransactionType + "TransactionType Not found")
								[ ] // Return Fail  to the function
								[ ] iFunctionResult = FAIL
						[ ] 
					[+] else
						[ ] ReportStatus("Brokerage Account Page Open", FAIL, "{rInv_TransactionRecord.sAccount} Account is not invoked from AccountBar") 
						[ ] iFunctionResult = FAIL
						[ ] 
					[ ] 
				[ ] 
				[+] case("PopUp")
					[ ] 
					[ ] // Turn ON "Use Popup Register" option for Popup window type
					[ ] iSelect=UsePopupRegister("ON")
					[ ] 
					[+] if(iSelect==PASS)
						[ ] ReportStatus("Verify Popup Register Option", PASS, "Popup register is ON for Popup") 
						[ ] 
						[ ] // Check that Brokerage window is opened or not.
						[+] if(InvestingAccountPopup.Exists(5))
							[ ] InvestingAccountPopup.SetActive ()
							[ ] InvestingAccountPopup.Maximize()
							[ ] InvestingAccountPopup.EnterTransactionsButton.Click()
							[ ] 
							[ ] // Pass the Transaction Type
							[+] switch(rInv_TransactionRecord.sTransactionType) 
								[ ] // BUY Transaction
								[+] case("Buy")
									[ ] wEnterTransaction.SetActive()
									[ ] sleep(SHORT_SLEEP)
									[ ] // Open Buy transaction window
									[ ] wEnterTransaction.EnterTransaction.SetFocus()
									[ ] wEnterTransaction.EnterTransaction.TypeKeys(KEY_ALT_G)
									[ ] 
									[ ] sWindowTitle=wEnterTransaction.GetCaption()
									[+] if(sWindowTitle==sBuyWindowTitle)
										[ ] // Check Account Name selected
										[ ] 
										[ ] sAccountName=wEnterTransaction.Account.GetSelectedItem()
										[ ] 
										[ ] // Verify that correct account is selected for the transaction
										[+] if (sAccountName!=rInv_TransactionRecord.sAccount)
											[ ] // If Account name is not correct report Fail
											[ ] ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
											[ ] iFunctionResult = FAIL
											[ ] 
										[+] else
											[ ] // Enter transaction date
											[ ] wEnterTransaction.TransactionDate.SetText(rInv_TransactionRecord.sTransactionDate)
											[ ] 
											[ ] // Enter Security Name
											[ ] wEnterTransaction.SecurityName.SetText(rInv_TransactionRecord.sSecurity)
											[ ] wEnterTransaction.SecurityName.Click()
											[ ] wEnterTransaction.TypeKeys(KEY_TAB)
											[+] if(AddSecurityToQuicken2.Exists(10))
												[ ] AddSecurityToQuicken2.SetActive()
												[+] if (AddSecurityToQuicken2.SecurityListBox.Exists(10))
													[ ] AddSecurityToQuicken2.SecurityListBox.Select(1)
													[ ] 
												[ ] 
												[ ] sleep(2)
												[ ] 
												[ ] AddSecurityToQuicken2.NextButton.Click()
												[ ] 
												[ ] sleep(SHORT_SLEEP)
												[ ] 
												[ ] // This code is written to handle Connection error
												[+] if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
													[+] if(AddSecurityToQuicken.SelectTickerSymbol.Exists(SHORT_SLEEP))
														[ ] AddSecurityToQuicken.SelectTickerSymbol.Select("Add manually")
														[ ] AddSecurityToQuicken.Next.Click()
													[ ] 
												[ ] //Click on Done
												[ ] AddSecurityToQuicken.VerifyEnabled(TRUE, 20)
												[ ] 
												[ ] AddSecurityToQuicken.SetActive()
												[+] if (AddSecurityToQuicken.Next.Exists(5))
													[ ] AddSecurityToQuicken.Next.Click()
												[ ] sleep(2)
												[ ] 
												[ ] AddSecurityToQuicken.Done.DoubleClick()
											[ ] 
											[ ] // Check if Add security window is present
											[+] // if(AddSecurityToQuicken.Exists(LONG_SLEEP))
												[ ] // // Add Ticker Symbol
												[ ] // AddSecurityToQuicken.SetActive()
												[ ] // AddSecurityToQuicken.TickerSymbol.SetText(rInv_TransactionRecord.sSecurity)
												[ ] // //Click on Next
												[ ] // AddSecurityToQuicken.Next.Click()
												[ ] // 
												[ ] // sleep(SHORT_SLEEP)
												[ ] // 
												[ ] // // This code is written to handle Connection error
												[+] // if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
													[+] // if(AddSecurityToQuicken.SelectTickerSymbol.Exists(SHORT_SLEEP))
														[ ] // AddSecurityToQuicken.SelectTickerSymbol.Select("Add manually")
														[ ] // AddSecurityToQuicken.Next.Click()
													[ ] // 
												[ ] // //Click on Done
												[ ] // AddSecurityToQuicken.VerifyEnabled(TRUE, 20)
												[ ] // AddSecurityToQuicken.SetActive()
												[ ] // AddSecurityToQuicken.Done.DoubleClick()
											[ ] 
											[ ] // Enter number of shares
											[ ] wEnterTransaction.NumberOfShares.SetText(rInv_TransactionRecord.sNumberOfShares)
											[ ] // Enter Price Paid
											[ ] wEnterTransaction.PricePaid.SetText(rInv_TransactionRecord.sPricePaid)
											[ ] // Enter Commission
											[ ] wEnterTransaction.Commission.SetText(rInv_TransactionRecord.sCommission)
											[ ] // Enter Memo
											[ ] wEnterTransaction.Memo.SetText(rInv_TransactionRecord.sMemo)
											[ ] // Select Use Cash Transaction method : Cash account or selected account
											[+] if (rInv_TransactionRecord.sUseCash==sUseCash)
												[ ] // Select "From" radio button
												[ ] wEnterTransaction.UseCashForThisTransaction.Select("#2")
												[ ] //Select Account Name from which amount should be deducted.
												[ ] wEnterTransaction.FromAccountList.Select(rInv_TransactionRecord.sAccount)
											[ ] 
											[ ] // Click on Enter Done
											[ ] wEnterTransaction.EnterDone.Click()
											[+] if(AddSecurityToQuicken2.Exists(10))
												[ ] AddSecurityToQuicken2.SetActive()
												[+] if (AddSecurityToQuicken2.SecurityListBox.Exists(10))
													[ ] AddSecurityToQuicken2.SecurityListBox.Select(1)
													[ ] 
												[ ] 
												[ ] sleep(2)
												[ ] 
												[ ] AddSecurityToQuicken2.NextButton.Click()
												[ ] 
												[ ] sleep(SHORT_SLEEP)
												[ ] 
												[ ] // This code is written to handle Connection error
												[+] if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
													[+] if(AddSecurityToQuicken.SelectTickerSymbol.Exists(SHORT_SLEEP))
														[ ] AddSecurityToQuicken.SelectTickerSymbol.Select("Add manually")
														[ ] AddSecurityToQuicken.Next.Click()
													[ ] 
												[ ] //Click on Done
												[ ] AddSecurityToQuicken.VerifyEnabled(TRUE, 20)
												[ ] AddSecurityToQuicken.SetActive()
												[+] if (AddSecurityToQuicken.Next.Exists(5))
													[ ] AddSecurityToQuicken.Next.Click()
												[ ] sleep(2)
												[ ] 
												[ ] AddSecurityToQuicken.Done.DoubleClick()
											[ ] 
											[+] // if(AddSecurityToQuicken.Exists(LONG_SLEEP))
												[ ] // // Add Ticker Symbol
												[ ] // AddSecurityToQuicken.SetActive()
												[ ] // AddSecurityToQuicken.TickerSymbol.SetText(rInv_TransactionRecord.sSecurity)
												[ ] // //Click on Next
												[ ] // AddSecurityToQuicken.Next.Click()
												[ ] // 
												[ ] // sleep(SHORT_SLEEP)
												[ ] // //Click on Done
												[ ] // AddSecurityToQuicken.VerifyEnabled(TRUE, 20)
												[ ] // AddSecurityToQuicken.SetActive()
												[ ] // AddSecurityToQuicken.Done.DoubleClick()
												[ ] // 
												[ ] // // This code is written to handle Connection error
												[+] // if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
													[+] // if(AddSecurityToQuicken.SelectTickerSymbol.Exists(SHORT_SLEEP))
														[ ] // AddSecurityToQuicken.SelectTickerSymbol.Select("Add manually")
														[ ] // AddSecurityToQuicken.Next.Click()
														[ ] // //Click on Done
														[ ] // AddSecurityToQuicken.VerifyEnabled(TRUE, 20)
														[ ] // AddSecurityToQuicken.SetActive()
														[ ] // AddSecurityToQuicken.Done.DoubleClick()
												[ ] // 
											[ ] 
											[ ] // Return Pass to the function
											[ ] iFunctionResult = PASS
										[ ] 
									[+] else
										[ ] iFunctionResult = FAIL
										[ ] wEnterTransaction.Close()
										[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sBuyWindowTitle}")
										[ ] return iFunctionResult
										[ ] 
									[ ] 
								[ ] 
								[ ] // SELL Transaction
								[+] case("Sell")
									[ ] 
									[ ] wEnterTransaction.SetActive()
									[ ] 
									[ ] // Open Sell transaction window
									[+] do
										[ ] wEnterTransaction.EnterTransaction.SetFocus()
										[ ] wEnterTransaction.EnterTransaction.TypeKeys("s")
									[+] except
										[ ] wEnterTransaction.EnterTransaction.TypeKeys(KEY_ALT_R)
									[ ] 
									[ ] sWindowTitle=wEnterTransaction.getcaption()
									[+] if(sWindowTitle==sSellWindowTitle)
										[ ] // Check Account Name selected
										[ ] Agent.SetOption (OPT_VERIFY_ENABLED, FALSE)
										[ ] sAccountName=wEnterTransaction.Account.GetSelectedItem()
										[ ] Agent.SetOption (OPT_VERIFY_ENABLED, TRUE)
										[ ] // Verify that correct account is selected for the transaction
										[+] if (sAccountName!=rInv_TransactionRecord.sAccount)
											[ ] //If Account name is not correct report Fail
											[ ] ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
											[ ] iFunctionResult = FAIL
											[ ] 
										[+] else
											[ ] 
											[ ] // Enter transaction date
											[ ] wEnterTransaction.TransactionDate.SetText(rInv_TransactionRecord.sTransactionDate)
											[ ] // Enter Security Name
											[ ] wEnterTransaction.SecurityName.SetText(rInv_TransactionRecord.sSecurity)
											[ ] wEnterTransaction.SecurityName.Click()
											[ ] wEnterTransaction.TypeKeys(KEY_TAB)
											[ ] 
											[ ] // Check if Add security window is present
											[+] if(AddSecurityToQuicken2.Exists(10))
												[ ] AddSecurityToQuicken2.SetActive()
												[+] if (AddSecurityToQuicken2.SecurityListBox.Exists(10))
													[ ] AddSecurityToQuicken2.SecurityListBox.Select(1)
													[ ] 
												[ ] 
												[ ] sleep(2)
												[ ] 
												[ ] AddSecurityToQuicken2.NextButton.Click()
												[ ] 
												[ ] sleep(SHORT_SLEEP)
												[ ] 
												[ ] // This code is written to handle Connection error
												[+] if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
													[+] if(AddSecurityToQuicken.SelectTickerSymbol.Exists(SHORT_SLEEP))
														[ ] AddSecurityToQuicken.SelectTickerSymbol.Select("Add manually")
														[ ] AddSecurityToQuicken.Next.Click()
													[ ] 
												[ ] //Click on Done
												[ ] AddSecurityToQuicken.VerifyEnabled(TRUE, 20)
												[ ] AddSecurityToQuicken.SetActive()
												[+] if (AddSecurityToQuicken.Next.Exists(5))
													[ ] AddSecurityToQuicken.Next.Click()
												[ ] sleep(2)
												[ ] 
												[ ] AddSecurityToQuicken.Done.DoubleClick()
											[ ] 
											[ ] // Enter number of shares
											[ ] wEnterTransaction.NumberOfShares.SetText(rInv_TransactionRecord.sNumberOfShares)
											[ ] // Enter Price Paid
											[ ] wEnterTransaction.PricePaid.SetText(rInv_TransactionRecord.sPricePaid)
											[ ] // Enter Commission
											[ ] wEnterTransaction.Commission.SetText(rInv_TransactionRecord.sCommission)
											[ ] // Enter Memo
											[ ] wEnterTransaction.Memo.SetText(rInv_TransactionRecord.sMemo)
											[ ] // Select Use Cash Transaction method : Cash account or selected account
											[ ] 
											[+] if (rInv_TransactionRecord.sUseCash==sUseCash)
												[ ] // Select "From" radio button
												[ ] wEnterTransaction.UseCashForThisTransaction.Select("#2")
												[ ] //Select Account Name from which amount should be deducted.
												[ ] wEnterTransaction.FromAccountList.Select(rInv_TransactionRecord.sAccount)
											[ ] 
											[ ] // Click on Enter Done
											[ ] wEnterTransaction.EnterDone.Click()
											[+] if(AddSecurityToQuicken2.Exists(10))
												[ ] AddSecurityToQuicken2.SetActive()
												[+] if (AddSecurityToQuicken2.SecurityListBox.Exists(10))
													[ ] AddSecurityToQuicken2.SecurityListBox.Select(1)
													[ ] 
												[ ] 
												[ ] sleep(2)
												[ ] 
												[ ] AddSecurityToQuicken2.NextButton.Click()
												[ ] 
												[ ] sleep(SHORT_SLEEP)
												[ ] 
												[ ] // This code is written to handle Connection error
												[+] if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
													[+] if(AddSecurityToQuicken.SelectTickerSymbol.Exists(SHORT_SLEEP))
														[ ] AddSecurityToQuicken.SelectTickerSymbol.Select("Add manually")
														[ ] AddSecurityToQuicken.Next.Click()
													[ ] 
												[ ] //Click on Done
												[ ] AddSecurityToQuicken.VerifyEnabled(TRUE, 20)
												[ ] AddSecurityToQuicken.SetActive()
												[+] if (AddSecurityToQuicken.Next.Exists(5))
													[ ] AddSecurityToQuicken.Next.Click()
												[ ] sleep(2)
												[ ] 
												[ ] AddSecurityToQuicken.Done.DoubleClick()
											[ ] 
											[+] if(Quicken2012ForWindows.Exists(SHORT_SLEEP))		// if date is very old or for later date, message is displayed
												[ ] Quicken2012ForWindows.SetActive ()
												[ ] sErrorMsg = Quicken2012ForWindows.Message.GetText()
												[ ] ReportStatus("Validate Error Meassage", WARN, "Error Message - '{sErrorMsg}' is observed")
												[ ] Quicken2012ForWindows.Yes.Click ()
												[ ] 
											[ ] 
											[ ] // Alert if date format is wrong
											[+] if(wEnterTransaction.AlertMessage.Exists(SHORT_SLEEP))
												[ ] wEnterTransaction.AlertMessage.OK.Click()
												[ ] wEnterTransaction.Close()
												[ ] LogError("Date Format is wrong")
												[ ] iFunctionResult = FAIL
												[ ] return iFunctionResult
											[ ] 
											[ ] // Return Pass to the function
											[ ] iFunctionResult = PASS
										[ ] 
									[+] else
										[ ] iFunctionResult = FAIL
										[ ] wEnterTransaction.Close()
										[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sSellWindowTitle}")
										[ ] return iFunctionResult
										[ ] 
									[ ] 
								[ ] 
								[ ] // Add - Shares Added Transaction
								[+] case("Add - Shares Added")
									[ ] 
									[ ] wEnterTransaction.SetActive()
									[ ] 
									[ ] // Open "Add - Shares Added" transaction window
									[ ] wEnterTransaction.EnterTransaction.SetFocus()
									[ ] wEnterTransaction.EnterTransaction.TypeKeys(KEY_ALT_Z)
									[ ] 
									[ ] sWindowTitle=wEnterTransaction.GetCaption()
									[+] if(trim(sWindowTitle)==trim(sAddSharesWindowTitle))
										[ ] // Check Account Name selected
										[ ] Agent.SetOption (OPT_VERIFY_ENABLED, FALSE)
										[ ] sAccountName=wEnterTransaction.Account.GetSelectedItem()
										[ ] Agent.SetOption (OPT_VERIFY_ENABLED, TRUE)
										[ ] 
										[ ] // Verify that correct account is selected for the transaction
										[+] if (trim(sAccountName)!=trim(rInv_TransactionRecord.sAccount))
											[ ] //If Account name is not correct report Fail
											[ ] ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
											[ ] iFunctionResult = FAIL
											[ ] 
										[+] else
											[ ] 
											[ ] // Enter transaction date
											[ ] wEnterTransaction.TransactionDate.SetText(rInv_TransactionRecord.sTransactionDate)
											[ ] // Enter Security Name
											[ ] wEnterTransaction.SecurityName.SetText(rInv_TransactionRecord.sSecurity)
											[ ] 
											[ ] // Enter number of shares
											[ ] wEnterTransaction.NumberOfShares.SetText(rInv_TransactionRecord.sNumberOfShares)
											[ ] // Enter Price Paid
											[ ] wEnterTransaction.PricePaid.SetText(rInv_TransactionRecord.sPricePaid)
											[ ] 
											[ ] // Enter Memo
											[ ] wEnterTransaction.Memo.SetText(rInv_TransactionRecord.sMemo)
											[ ] // Enter Date Acquired
											[ ] wEnterTransaction.DateAcquired.SetText(rInv_TransactionRecord.sDateAcquired)
											[ ] 
											[ ] // Click on Enter Done
											[ ] wEnterTransaction.EnterDone.Click()
											[ ] 
											[ ] // Check if Add security window is present
											[+] if(AddSecurityToQuicken.Exists(MEDIUM_SLEEP))
												[ ] // Add Ticker Symbol
												[ ] AddSecurityToQuicken.SetActive()
												[ ] AddSecurityToQuicken.TickerSymbol.SetText(rInv_TransactionRecord.sSecurity)
												[ ] // Click on Next
												[ ] AddSecurityToQuicken.Next.Click()
												[ ] 
												[ ] // Click on Done
												[ ] AddSecurityToQuicken.VerifyEnabled(TRUE, 20)
												[ ] AddSecurityToQuicken.SetActive()
												[ ] AddSecurityToQuicken.Done.Click()
											[ ] 
											[ ] // Alert if date format is wrong
											[+] if(wEnterTransaction.AlertMessage.Exists(SHORT_SLEEP))
												[ ] wEnterTransaction.AlertMessage.OK.Click()
												[ ] wEnterTransaction.Close()
												[ ] LogError("Date Format is wrong")
												[ ] iFunctionResult = FAIL
												[ ] return iFunctionResult
											[ ] 
											[ ] // Return Pass to the function
											[ ] iFunctionResult = PASS
										[ ] 
									[+] else
										[ ] iFunctionResult = FAIL
										[ ] wEnterTransaction.Close()
										[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sAddSharesWindowTitle}")
										[ ] return iFunctionResult
										[ ] 
									[ ] 
								[ ] 
								[ ] // Remove - Shares Removed Transaction
								[+] case("Remove - Shares Removed")
									[ ] 
									[ ] wEnterTransaction.SetActive()
									[ ] 
									[ ] // Open "Add - Shares Added" transaction window
									[ ] wEnterTransaction.EnterTransaction.SetFocus()
									[ ] wEnterTransaction.EnterTransaction.TypeKeys("<Alt-x>")
									[ ] 
									[ ] sWindowTitle=wEnterTransaction.GetCaption()
									[+] if(trim(sWindowTitle)==trim(sRemoveSharesWindowTitle))
										[ ] // Check Account Name selected
										[ ] Agent.SetOption (OPT_VERIFY_ENABLED, FALSE)
										[ ] sAccountName=wEnterTransaction.Account.GetSelectedItem()
										[ ] Agent.SetOption (OPT_VERIFY_ENABLED, TRUE)
										[ ] 
										[ ] // Verify that correct account is selected for the transaction
										[+] if (trim(sAccountName)!=trim(rInv_TransactionRecord.sAccount))
											[ ] //If Account name is not correct report Fail
											[ ] ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
											[ ] iFunctionResult = FAIL
											[ ] 
										[+] else
											[ ] 
											[ ] // Enter transaction date
											[ ] wEnterTransaction.TransactionDate.SetText(rInv_TransactionRecord.sTransactionDate)
											[ ] // Enter Security Name
											[ ] wEnterTransaction.SecurityName.SetText(rInv_TransactionRecord.sSecurity)
											[ ] 
											[ ] // Enter number of shares
											[ ] wEnterTransaction.NumberOfShares.SetText(rInv_TransactionRecord.sNumberOfShares)
											[ ] 
											[ ] // Enter Memo
											[ ] wEnterTransaction.Memo.SetText(rInv_TransactionRecord.sMemo)
											[ ] 
											[ ] // Click on Enter Done
											[ ] wEnterTransaction.EnterDone.Click()
											[ ] 
											[ ] // Check if Add security window is present
											[+] if(AddSecurityToQuicken.Exists(MEDIUM_SLEEP))
												[ ] // Add Ticker Symbol
												[ ] AddSecurityToQuicken.SetActive()
												[ ] AddSecurityToQuicken.TickerSymbol.SetText(rInv_TransactionRecord.sSecurity)
												[ ] // Click on Next
												[ ] AddSecurityToQuicken.Next.Click()
												[ ] 
												[ ] // Click on Done
												[ ] AddSecurityToQuicken.VerifyEnabled(TRUE, 20)
												[ ] AddSecurityToQuicken.SetActive()
												[ ] AddSecurityToQuicken.Done.Click()
											[ ] 
											[ ] // Alert if date format is wrong
											[+] if(wEnterTransaction.AlertMessage.Exists(SHORT_SLEEP))
												[ ] wEnterTransaction.AlertMessage.OK.Click()
												[ ] wEnterTransaction.Close()
												[ ] ExceptLog()
												[ ] iFunctionResult = FAIL
												[ ] return iFunctionResult
											[ ] 
											[ ] // Return Pass to the function
											[ ] iFunctionResult = PASS
										[ ] 
									[+] else
										[ ] iFunctionResult = FAIL
										[ ] wEnterTransaction.Close()
										[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sRemoveSharesWindowTitle}")
										[ ] return iFunctionResult
										[ ] 
									[ ] 
								[ ] 
								[ ] // Bonds Bought Transaction
								[+] case("Bonds Bought")
									[ ] 
									[ ] wEnterTransaction.SetActive()
									[ ] 
									[ ] // Open "Add - Shares Added" transaction window
									[ ] wEnterTransaction.EnterTransaction.SetFocus()
									[ ] wEnterTransaction.EnterTransaction.TypeKeys("b")
									[ ] 
									[ ] sWindowTitle=wEnterTransaction.GetCaption()
									[+] if(trim(sWindowTitle)==trim(sBondBoughtWindowTitle))
										[ ] // Check Account Name selected
										[ ] Agent.SetOption (OPT_VERIFY_ENABLED, FALSE)
										[ ] sAccountName=wEnterTransaction.Account.GetSelectedItem()
										[ ] Agent.SetOption (OPT_VERIFY_ENABLED, TRUE)
										[ ] 
										[ ] // Verify that correct account is selected for the transaction
										[+] if (trim(sAccountName)!=trim(rInv_TransactionRecord.sAccount))
											[ ] //If Account name is not correct report Fail
											[ ] ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
											[ ] iFunctionResult = FAIL
											[ ] 
										[+] else
											[ ] 
											[ ] // Enter transaction date
											[ ] wEnterTransaction.TransactionDate.SetText(rInv_TransactionRecord.sTransactionDate)
											[ ] // Enter Security Name
											[ ] wEnterTransaction.SecurityName.SetText(rInv_TransactionRecord.sSecurity)
											[ ] 
											[ ] // Enter number of shares
											[ ] wEnterTransaction.NumberOfBonds.SetText(rInv_TransactionRecord.sNumberOfShares)
											[ ] // Enter Price 
											[ ] wEnterTransaction.Price.SetText(rInv_TransactionRecord.sPricePaid)
											[ ] // Enter Commission
											[ ] wEnterTransaction.Commission.SetText(rInv_TransactionRecord.sCommission)
											[ ] // Enter AccruedInt
											[ ] wEnterTransaction.AccruedInt.SetText(rInv_TransactionRecord.sAccruedInt)
											[ ] // Enter Memo
											[ ] wEnterTransaction.Memo.SetText(rInv_TransactionRecord.sMemo)
											[ ] // Select Use Cash Transaction method : Cash account or selected account
											[+] if (rInv_TransactionRecord.sUseCash==sUseCash)
												[ ] // Select "From" radio button
												[ ] wEnterTransaction.UseCashForThisTransaction.Select("#2")
												[ ] //Select Account Name from which amount should be deducted.
												[ ] wEnterTransaction.FromAccountList.Select(rInv_TransactionRecord.sAccount)
											[ ] 
											[ ] // Click on Enter Done
											[ ] wEnterTransaction.EnterDone.Click()
											[ ] 
											[ ] // Check if Add security window is present
											[+] if(AddSecurityToQuicken.Exists(MEDIUM_SLEEP))
												[ ] // Add Ticker Symbol
												[ ] AddSecurityToQuicken.SetActive()
												[ ] AddSecurityToQuicken.TickerSymbol.SetText(rInv_TransactionRecord.sSecurity)
												[ ] // Click on Next
												[ ] AddSecurityToQuicken.Next.Click()
												[ ] 
												[ ] // Click on Done
												[ ] AddSecurityToQuicken.VerifyEnabled(TRUE, 20)
												[ ] AddSecurityToQuicken.SetActive()
												[ ] AddSecurityToQuicken.Done.Click()
											[ ] 
											[ ] // Alert if date format is wrong
											[+] if(wEnterTransaction.AlertMessage.Exists(SHORT_SLEEP))
												[ ] wEnterTransaction.AlertMessage.OK.Click()
												[ ] wEnterTransaction.Close()
												[ ] LogError("Date Format is wrong")
												[ ] iFunctionResult = FAIL
												[ ] return iFunctionResult
											[ ] 
											[ ] // Return Pass to the function
											[ ] iFunctionResult = PASS
										[ ] 
									[+] else
										[ ] iFunctionResult = FAIL
										[ ] wEnterTransaction.Close()
										[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sRemoveSharesWindowTitle}")
										[ ] return iFunctionResult
										[ ] 
									[ ] 
								[ ] 
								[ ] // Short Sale Transaction
								[+] case("Short Sale")
									[ ] 
									[ ] wEnterTransaction.SetActive()
									[ ] // Open Short Sale transaction window
									[ ] wEnterTransaction.EnterTransaction.SetFocus()
									[ ] wEnterTransaction.EnterTransaction.TypeKeys("Short Sale")
									[ ] 
									[ ] sWindowTitle=wEnterTransaction.getcaption()
									[+] if(sWindowTitle==sShortSaleWindowTitle)
										[ ] // Check Account Name selected
										[ ] Agent.SetOption (OPT_VERIFY_ENABLED, FALSE)
										[ ] sAccountName=wEnterTransaction.Account.GetSelectedItem()
										[ ] Agent.SetOption (OPT_VERIFY_ENABLED, TRUE)
										[ ] // Verify that correct account is selected for the transaction
										[+] if (sAccountName!=rInv_TransactionRecord.sAccount)
											[ ] // If Account name is not correct report Fail
											[ ] ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
											[ ] iFunctionResult = FAIL
											[ ] 
										[+] else
											[ ] // Enter transaction date
											[ ] wEnterTransaction.TransactionDate.SetText(rInv_TransactionRecord.sTransactionDate)
											[ ] 
											[ ] // Enter Security Name
											[ ] wEnterTransaction.SecurityName.SetText(rInv_TransactionRecord.sSecurity)
											[ ] wEnterTransaction.SecurityName.Click()
											[ ] wEnterTransaction.TypeKeys(KEY_TAB)
											[ ] 
											[ ] // Check if Add security window is present
											[+] if(AddSecurityToQuicken.Exists(LONG_SLEEP))
												[ ] // Add Ticker Symbol
												[ ] AddSecurityToQuicken.SetActive()
												[ ] AddSecurityToQuicken.TickerSymbol.SetText(rInv_TransactionRecord.sSecurity)
												[ ] //Click on Next
												[ ] AddSecurityToQuicken.Next.Click()
												[ ] 
												[ ] sleep(SHORT_SLEEP)
												[ ] 
												[ ] // This code is written to handle Connection error
												[+] if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
													[+] if(AddSecurityToQuicken.SelectTickerSymbol.Exists(SHORT_SLEEP))
														[ ] AddSecurityToQuicken.SelectTickerSymbol.Select("Add manually")
														[ ] AddSecurityToQuicken.Next.Click()
													[ ] 
												[ ] //Click on Done
												[ ] AddSecurityToQuicken.VerifyEnabled(TRUE, 20)
												[ ] AddSecurityToQuicken.SetActive()
												[+] if (AddSecurityToQuicken.Next.Exists(5))
													[ ] AddSecurityToQuicken.Next.Click()
												[ ] sleep(2)
												[ ] 
												[ ] AddSecurityToQuicken.Done.DoubleClick()
											[ ] 
											[ ] // Enter number of shares
											[ ] wEnterTransaction.NumberOfShares.SetText(rInv_TransactionRecord.sNumberOfShares)
											[ ] // Enter Price Paid
											[ ] wEnterTransaction.PricePaid.SetText(rInv_TransactionRecord.sPricePaid)
											[ ] // Enter Commission
											[ ] wEnterTransaction.Commission.SetText(rInv_TransactionRecord.sCommission)
											[ ] // Enter Memo
											[ ] wEnterTransaction.Memo.SetText(rInv_TransactionRecord.sMemo)
											[ ] // Select Use Cash Transaction method : Cash account or selected account
											[+] if (rInv_TransactionRecord.sUseCash==sUseCash)
												[ ] // Select "From" radio button
												[ ] wEnterTransaction.UseCashForThisTransaction.Select("#2")
												[ ] //Select Account Name from which amount should be deducted.
												[ ] wEnterTransaction.FromAccountList.Select(rInv_TransactionRecord.sAccount)
											[ ] 
											[ ] // Click on Enter Done
											[ ] wEnterTransaction.EnterDone.Click()
											[+] if(Quicken2012ForWindows.Exists(SHORT_SLEEP))		// if date is very old or for later date, message is displayed
												[ ] Quicken2012ForWindows.SetActive ()
												[ ] sErrorMsg = Quicken2012ForWindows.Message.GetText()
												[ ] ReportStatus("Validate Error Meassage", WARN, "Error Message - '{sErrorMsg}' is observed")
												[ ] Quicken2012ForWindows.Yes.Click ()
												[ ] 
											[ ] 
											[ ] // Alert if date format is wrong
											[+] if(wEnterTransaction.AlertMessage.Exists(SHORT_SLEEP))
												[ ] wEnterTransaction.AlertMessage.OK.Click()
												[ ] wEnterTransaction.Close()
												[ ] LogError("Date Formate is wrong")
												[ ] iFunctionResult = FAIL
												[ ] return iFunctionResult
												[ ] 
											[ ] 
											[ ] // Return Pass to the function
											[ ] iFunctionResult = PASS
										[ ] 
									[+] else
										[ ] iFunctionResult = FAIL
										[ ] wEnterTransaction.Close()
										[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sBuyWindowTitle}")
										[ ] return iFunctionResult
										[ ] 
									[ ] 
								[ ] 
								[ ] // Cover Short Sale Transaction
								[+] case("Cover Short Sale")
									[ ] 
									[ ] wEnterTransaction.SetActive()
									[ ] // Open Short Sale transaction window
									[ ] wEnterTransaction.EnterTransaction.SetFocus()
									[ ] wEnterTransaction.EnterTransaction.TypeKeys("c")
									[ ] 
									[ ] sWindowTitle=wEnterTransaction.getcaption()
									[+] if(sWindowTitle==sCoverShortSaleWindowTitle)
										[ ] // Check Account Name selected
										[ ] sAccountName=wEnterTransaction.Account.GetSelectedItem()
										[ ] // Verify that correct account is selected for the transaction
										[+] if (sAccountName!=rInv_TransactionRecord.sAccount)
											[ ] // If Account name is not correct report Fail
											[ ] ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
											[ ] iFunctionResult = FAIL
											[ ] 
										[+] else
											[ ] // Enter transaction date
											[ ] wEnterTransaction.TransactionDate.SetText(rInv_TransactionRecord.sTransactionDate)
											[ ] 
											[ ] // Enter Security Name
											[ ] wEnterTransaction.SecurityName.SetText(rInv_TransactionRecord.sSecurity)
											[ ] wEnterTransaction.SecurityName.Click()
											[ ] wEnterTransaction.TypeKeys(KEY_TAB)
											[ ] 
											[ ] // Check if Add security window is present
											[+] if(AddSecurityToQuicken.Exists(LONG_SLEEP))
												[ ] // Add Ticker Symbol
												[ ] AddSecurityToQuicken.SetActive()
												[ ] AddSecurityToQuicken.TickerSymbol.SetText(rInv_TransactionRecord.sSecurity)
												[ ] //Click on Next
												[ ] AddSecurityToQuicken.Next.Click()
												[ ] 
												[ ] sleep(SHORT_SLEEP)
												[ ] 
												[ ] // This code is written to handle Connection error
												[+] if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
													[+] if(AddSecurityToQuicken.SelectTickerSymbol.Exists(SHORT_SLEEP))
														[ ] AddSecurityToQuicken.SelectTickerSymbol.Select("Add manually")
														[ ] AddSecurityToQuicken.Next.Click()
													[ ] 
												[ ] //Click on Done
												[ ] AddSecurityToQuicken.VerifyEnabled(TRUE, 20)
												[ ] AddSecurityToQuicken.SetActive()
												[+] if (AddSecurityToQuicken.Next.Exists(5))
													[ ] AddSecurityToQuicken.Next.Click()
												[ ] sleep(2)
												[ ] 
												[ ] AddSecurityToQuicken.Done.DoubleClick()
											[ ] 
											[ ] // Enter number of shares
											[ ] wEnterTransaction.NumberOfShares.SetText(rInv_TransactionRecord.sNumberOfShares)
											[ ] // Enter Price Paid
											[ ] wEnterTransaction.PricePaid.SetText(rInv_TransactionRecord.sPricePaid)
											[ ] // Enter Commission
											[ ] wEnterTransaction.Commission.SetText(rInv_TransactionRecord.sCommission)
											[ ] // Enter Memo
											[ ] wEnterTransaction.Memo.SetText(rInv_TransactionRecord.sMemo)
											[ ] // Select Use Cash Transaction method : Cash account or selected account
											[+] if (rInv_TransactionRecord.sUseCash==sUseCash)
												[ ] // Select "From" radio button
												[ ] wEnterTransaction.UseCashForThisTransaction.Select("#2")
												[ ] //Select Account Name from which amount should be deducted.
												[ ] wEnterTransaction.FromAccountList.Select(rInv_TransactionRecord.sAccount)
											[ ] 
											[ ] // Click on Enter Done
											[ ] wEnterTransaction.EnterDone.Click()
											[+] if(Quicken2012ForWindows.Exists(SHORT_SLEEP))		// if date is very old or for later date, message is displayed
												[ ] Quicken2012ForWindows.SetActive ()
												[ ] sErrorMsg = Quicken2012ForWindows.Message.GetText()
												[ ] ReportStatus("Validate Error Meassage", WARN, "Error Message - '{sErrorMsg}' is observed")
												[ ] Quicken2012ForWindows.Yes.Click ()
												[ ] 
											[ ] 
											[ ] // Alert if date format is wrong
											[+] if(wEnterTransaction.AlertMessage.Exists(SHORT_SLEEP))
												[ ] wEnterTransaction.AlertMessage.OK.Click()
												[ ] wEnterTransaction.Close()
												[ ] LogError("Date Formate is wrong")
												[ ] iFunctionResult = FAIL
												[ ] return iFunctionResult
												[ ] 
											[ ] 
											[ ] // Return Pass to the function
											[ ] iFunctionResult = PASS
										[ ] 
									[+] else
										[ ] iFunctionResult = FAIL
										[ ] wEnterTransaction.Close()
										[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sBuyWindowTitle}")
										[ ] return iFunctionResult
										[ ] 
									[ ] 
								[ ] 
								[ ] // Adjust Share Balance Transaction
								[+] case("Adjust Share Balance")
									[+] if(IsNull(rInv_TransactionRecord.sSecurity))
										[ ] rInv_TransactionRecord.sSecurity = ""
									[+] if(IsNull(rInv_TransactionRecord.sNumberOfShares))
										[ ] rInv_TransactionRecord.sNumberOfShares = ""
									[ ] 
									[ ] wEnterTransaction.SetActive()
									[ ] 
									[ ] wEnterTransaction.EnterTransaction.SetFocus()
									[ ] wEnterTransaction.EnterTransaction.Select(rInv_TransactionRecord.sTransactionType)
									[ ] 
									[ ] sWindowTitle = wEnterTransaction.GetCaption()
									[+] if(trim(sWindowTitle)==trim(sAdjustShareBalanceWindowTitle))
										[ ] 
										[ ] sAccountName=wEnterTransaction.Account.GetSelectedItem()
										[ ] 
										[ ] // Verify that correct account is selected for the transaction
										[+] if (trim(sAccountName)!=trim(rInv_TransactionRecord.sAccount))
											[ ] // If Account name is not correct report Fail
											[ ] ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
											[ ] iFunctionResult = FAIL
											[ ] 
										[+] else
											[ ] // Enter transaction date
											[ ] wEnterTransaction.TransactionDate.SetText(rInv_TransactionRecord.sTransactionDate)
											[ ] // Enter Security Name
											[ ] wEnterTransaction.SecurityName.SetText(rInv_TransactionRecord.sSecurity)
											[ ] 
											[ ] // Enter number of shares
											[ ] wEnterTransaction.NumberOfShares.SetText(rInv_TransactionRecord.sNumberOfShares)
											[ ] 
											[ ] // Click on Enter Done
											[ ] wEnterTransaction.EnterDone.Click()
											[ ] 
											[ ] // Check if Add security window is present
											[+] if(AddSecurityToQuicken.Exists(MEDIUM_SLEEP))
												[ ] // Add Ticker Symbol
												[ ] AddSecurityToQuicken.SetActive()
												[ ] AddSecurityToQuicken.TickerSymbol.SetText(rInv_TransactionRecord.sSecurity)
												[ ] // Click on Next
												[ ] AddSecurityToQuicken.Next.Click()
												[ ] 
												[ ] // Click on Done
												[ ] AddSecurityToQuicken.VerifyEnabled(TRUE, 20)
												[ ] AddSecurityToQuicken.SetActive()
												[ ] AddSecurityToQuicken.Done.Click()
											[ ] 
											[ ] // Alert if error message is observed
											[+] if(wEnterTransaction.AlertMessage.Exists(SHORT_SLEEP))
												[ ] wEnterTransaction.AlertMessage.SetActive()
												[ ] sErrorMsg = wEnterTransaction.AlertMessage.Message.GetText()
												[ ] wEnterTransaction.AlertMessage.OK.Click()
												[+] if(wEnterTransaction.exists(SHORT_SLEEP))
													[ ] wEnterTransaction.Close()
												[ ] iFunctionResult = FAIL
												[ ] ReportStatus("Validate Error Message", FAIL, "Transaction is not added and Error Message - {sErrorMsg} is displayed")
											[ ] 
											[+] else
												[ ] // Return Pass to the function
												[ ] iFunctionResult = PASS
										[ ] 
									[+] else
										[ ] iFunctionResult = FAIL
										[ ] wEnterTransaction.Close()
										[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sAddSharesWindowTitle}")
										[ ] return iFunctionResult
										[ ] 
								[ ] 
								[+] default
									[ ] // If Transaction Type not found 
									[ ] LogError(rInv_TransactionRecord.sTransactionType + "TransactionType Not found")
									[ ] // Return Fail  to the function
									[ ] iFunctionResult = FAIL
							[ ] 
						[+] else
							[ ] ReportStatus("Brokerage Account Page Open", FAIL, "{rInv_TransactionRecord.sAccount} Account is not invoked from AccountBar") 
							[ ] iFunctionResult = FAIL
						[ ] 
					[+] else
						[ ] ReportStatus("Verify Popup Register Option", FAIL, "Popup register is not ON for Popup") 
						[ ] iFunctionResult = FAIL
					[ ] 
				[ ] 
				[ ] 
			[ ] 
			[ ] 
		[+] except
			[+] if (wEnterTransaction.Exists(SHORT_SLEEP))
				[ ] wEnterTransaction.SetActive()
				[ ] wEnterTransaction.close()
				[ ] iFunctionResult = FAIL
			[ ] ExceptLog()
			[ ] // Return FAIL to the function
			[ ] iFunctionResult = FAIL
			[ ] 
		[ ] 
		[ ] return iFunctionResult
	[ ]  
	[ ] // // ==========================================================
	[+] // // FUNCTION: Inv_AddIncomeTransaction()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will Add Income Transaction in Investment Account as per input parameter
		[ ] // //
		[ ] // // PARAMETERS:		 Record	Inv_IncomeTransactionRecord	rInv_IncomeTransactionRecord	
		[ ] // //                                       (TransactionMode,TransactionDate,	Account,TransferAccount,	Security,Dividend,	Interest,ShortTermCapGains,	MidTermCapGains,LongTermCapGains	,Misc,Memo,Category)
		[ ] // //						
		[ ] // // RETURNS:			INTEGER	PASS		 if Income Transaction addded successfully to investment account
		[ ] // //									FAIL  		 if any error occurs
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //   	Apr 25, 2011  Udita Dube  Created
	[ ] // // ==========================================================
	[+] // public INTEGER Inv_AddIncomeTransaction(Inv_IncomeTransactionRecord rInv_IncomeTransactionRecord)
		[+] // // Variable Declaration
			[ ] // INTEGER iFunctionResult
			[ ] // STRING sWindowTitle,sIncomeWindowTitle,sAccountName
			[ ] // sIncomeWindowTitle="Inc - Income (Div, Int, etc.)"
			[ ] // 
		[+] // do
			[ ] // 
			[+] // if(IsNull(rInv_IncomeTransactionRecord.sMemo))
				[ ] // rInv_IncomeTransactionRecord.sMemo =""
			[+] // if(IsNull(rInv_IncomeTransactionRecord.sMisc))
				[ ] // rInv_IncomeTransactionRecord.sMisc=""
			[+] // if(IsNull(rInv_IncomeTransactionRecord.sCategory))
				[ ] // rInv_IncomeTransactionRecord.sCategory =""
			[+] // if(IsNull(rInv_IncomeTransactionRecord.sAccount))
				[ ] // rInv_IncomeTransactionRecord.sAccount=""
			[+] // if(IsNull(rInv_IncomeTransactionRecord.sDividend))
				[ ] // rInv_IncomeTransactionRecord.sDividend=""
			[+] // if(IsNull(rInv_IncomeTransactionRecord.sInterest))
				[ ] // rInv_IncomeTransactionRecord.sInterest=""
			[+] // if(IsNull(rInv_IncomeTransactionRecord.sShortTermCapGains))
				[ ] // rInv_IncomeTransactionRecord.sShortTermCapGains=""
			[+] // if(IsNull(rInv_IncomeTransactionRecord.sMidTermCapGains))
				[ ] // rInv_IncomeTransactionRecord.sMidTermCapGains=""
			[+] // if(IsNull(rInv_IncomeTransactionRecord.sLongTermCapGains))
				[ ] // rInv_IncomeTransactionRecord.sLongTermCapGains=""
				[ ] // 
			[ ] // 
			[ ] // BrokerageAccount.SetActive()
			[ ] // 
			[ ] // // Set Active Brokerage Account window
			[ ] // BrokerageAccount.VerifyEnabled(TRUE, 20)
			[ ] // 
			[ ] // // Check that Brokerage window is opened or not
			[+] // if(BrokerageAccount.Exists(SHORT_SLEEP) == TRUE)
				[ ] // BrokerageAccount.SetActive ()
				[ ] // BrokerageAccount.EnterTransactions.Click()
				[ ] // sleep(SHORT_SLEEP)
				[ ] // 
				[ ] // //Income Transaction
				[ ] // wEnterTransaction.SetActive()
				[ ] // sleep(SHORT_SLEEP)
				[ ] // // Open Buy transaction window
				[ ] // wEnterTransaction.EnterTransaction.SetFocus()
				[ ] // wEnterTransaction.EnterTransaction.TypeKeys("<Alt-i>")
				[ ] // 
				[ ] // sleep(SHORT_SLEEP)
				[ ] // 
				[ ] // sWindowTitle=wEnterTransaction.getcaption()
				[+] // if(trim(sWindowTitle)==trim(sIncomeWindowTitle))
					[ ] // // Check Account Name selected
					[ ] // Agent.SetOption (OPT_VERIFY_ENABLED, FALSE)
					[ ] // sAccountName=wEnterTransaction.Account.GetSelText()
					[ ] // Agent.SetOption (OPT_VERIFY_ENABLED, TRUE)
					[ ] // // Verify that correct account is selected for the transaction
					[+] // if (sAccountName!=rInv_IncomeTransactionRecord.sAccount)
						[ ] // // If Account name is not correct report Fail
						[ ] // ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
						[ ] // 
						[ ] // 
					[ ] // 
					[ ] // // Enter transaction date
					[ ] // wEnterTransaction.TransactionDate.SetText(rInv_IncomeTransactionRecord.sTransactionDate)
					[ ] // 
					[ ] // // Enter Security Name
					[ ] // wEnterTransaction.SecurityName.SetText(rInv_IncomeTransactionRecord.sSecurity)
					[ ] // wEnterTransaction.TypeKeys(KEY_TAB)
					[ ] // 
					[ ] // // Check if Add security window is present
					[+] // if(AddSecurityToQuicken.Exists(10))
						[ ] // // Add Ticker Symbol
						[ ] // AddSecurityToQuicken.SetActive()
						[ ] // AddSecurityToQuicken.TickerSymbol.SetText(rInv_IncomeTransactionRecord.sSecurity)
						[ ] // //Click on Next
						[ ] // AddSecurityToQuicken.Next.Click()
						[ ] // 
						[ ] // sleep(SHORT_SLEEP)
						[ ] // 
						[ ] // // This code is written to handle Connection error
						[+] // if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
							[ ] // AddSecurityToQuicken.AddManually.Select("Add manually")
							[ ] // AddSecurityToQuicken.Next.Click()
							[ ] // 
						[ ] // 
						[ ] // //Click on Done
						[ ] // AddSecurityToQuicken.VerifyEnabled(TRUE, 20)
						[ ] // AddSecurityToQuicken.Done.Click()
					[ ] // 
					[ ] // // Enter Transfer Account
					[ ] // wEnterTransaction.TransferAccount.SetText(rInv_IncomeTransactionRecord.sTransferAccount)
					[ ] // // Enter Dividend
					[ ] // wEnterTransaction.Dividend.SetText(rInv_IncomeTransactionRecord.sDividend)
					[ ] // // Enter Interest
					[ ] // wEnterTransaction.Interest.SetText(rInv_IncomeTransactionRecord.sInterest)
					[ ] // // Enter Short Term Cap Gain Dist
					[ ] // wEnterTransaction.ShortTermCapGainDist.SetText(rInv_IncomeTransactionRecord.sShortTermCapGains)
					[ ] // // Enter Mid Term Cap Gain Dist
					[ ] // wEnterTransaction.MidTermCapGainDist.SetText(rInv_IncomeTransactionRecord.sMidTermCapGains)
					[ ] // // Enter Long Term Cap Gain Dist
					[ ] // wEnterTransaction.LongTermCapGainDist.SetText(rInv_IncomeTransactionRecord.sLongTermCapGains)
					[ ] // // Enter Miscellaneous
					[ ] // wEnterTransaction.Miscellaneous.SetText(rInv_IncomeTransactionRecord.sMisc)
					[ ] // sleep(SHORT_SLEEP)
					[ ] // // Enter Memo
					[ ] // wEnterTransaction.Memo.SetText(rInv_IncomeTransactionRecord.sMemo)
					[ ] // 
					[+] // if(rInv_IncomeTransactionRecord.sMisc!="" && rInv_IncomeTransactionRecord.sCategory !="")
						[ ] // // Enter Category for Miscellaneous
						[ ] // wEnterTransaction.CategoryForMiscellaneous.SetText(rInv_IncomeTransactionRecord.sCategory)
						[ ] // 
					[ ] // 
					[ ] // // Click on Enter Done
					[ ] // wEnterTransaction.EnterDone.DoubleClick()
					[ ] // 
					[ ] // // Alert if date format is wrong
					[+] // if(wEnterTransaction.AlertMessage.Exists(SHORT_SLEEP))
						[ ] // wEnterTransaction.AlertMessage.OK.Click()
						[ ] // wEnterTransaction.Close()
						[ ] // LogError("Error has been encounterred")
						[ ] // iFunctionResult = FAIL
						[ ] // return iFunctionResult
						[ ] // 
					[ ] // 
					[ ] // // Return Pass to the function
					[ ] // iFunctionResult = PASS
				[+] // else
					[ ] // iFunctionResult = FAIL
					[ ] // wEnterTransaction.Close()
					[ ] // ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sIncomeWindowTitle}")
					[ ] // return iFunctionResult
					[ ] // 
				[ ] // 
				[ ] // 
				[ ] // 
			[+] // else
				[ ] // ReportStatus("Brokerage Account Page Open", FAIL, "Brokerage Account is not invoked from AccountBar") 
				[ ] // iFunctionResult = FAIL
			[ ] // 
			[ ] // 
		[+] // except
			[+] // if (wEnterTransaction.Exists(SHORT_SLEEP))
				[ ] // wEnterTransaction.SetActive()
				[ ] // wEnterTransaction.close()
				[ ] // 
			[ ] // ExceptLog()
			[ ] // // Return FAIL to the function
			[ ] // iFunctionResult = FAIL
			[ ] // 
		[ ] // return iFunctionResult
		[ ] // 
	[ ] // 
	[ ] // // ==========================================================
	[+] // // FUNCTION: Inv_AddStockSplitTransaction()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will Add Stock Split Transaction in Investment Account as per input parameter
		[ ] // //
		[ ] // // PARAMETERS:		 Record	Inv_StockSplitRecord	rInv_StockSplitRecord	
		[ ] // //						(TransactionMode,TransactionDate,	Account,Security,NewShares,OldShares,PriceAfterSplit,Memo)
		[ ] // //                                       ()
		[ ] // //						
		[ ] // // RETURNS:			INTEGER	PASS		 if Stock Split Transaction addded successfully to investment account
		[ ] // //									FAIL  		 if any error occurs
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //   	Apr 27, 2011  Udita Dube  Created
	[ ] // // ==========================================================
	[+] // public INTEGER Inv_AddStockSplitTransaction(Inv_StockSplitRecord rInv_StockSplitRecord)
		[+] // // Variable Declaration
			[ ] // INTEGER iFunctionResult
			[ ] // STRING sWindowTitle,sStockSplitWindowTitle,sAccountName
			[ ] // sStockSplitWindowTitle="Stock Split"
			[ ] // 
		[+] // do
			[ ] // 
			[+] // if(IsNull(rInv_StockSplitRecord.sMemo))
				[ ] // rInv_StockSplitRecord.sMemo =""
			[+] // if(IsNull(rInv_StockSplitRecord.sPriceAfterSplit))
				[ ] // rInv_StockSplitRecord.sPriceAfterSplit=""
			[ ] // 
			[ ] // BrokerageAccount.SetActive()
			[ ] // 
			[ ] // // Set Active Brokerage Account window
			[ ] // BrokerageAccount.VerifyEnabled(TRUE, 20)
			[ ] // 
			[ ] // // Check that Brokerage window is opened or not
			[+] // if(BrokerageAccount.Exists(SHORT_SLEEP) == TRUE)
				[ ] // BrokerageAccount.SetActive ()
				[ ] // BrokerageAccount.EnterTransactions.Click()
				[ ] // sleep(SHORT_SLEEP)
				[ ] // 
				[ ] // //Income Transaction
				[ ] // wEnterTransaction.SetActive()
				[ ] // sleep(SHORT_SLEEP)
				[ ] // // Open Buy transaction window
				[ ] // wEnterTransaction.EnterTransaction.SetFocus()
				[ ] // wEnterTransaction.EnterTransaction.Select(sStockSplitWindowTitle)
				[ ] // 
				[ ] // sleep(SHORT_SLEEP)
				[ ] // 
				[ ] // sWindowTitle=wEnterTransaction.getcaption()
				[+] // if(trim(sWindowTitle)==trim(sStockSplitWindowTitle))
					[ ] // // Check Account Name selected
					[ ] // Agent.SetOption (OPT_VERIFY_ENABLED, FALSE)
					[ ] // sAccountName=wEnterTransaction.Account.GetSelText()
					[ ] // Agent.SetOption (OPT_VERIFY_ENABLED, TRUE)
					[ ] // // Verify that correct account is selected for the transaction
					[+] // if (sAccountName!=rInv_StockSplitRecord.sAccount)
						[ ] // // If Account name is not correct report Fail
						[ ] // ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
						[ ] // iFunctionResult = FAIL
						[ ] // 
					[+] // else
						[ ] // // Enter transaction date
						[ ] // wEnterTransaction.TransactionDate.SetText(rInv_StockSplitRecord.sTransactionDate)
						[ ] // 
						[ ] // // Enter Security Name
						[ ] // wEnterTransaction.SecurityName.SetText(rInv_StockSplitRecord.sSecurity)
						[ ] // wEnterTransaction.TypeKeys(KEY_TAB)
						[ ] // 
						[ ] // // Check if Add security window is present
						[+] // if(AddSecurityToQuicken.Exists(MEDIUM_SLEEP))
							[ ] // // Add Ticker Symbol
							[ ] // AddSecurityToQuicken.SetActive()
							[ ] // AddSecurityToQuicken.TickerSymbol.SetText(rInv_StockSplitRecord.sSecurity)
							[ ] // //Click on Next
							[ ] // AddSecurityToQuicken.Next.Click()
							[ ] // 
							[ ] // sleep(SHORT_SLEEP)
							[ ] // 
							[ ] // // This code is written to handle Connection error
							[+] // if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
								[ ] // AddSecurityToQuicken.AddManually.Select("Add manually")
								[ ] // AddSecurityToQuicken.Next.Click()
								[ ] // 
							[ ] // 
							[ ] // //Click on Done
							[ ] // AddSecurityToQuicken.VerifyEnabled(TRUE, 20)
							[ ] // AddSecurityToQuicken.Done.Click()
						[ ] // 
						[ ] // // Enter New Shares
						[ ] // wEnterTransaction.NewShares.SetText(rInv_StockSplitRecord.sNewShares)
						[ ] // // Enter Old Shares
						[ ] // wEnterTransaction.OldShares.SetText(rInv_StockSplitRecord.sOldShares)
						[ ] // // Enter Price After Split.
						[ ] // wEnterTransaction.PriceAfterSplit.SetText(rInv_StockSplitRecord.sPriceAfterSplit)
						[ ] // // Enter Memo
						[ ] // wEnterTransaction.Memo.SetText(rInv_StockSplitRecord.sMemo)
						[ ] // // Click on Enter Done
						[ ] // wEnterTransaction.EnterDone.DoubleClick()
						[ ] // 
						[ ] // // Alert if date format is wrong
						[+] // if(wEnterTransaction.AlertMessage.Exists(SHORT_SLEEP))
							[ ] // wEnterTransaction.AlertMessage.OK.Click()
							[ ] // wEnterTransaction.Close()
							[ ] // LogError("Error has been encountered")
							[ ] // iFunctionResult = FAIL
							[ ] // return iFunctionResult
							[ ] // 
						[ ] // 
						[ ] // // Return Pass to the function
						[ ] // iFunctionResult = PASS
				[+] // else
					[ ] // iFunctionResult = FAIL
					[ ] // wEnterTransaction.Close()
					[ ] // ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sStockSplitWindowTitle}")
					[ ] // return iFunctionResult
					[ ] // 
				[ ] // 
				[ ] // 
				[ ] // 
			[+] // else
				[ ] // ReportStatus("Brokerage Account Page Open", FAIL, "Brokerage Account is not invoked from AccountBar") 
				[ ] // iFunctionResult = FAIL
			[ ] // 
			[ ] // 
		[+] // except
			[+] // if (wEnterTransaction.Exists(SHORT_SLEEP))
				[ ] // wEnterTransaction.SetActive()
				[ ] // wEnterTransaction.close()
				[ ] // 
			[ ] // ExceptLog()
			[ ] // // Return FAIL to the function
			[ ] // iFunctionResult = FAIL
			[ ] // 
		[ ] // return iFunctionResult
		[ ] // 
	[ ] // 
	[ ] // // ==========================================================
	[+] // // FUNCTION: Inv_MiscExpTransaction()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will Add Miscellaneous Expense Transaction in Investment Account as per input parameter
		[ ] // //
		[ ] // // PARAMETERS:		 Record	Inv_StockSplitRecord	rInv_StockSplitRecord	
		[ ] // //						(TransactionMode,TransactionDate,	Account,Security,NewShares,OldShares,PriceAfterSplit,Memo)
		[ ] // //                                       ()
		[ ] // //						
		[ ] // // RETURNS:			INTEGER	PASS		 if Miscellaneous Expense Transaction addded successfully to investment account
		[ ] // //									FAIL  		 if any error occurs
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //   	Apr 27, 2011  Udita Dube  Created
	[ ] // // ==========================================================
	[+] // public INTEGER Inv_MiscExpTransaction(Inv_MiscExpRecord rInv_MiscExpRecord)
		[+] // // Variable Declaration
			[ ] // INTEGER iFunctionResult
			[ ] // STRING sWindowTitle,sMiscExpWindowTitle,sAccountName
			[ ] // sMiscExpWindowTitle="Miscellaneous Expense"
			[ ] // 
		[+] // do
			[ ] // 
			[+] // if(IsNull(rInv_MiscExpRecord.sMemo))
				[ ] // rInv_MiscExpRecord.sMemo =""
			[+] // if(IsNull(rInv_MiscExpRecord.sCategory))
				[ ] // rInv_MiscExpRecord.sCategory=""
			[ ] // 
			[ ] // BrokerageAccount.SetActive()
			[ ] // 
			[ ] // // Set Active Brokerage Account window
			[ ] // BrokerageAccount.VerifyEnabled(TRUE, 20)
			[ ] // 
			[ ] // // Check that Brokerage window is opened or not
			[+] // if(BrokerageAccount.Exists(SHORT_SLEEP) == TRUE)
				[ ] // BrokerageAccount.SetActive ()
				[ ] // BrokerageAccount.EnterTransactions.Click()
				[ ] // sleep(SHORT_SLEEP)
				[ ] // 
				[ ] // //Income Transaction
				[ ] // wEnterTransaction.SetActive()
				[ ] // sleep(SHORT_SLEEP)
				[ ] // // Open Buy transaction window
				[ ] // wEnterTransaction.EnterTransaction.SetFocus()
				[ ] // wEnterTransaction.EnterTransaction.Select(sMiscExpWindowTitle)
				[ ] // 
				[ ] // sleep(SHORT_SLEEP)
				[ ] // 
				[ ] // sWindowTitle=wEnterTransaction.getcaption()
				[+] // if(trim(sWindowTitle)==trim(sMiscExpWindowTitle))
					[ ] // // Check Account Name selected
					[ ] // Agent.SetOption (OPT_VERIFY_ENABLED, FALSE)
					[ ] // sAccountName=wEnterTransaction.Account.GetSelText()
					[ ] // Agent.SetOption (OPT_VERIFY_ENABLED, TRUE)
					[ ] // // Verify that correct account is selected for the transaction
					[+] // if (sAccountName!=rInv_MiscExpRecord.sAccount)
						[ ] // // If Account name is not correct report Fail
						[ ] // ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
						[ ] // iFunctionResult = FAIL
						[ ] // 
					[+] // else
						[ ] // // Enter transaction date
						[ ] // wEnterTransaction.TransactionDate.SetText(rInv_MiscExpRecord.sTransactionDate)
						[ ] // 
						[ ] // // Enter Security Name
						[ ] // wEnterTransaction.SecurityName.SetText(rInv_MiscExpRecord.sSecurity)
						[ ] // wEnterTransaction.TypeKeys(KEY_TAB)
						[ ] // 
						[ ] // // Check if Add security window is present
						[+] // if(AddSecurityToQuicken.Exists(MEDIUM_SLEEP))
							[ ] // // Add Ticker Symbol
							[ ] // AddSecurityToQuicken.SetActive()
							[ ] // AddSecurityToQuicken.TickerSymbol.SetText(rInv_MiscExpRecord.sSecurity)
							[ ] // //Click on Next
							[ ] // AddSecurityToQuicken.Next.Click()
							[ ] // 
							[ ] // sleep(SHORT_SLEEP)
							[ ] // 
							[ ] // // This code is written to handle Connection error
							[+] // if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
								[ ] // AddSecurityToQuicken.AddManually.Select("Add manually")
								[ ] // AddSecurityToQuicken.Next.Click()
								[ ] // 
							[ ] // 
							[ ] // //Click on Done
							[ ] // AddSecurityToQuicken.VerifyEnabled(TRUE, 20)
							[ ] // AddSecurityToQuicken.Done.Click()
						[ ] // 
						[ ] // // Enter Transfer Account
						[ ] // wEnterTransaction.TransferAccount.SetText(rInv_MiscExpRecord.sTransferAccount)
						[ ] // // Enter Amount
						[ ] // wEnterTransaction.Amount.SetText(rInv_MiscExpRecord.sAmount)
						[ ] // //Enter Category
						[ ] // wEnterTransaction.Category.SetText(rInv_MiscExpRecord.sCategory)
						[ ] // // Enter Memo
						[ ] // wEnterTransaction.Memo.SetText(rInv_MiscExpRecord.sMemo)
						[ ] // // Click on Enter Done
						[ ] // wEnterTransaction.EnterDone.DoubleClick()
						[ ] // 
						[ ] // // Alert if date format is wrong
						[+] // if(wEnterTransaction.AlertMessage.Exists(SHORT_SLEEP))
							[ ] // wEnterTransaction.AlertMessage.OK.Click()
							[ ] // wEnterTransaction.Close()
							[ ] // LogError("Error has been encountered")
							[ ] // iFunctionResult = FAIL
							[ ] // return iFunctionResult
							[ ] // 
						[ ] // 
						[ ] // // Return Pass to the function
						[ ] // iFunctionResult = PASS
				[+] // else
					[ ] // iFunctionResult = FAIL
					[ ] // wEnterTransaction.Close()
					[ ] // ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sMiscExpWindowTitle}")
					[ ] // return iFunctionResult
					[ ] // 
				[ ] // 
				[ ] // 
				[ ] // 
			[+] // else
				[ ] // ReportStatus("Brokerage Account Page Open", FAIL, "Brokerage Account is not invoked from AccountBar") 
				[ ] // iFunctionResult = FAIL
			[ ] // 
			[ ] // 
		[+] // except
			[+] // if (wEnterTransaction.Exists(SHORT_SLEEP))
				[ ] // wEnterTransaction.SetActive()
				[ ] // wEnterTransaction.close()
				[ ] // 
			[ ] // ExceptLog()
			[ ] // // Return FAIL to the function
			[ ] // iFunctionResult = FAIL
			[ ] // 
		[ ] // return iFunctionResult
	[ ] // 
	[ ] // // ==========================================================
	[+] // // FUNCTION: Inv_ReturnOfCapital()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will Add Return of Capital Transaction in Investment Account as per input parameter
		[ ] // //
		[ ] // // PARAMETERS:		 Record	Inv_StockSplitRecord	rInv_StockSplitRecord	
		[ ] // //						(TransactionMode,TransactionDate,	Account, Transfer Account, Security,Amount,Market Value,Memo)
		[ ] // //                                      
		[ ] // //						
		[ ] // // RETURNS:			INTEGER	PASS		 if Return of Capital Transaction addded successfully to investment account
		[ ] // //									FAIL  		 if any error occurs
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //   	May 12, 2011  Udita Dube  Created
	[ ] // // ==========================================================
	[+] // public INTEGER Inv_ReturnOfCapital(Inv_ReturnCapitalRecord rInv_ReturnCapitalRecord)
		[+] // // Variable Declaration
			[ ] // INTEGER iFunctionResult
			[ ] // STRING sWindowTitle,sReturnCapitalWindowTitle,sAccountName
			[ ] // sReturnCapitalWindowTitle="Return of Capital"
			[ ] // 
		[+] // do
			[ ] // 
			[+] // if(IsNull(rInv_ReturnCapitalRecord.sMemo))
				[ ] // rInv_ReturnCapitalRecord.sMemo =""
			[+] // if(IsNull(rInv_ReturnCapitalRecord.sMarketValue))
				[ ] // rInv_ReturnCapitalRecord.sMarketValue=""
			[ ] // 
			[ ] // BrokerageAccount.SetActive()
			[ ] // 
			[ ] // // Set Active Brokerage Account window
			[ ] // BrokerageAccount.VerifyEnabled(TRUE, 20)
			[ ] // 
			[ ] // // Check that Brokerage window is opened or not
			[+] // if(BrokerageAccount.Exists(SHORT_SLEEP) == TRUE)
				[ ] // BrokerageAccount.SetActive ()
				[ ] // BrokerageAccount.EnterTransactions.Click()
				[ ] // sleep(SHORT_SLEEP)
				[ ] // 
				[ ] // // Enter Transaction
				[ ] // wEnterTransaction.SetActive()
				[ ] // sleep(SHORT_SLEEP)
				[ ] // // Open Buy transaction window
				[ ] // wEnterTransaction.EnterTransaction.SetFocus()
				[ ] // wEnterTransaction.EnterTransaction.Select(sReturnCapitalWindowTitle)
				[ ] // 
				[ ] // sleep(SHORT_SLEEP)
				[ ] // 
				[ ] // sWindowTitle=wEnterTransaction.getcaption()
				[+] // if(trim(sWindowTitle)==trim(sReturnCapitalWindowTitle))
					[ ] // // Check Account Name selected
					[ ] // Agent.SetOption (OPT_VERIFY_ENABLED, FALSE)
					[ ] // sAccountName=wEnterTransaction.Account.GetSelText()
					[ ] // Agent.SetOption (OPT_VERIFY_ENABLED, TRUE)
					[ ] // // Verify that correct account is selected for the transaction
					[+] // if (sAccountName!=rInv_ReturnCapitalRecord.sAccount)
						[ ] // // If Account name is not correct report Fail
						[ ] // ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
						[ ] // iFunctionResult = FAIL
						[ ] // 
					[+] // else
						[ ] // // Enter transaction date
						[ ] // wEnterTransaction.TransactionDate.SetText(rInv_ReturnCapitalRecord.sTransactionDate)
						[ ] // 
						[ ] // // Enter Security Name
						[ ] // wEnterTransaction.SecurityName.SetText(rInv_ReturnCapitalRecord.sSecurity)
						[ ] // wEnterTransaction.TypeKeys(KEY_TAB)
						[ ] // 
						[ ] // // Check if Add security window is present
						[+] // if(AddSecurityToQuicken.Exists(MEDIUM_SLEEP))
							[ ] // // Add Ticker Symbol
							[ ] // AddSecurityToQuicken.SetActive()
							[ ] // AddSecurityToQuicken.TickerSymbol.SetText(rInv_ReturnCapitalRecord.sSecurity)
							[ ] // //Click on Next
							[ ] // AddSecurityToQuicken.Next.Click()
							[ ] // 
							[ ] // sleep(SHORT_SLEEP)
							[ ] // 
							[ ] // // This code is written to handle Connection error
							[+] // if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
								[ ] // AddSecurityToQuicken.AddManually.Select("Add manually")
								[ ] // AddSecurityToQuicken.Next.Click()
								[ ] // 
							[ ] // 
							[ ] // //Click on Done
							[ ] // AddSecurityToQuicken.VerifyEnabled(TRUE, 20)
							[ ] // AddSecurityToQuicken.Done.Click()
						[ ] // 
						[ ] // // Enter Transfer Account
						[ ] // wEnterTransaction.TransferAccount.SetText(rInv_ReturnCapitalRecord.sTransferAccount)
						[ ] // // Enter Amount
						[ ] // wEnterTransaction.Amount.SetText(rInv_ReturnCapitalRecord.sAmount)
						[ ] // //Enter Market Value
						[ ] // wEnterTransaction.Category.SetText(rInv_ReturnCapitalRecord.sMarketValue)
						[ ] // // Enter Memo
						[ ] // wEnterTransaction.Memo.SetText(rInv_ReturnCapitalRecord.sMemo)
						[ ] // // Click on Enter Done
						[ ] // wEnterTransaction.EnterDone.DoubleClick()
						[ ] // 
						[ ] // // Alert if date format is wrong
						[+] // if(wEnterTransaction.AlertMessage.Exists(SHORT_SLEEP))
							[ ] // wEnterTransaction.AlertMessage.OK.Click()
							[ ] // wEnterTransaction.Close()
							[ ] // LogError("Error has been encountered")
							[ ] // iFunctionResult = FAIL
							[ ] // return iFunctionResult
							[ ] // 
						[ ] // 
						[ ] // // Return Pass to the function
						[ ] // iFunctionResult = PASS
				[+] // else
					[ ] // iFunctionResult = FAIL
					[ ] // wEnterTransaction.Close()
					[ ] // ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sReturnCapitalWindowTitle}")
					[ ] // return iFunctionResult
					[ ] // 
				[ ] // 
				[ ] // 
				[ ] // 
			[+] // else
				[ ] // ReportStatus("Brokerage Account Page Open", FAIL, "Brokerage Account is not invoked from AccountBar") 
				[ ] // iFunctionResult = FAIL
			[ ] // 
			[ ] // 
		[+] // except
			[+] // if (wEnterTransaction.Exists(SHORT_SLEEP))
				[ ] // wEnterTransaction.SetActive()
				[ ] // wEnterTransaction.close()
				[ ] // 
			[ ] // ExceptLog()
			[ ] // // Return FAIL to the function
			[ ] // iFunctionResult = FAIL
			[ ] // 
		[ ] // return iFunctionResult
	[ ] // 
	[ ] // // ==========================================================
	[+] // // FUNCTION: Inv_CashTransferTransaction()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will Add Cash deposit/Withdraw Transaction in Investment Account as per input parameter
		[ ] // //
		[ ] // // PARAMETERS:		 Record	Inv_CashAction	rInv_CashAction	
		[ ] // //						(TransactionType, TransactionDate, Account, Payee,  Amount, Memom Category, Cheque no.)                                       ()
		[ ] // //						
		[ ] // // RETURNS:			INTEGER	PASS		 if Cash Deposit/Withdraw Transaction addded successfully to investment account
		[ ] // //									FAIL  		 if any error occurs
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //   	May 16, 2011  Mamta Jain  Created
	[ ] // // ==========================================================
	[+] // public INTEGER Inv_CashActionTransaction(Inv_CashAction rInv_CashAction)
		[+] // // Variable Declaration
			[ ] // INTEGER iFunctionResult, j, iRowCount
			[ ] // STRING sWindowTitle, sWithdrawWindowTitle, sAccountName,  sDepositWindowTitle, sErrorMsg, sCategoryMsg
			[ ] // BOOLEAN bErrorFlag, bAccountFound
			[ ] // sWithdrawWindowTitle="Withdraw"
			[ ] // sDepositWindowTitle = "Deposit"
			[ ] // sCategoryMsg = "Record this payment transaction using an income category"
			[ ] // bErrorFlag = FALSE
			[ ] // bAccountFound = FALSE
			[ ] // 
		[+] // do
			[+] // if(IsNull(rInv_CashAction.sTransactionType))
				[ ] // rInv_CashAction.sTransactionType = ""
			[+] // if(IsNull(rInv_CashAction.sTransactionDate))
				[ ] // rInv_CashAction.sTransactionDate = ""
			[+] // if(IsNull(rInv_CashAction.sPayee))
				[ ] // rInv_CashAction.sPayee = ""
			[+] // if(IsNull(rInv_CashAction.sAmount))
				[ ] // rInv_CashAction.sAmount = ""
			[+] // if(IsNull(rInv_CashAction.sMemo))
				[ ] // rInv_CashAction.sMemo = ""
			[+] // if(IsNull(rInv_CashAction.sCategory))
				[ ] // rInv_CashAction.sCategory = ""
			[+] // if(IsNull(rInv_CashAction.sChequeNumber))
				[ ] // rInv_CashAction.sChequeNumber = ""
			[ ] // 
			[ ] // 
			[ ] // //BrokerageAccount.SetActive()
			[ ] // QuickenMainWindow.ChildWin("{rInv_CashAction.sAccount}").SetActive()
			[ ] // 
			[ ] // // Check that Brokerage window is opened or not
			[+] // if(QuickenMainWindow.ChildWin("{rInv_CashAction.sAccount}").Exists(SHORT_SLEEP) == TRUE)
				[ ] // QuickenMainWindow.ChildWin("{rInv_CashAction.sAccount}").SetActive ()
				[ ] // QuickenMainWindow.ChildWin("{rInv_CashAction.sAccount}").CustomWin("Enter Transactions").Click()		// Click on Enter transaction button
				[ ] // sleep(SHORT_SLEEP)
				[ ] // 
				[ ] // wEnterTransaction.SetActive()
				[ ] // sleep(SHORT_SLEEP)
				[ ] // 
				[ ] // // Open Withdraw/Deposit transaction window
				[ ] // wEnterTransaction.EnterTransaction.SetFocus()
				[ ] // wEnterTransaction.EnterTransaction.Select(rInv_CashAction.sTransactionType)	// Select transaction type as per input provided
				[ ] // 
				[ ] // sleep(SHORT_SLEEP)
				[+] // switch(rInv_CashAction.sTransactionType)
					[+] // case ("Withdraw")
						[ ] // sWindowTitle = wEnterTransaction.GetCaption()	// get the caption after transaction type is selected
						[+] // if(trim(sWindowTitle) == trim(sWithdrawWindowTitle))
							[ ] // // Check Account Name selected
							[ ] // Agent.SetOption (OPT_VERIFY_ENABLED, FALSE)
							[ ] // sAccountName=wEnterTransaction.Account.GetSelText()
							[ ] // Agent.SetOption (OPT_VERIFY_ENABLED, TRUE)
							[ ] // // Verify that correct account is selected for the transaction
							[+] // if (sAccountName != rInv_CashAction.sAccount)
								[ ] // // If Account name is not correct report Fail
								[ ] // ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
								[ ] // iFunctionResult = FAIL
								[ ] // 
							[+] // else
								[ ] // // Enter transaction date
								[ ] // wEnterTransaction.TransactionDate.SetText(rInv_CashAction.sTransactionDate)
								[ ] // // Enter Payee
								[ ] // wEnterTransaction.Payee.SetText(rInv_CashAction.sPayee)
								[ ] // // Enter Amount
								[ ] // wEnterTransaction.Amount.SetText(rInv_CashAction.sAmount)
								[ ] // //Enter Category
								[ ] // wEnterTransaction.Category.SetText(rInv_CashAction.sCategory)
								[ ] // // Enter Memo
								[ ] // wEnterTransaction.Memo.SetText(rInv_CashAction.sMemo)
								[ ] // // Enter cheque no.
								[ ] // wEnterTransaction.ChequeNumber.SetText(rInv_CashAction.sChequeNumber)
								[ ] // 
								[ ] // // Click on Enter Done
								[ ] // wEnterTransaction.EnterDone.DoubleClick()
								[ ] // 
								[ ] // // Alert for creating new category
								[+] // if(NewCategoryPopup.Exists(SHORT_SLEEP))
									[ ] // NewCategoryPopup.SetActive()
									[ ] // NewCategoryPopup.Yes.Click()
									[+] // if(SetUpCategoryPopup.Exists(SHORT_SLEEP))
										[ ] // SetUpCategoryPopup.SetActive()
										[ ] // SetUpCategoryPopup.OK.Click()
										[+] // if(MessageBox.Exists(SHORT_SLEEP))				// for invalid category, error message is displayed in Creating new category
											[ ] // MessageBox.SetActive()
											[ ] // sErrorMsg = MessageBox.ErrorMsg.GetText()
											[ ] // ReportStatus("Validate Error Meassage", FAIL, "Transaction is not added and Error Message - '{sErrorMsg}' is observed")
											[ ] // MessageBox.OK.Click()
											[ ] // SetUpCategoryPopup.Close()
											[ ] // bErrorFlag = TRUE
										[ ] // 
								[ ] // 
								[ ] // // Alert if date format is wrong
								[+] // if(wEnterTransaction.AlertMessage.Exists(SHORT_SLEEP))
									[ ] // sErrorMsg = wEnterTransaction.AlertMessage.Message.GetText()
									[+] // if(sErrorMsg != sCategoryMsg)
										[ ] // bErrorFlag = TRUE
										[ ] // ReportStatus("Validate Error Message", FAIL, "Transaction is not added and Error Message -  {sErrorMsg} is displayed")
									[ ] // 
									[ ] // wEnterTransaction.AlertMessage.OK.Click()
								[ ] // 
								[+] // if(wEnterTransaction.Exists(SHORT_SLEEP))
									[ ] // wEnterTransaction.Close()
									[ ] // 
						[+] // else
							[ ] // bErrorFlag = TRUE
							[ ] // wEnterTransaction.Close()
							[ ] // ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sWithdrawWindowTitle}")
					[ ] // 
					[+] // case ("Deposit")
						[ ] // sWindowTitle = wEnterTransaction.getcaption()
						[+] // if(trim(sWindowTitle) == trim(sDepositWindowTitle))
							[ ] // 
							[ ] // // Check Account Name selected
							[ ] // Agent.SetOption (OPT_VERIFY_ENABLED, FALSE)
							[ ] // sAccountName=wEnterTransaction.Account.GetSelText()
							[ ] // Agent.SetOption (OPT_VERIFY_ENABLED, TRUE)
							[ ] // 
							[ ] // // Verify that correct account is selected for the transaction
							[+] // if (sAccountName != rInv_CashAction.sAccount)
								[ ] // // If Account name is not correct report Fail
								[ ] // ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
								[ ] // iFunctionResult = FAIL
								[ ] // 
							[+] // else
								[ ] // // Enter transaction date
								[ ] // wEnterTransaction.TransactionDate.SetText(rInv_CashAction.sTransactionDate)
								[ ] // // Enter Payee
								[ ] // wEnterTransaction.Payee.SetText(rInv_CashAction.sPayee)
								[ ] // // Enter Amount
								[ ] // wEnterTransaction.Amount.SetText(rInv_CashAction.sAmount)
								[ ] // //Enter Category
								[ ] // wEnterTransaction.Category.SetText(rInv_CashAction.sCategory)
								[ ] // // Enter Memo
								[ ] // wEnterTransaction.Memo.SetText(rInv_CashAction.sMemo)
								[ ] // 
								[ ] // // Click on Enter Done
								[ ] // wEnterTransaction.EnterDone.DoubleClick()
								[ ] // 
								[ ] // // Alert for creating new category
								[+] // if(NewCategoryPopup.Exists(SHORT_SLEEP))
									[ ] // NewCategoryPopup.SetActive()
									[ ] // NewCategoryPopup.Yes.Click()
									[+] // if(SetUpCategoryPopup.Exists(SHORT_SLEEP))
										[ ] // SetUpCategoryPopup.SetActive()
										[ ] // SetUpCategoryPopup.OK.Click()
										[+] // if(MessageBox.Exists(SHORT_SLEEP))				// for invalid category, error message is displayed in Creating new category
											[ ] // MessageBox.SetActive()
											[ ] // sErrorMsg = MessageBox.ErrorMsg.GetText()
											[ ] // ReportStatus("Validate Error Meassage", FAIL, "Transaction is not added and Error Message - '{sErrorMsg}' is observed")
											[ ] // MessageBox.OK.Click()
											[ ] // SetUpCategoryPopup.Close()
											[ ] // bErrorFlag = TRUE
										[ ] // 
								[ ] // 
								[ ] // // Alert if date format is wrong
								[+] // if(wEnterTransaction.AlertMessage.Exists(SHORT_SLEEP))
									[ ] // sErrorMsg = wEnterTransaction.AlertMessage.Message.GetText()
									[+] // if(sErrorMsg != sCategoryMsg)
										[ ] // bErrorFlag = TRUE
										[ ] // ReportStatus("Validate Error Message", FAIL, "Transaction is not added and Error Message -  {sErrorMsg} is displayed")
									[ ] // 
									[ ] // wEnterTransaction.AlertMessage.OK.Click()
								[ ] // 
								[+] // if(wEnterTransaction.Exists(SHORT_SLEEP))
									[ ] // wEnterTransaction.Close()
						[+] // else
							[ ] // bErrorFlag = TRUE
							[ ] // wEnterTransaction.Close()
							[ ] // ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sDepositWindowTitle}")
					[ ] // 
					[+] // default
						[ ] // bErrorFlag = TRUE
				[ ] // 
				[+] // if(bErrorFlag == TRUE)
					[ ] // iFunctionResult = FAIL
				[+] // else
					[ ] // ReportStatus("Validate Transaction", PASS, "{rInv_CashAction.sTransactionType} Transaction is added in {rInv_CashAction.sAccount} Account")
					[ ] // iFunctionResult = PASS
				[ ] // 
			[+] // else
				[ ] // ReportStatus("Brokerage Account Page Open", FAIL, "{rInv_CashAction.sAccount} Account is not invoked from AccountBar") 
				[ ] // iFunctionResult = FAIL
		[ ] // 
		[+] // except
			[+] // if (wEnterTransaction.Exists(SHORT_SLEEP))
				[ ] // wEnterTransaction.SetActive()
				[ ] // wEnterTransaction.Close()
				[ ] // 
			[ ] // ExceptLog()
			[ ] // // Return FAIL to the function
			[ ] // iFunctionResult = FAIL
			[ ] // 
		[ ] // return iFunctionResult
	[ ] // 
	[ ] // // ==========================================================
	[+] // // FUNCTION: AddTransactionGeneric()
		[ ] // //
		[ ] // // DESCRIPTION:		This function will add Transaction to different accounts.
		[ ] // // 
		[ ] // //
		[ ] // // PARAMETERS:		STRING 	sWindowType			MDI or Popup
		[ ] // //						STRING 	sDataFile				Data file name
		[ ] // //						STRING 	sWorkSheet			Worksheet name
		[ ] // //
		[ ] // // RETURNS:			None
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //  March 22, 2011		Mamta Jain created
	[ ] // // ==========================================================
	[+] // public INTEGER AddTransactionGeneric(STRING sWindowType, STRING sDataFile, STRING sWorkSheet)
		[ ] // 
		[+] // // Variable declaration
			[ ] // BOOLEAN bFlag,  bAccountFound
			[ ] // INTEGER iFunctionResult, iSelect, iCount, i, j, iRowCount
			[ ] // STRING sActual, sErrorMsg, sHandle, sAccountName, sSplitWorkSheet, sPreviousBalance, sCurrentEndingBalance, sNewBalance
			[ ] // LIST of STRING lsTransactionData
			[ ] // LIST of ANYTYPE lsExcelData, lList
			[ ] // 
			[ ] // sSplitWorkSheet = "Split_Data"
			[ ] // bAccountFound = FALSE
			[ ] // 
		[+] // do
			[+] // if(FileExists(sDataFile))
				[ ] // // Read data from excel sheet
				[ ] // lsExcelData=ReadExcelTable(sDataFile, sWorkSheet)
				[ ] // 
				[ ] // QuickenMainWindow.SetActive ()
				[ ] // 
				[+] // if(sWindowType == "MDI")
					[ ] // // For Premier and Deluxe SKU's, tag column is not selected. Include the tag column from Account Settings options.
					[+] // // if(SKU_TOBE_TESTED == "PREMIER" || SKU_TOBE_TESTED == "DELUXE")		// In R8 build, Tag column is by default selected
						[ ] // // BankingMDI.AccountActions.Click ()
						[ ] // // BankingMDI.AccountActions.TypeKeys(  Replicate (KEY_DN, 16)) 
						[ ] // // BankingMDI.AccountActions.TypeKeys(KEY_ENTER)
						[ ] // // MDICalloutHolder.SetActive ()
						[ ] // // MDICalloutHolder.CalloutPopup.Tag.Click (1, 12, 12)
						[ ] // // MDICalloutHolder.CalloutPopup.Done.Click (1, 29, 11)
				[ ] // 
				[+] // else if(sWindowType == "PopUp")
					[ ] // // For Premier and Deluxe SKU's, tag column is not selected. Include the tag column from Account Settings options.
					[+] // // if(SKU_TOBE_TESTED == "PREMIER" || SKU_TOBE_TESTED == "DELUXE")
						[ ] // // BankingPopUp.AccountActions.Click ()
						[ ] // // BankingPopUp.AccountActions.TypeKeys(  Replicate (KEY_DN, 16)) 
						[ ] // // BankingPopUp.AccountActions.TypeKeys(KEY_ENTER)
						[ ] // // PopUpCalloutHolder.SetActive ()
						[ ] // // PopUpCalloutHolder.CalloutPopup.Tag.Click (1, 12, 12)
						[ ] // // PopUpCalloutHolder.CalloutPopup.Done.Click (1, 29, 11)
					[ ] // 
				[ ] // 
				[+] // else
					[ ] // ReportStatus("Validate Window type", WARN, "{sWindowType} not found")
				[ ] // 
				[ ] // iCount = ListCount(lsExcelData)			// Get the row count
				[+] // for (i = 1; i<=iCount; i++)
					[ ] // 
					[ ] // bFlag = FALSE
					[ ] // bAccountFound = FALSE
					[ ] // 
					[ ] // // Fetch rows from the given sheet
					[ ] // lsTransactionData=lsExcelData[i]
					[+] // if(IsNULL(lsTransactionData[1]))
						[ ] // lsTransactionData[1] = ""
					[+] // if(IsNULL(lsTransactionData[2]))
						[ ] // lsTransactionData[2] = ""
					[+] // if(IsNULL(lsTransactionData[3]))
						[ ] // lsTransactionData[3] = ""
						[ ] // 
					[+] // if(IsNULL(lsTransactionData[4]))
						[ ] // lsTransactionData[4] = ""
					[+] // if( IsNULL(lsTransactionData[5]))
						[ ] // lsTransactionData[5] = ""
					[+] // if(IsNULL(lsTransactionData[6]))
						[ ] // lsTransactionData[6] = ""
					[+] // if(IsNULL(lsTransactionData[7]))
						[ ] // lsTransactionData[7] = ""
					[+] // if(IsNULL(lsTransactionData[8]))
						[ ] // lsTransactionData[8] = ""
					[+] // if(IsNULL(lsTransactionData[9]))
						[ ] // lsTransactionData[9] = ""
					[+] // if(IsNULL(lsTransactionData[10]))
						[ ] // lsTransactionData[10] = ""
					[+] // if(IsNULL(lsTransactionData[11]))
						[ ] // lsTransactionData[11] = ""
					[+] // if(IsNULL(lsTransactionData[12]))
						[ ] // lsTransactionData[12] = ""
					[ ] // 
					[+] // if(lsTransactionData[1] == ACCOUNT_BANKING)		// if Account type is Banking
						[+] // if( QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer1.ListBox.Exists(SHORT_SLEEP) == TRUE)
							[ ] // iRowCount = QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer1.ListBox.GetItemCount()		// Get no. of accounts
							[+] // for(j = 0; j<iRowCount; j++)
								[ ] // AccountBarSelect(ACCOUNT_BANKING, j)			// Select Account from account bar
								[ ] // sAccountName = QuickenWindow.GetCaption()
								[ ] // bMatch = MatchStr("*{lsTransactionData[2]}*", sAccountName)
								[+] // if(bMatch == TRUE)
									[ ] // bAccountFound = TRUE
									[ ] // break
								[+] // else
									[ ] // continue
						[ ] // 
						[+] // else
							[ ] // ReportStatus("Validate Account Type", FAIL, "Account Type- {lsTransactionData[1]} not found")
						[ ] // 
					[ ] // 
					[+] // else if(lsTransactionData[1] == ACCOUNT_RENTALPROPERTY)		// if account type is Rental property
						[+] // if( QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer2.ListBox.Exists(SHORT_SLEEP) == TRUE)
							[ ] // iRowCount = QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer2.ListBox.GetItemCount()		// get no. of accounts
							[+] // for(j = 0; j<iRowCount; j++)
								[ ] // AccountBarSelect(ACCOUNT_RENTALPROPERTY, j)			// Select Account from account bar
								[ ] // sAccountName = QuickenWindow.GetCaption()
								[ ] // bMatch = MatchStr("*{lsTransactionData[2]}*", sAccountName)
								[+] // if(bMatch == TRUE)
									[ ] // bAccountFound = TRUE
									[ ] // break
								[+] // else
									[ ] // continue
						[ ] // 
						[+] // else
							[ ] // ReportStatus("Validate Account Type", FAIL, "Account Type- {lsTransactionData[1]} not found")
					[ ] // 
					[+] // else if(lsTransactionData[1] == ACCOUNT_PROPERTYDEBT)		// if account type is Property and debt
						[+] // if(QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer4.ListBox.Exists(SHORT_SLEEP) == TRUE)
							[ ] // iRowCount = QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer5.ListBox.GetItemCount()		// get no. of accounts
							[+] // for(j = 0; j<iRowCount; j++)
								[ ] // AccountBarSelect(ACCOUNT_PROPERTYDEBT, j)			// Select Account from account bar
								[ ] // sAccountName = QuickenWindow.GetCaption()
								[ ] // bMatch = MatchStr("*{lsTransactionData[2]}*", sAccountName)
								[+] // if(bMatch == TRUE)
									[ ] // bAccountFound = TRUE
									[ ] // break
								[+] // else
									[ ] // continue
						[ ] // 
						[+] // else
							[ ] // ReportStatus("Validate Account Type", FAIL, "Account Type- {lsTransactionData[1]} not found")
					[ ] // 
					[+] // else
						[ ] // ReportStatus("Validate Account Type", FAIL, "Account Type- {lsTransactionData[1]} not found")
					[ ] // 
					[+] // if(bAccountFound == TRUE)		// if account found then add transaction
						[ ] // 
						[+] // switch(sWindowType)
							[+] // case("MDI")
								[ ] // BankingMDI.VerifyEnabled(TRUE, 20)
								[ ] // BankingMDI.SetActive ()
								[ ] // BankingMDI.TypeKeys("<Ctrl-n>")			// Go to the new line
								[ ] // sPreviousBalance = BankingMDI.StaticText1.Balance.GetText()	// take Ending Balance before adding Transaction
								[ ] // 
								[+] // if(MessageBox.Exists(SHORT_SLEEP))			// if any trnsaction is already present, then on adding new transaction it seeks for save the old transaction.
									[ ] // MessageBox.SetActive()
									[ ] // sErrorMsg = MessageBox.ErrorMsg.GetText()
									[ ] // ReportStatus("Validate Error Meassage", WARN, "Error Message - '{sErrorMsg}' is observed")
									[ ] // MessageBox.No.Click()
									[ ] // 
								[ ] // 
								[+] // if (lsTransactionData[4] != "")
									[ ] // BankingMDI.TxList.TypeKeys (lsTransactionData[4])    // enter date
								[ ] // BankingMDI.TxList.TypeKeys(KEY_TAB)
								[+] // if(MessageBox.Exists(SHORT_SLEEP))				// for invalid date, error message is displayed.
									[ ] // bFlag = TRUE
									[ ] // break
								[ ] // 
								[+] // if(lsTransactionData[3] == "Yes")
									[+] // if(lsTransactionData[5] != "")				// enter cheque no.
										[ ] // BankingMDI.TxList.TypeKeys (lsTransactionData[5])
									[ ] // BankingMDI.TxList.TypeKeys(KEY_TAB)
								[ ] // 
								[+] // if(lsTransactionData[6] != "")				// enter payee name
									[ ] // BankingMDI.TxList.TypeKeys (lsTransactionData[6])
								[ ] // BankingMDI.TxList.TypeKeys(KEY_TAB)		
								[ ] // 
								[+] // if(lsTransactionData[7] != "")							// enter memo
									[ ] // BankingMDI.TxList.TypeKeys (lsTransactionData[7])
								[ ] // BankingMDI.TxList.TypeKeys(KEY_TAB)			 
								[ ] // 
								[+] // if(MessageBox.Exists(SHORT_SLEEP))				// for invalid category error message is disaplyed
									[ ] // bFlag = TRUE
									[ ] // break
								[+] // if(NewCategory.Exists(SHORT_SLEEP))				// for new category, prompt for adding new category
									[ ] // NewCategory.SetActive()
									[ ] // NewCategory.Yes.Click()
									[ ] // 
									[ ] // 
									[+] // if(SetUpCategoryMDI.Exists(SHORT_SLEEP))
										[ ] // SetUpCategoryMDI.SetActive()
										[ ] // SetUpCategoryMDI.OK.Click()
										[+] // if(MessageBox.Exists(SHORT_SLEEP))				// for invalid category, error message is displayed in Creating new category
											[ ] // MessageBox.SetActive()
											[ ] // sErrorMsg = MessageBox.ErrorMsg.GetText()
											[ ] // ReportStatus("Validate Error Meassage", WARN, "Error Message - '{sErrorMsg}' is observed")
											[ ] // MessageBox.OK.Click()
											[ ] // SetUpCategoryMDI.Close()
											[ ] // break
								[ ] // 
								[+] // if(lsTransactionData[8] != "")							// enter category
									[ ] // BankingMDI.TxList.TypeKeys (lsTransactionData[8])
								[ ] // BankingMDI.TxList.TypeKeys(KEY_TAB)
								[ ] // 
								[+] // if(lsTransactionData[9] != "")					// enter tag
									[ ] // BankingMDI.TxList.TypeKeys (lsTransactionData[9])
								[ ] // BankingMDI.TxList.TypeKeys(KEY_TAB)
								[ ] // //If the Tag does not exists in the list of tags then the Quicken asks to add the new tag and after clicking OK
								[ ] // // on the Add New Tag pop up, the focus is set to Payee column. So added 4 tabs to set focus to transaction.
								[+] // if NewTagMDI.OK.Exists(SHORT_SLEEP)
									[ ] // NewTagMDI.OK.click()
									[ ] // BankingMDI.TxList.TypeKeys(KEY_TAB)
									[ ] // BankingMDI.TxList.TypeKeys(KEY_TAB)
									[ ] // BankingMDI.TxList.TypeKeys(KEY_TAB)
									[ ] // BankingMDI.TxList.TypeKeys(KEY_TAB)
								[ ] // 
								[+] // if(lsTransactionData[11] != "")
									[+] // if(lsTransactionData[11] == "Deposit" || lsTransactionData[11] == "Receive" || lsTransactionData[11] == "Pymt")
										[ ] // BankingMDI.TxList.TypeKeys(KEY_TAB)
										[ ] // sNewBalance = Str((Val(lsTransactionData[10]) + Val(sPreviousBalance)), NULL, 2)		// Calculate ending balance for Deposit amount
									[+] // else if(lsTransactionData[11] == "Payment" || lsTransactionData[11] == "Spend" || lsTransactionData[11] == "Charge")
										[ ] // sNewBalance = Str((Val(sPreviousBalance) - Val(lsTransactionData[10])), NULL, 2)		// Calculate ending balance for Payment amount
									[ ] // 
									[+] // if (lsTransactionData[10] != "")				// enter amount
										[ ] // BankingMDI.TxList.TypeKeys (lsTransactionData[10])
									[ ] // 
									[ ] // sleep(1)
									[ ] // 
									[+] // if(lsTransactionData[12] == "Yes")
										[ ] // SplitTransaction(sWindowType, sDataFile, sSplitWorkSheet, Str(i))
									[ ] // 
									[ ] // BankingMDI.TxList.TxToolbar.Save.Click()
									[ ] // sleep(1)
									[+] // if(QuickenForWindowsMDI.Exists(2))			// if date is very old or for later date, message is displayed
										[ ] // QuickenForWindowsMDI.SetActive ()
										[ ] // sErrorMsg = QuickenForWindowsMDI.Message.GetText()
										[ ] // ReportStatus("Validate Error Meassage", WARN, "Error Message - '{sErrorMsg}' is observed")
										[ ] // QuickenForWindowsMDI.Yes.Click ()
										[ ] // break
									[+] // if(MessageBox.Exists(SHORT_SLEEP))			// for invalid data, error message is displayed on saving
										[ ] // bFlag = TRUE
										[ ] // break
									[ ] // 
									[ ] // ReportStatus("Validate Transaction", PASS, "Transaction is added in Account - {lsTransactionData[2]}.")
									[ ] // 
									[ ] // // Verify Ending Balance
									[ ] // sCurrentEndingBalance = BankingMDI.StaticText1.Balance.GetText()
									[+] // if(sCurrentEndingBalance == sNewBalance)
										[ ] // ReportStatus("Validate Ending Balance", PASS, "Ending Balance - {sCurrentEndingBalance} is correct")
										[ ] // iFunctionResult = PASS
									[ ] // 
									[+] // else
										[ ] // ReportStatus("Validate Ending Balance", FAIL, "Current Ending Balance displayed is - {sCurrentEndingBalance} and after adding transaction Calculated Ending Balance is - {sNewBalance}")
										[ ] // iFunctionResult = FAIL
										[ ] // 
								[+] // else
									[ ] // ReportStatus("Validate Transaction", FAIL, "Transaction is not added as Transaction type is Null")
							[ ] // 
							[+] // case("PopUp")
								[ ] // 
								[ ] // BankingPopUp.VerifyEnabled(TRUE, 20)
								[ ] // BankingPopUp.Maximize()			// Maximize the Checking account window as Popup Register is on
								[ ] // BankingPopUp.TypeKeys("<Ctrl-n>")			// go to new line
								[ ] // sPreviousBalance = BankingPopUp.EndingBalance.EndingBalance.GetText()	// take Ending Balance before adding Transaction
								[ ] // 
								[+] // if(MessageBox.Exists(SHORT_SLEEP))			// if any trnsaction is already present, then on adding new transaction it saks for save the old transaction.
									[ ] // MessageBox.SetActive()
									[ ] // sErrorMsg = MessageBox.ErrorMsg.GetText()
									[ ] // ReportStatus("Validate Error Meassage", WARN, "Error Message - '{sErrorMsg}' is observed")
									[ ] // MessageBox.No.Click()
								[ ] // 
								[+] // if (lsTransactionData[4] != "")
									[ ] // BankingPopUp.TxList.TypeKeys (lsTransactionData[4])		// enter date
								[ ] // BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[+] // if(MessageBox.Exists(SHORT_SLEEP))				// for invalid date, error message is displayed.
									[ ] // bFlag = TRUE
									[ ] // break
								[ ] // 
								[+] // if(lsTransactionData[3] == "Yes")
									[+] // if(lsTransactionData[5] != "")			
										[ ] // BankingPopUp.TxList.TypeKeys (lsTransactionData[5])		// enter cheque no.
										[ ] // BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] // 
								[+] // if(lsTransactionData[6] != "")
									[ ] // BankingPopUp.TxList.TypeKeys (lsTransactionData[6])		// ente payee name
								[ ] // BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[+] // if(lsTransactionData[7] != "")
									[ ] // BankingPopUp.TxList.TypeKeys (lsTransactionData[7])		// enter memo
								[ ] // BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[+] // if(lsTransactionData[8] != "")
									[ ] // BankingPopUp.TxList.TypeKeys (lsTransactionData[8])		// enter category
								[ ] // BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] // 
								[+] // if(MessageBox.Exists(SHORT_SLEEP))		// for invalid category error message is disaplyed
									[ ] // bFlag = TRUE
									[ ] // break
								[+] // if(NewCategoryPopup.Exists(SHORT_SLEEP))		// for new category, prompt for adding new category
									[ ] // NewCategoryPopup.SetActive()
									[ ] // NewCategoryPopup.Yes.Click()
									[+] // if(SetUpCategoryPopup.Exists(SHORT_SLEEP))
										[ ] // SetUpCategoryPopup.SetActive()
										[ ] // SetUpCategoryPopup.OK.Click()
										[+] // if(MessageBox.Exists(SHORT_SLEEP))		// for invalid category, error message is displayed in Creating new category
											[ ] // MessageBox.SetActive()
											[ ] // sErrorMsg = MessageBox.ErrorMsg.GetText()
											[ ] // ReportStatus("Validate Error Meassage", WARN, "Error Message - '{sErrorMsg}' is observed")
											[ ] // MessageBox.OK.Click()
											[ ] // SetUpCategoryPopup.Close()
											[ ] // break
										[ ] // 
								[ ] // 
								[+] // if(lsTransactionData[9] != "")
									[ ] // BankingPopUp.TxList.TypeKeys (lsTransactionData[9])			// enter tag
								[ ] // BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] // 
								[+] // if(MessageBox.Exists(SHORT_SLEEP))		// for invalid tag, error message is displayed
									[ ] // bFlag = TRUE
									[ ] // break
								[+] // if(NewTag.Exists(SHORT_SLEEP))			// for new tag, prompts for adding new tag
									[ ] // NewTag.SetActive()
									[ ] // NewTag.OKButton.Click()
								[ ] // 
								[+] // if(lsTransactionData[11] != "")
									[+] // if(lsTransactionData[11] == "Deposit" || lsTransactionData[11] == "Receive" || lsTransactionData[11] == "Pymt")
										[ ] // BankingPopUp.TxList.TypeKeys(KEY_TAB)
										[ ] // sNewBalance = Str((Val(lsTransactionData[10]) + Val(sPreviousBalance)), NULL, 2)		// Calculate ending balance for Deposit amount
									[+] // else if(lsTransactionData[11] == "Payment" || lsTransactionData[11] == "Spend" || lsTransactionData[11] == "Charge")
										[ ] // sNewBalance = Str((Val(sPreviousBalance) - Val(lsTransactionData[10])), NULL, 2)		// Calculate ending balance for Payment amount
									[ ] // 
									[+] // if (lsTransactionData[10] != "")
										[ ] // BankingPopUp.TxList.TypeKeys (lsTransactionData[10])		// enter amount
									[ ] // 
									[ ] // sleep(SHORT_SLEEP)
									[ ] // 
									[+] // if(lsTransactionData[12] == "Yes")
										[ ] // SplitTransaction(sWindowType, sDataFile, sSplitWorkSheet, Str(i))
									[ ] // 
									[ ] // BankingPopUp.TxList.TxToolbar.Save.Click()
									[+] // if(QuickenForWindowsPopUp.Exists(SHORT_SLEEP))		// if date is very old or for later date, message is displayed
										[ ] // QuickenForWindowsPopUp.SetActive ()
										[ ] // sErrorMsg = QuickenForWindowsPopUp.Message.GetText()
										[ ] // ReportStatus("Validate Error Meassage", WARN, "Error Message - '{sErrorMsg}' is observed")
										[ ] // QuickenForWindowsPopUp.Yes.Click ()
										[ ] // break
									[+] // if(MessageBox.Exists(SHORT_SLEEP))					// for invalid data, error message is displayed on saving
										[ ] // bFlag = TRUE
										[ ] // break
									[ ] // 
									[ ] // ReportStatus("Validate Transaction", PASS, "Transaction is added in Account - {lsTransactionData[2]}.")
									[ ] // 
									[ ] // // Verify Ending Balance
									[ ] // sCurrentEndingBalance = BankingPopUp.EndingBalance.EndingBalance.GetText()
									[+] // if(sCurrentEndingBalance == sNewBalance)
										[ ] // ReportStatus("Validate Ending Balance", PASS, "Ending Balance is correct")
										[ ] // iFunctionResult = PASS
									[ ] // 
									[+] // else
										[ ] // ReportStatus("Validate Ending Balance", FAIL, "Current Ending Balance displayed is - {sCurrentEndingBalance} and after adding transaction Calculated Ending Balance is - {sNewBalance}")
										[ ] // iFunctionResult = FAIL
									[ ] // 
								[+] // else
									[ ] // ReportStatus("Validate Transaction", FAIL, "Transaction is not added as Transaction type is Null")
								[ ] // 
								[ ] // BankingPopUp.Close()
						[ ] // 
						[+] // if(bFlag == TRUE)					// if any error message is displayed, then flag will be set to TRUE & below code will be executed
							[+] // if(MessageBox.Exists(SHORT_SLEEP))
								[ ] // MessageBox.SetActive ()
								[ ] // sErrorMsg = MessageBox.ErrorMsg.GetText()
								[ ] // ReportStatus("Validate Error Meassage", WARN, "Error Message - '{sErrorMsg}' is observed")
								[ ] // MessageBox.OK1.Click ()
						[+] // else								// if no error occurs, continue with iteration
							[ ] // 
					[ ] // 
					[+] // else
						[ ] // ReportStatus("Validate Account", FAIL, "Account - {lsTransactionData[2]} not found")
						[ ] // iFunctionResult = FAIL
						[ ] // 
				[ ] // 
				[+] // if(BankingPopUp.Exists(SHORT_SLEEP))			// if in between any error occurs, pop up window needs to be closed
					[ ] // BankingPopUp.Close()
					[+] // if(MessageBox.Exists(SHORT_SLEEP))
						[ ] // MessageBox.SetActive()
						[ ] // MessageBox.No.Click()
					[ ] // 
				[+] // if(iFunctionResult != PASS && iFunctionResult != FAIL)
					[ ] // iFunctionResult = FAIL
			[ ] // 
			[+] // else
				[ ] // ReportStatus("Validate Data file", FAIL, "{sDataFile} Data file doesn't exists.")
			[ ] // 
		[+] // except 
			[+] // if(BankingPopUp.Exists(SHORT_SLEEP))
				[ ] // BankingPopUp.Close()
				[ ] // 
			[ ] // iFunctionResult = FAIL
		[ ] // return iFunctionResult
		[ ] // 
	[ ] // // ==========================================================
	[+] // // FUNCTION: SplitTransaction()
		[ ] // //
		[ ] // // DESCRIPTION:		This function will add Transaction to different accounts.
		[ ] // // 
		[ ] // //
		[ ] // // PARAMETERS:		STRING 	sWindowType			MDI or Popup
		[ ] // //						STRING 	sDataFile				Data file name
		[ ] // //						STRING 	sWorkSheet			Worksheet name
		[ ] // //						STRING	sRowNo				Refers to the row no. of data file which is associated with Split data
		[ ] // //
		[ ] // // RETURNS:			PASS		If transaction is splitted successfully
		[ ] // //						FAIL		If any error occurs
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //  May 2, 2011		Mamta Jain created
	[ ] // // ==========================================================
	[+] // public INTEGER SplitTransaction(STRING sWindowType, STRING sDataFile, STRING sWorkSheet, STRING sRow)
		[ ] // INTEGER i, iFunctionResult
		[ ] // LIST OF STRING lsSplitData
		[ ] // LIST OF ANYTYPE lsExcelData
		[+] // do
			[+] // if(FileExists(sDataFile))
				[ ] // lsExcelData = ReadExcelTable(sDataFile, sWorkSheet)
				[+] // if(sWindowType == "MDI")
					[ ] // BankingMDI.SetActive ()
					[ ] // BankingMDI.TxList.TxToolbar.SplitButton.Click (1, 6, 10)		// click on "More Actions button"
					[ ] // BankingMDI.TxList.TxToolbar.SplitButton.TypeKeys(Replicate(KEY_DN, 3))		// Select split option
					[ ] // BankingMDI.TxList.TxToolbar.SplitButton.TypeKeys(KEY_ENTER)
					[+] // if(SplitTransaction.Exists(SHORT_SLEEP))
						[ ] // SplitTransaction.SetActive()
						[+] // for(i = 1; i<= ListCount(lsExcelData); i++)
							[ ] // lsSplitData = lsExcelData[i]
							[+] // if(lsSplitData[1] == sRow)
								[ ] // SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField1.SetText (lsSplitData[2])		// Enter Category
								[ ] // SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField1.TypeKeys (KEY_TAB)
								[ ] // SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField11.SetText (lsSplitData[3])			// Enter Tag
								[ ] // SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField11.TypeKeys (KEY_TAB)
								[ ] // SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField12.SetText (lsSplitData[4])			// Enter Memo
								[ ] // SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField12.TypeKeys (KEY_TAB)
								[ ] // SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField13.TypeKeys (KEY_TAB)
								[ ] // SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField14.TypeKeys (lsSplitData[5])			// Enter amount
								[ ] // SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TypeKeys(KEY_TAB)
							[ ] // 
							[+] // else
								[ ] // continue
						[ ] // iFunctionResult = PASS
						[ ] // SplitTransaction.OK.Click()
					[+] // else
						[ ] // ReportStatus("Validate Split Window", FAIL, "Split window is not available")
				[ ] // 
				[+] // if(sWindowType == "PopUp")
					[ ] // BankingPopUp.SetActive()
					[ ] // BankingPopUp.Maximize()
					[ ] // BankingPopUp.TxList.TxToolbar.SplitButton.Click()
					[ ] // BankingPopUp.TxList.TxToolbar.SplitButton.TypeKeys(Replicate(KEY_DN, 3))
					[ ] // BankingPopUp.TxList.TxToolbar.SplitButton.TypeKeys(KEY_ENTER)
					[+] // if(SplitTransactionPopUp.Exists(SHORT_SLEEP))
						[ ] // SplitTransactionPopUp.SetActive()
						[+] // for(i = 1; i<= ListCount(lsExcelData); i++)
							[ ] // lsSplitData = lsExcelData[i]
							[+] // if(lsSplitData[1] == sRow)
								[ ] // SplitTransactionPopUp.EnterMultipleCategoriesToI2.ListBox1.TextField1.SetText (lsSplitData[2])		// Enter Category
								[ ] // SplitTransactionPopUp.EnterMultipleCategoriesToI2.ListBox1.TextField1.TypeKeys (KEY_TAB)
								[ ] // SplitTransactionPopUp.EnterMultipleCategoriesToI2.ListBox1.TextField11.SetText (lsSplitData[3])			// Enter Tag
								[ ] // SplitTransactionPopUp.EnterMultipleCategoriesToI2.ListBox1.TextField11.TypeKeys (KEY_TAB)
								[ ] // SplitTransactionPopUp.EnterMultipleCategoriesToI2.ListBox1.TextField12.SetText (lsSplitData[4])			// Enter Memo
								[ ] // SplitTransactionPopUp.EnterMultipleCategoriesToI2.ListBox1.TextField12.TypeKeys (KEY_TAB)
								[ ] // SplitTransactionPopUp.EnterMultipleCategoriesToI2.ListBox1.TextField13.TypeKeys (KEY_TAB)
								[ ] // SplitTransactionPopUp.EnterMultipleCategoriesToI2.ListBox1.TextField14.TypeKeys (lsSplitData[5])			// Enter amount
								[ ] // SplitTransactionPopUp.EnterMultipleCategoriesToI2.ListBox1.TypeKeys(KEY_TAB)
							[ ] // 
							[+] // else
								[ ] // continue
						[ ] // iFunctionResult = PASS
						[ ] // SplitTransactionPopUp.OK.Click()
					[+] // else
						[ ] // ReportStatus("Validate Split Window", FAIL, "Split window is not available")
					[ ] // 
			[ ] // 
			[+] // else
				[ ] // ReportStatus("Validate Data file", FAIL, "{sDataFile} Data file doesn't exists.")
		[ ] // 
		[+] // except
			[ ] // iFunctionResult = FAIL
		[ ] // 
		[ ] // return iFunctionResult
	[ ] // 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: Inv_AddStockSplitTransaction()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will Add Stock Split Transaction in Investment Account as per input parameter
		[ ] //
		[ ] // PARAMETERS:		 Record	Inv_StockSplitRecord	rInv_StockSplitRecord	
		[ ] //						(TransactionMode,TransactionDate,	Account,Security,NewShares,OldShares,PriceAfterSplit,Memo)
		[ ] //                                       ()
		[ ] //						
		[ ] // RETURNS:			INTEGER	PASS		 if Stock Split Transaction addded successfully to investment account
		[ ] //									FAIL  		 if any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //   	Apr 27, 2011  Udita Dube  Created
	[ ] // ==========================================================
	[+] public INTEGER Inv_AddStockSplitTransaction(Inv_StockSplitRecord rInv_StockSplitRecord)
		[+] // Variable Declaration
			[ ] INTEGER iFunctionResult
			[ ] STRING sWindowTitle,sStockSplitWindowTitle,sAccountName
			[ ] sStockSplitWindowTitle="Stock Split"
			[ ] 
		[+] do
			[ ] 
			[+] if(IsNull(rInv_StockSplitRecord.sMemo))
				[ ] rInv_StockSplitRecord.sMemo =""
			[+] if(IsNull(rInv_StockSplitRecord.sPriceAfterSplit))
				[ ] rInv_StockSplitRecord.sPriceAfterSplit=""
			[ ] 
			[ ] QuickenWindow.SetActive()
			[ ] MDIClient.BrokerageAccount.EnterTransactions.Click()
			[ ] sleep(SHORT_SLEEP)
			[ ] 
			[ ] //Income Transaction
			[ ] wEnterTransaction.SetActive()
			[ ] sleep(SHORT_SLEEP)
			[ ] 
			[ ] // Open Buy transaction window
			[ ] wEnterTransaction.EnterTransaction.Select(sStockSplitWindowTitle)
			[ ] 
			[ ] 
			[ ] sWindowTitle=wEnterTransaction.GetCaption()
			[+] if(trim(sWindowTitle)==trim(sStockSplitWindowTitle))
				[ ] 
				[ ] // Check Account Name selected
				[ ] //sAccountName=wEnterTransaction.Account.GetText()
				[ ] sAccountName=wEnterTransaction.Account.GetSelectedItem()
				[ ] 
				[ ] // Verify that correct account is selected for the transaction
				[+] if (sAccountName!=rInv_StockSplitRecord.sAccount)
					[ ] // If Account name is not correct report Fail
					[ ] ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
					[ ] iFunctionResult = FAIL
					[ ] 
				[+] else
					[ ] // Enter transaction date
					[ ] wEnterTransaction.TransactionDate.SetText(rInv_StockSplitRecord.sTransactionDate)
					[ ] 
					[ ] // Enter Security Name
					[ ] wEnterTransaction.SecurityName.SetText(rInv_StockSplitRecord.sSecurity)
					[ ] 
					[ ] // Enter New Shares
					[ ] wEnterTransaction.NewShares.SetText(rInv_StockSplitRecord.sNewShares)
					[ ] // Enter Old Shares
					[ ] wEnterTransaction.OldShares.SetText(rInv_StockSplitRecord.sOldShares)
					[ ] // Enter Price After Split.
					[ ] wEnterTransaction.PriceAfterSplit.SetText(rInv_StockSplitRecord.sPriceAfterSplit)
					[ ] // Enter Memo
					[ ] wEnterTransaction.Memo.SetText(rInv_StockSplitRecord.sMemo)
					[ ] // Click on Enter Done
					[ ] wEnterTransaction.EnterDone.Click()
					[ ] // Check if Add security window is present
					[+] if(AddSecurityToQuicken2.Exists(10))
						[ ] AddSecurityToQuicken2.SetActive()
						[+] if (AddSecurityToQuicken2.SecurityListBox.Exists(10))
							[ ] AddSecurityToQuicken2.SecurityListBox.Select(1)
							[+] if (AddSecurityToQuicken2.NextButton.Exists(5))
								[ ] AddSecurityToQuicken2.NextButton.Click()
								[ ] sleep(SHORT_SLEEP)
							[ ] 
						[ ] 
						[ ] 
						[ ] 
						[ ] 
						[ ] 
						[ ] sleep(SHORT_SLEEP)
						[ ] 
						[ ] // This code is written to handle Connection error
						[+] if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
							[+] if(AddSecurityToQuicken.SelectTickerSymbol.Exists(SHORT_SLEEP))
								[ ] AddSecurityToQuicken.SelectTickerSymbol.Select("Add manually")
								[ ] AddSecurityToQuicken.Next.Click()
							[ ] 
						[ ] //Click on Done
						[+] if (AddSecurityToQuicken.Next.Exists(5))
							[ ] AddSecurityToQuicken.Next.Click()
						[ ] sleep(2)
						[ ] 
						[ ] AddSecurityToQuicken.Done.DoubleClick()
					[+] if(AlertMessage.Yes.Exists(3))
						[ ] AlertMessage.SetActive()
						[ ] AlertMessage.Yes.Click()
						[ ] WaitForState(AlertMessage , FALSE,5)
					[ ] 
					[ ] // Return Pass to the function
					[ ] iFunctionResult = PASS
			[+] else
				[ ] iFunctionResult = FAIL
				[ ] wEnterTransaction.Close()
				[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sStockSplitWindowTitle}")
				[ ] return iFunctionResult
				[ ] 
			[ ] 
			[ ] 
			[ ] 
			[+] // else
				[ ] // ReportStatus("Brokerage Account Page Open", FAIL, "Brokerage Account is not invoked from AccountBar") 
				[ ] // iFunctionResult = FAIL
			[ ] 
			[ ] 
		[+] except
			[+] // if (wEnterTransaction.Exists(SHORT_SLEEP))
				[ ] // wEnterTransaction.SetActive()
				[ ] // wEnterTransaction.close()
				[ ] // 
			[ ] ExceptLog()
			[ ] // Return FAIL to the function
			[ ] iFunctionResult = FAIL
			[ ] 
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: AddStockDividend()
		[ ] //
		[ ] // DESCRIPTION:	This function will add Stock dividend transaction to a brokerage account
		[ ] // 
		[ ] //
		[ ] // PARAMETERS IN:		STRING 	sSecurityName		 		Ticker Symbol as Security Name
		[ ] //							STRING       sNewSharesIssued		      Number of new shares
		[ ] //
		[ ] // RETURNS:				INTEGER		PASS  = If transaction for Brokerage account is created successfully
		[ ] //											FAIL   = if any error occurs while adding transaction
		[ ] //
		[ ] // REVISION HISTORY:	7/8/2014   Created By	Dean Paes
	[ ] // ==========================================================
	[+] public INTEGER AddStockDividend(STRING sSecurityName,STRING sNewSharesIssued,STRING sTransactionDate optional)
		[ ] 
		[ ] 
		[+] //  Variable declaration
			[ ] STRING sActualWindowTitle
			[ ] STRING sWindowTitle="Div - Stock Dividend (non-cash)"
			[ ] 
			[ ] 
		[ ] 
		[+] do
			[+] if(QuickenWindow.Exists(SHORT_SLEEP))
				[ ] QuickenWindow.SetActive ()
				[ ] BrokerageAccount.EnterTransactions.Click()
				[ ] 
				[ ] 
				[ ] 
				[ ] wEnterTransaction.SetActive()
				[ ] 
				[ ] wEnterTransaction.EnterTransaction.SetFocus()
				[ ] wEnterTransaction.EnterTransaction.Select(sWindowTitle)
				[ ] 
				[ ] sActualWindowTitle = wEnterTransaction.GetCaption()
				[+] if(trim(sWindowTitle)==trim(sActualWindowTitle))
					[ ] 
					[ ] // Enter transaction date
					[+] if(sTransactionDate!=NULL)
						[ ] wEnterTransaction.TransactionDate.SetText(sTransactionDate)
						[ ] 
						[ ] 
					[ ] 
					[ ] // Enter Security Name
					[ ] wEnterTransaction.SecurityName.SetText(sSecurityName)
					[ ] 
					[ ] // Enter number of shares
					[ ] wEnterTransaction.NewSharesIssued.SetText(sNewSharesIssued)
					[ ] 
					[ ] // Click on Enter Done
					[ ] wEnterTransaction.EnterDone.Click()
					[ ] 
					[ ] // Check if Add security window is present
					[+] if(AddSecurityToQuicken2.Exists(10))
						[ ] AddSecurityToQuicken2.SetActive()
						[+] if (AddSecurityToQuicken2.SecurityListBox.Exists(10))
							[ ] AddSecurityToQuicken2.SecurityListBox.Select(1)
							[+] if (AddSecurityToQuicken2.NextButton.Exists(5))
								[ ] AddSecurityToQuicken2.NextButton.Click()
								[ ] sleep(SHORT_SLEEP)
							[ ] 
						[ ] 
						[ ] 
						[ ] 
						[ ] 
						[ ] 
						[ ] sleep(SHORT_SLEEP)
						[ ] 
						[ ] // This code is written to handle Connection error
						[+] if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
							[+] if(AddSecurityToQuicken.SelectTickerSymbol.Exists(SHORT_SLEEP))
								[ ] AddSecurityToQuicken.SelectTickerSymbol.Select("Add manually")
								[ ] AddSecurityToQuicken.Next.Click()
							[ ] 
						[ ] //Click on Done
						[+] if (AddSecurityToQuicken.Next.Exists(5))
							[ ] AddSecurityToQuicken.Next.Click()
						[ ] sleep(2)
						[ ] 
						[ ] AddSecurityToQuicken.Done.DoubleClick()
						[ ] 
						[ ] // 2015-09-30 KalyanG: if the date entered is a year or more
						[+] if(AlertMessage.Yes.Exists(3))
							[ ] AlertMessage.SetActive()
							[ ] AlertMessage.Yes.Click()
							[ ] WaitForState(AlertMessage , FALSE,5)
						[ ] 
					[ ] 
					[ ] iFunctionResult = PASS
					[ ] 
					[ ] 
				[+] else
					[ ] iFunctionResult = FAIL
					[ ] wEnterTransaction.Close()
					[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sActualWindowTitle} is not matching with Expected Window - {sWindowTitle}")
					[ ] 
				[ ] 
				[ ] 
				[ ] 
				[ ] 
				[ ] 
			[+] else
				[ ] ReportStatus("Brokerage Account Page Open", FAIL, " Account is not invoked from AccountBar") 
				[ ] iFunctionResult = FAIL
				[ ] 
				[ ] 
		[+] except
			[+] if (wEnterTransaction.Exists(SHORT_SLEEP))
				[ ] wEnterTransaction.SetActive()
				[ ] wEnterTransaction.close()
				[ ] iFunctionResult = FAIL
			[ ] ExceptData()
			[ ] // Return FAIL to the function
			[ ] iFunctionResult = FAIL
			[ ] 
		[ ] return iFunctionResult
		[ ] 
		[ ] 
		[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: Inv_MiscExpTransaction()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will Add Miscellaneous Expense Transaction in Investment Account as per input parameter
		[ ] //
		[ ] // PARAMETERS:		 Record	Inv_StockSplitRecord	rInv_StockSplitRecord	
		[ ] //						(TransactionMode,TransactionDate,	Account,Security,NewShares,OldShares,PriceAfterSplit,Memo)
		[ ] //                                       ()
		[ ] //						
		[ ] // RETURNS:			INTEGER	PASS		 if Miscellaneous Expense Transaction addded successfully to investment account
		[ ] //									FAIL  		 if any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //   	Apr 27, 2011  Udita Dube  Created
	[ ] // ==========================================================
	[+] public INTEGER Inv_MiscExpTransaction(Inv_MiscExpRecord rInv_MiscExpRecord)
		[+] // Variable Declaration
			[ ] INTEGER iFunctionResult
			[ ] STRING sWindowTitle,sMiscExpWindowTitle,sAccountName
			[ ] sMiscExpWindowTitle="Miscellaneous Expense"
			[ ] 
		[+] do
			[ ] 
			[+] if(IsNull(rInv_MiscExpRecord.sMemo))
				[ ] rInv_MiscExpRecord.sMemo =""
			[+] if(IsNull(rInv_MiscExpRecord.sCategory))
				[ ] rInv_MiscExpRecord.sCategory=""
			[+] if(IsNull(rInv_MiscExpRecord.sTransferAccount))
				[ ] rInv_MiscExpRecord.sTransferAccount=""
			[+] if(IsNull(rInv_MiscExpRecord.sSecurity))
				[ ] rInv_MiscExpRecord.sSecurity=""
			[ ] 
			[ ] 
			[ ] // Check that Brokerage window is opened or not
			[+] if(QuickenWindow.Exists(SHORT_SLEEP))
				[ ] QuickenWindow.SetActive ()
				[ ] BrokerageAccount.EnterTransactions.Click()
				[ ] sleep(SHORT_SLEEP)
				[ ] 
				[ ] //Income Transaction
				[ ] wEnterTransaction.SetActive()
				[ ] sleep(SHORT_SLEEP)
				[ ] // Open Buy transaction window
				[ ] wEnterTransaction.EnterTransaction.SetFocus()
				[ ] wEnterTransaction.EnterTransaction.Select(sMiscExpWindowTitle)
				[ ] 
				[ ] sleep(SHORT_SLEEP)
				[ ] 
				[ ] sWindowTitle=wEnterTransaction.getcaption()
				[+] if(trim(sWindowTitle)==trim(sMiscExpWindowTitle))
					[ ] 
					[ ] // Check Account Name selected
					[ ] sAccountName=wEnterTransaction.Account.GetSelectedItem()
					[ ] 
					[ ] // Verify that correct account is selected for the transaction
					[+] if (sAccountName!=rInv_MiscExpRecord.sAccount)
						[ ] // If Account name is not correct report Fail
						[ ] ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
						[ ] iFunctionResult = FAIL
						[ ] 
					[+] else
						[ ] // Enter transaction date
						[ ] wEnterTransaction.TransactionDate.SetText(rInv_MiscExpRecord.sTransactionDate)
						[ ] 
						[ ] // Enter Security Name
						[ ] wEnterTransaction.SecurityName.SetText(rInv_MiscExpRecord.sSecurity)
						[ ] wEnterTransaction.TypeKeys(KEY_TAB)
						[ ] 
						[ ] // Check if Add security window is present
						[+] if(AddSecurityToQuicken2.Exists(10))
							[ ] AddSecurityToQuicken2.SetActive()
							[+] if (AddSecurityToQuicken2.SecurityListBox.Exists(10))
								[ ] AddSecurityToQuicken2.SecurityListBox.Select(1)
								[+] if (AddSecurityToQuicken2.NextButton.Exists(5))
									[ ] AddSecurityToQuicken2.NextButton.Click()
									[ ] sleep(SHORT_SLEEP)
								[ ] 
							[ ] 
							[ ] 
							[ ] 
							[ ] 
							[ ] 
							[ ] sleep(SHORT_SLEEP)
							[ ] 
							[ ] // This code is written to handle Connection error
							[+] if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
								[+] if(AddSecurityToQuicken.SelectTickerSymbol.Exists(SHORT_SLEEP))
									[ ] AddSecurityToQuicken.SelectTickerSymbol.Select("Add manually")
									[ ] AddSecurityToQuicken.Next.Click()
								[ ] 
							[ ] //Click on Done
							[+] if (AddSecurityToQuicken.Next.Exists(5))
								[ ] AddSecurityToQuicken.Next.Click()
							[ ] sleep(2)
							[ ] 
							[ ] AddSecurityToQuicken.Done.DoubleClick()
							[ ] 
						[ ] 
						[ ] // 2015-09-30 KalyanG: if the date entered is a year or more
						[+] if(AlertMessage.Yes.Exists(3))
							[ ] AlertMessage.SetActive()
							[ ] AlertMessage.Yes.Click()
							[ ] WaitForState(AlertMessage , FALSE,5)
						[ ] 
						[ ] 
						[ ] // Enter Transfer Account
						[ ] wEnterTransaction.TransferAccount.SetText(rInv_MiscExpRecord.sTransferAccount)
						[ ] // Enter Amount
						[ ] wEnterTransaction.Amount.SetText(rInv_MiscExpRecord.sAmount)
						[ ] //Enter Category
						[ ] wEnterTransaction.Category.SetText(rInv_MiscExpRecord.sCategory)
						[+] // if(NewCategory.Exists(SHORT_SLEEP))
							[ ] // NewCategory.SetActive()
							[ ] // NewCategory.Yes.Click()
							[+] // if(SetUpCategory.Exists(SHORT_SLEEP))
								[ ] // SetUpCategory.OK.Click()
								[ ] // 
						[ ] 
						[ ] 
						[ ] // Enter Memo
						[ ] wEnterTransaction.Memo.SetText(rInv_MiscExpRecord.sMemo)
						[ ] // Click on Enter Done
						[ ] wEnterTransaction.EnterDone.Click()
						[+] if(AddSecurityToQuicken2.Exists(10))
							[ ] AddSecurityToQuicken2.SetActive()
							[+] if (AddSecurityToQuicken2.SecurityListBox.Exists(10))
								[ ] AddSecurityToQuicken2.SecurityListBox.Select(1)
								[+] if (AddSecurityToQuicken2.NextButton.Exists(5))
									[ ] AddSecurityToQuicken2.NextButton.Click()
									[ ] sleep(SHORT_SLEEP)
								[ ] 
							[ ] 
							[ ] 
							[ ] 
							[ ] 
							[ ] 
							[ ] sleep(SHORT_SLEEP)
							[ ] 
							[ ] // This code is written to handle Connection error
							[+] if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
								[+] if(AddSecurityToQuicken.SelectTickerSymbol.Exists(SHORT_SLEEP))
									[ ] AddSecurityToQuicken.SelectTickerSymbol.Select("Add manually")
									[ ] AddSecurityToQuicken.Next.Click()
								[ ] 
							[ ] //Click on Done
							[+] if (AddSecurityToQuicken.Next.Exists(5))
								[ ] AddSecurityToQuicken.Next.Click()
							[ ] sleep(2)
							[ ] 
							[ ] AddSecurityToQuicken.Done.DoubleClick()
							[ ] 
							[ ] // 2015-09-30 KalyanG: if the date entered is a year or more
							[+] if(AlertMessage.Yes.Exists(3))
								[ ] AlertMessage.SetActive()
								[ ] AlertMessage.Yes.Click()
								[ ] WaitForState(AlertMessage , FALSE,5)
							[ ] 
						[ ] 
						[ ] // 2015-10-15 KalyanG: if the date entered is a year or more
						[+] if(AlertMessage.Yes.Exists(5))
							[ ] AlertMessage.SetActive()
							[ ] AlertMessage.Yes.Click()
							[ ] WaitForState(AlertMessage , FALSE,5)
						[ ] 
						[ ] 
						[+] if(NewCategory.Exists(SHORT_SLEEP))
							[ ] NewCategory.SetActive()
							[ ] NewCategory.Yes.Click()
							[+] if(SetUpCategory.Exists(SHORT_SLEEP))
								[ ] //Select Expense
								[ ] SetUpCategory.CategoryType.Select(2)
								[ ] SetUpCategory.OK.Click()
								[ ] 
						[ ] 
						[ ] // Return Pass to the function
						[ ] iFunctionResult = PASS
				[+] else
					[ ] 
					[ ] iFunctionResult = FAIL
					[ ] wEnterTransaction.Close()
					[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sMiscExpWindowTitle}")
					[ ] return iFunctionResult
					[ ] 
				[ ] 
				[ ] 
				[ ] 
			[+] else
				[ ] ReportStatus("Brokerage Account Page Open", FAIL, "Brokerage Account is not invoked from AccountBar") 
				[ ] iFunctionResult = FAIL
			[ ] 
			[ ] 
		[+] except
			[+] if (wEnterTransaction.Exists(SHORT_SLEEP))
				[ ] wEnterTransaction.SetActive()
				[ ] wEnterTransaction.close()
				[ ] 
			[ ] Exceptlog()
			[ ] // Return FAIL to the function
			[ ] iFunctionResult = FAIL
			[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: Inv_ReturnOfCapital()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will Add Return of Capital Transaction in Investment Account as per input parameter
		[ ] //
		[ ] // PARAMETERS:		 Record	Inv_StockSplitRecord	rInv_StockSplitRecord	
		[ ] //						(TransactionMode,TransactionDate,	Account, Transfer Account, Security,Amount,Market Value,Memo)
		[ ] //                                      
		[ ] //						
		[ ] // RETURNS:			INTEGER	PASS		 if Return of Capital Transaction addded successfully to investment account
		[ ] //									FAIL  		 if any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //   	May 12, 2011  Udita Dube  Created
	[ ] // ==========================================================
	[+] public INTEGER Inv_ReturnOfCapital(Inv_ReturnCapitalRecord rInv_ReturnCapitalRecord)
		[+] // Variable Declaration
			[ ] INTEGER iFunctionResult
			[ ] STRING sWindowTitle,sReturnCapitalWindowTitle,sAccountName
			[ ] sReturnCapitalWindowTitle="Return of Capital"
			[ ] 
		[+] do
			[ ] 
			[+] if(IsNull(rInv_ReturnCapitalRecord.sMemo))
				[ ] rInv_ReturnCapitalRecord.sMemo =""
			[+] if(IsNull(rInv_ReturnCapitalRecord.sMarketValue))
				[ ] rInv_ReturnCapitalRecord.sMarketValue=""
			[+] if(IsNull(rInv_ReturnCapitalRecord.sTransferAccount))
				[ ] rInv_ReturnCapitalRecord.sTransferAccount=""
			[ ] 
			[ ] 
			[ ] 
			[ ] 
			[ ] 
			[ ] // Check that Brokerage window is opened or not
			[+] if(QuickenWindow.Exists(SHORT_SLEEP))
				[ ] QuickenWindow.SetActive ()
				[ ] BrokerageAccount.EnterTransactions.Click()
				[ ] sleep(SHORT_SLEEP)
				[ ] 
				[ ] // Enter Transaction
				[ ] wEnterTransaction.SetActive()
				[ ] sleep(SHORT_SLEEP)
				[ ] // Open Buy transaction window
				[ ] wEnterTransaction.EnterTransaction.SetFocus()
				[ ] wEnterTransaction.EnterTransaction.Select(sReturnCapitalWindowTitle)
				[ ] 
				[ ] sleep(SHORT_SLEEP)
				[ ] 
				[ ] sWindowTitle=wEnterTransaction.GetCaption()
				[+] if(trim(sWindowTitle)==trim(sReturnCapitalWindowTitle))
					[ ] 
					[ ] // Check Account Name selected
					[ ] sAccountName=wEnterTransaction.Account.GetSelectedItem()
					[ ] 
					[ ] // Verify that correct account is selected for the transaction
					[+] if (sAccountName!=rInv_ReturnCapitalRecord.sAccount)
						[ ] // If Account name is not correct report Fail
						[ ] ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
						[ ] iFunctionResult = FAIL
						[ ] 
					[+] else
						[ ] // Enter transaction date
						[ ] wEnterTransaction.TransactionDate.SetText(rInv_ReturnCapitalRecord.sTransactionDate)
						[ ] 
						[ ] // Enter Security Name
						[ ] wEnterTransaction.SecurityName.SetText(rInv_ReturnCapitalRecord.sSecurity)
						[ ] 
						[ ] // Enter Transfer Account
						[ ] wEnterTransaction.TransferAccount.SetText(rInv_ReturnCapitalRecord.sTransferAccount)
						[ ] // Enter Amount
						[ ] wEnterTransaction.Amount.SetText(rInv_ReturnCapitalRecord.sAmount)
						[ ] //Enter Market Value
						[ ] wEnterTransaction.MarketValue.SetText(rInv_ReturnCapitalRecord.sMarketValue)
						[ ] // Enter Memo
						[ ] wEnterTransaction.Memo.SetText(rInv_ReturnCapitalRecord.sMemo)
						[ ] // Click on Enter Done
						[ ] wEnterTransaction.EnterDone.Click()
						[ ] // Check if Add security window is present
						[+] if(AddSecurityToQuicken2.Exists(10))
							[ ] AddSecurityToQuicken2.SetActive()
							[+] if (AddSecurityToQuicken2.SecurityListBox.Exists(10))
								[ ] AddSecurityToQuicken2.SecurityListBox.Select(1)
								[+] if (AddSecurityToQuicken2.NextButton.Exists(5))
									[ ] AddSecurityToQuicken2.NextButton.Click()
									[ ] sleep(SHORT_SLEEP)
								[ ] 
							[ ] 
							[ ] 
							[ ] 
							[ ] 
							[ ] 
							[ ] sleep(SHORT_SLEEP)
							[ ] 
							[ ] // This code is written to handle Connection error
							[+] if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
								[+] if(AddSecurityToQuicken.SelectTickerSymbol.Exists(SHORT_SLEEP))
									[ ] AddSecurityToQuicken.SelectTickerSymbol.Select("Add manually")
									[ ] AddSecurityToQuicken.Next.Click()
								[ ] 
							[ ] //Click on Done
							[+] if (AddSecurityToQuicken.Next.Exists(5))
								[ ] AddSecurityToQuicken.Next.Click()
							[ ] sleep(2)
							[ ] 
							[ ] AddSecurityToQuicken.Done.DoubleClick()
							[ ] 
							[ ] // 2015-09-30 KalyanG: if the date entered is a year or more
							[+] if(AlertMessage.Yes.Exists(3))
								[ ] AlertMessage.SetActive()
								[ ] AlertMessage.Yes.Click()
								[ ] WaitForState(AlertMessage , FALSE,5)
							[ ] 
						[ ] 
						[ ] // Return Pass to the function
						[ ] iFunctionResult = PASS
				[+] else
					[ ] iFunctionResult = FAIL
					[ ] wEnterTransaction.Close()
					[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sReturnCapitalWindowTitle}")
					[ ] return iFunctionResult
					[ ] 
				[ ] 
				[ ] 
				[ ] 
			[+] else
				[ ] ReportStatus("Brokerage Account Page Open", FAIL, "Brokerage Account is not invoked from AccountBar") 
				[ ] iFunctionResult = FAIL
			[ ] 
			[ ] 
		[+] except
			[+] if (wEnterTransaction.Exists(SHORT_SLEEP))
				[ ] wEnterTransaction.SetActive()
				[ ] wEnterTransaction.close()
				[ ] 
			[ ] Exceptlog()
			[ ] // Return FAIL to the function
			[ ] iFunctionResult = FAIL
			[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: Inv_CashTransferTransaction()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will Add Cash deposit/Withdraw Transaction in Investment Account as per input parameter
		[ ] //
		[ ] // PARAMETERS:		 Record	Inv_CashAction	rInv_CashAction	
		[ ] //
		[ ] //						(TransactionType, TransactionDate, Account, Payee,  Amount, Memom Category, Cheque no.)                                       ()
		[ ] //						
		[ ] // RETURNS:			INTEGER	PASS		 if Write Check/Deposit/Withdraw Transaction addded successfully to investment account
		[ ] //									FAIL  		 if any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //   	July 28, 2014  Dean Paes Created
	[ ] // ==========================================================
	[+] public INTEGER Inv_CashActionTransaction(Inv_CashAction rInv_CashAction)
		[+] // Variable Declaration
			[ ] INTEGER iFunctionResult, j, iRowCount
			[ ] STRING sWindowTitle, sAccountName, sErrorMsg, sCategoryMsg,sWithdrawWindowTitle,sDepositWindowTitle,sWriteCheckWindowTitle
			[ ] 
			[ ] BOOLEAN bErrorFlag, bAccountFound, bMatch
			[ ] 
			[ ] sWriteCheckWindowTitle="Write Check"
			[ ] sWithdrawWindowTitle="Withdraw"
			[ ] sDepositWindowTitle = "Deposit"
			[ ] 
			[ ] sCategoryMsg = "Record this payment transaction using an income category"
			[ ] bErrorFlag = FALSE
			[ ] bAccountFound = FALSE
			[ ] 
		[+] do
			[+] if(IsNull(rInv_CashAction.sTransactionDate))
				[ ] rInv_CashAction.sTransactionDate = ""
			[+] if(IsNull(rInv_CashAction.sPayee))
				[ ] rInv_CashAction.sPayee = ""
			[+] if(IsNull(rInv_CashAction.sAmount))
				[ ] rInv_CashAction.sAmount = ""
			[+] if(IsNull(rInv_CashAction.sMemo))
				[ ] rInv_CashAction.sMemo = ""
			[+] if(IsNull(rInv_CashAction.sCategory))
				[ ] rInv_CashAction.sCategory = ""
			[+] if(IsNull(rInv_CashAction.sChequeNumber))
				[ ] rInv_CashAction.sChequeNumber = ""
			[ ] 
			[ ] 
			[ ] // Check that Brokerage window is opened or not
			[+] if(QuickenWindow.Exists(SHORT_SLEEP))
				[ ] QuickenWindow.SetActive ()
				[ ] BrokerageAccount.EnterTransactions.Click()
				[ ] sleep(SHORT_SLEEP)
				[ ] // Enter Transaction
				[ ] wEnterTransaction.SetActive()
				[ ] sleep(SHORT_SLEEP)
				[ ] 
				[ ] 
				[ ] sleep(SHORT_SLEEP)
				[+] switch(rInv_CashAction.sTransactionType)
					[ ] 
					[+] case ("Write Check")
						[ ] 
						[ ] // Open Withdraw/Deposit transaction window
						[ ] wEnterTransaction.EnterTransaction.SetFocus()
						[ ] wEnterTransaction.EnterTransaction.TypeKeys("W")	// Select transaction type as per input provided
						[ ] 
						[ ] 
						[ ] sWindowTitle = wEnterTransaction.GetCaption()	// get the caption after transaction type is selected
						[+] if(trim(sWindowTitle) == trim(sWriteCheckWindowTitle))
							[ ] 
							[ ] // Check Account Name selected
							[ ] sAccountName=wEnterTransaction.Account.GetSelectedItem()
							[ ] //GetSelText()
							[ ] 
							[ ] // Verify that correct account is selected for the transaction
							[+] if (sAccountName != rInv_CashAction.sAccount)
								[ ] // If Account name is not correct report Fail
								[ ] ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
								[ ] iFunctionResult = FAIL
								[ ] 
							[+] else
								[ ] // Enter transaction date
								[ ] wEnterTransaction.TransactionDate.SetText(rInv_CashAction.sTransactionDate)
								[ ] // Enter Payee
								[ ] wEnterTransaction.Payee.SetText(rInv_CashAction.sPayee)
								[ ] // Enter Amount
								[ ] wEnterTransaction.Amount.SetText(rInv_CashAction.sAmount)
								[ ] //Enter Category
								[ ] wEnterTransaction.Category.SetText(rInv_CashAction.sCategory)
								[ ] // Enter Memo
								[ ] wEnterTransaction.Memo.SetText(rInv_CashAction.sMemo)
								[ ] // Enter cheque no.
								[ ] wEnterTransaction.ChequeNumber.SetText(rInv_CashAction.sChequeNumber)
								[ ] 
								[ ] // Click on Enter Done
								[ ] wEnterTransaction.EnterDone.Click()
								[ ] 
								[ ] // Alert for creating new category
								[+] if(NewCategory.Exists(SHORT_SLEEP))
									[ ] NewCategory.SetActive()
									[ ] NewCategory.Yes.Click()
									[+] if(SetUpCategory.Exists(SHORT_SLEEP))
										[ ] SetUpCategory.SetActive()
										[ ] SetUpCategory.OK.Click()
										[+] // if(MessageBox.Exists(SHORT_SLEEP))				// for invalid category, error message is displayed in Creating new category
											[ ] // MessageBox.SetActive()
											[ ] // sErrorMsg = MessageBox.ErrorMsg.GetText()
											[ ] // ReportStatus("Validate Error Meassage", FAIL, "Transaction is not added and Error Message - '{sErrorMsg}' is observed")
											[ ] // MessageBox.OK.Click()
											[ ] // SetUpCategoryPopup.Close()
											[ ] // bErrorFlag = TRUE
										[ ] 
								[ ] 
								[ ] // // Alert if date format is wrong
								[+] // if(wEnterTransaction.AlertMessage.Exists(SHORT_SLEEP))
									[ ] // sErrorMsg = wEnterTransaction.AlertMessage.Message.GetText()
									[+] // if(sErrorMsg != sCategoryMsg)
										[ ] // bErrorFlag = TRUE
										[ ] // ReportStatus("Validate Error Message", FAIL, "Transaction is not added and Error Message -  {sErrorMsg} is displayed")
									[ ] // 
									[ ] // wEnterTransaction.AlertMessage.OK.Click()
								[ ] 
								[+] if(wEnterTransaction.Exists(SHORT_SLEEP))
									[ ] wEnterTransaction.Close()
									[ ] 
								[ ] 
								[ ] iFunctionResult = PASS
								[ ] 
							[ ] 
							[ ] 
							[ ] 
						[+] else
							[ ] bErrorFlag = TRUE
							[ ] wEnterTransaction.Close()
							[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sWithdrawWindowTitle}")
					[ ] 
					[+] case ("Withdraw")
						[ ] 
						[ ] // // Open Withdraw/Deposit transaction window
						[ ] // wEnterTransaction.EnterTransaction.SetFocus()
						[ ] // wEnterTransaction.EnterTransaction.Select(rInv_CashAction.sTransactionType)	// Select transaction type as per input provided
						[ ] 
						[ ] // Open Withdraw/Deposit transaction window
						[ ] wEnterTransaction.EnterTransaction.SetFocus()
						[ ] wEnterTransaction.EnterTransaction.TypeKeys("W")	// Select transaction type as per input provided
						[ ] wEnterTransaction.EnterTransaction.TypeKeys("W")
						[ ] 
						[ ] 
						[ ] sWindowTitle = wEnterTransaction.GetCaption()	// get the caption after transaction type is selected
						[+] if(trim(sWindowTitle) == trim(sWithdrawWindowTitle))
							[ ] // Check Account Name selected
							[ ] sAccountName=wEnterTransaction.Account.GetSelectedItem()
							[ ] // Verify that correct account is selected for the transaction
							[+] if (sAccountName != rInv_CashAction.sAccount)
								[ ] // If Account name is not correct report Fail
								[ ] ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
								[ ] iFunctionResult = FAIL
								[ ] 
							[+] else
								[ ] // Enter transaction date
								[ ] wEnterTransaction.TransactionDate.SetText(rInv_CashAction.sTransactionDate)
								[ ] // Enter Payee
								[ ] wEnterTransaction.Payee.SetText(rInv_CashAction.sPayee)
								[ ] // Enter Amount
								[ ] wEnterTransaction.Amount.SetText(rInv_CashAction.sAmount)
								[ ] //Enter Category
								[ ] wEnterTransaction.Category.SetText(rInv_CashAction.sCategory)
								[ ] // Enter Memo
								[ ] wEnterTransaction.Memo.SetText(rInv_CashAction.sMemo)
								[ ] // Enter cheque no.
								[ ] wEnterTransaction.ChequeNumber.SetText(rInv_CashAction.sChequeNumber)
								[ ] 
								[ ] // Click on Enter Done
								[ ] wEnterTransaction.EnterDone.Click()
								[ ] 
								[ ] // Alert for creating new category
								[+] if(NewCategory.Exists(SHORT_SLEEP))
									[ ] NewCategory.SetActive()
									[ ] NewCategory.Yes.Click()
									[+] if(SetUpCategory.Exists(SHORT_SLEEP))
										[ ] SetUpCategory.SetActive()
										[ ] SetUpCategory.OK.Click()
										[+] // if(MessageBox.Exists(SHORT_SLEEP))				// for invalid category, error message is displayed in Creating new category
											[ ] // MessageBox.SetActive()
											[ ] // sErrorMsg = MessageBox.ErrorMsg.GetText()
											[ ] // ReportStatus("Validate Error Meassage", FAIL, "Transaction is not added and Error Message - '{sErrorMsg}' is observed")
											[ ] // MessageBox.OK.Click()
											[ ] // SetUpCategoryPopup.Close()
											[ ] // bErrorFlag = TRUE
										[ ] 
								[ ] // 
								[ ] // // Alert if date format is wrong
								[+] // if(wEnterTransaction.AlertMessage.Exists(SHORT_SLEEP))
									[ ] // sErrorMsg = wEnterTransaction.AlertMessage.Message.GetText()
									[+] // if(sErrorMsg != sCategoryMsg)
										[ ] // bErrorFlag = TRUE
										[ ] // ReportStatus("Validate Error Message", FAIL, "Transaction is not added and Error Message -  {sErrorMsg} is displayed")
									[ ] // 
									[ ] // wEnterTransaction.AlertMessage.OK.Click()
								[ ] 
								[+] if(wEnterTransaction.Exists(SHORT_SLEEP))
									[ ] wEnterTransaction.Close()
									[ ] 
								[ ] 
								[ ] iFunctionResult = PASS
								[ ] 
								[ ] 
							[ ] 
						[+] else
							[ ] bErrorFlag = TRUE
							[ ] wEnterTransaction.Close()
							[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sWithdrawWindowTitle}")
					[ ] 
					[+] case ("Deposit")
						[ ] 
						[ ] // Open Withdraw/Deposit transaction window
						[ ] wEnterTransaction.EnterTransaction.SetFocus()
						[ ] wEnterTransaction.EnterTransaction.TypeKeys("D")	// Select transaction type as per input provided
						[ ] wEnterTransaction.EnterTransaction.TypeKeys("D")
						[ ] 
						[ ] 
						[ ] sWindowTitle = wEnterTransaction.GetCaption()
						[+] if(trim(sWindowTitle) == trim(sDepositWindowTitle))
							[ ] 
							[ ] // Check Account Name selected
							[ ] sAccountName=wEnterTransaction.Account.GetSelectedItem()
							[ ] //GetSelText()
							[ ] 
							[ ] // Verify that correct account is selected for the transaction
							[+] if (sAccountName != rInv_CashAction.sAccount)
								[ ] // If Account name is not correct report Fail
								[ ] ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
								[ ] iFunctionResult = FAIL
								[ ] 
							[+] else
								[ ] // Enter transaction date
								[ ] wEnterTransaction.TransactionDate.SetText(rInv_CashAction.sTransactionDate)
								[ ] // Enter Payee
								[ ] wEnterTransaction.Payee.SetText(rInv_CashAction.sPayee)
								[ ] // Enter Amount
								[ ] wEnterTransaction.Amount.SetText(rInv_CashAction.sAmount)
								[ ] //Enter Category
								[ ] wEnterTransaction.Category.SetText(rInv_CashAction.sCategory)
								[ ] // Enter Memo
								[ ] wEnterTransaction.Memo.SetText(rInv_CashAction.sMemo)
								[ ] 
								[ ] // Click on Enter Done
								[ ] wEnterTransaction.EnterDone.DoubleClick()
								[ ] 
								[ ] // Alert for creating new category
								[+] if(NewCategory.Exists(SHORT_SLEEP))
									[ ] NewCategory.SetActive()
									[ ] NewCategory.Yes.Click()
									[+] if(SetUpCategory.Exists(SHORT_SLEEP))
										[ ] SetUpCategory.SetActive()
										[ ] SetUpCategory.OK.Click()
										[+] // if(MessageBox.Exists(SHORT_SLEEP))				// for invalid category, error message is displayed in Creating new category
											[ ] // MessageBox.SetActive()
											[ ] // sErrorMsg = MessageBox.ErrorMsg.GetText()
											[ ] // ReportStatus("Validate Error Meassage", FAIL, "Transaction is not added and Error Message - '{sErrorMsg}' is observed")
											[ ] // MessageBox.OK.Click()
											[ ] // SetUpCategoryPopup.Close()
											[ ] // bErrorFlag = TRUE
										[ ] 
								[ ] 
								[ ] // // Alert if date format is wrong
								[+] // if(wEnterTransaction.AlertMessage.Exists(SHORT_SLEEP))
									[ ] // sErrorMsg = wEnterTransaction.AlertMessage.Message.GetText()
									[+] // if(sErrorMsg != sCategoryMsg)
										[ ] // bErrorFlag = TRUE
										[ ] // ReportStatus("Validate Error Message", FAIL, "Transaction is not added and Error Message -  {sErrorMsg} is displayed")
									[ ] // 
									[ ] // wEnterTransaction.AlertMessage.OK.Click()
								[ ] 
								[+] if(wEnterTransaction.Exists(SHORT_SLEEP))
									[ ] wEnterTransaction.Close()
								[ ] 
								[ ] iFunctionResult = PASS
								[ ] 
								[ ] 
						[+] else
							[ ] bErrorFlag = TRUE
							[ ] wEnterTransaction.Close()
							[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sDepositWindowTitle}")
					[ ] 
					[+] case ("Other Cash Transaction")
						[ ] 
						[ ] // Open Withdraw/Deposit transaction window
						[ ] wEnterTransaction.EnterTransaction.SetFocus()
						[ ] wEnterTransaction.EnterTransaction.TypeKeys("O")	// Select transaction type as per input provided
						[+] if(AlertMessage.Exists(5))
							[ ] AlertMessage.OK.Click()
							[ ] 
							[ ] 
						[ ] 
						[ ] sWindowTitle = wEnterTransaction.GetCaption()
						[+] if(trim(sWindowTitle) == trim(sDepositWindowTitle))
							[ ] 
							[ ] // Check Account Name selected
							[ ] sAccountName=wEnterTransaction.Account.GetSelectedItem()
							[ ] 
							[ ] 
							[ ] // Verify that correct account is selected for the transaction
							[+] if (sAccountName != rInv_CashAction.sAccount)
								[ ] // If Account name is not correct report Fail
								[ ] ReportStatus("Validate Account Name", FAIL, "Incorrect Account is selected for Transaction")
								[ ] iFunctionResult = FAIL
								[ ] 
							[+] else
								[ ] // Enter transaction date
								[ ] wEnterTransaction.TransactionDate.SetText(rInv_CashAction.sTransactionDate)
								[ ] // Enter Payee
								[ ] wEnterTransaction.Payee.SetText(rInv_CashAction.sPayee)
								[ ] // Enter Amount
								[ ] wEnterTransaction.Amount.SetText(rInv_CashAction.sAmount)
								[ ] //Enter Category
								[ ] wEnterTransaction.Category.SetText(rInv_CashAction.sCategory)
								[ ] // Enter Memo
								[ ] wEnterTransaction.Memo.SetText(rInv_CashAction.sMemo)
								[ ] 
								[ ] // Click on Enter Done
								[ ] wEnterTransaction.EnterDone.DoubleClick()
								[ ] 
								[ ] // Alert for creating new category
								[+] if(NewCategory.Exists(SHORT_SLEEP))
									[ ] NewCategory.SetActive()
									[ ] NewCategory.Yes.Click()
									[+] if(SetUpCategory.Exists(SHORT_SLEEP))
										[ ] SetUpCategory.SetActive()
										[ ] SetUpCategory.OK.Click()
										[+] // if(MessageBox.Exists(SHORT_SLEEP))				// for invalid category, error message is displayed in Creating new category
											[ ] // MessageBox.SetActive()
											[ ] // sErrorMsg = MessageBox.ErrorMsg.GetText()
											[ ] // ReportStatus("Validate Error Meassage", FAIL, "Transaction is not added and Error Message - '{sErrorMsg}' is observed")
											[ ] // MessageBox.OK.Click()
											[ ] // SetUpCategoryPopup.Close()
											[ ] // bErrorFlag = TRUE
										[ ] 
								[ ] 
								[ ] // // Alert if date format is wrong
								[+] // if(wEnterTransaction.AlertMessage.Exists(SHORT_SLEEP))
									[ ] // sErrorMsg = wEnterTransaction.AlertMessage.Message.GetText()
									[+] // if(sErrorMsg != sCategoryMsg)
										[ ] // bErrorFlag = TRUE
										[ ] // ReportStatus("Validate Error Message", FAIL, "Transaction is not added and Error Message -  {sErrorMsg} is displayed")
									[ ] // 
									[ ] // wEnterTransaction.AlertMessage.OK.Click()
								[ ] 
								[+] if(wEnterTransaction.Exists(SHORT_SLEEP))
									[ ] wEnterTransaction.Close()
								[ ] 
								[ ] iFunctionResult = PASS
								[ ] 
								[ ] 
						[+] else
							[ ] bErrorFlag = TRUE
							[ ] wEnterTransaction.Close()
							[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sDepositWindowTitle}")
						[ ] 
						[ ] 
						[ ] 
						[ ] 
					[ ] 
					[ ] 
					[+] default
						[ ] bErrorFlag = TRUE
				[ ] 
				[ ] 
				[+] if(bErrorFlag == TRUE)
					[ ] iFunctionResult = FAIL
				[+] else
					[ ] ReportStatus("Validate Transaction", PASS, "{rInv_CashAction.sTransactionType} Transaction is added in {rInv_CashAction.sAccount} Account")
					[ ] iFunctionResult = PASS
				[ ] 
			[+] else
				[ ] ReportStatus("Brokerage Account Page Open", FAIL, "{rInv_CashAction.sAccount} Account is not invoked from AccountBar") 
				[ ] iFunctionResult = FAIL
		[ ] 
		[+] except
			[+] if (wEnterTransaction.Exists(SHORT_SLEEP))
				[ ] wEnterTransaction.SetActive()
				[ ] wEnterTransaction.Close()
				[ ] 
			[ ] ExceptData()
			[ ] // Return FAIL to the function
			[ ] iFunctionResult = FAIL
			[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: AddInvestingTransactionforIncandReinves()
		[ ] //
		[ ] // DESCRIPTION:	This function will add transaction i.e. Income / Reinvest
		[ ] // 
		[ ] //
		[ ] // PARAMETERS IN:		STRING 	sTransactionType		 		Type of Transaction Income / Reinvest
		[ ] //							STRING     sDivident	       		            Divident amount
		[ ] //							STRING	sIntrest 			                  Intrest amount
		[ ] //							STRING	sShortterm   				     Short term amount
		[ ] //							STRING 	sMidTerm					     Mid term amount
		[ ] //							STRING 	slongTerm				           Long term amount
		[ ] //							STRING 	sCommision		                  Commision
		[ ] //							STRING 	sDiviShare				     Diviident share: OPTIONAL
		[ ] //							STRING	sintShare   				     Intrest share: OPTIONAL
		[ ] //							STRING 	sShortshare				     Short term share : OPTIONAL
		[ ] //							STRING 	sMidShare				           Mid term share : OPTIONAL
		[ ] //							STRING 	sLongshare		                 Long term share: OPTIONAL
		[ ] 
		[ ] //
		[ ] // RETURNS:				INTEGER		PASS  = If transaction  is created successfully
		[ ] //											FAIL   = if any error occurs while adding transaction
		[ ] //
		[ ] // REVISION HISTORY:	14/02/2010   Created By	Puja Verma
		[ ] //	 									   
	[ ] // ==========================================================
	[+] public INTEGER AddInvestingTransactionForInvestIncome(STRING sWindowType,STRING sTransactionType,STRING sTransactionDate, STRING sTickerSymbol, STRING sDivident, STRING sInterest, STRING sShortterm , STRING sMidterm , STRING sLongTerm ,STRING Miscellaneous optional,STRING Commission optional, STRING DiviShare optional,STRING IntShare optional,STRING ShortShare optional,STRING MidShare optional,STRING LongShare optional,STRING sCategory optional)
		[ ] 
		[+] //  Variable declaration
			[ ] INTEGER iFunctionResult,iSelect
			[ ] STRING sAccountName,sWindowTitle,sSellWindowTitle,sBuyWindowTitle,sUseCash
			[ ] sUseCash="From Account"
			[ ] STRING sTransactionTypevalue="Inc - Income (Div, Int, etc.)"
			[ ] STRING sTransactionTypeReinvest="Reinvest - Income Reinvested"
			[ ] sSellWindowTitle="Sell - Shares Sold"
			[ ] 
			[ ] 
			[ ] // STRING sDateStamp = FormatDateTime (GetDateTime(), "m/d/yyyy") 
			[ ] // sTransactionDate=sDateStamp
			[ ] 
			[+] if(sTransactionDate==NULL)
				[ ] STRING sDateStamp = FormatDateTime (GetDateTime(), "m/d/yyyy") 
				[ ] sTransactionDate=sDateStamp
			[ ] 
			[ ] 
		[+] do
			[ ] 
			[ ] 
			[+] switch(sWindowType)
				[ ] 
				[+] case("PopUp")
					[ ] 
					[ ] // Turn ON "Use Popup Register" option for Popup window type
					[ ] iSelect=UsePopupRegister("ON")
					[ ] 
					[ ] InvestingAccountPopup.SetActive ()
					[ ] 
					[ ] // Check that Brokerage window is opened or not
					[ ] 
					[ ] WaitForState(InvestingAccountPopup,TRUE,5)
					[ ] 
					[+] if(InvestingAccountPopup.Exists(SHORT_SLEEP) == TRUE)
						[ ] 
						[ ] InvestingAccountPopup.SetActive ()
						[ ] InvestingAccountPopup.Maximize()
						[ ] InvestingAccountPopup.EnterTransactionsButton.Click()
						[ ] 
						[ ] // Pass the Transaction Type
						[+] switch(sTransactionType) 
							[ ] //Income Transaction
							[+] case("Income")
								[ ] WaitForState(wEnterTransaction,TRUE,5)
								[ ] 
								[+] if(wEnterTransaction.Exists(3))
									[ ] 
									[ ] wEnterTransaction.SetActive()
									[ ] // Open Buy transaction window
									[ ] wEnterTransaction.EnterTransaction.SetFocus()
									[ ] 
									[ ] wEnterTransaction.EnterTransaction.Select(sTransactionTypevalue)
									[ ] sleep(2)
									[ ] // Enter transaction date
									[ ] wEnterTransaction.TransactionDate.SetText(sTransactionDate)
									[ ] 
									[ ] // Enter Security Name
									[ ] wEnterTransaction.SecurityName.SetText(sTickerSymbol)
									[ ] wEnterTransaction.TypeKeys(KEY_TAB)
									[ ] 
									[ ] // Check if Add security window is present
									[+] if(AddSecurityToQuicken.Exists(5))
										[ ] // Add Ticker Symbol
										[ ] AddSecurityToQuicken.SetActive()
										[ ] AddSecurityToQuicken.TickerSymbol.SetText(sTickerSymbol)
										[ ] //Click on Next
										[ ] AddSecurityToQuicken.Next.Click()
										[ ] 
										[ ] // This code is written to handle Connection error
										[+] if (AddSecurityToQuicken.ConnectionError.Exists(MEDIUM_SLEEP) == TRUE)
											[ ] AddSecurityToQuicken.AddManually.Select("Add manually")
											[ ] AddSecurityToQuicken.Next.Click()
											[ ] 
										[ ] 
										[ ] //Click on Done
										[ ] AddSecurityToQuicken.Done.Click()
									[ ] 
									[ ] wEnterTransaction.Dividend.SetText(sDivident)
									[ ] // Enter Interest
									[ ] wEnterTransaction.Interest.SetText(sInterest)
									[ ] // Enter ShortTermCapGainDist
									[ ] wEnterTransaction.ShortTermCapGainDist.SetText(sShortterm)
									[ ] // Enter MidTermCapGainDist
									[ ] wEnterTransaction.MidTermCapGainDist.SetText(sMidterm)
									[ ] // Enter LongTermCapGainDist
									[ ] wEnterTransaction.LongTermCapGainDist.SetText(sLongTerm)
									[ ] // Enter Miscellaneous
									[ ] wEnterTransaction.Miscellaneous.SetText(Miscellaneous)
									[ ] 
									[ ] // Click on Enter Done
									[ ] wEnterTransaction.EnterDone.Click()
									[ ] 
									[ ] // Check if Add security window is present
									[+] if(AddSecurityToQuicken.Exists(5))
										[ ] // Add Ticker Symbol
										[ ] AddSecurityToQuicken.SetActive()
										[ ] AddSecurityToQuicken.TickerSymbol.SetText(sTickerSymbol)
										[ ] //Click on Next
										[ ] AddSecurityToQuicken.Next.Click()
										[ ] 
										[ ] // This code is written to handle Connection error
										[+] if (AddSecurityToQuicken.ConnectionError.Exists(MEDIUM_SLEEP) == TRUE)
											[ ] AddSecurityToQuicken.AddManually.Select("Add manually")
											[ ] AddSecurityToQuicken.Next.Click()
											[ ] 
										[ ] 
										[ ] //Click on Done
										[ ] AddSecurityToQuicken.Done.Click()
									[ ] 
									[ ] iFunctionResult = PASS
									[ ] 
									[ ] // Alert if date format is wrong
									[+] if(AlertMessage.Exists(SHORT_SLEEP))
										[ ] AlertMessage.OK.Click()
										[+] if(wEnterTransaction.Exists(SHORT_SLEEP))
											[ ] wEnterTransaction.Close()
											[ ] LogError("Date Formate is wrong")
										[ ] iFunctionResult = FAIL
										[ ] return iFunctionResult
										[ ] 
									[ ] 
								[+] else
									[ ] iFunctionResult = FAIL
									[ ] wEnterTransaction.Close()
									[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sBuyWindowTitle}")
									[ ] return iFunctionResult
									[ ] 
								[ ] 
							[ ] 
							[ ] // Reinvest Transaction
							[+] case("Reinvest")
								[ ] WaitForState(wEnterTransaction,TRUE,5)
								[+] if(wEnterTransaction.Exists(3))
									[ ] wEnterTransaction.SetActive()
									[ ] // Open Buy transaction window
									[ ] wEnterTransaction.EnterTransaction.SetFocus()
									[ ] 
									[ ] wEnterTransaction.EnterTransaction.Select(sTransactionTypeReinvest)
									[ ] sleep(2)
									[ ] // Enter transaction date
									[ ] wEnterTransaction.TransactionDate.SetText(sTransactionDate)
									[ ] 
									[ ] // Enter Security Name
									[ ] wEnterTransaction.SecurityName.SetText(sTickerSymbol)
									[ ] //wEnterTransaction.TypeKeys(KEY_TAB)
									[ ] 
									[ ] // Check if Add security window is present
									[+] if(AddSecurityToQuicken.Exists(3))
										[ ] // Add Ticker Symbol
										[ ] AddSecurityToQuicken.SetActive()
										[ ] AddSecurityToQuicken.TickerSymbol.SetText(sTickerSymbol)
										[ ] //Click on Next
										[ ] AddSecurityToQuicken.Next.Click()
										[ ] 
										[ ] // This code is written to handle Connection error
										[+] if (AddSecurityToQuicken.ConnectionError.Exists(MEDIUM_SLEEP) == TRUE)
											[ ] AddSecurityToQuicken.AddManually.Select("Add manually")
											[ ] AddSecurityToQuicken.Next.Click()
											[ ] 
										[ ] 
										[ ] //Click on Done
										[ ] AddSecurityToQuicken.Done.Click()
									[ ] 
									[ ] wEnterTransaction.Dividend.SetText(sDivident)
									[ ] 
									[ ] // Enter Interest
									[ ] wEnterTransaction.Interest.SetText(sInterest)
									[ ] 
									[ ] // Enter ShortTermCapGainDist
									[ ] wEnterTransaction.ShortTermCapGainDist.SetText(sShortterm)
									[ ] 
									[ ] // Enter MidTermCapGainDist
									[ ] wEnterTransaction.MidTermCapGainDist.SetText(sMidterm)
									[ ] 
									[ ] // Enter LongTermCapGainDist
									[ ] wEnterTransaction.LongTermCapGainDist.SetText(sLongTerm)
									[ ] 
									[ ] // Enter Commision
									[ ] wEnterTransaction.Commission.SetText(Miscellaneous)
									[ ] 
									[ ] //Enter divident share
									[ ] wEnterTransaction.DividentShare.SetText(DiviShare)
									[ ] 
									[ ] //Enter Intrest share
									[ ] wEnterTransaction.IntrestShare.SetText(IntShare)
									[ ] 
									[ ] //enter short share
									[ ] wEnterTransaction.ShortShare.SetText(ShortShare)
									[ ] 
									[ ] //Enter mid term share
									[ ] wEnterTransaction.MidShare.SetText(MidShare)
									[ ] 
									[ ] //Enter long share
									[ ] wEnterTransaction.LongShare.MoveMouse()
									[ ] 
									[ ] wEnterTransaction.LongShare.SetFocus()
									[ ] 
									[ ] wEnterTransaction.LongShare.SetText(LongShare)
									[ ] 
									[ ] wEnterTransaction.TypeKeys(KEY_TAB)
									[ ] 
									[ ] // Click on Enter Done
									[ ] wEnterTransaction.EnterDone.Click()
									[ ] 
									[ ] // Check if Add security window is present
									[+] if(AddSecurityToQuicken.Exists(5))
										[ ] // Add Ticker Symbol
										[ ] AddSecurityToQuicken.SetActive()
										[ ] AddSecurityToQuicken.TickerSymbol.SetText(sTickerSymbol)
										[ ] //Click on Next
										[ ] AddSecurityToQuicken.Next.Click()
										[ ] 
										[ ] // This code is written to handle Connection error
										[+] if (AddSecurityToQuicken.ConnectionError.Exists(MEDIUM_SLEEP) == TRUE)
											[ ] AddSecurityToQuicken.AddManually.Select("Add manually")
											[ ] AddSecurityToQuicken.Next.Click()
											[ ] 
										[ ] 
										[ ] //Click on Done
										[ ] AddSecurityToQuicken.Done.Click()
									[ ] 
									[ ] sleep(10)
									[ ] iFunctionResult = PASS
									[ ] 
									[ ] 
									[ ] // Alert if date format is wrong
									[+] if(AlertMessage.Exists(SHORT_SLEEP))
										[ ] AlertMessage.OK.Click()
										[+] if(wEnterTransaction.Exists(SHORT_SLEEP))
											[ ] wEnterTransaction.Close()
											[ ] LogError("Date Formate is wrong")
										[ ] iFunctionResult = FAIL
										[ ] return iFunctionResult
										[ ] 
									[ ] 
								[+] else
									[ ] iFunctionResult = FAIL
									[ ] wEnterTransaction.Close()
									[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sBuyWindowTitle}")
									[ ] return iFunctionResult
									[ ] 
								[ ] // 
							[ ] 
							[+] default
								[ ] // If Transaction Type not found 
								[ ] print(sTransactionType + "TransactionType Not found")
								[ ] // Return Fail  to the function
								[ ] iFunctionResult = FAIL
						[ ] 
					[+] else
						[ ] ReportStatus(" Account Page Open", FAIL, " Account is not invoked from AccountBar") 
				[ ] 
				[+] case("MDI")
					[ ] 
					[ ] // Turn ON "Use Popup Register" option for Popup window type
					[ ] iSelect=UsePopupRegister("OFF")
					[ ]  
					[+] if(QuickenWindow.Exists(SHORT_SLEEP))
						[ ] 
						[ ] QuickenWindow.SetActive ()
						[ ] BrokerageAccount.EnterTransactions.Click()
						[ ] 
						[ ] 
						[ ] // Pass the Transaction Type
						[+] switch(sTransactionType) 
							[ ] //Income Transaction
							[+] case("Income")
								[ ] WaitForState(wEnterTransaction,TRUE,5)
								[ ] 
								[+] if(wEnterTransaction.Exists(3))
									[ ] 
									[ ] wEnterTransaction.SetActive()
									[ ] // Open Buy transaction window
									[ ] wEnterTransaction.EnterTransaction.SetFocus()
									[ ] 
									[ ] wEnterTransaction.EnterTransaction.Select(sTransactionTypevalue)
									[ ] sleep(2)
									[ ] // Enter transaction date
									[ ] wEnterTransaction.TransactionDate.SetText(sTransactionDate)
									[ ] 
									[ ] // Enter Security Name
									[ ] wEnterTransaction.SecurityName.SetText(sTickerSymbol)
									[ ] 
									[ ] wEnterTransaction.Dividend.SetText(sDivident)
									[ ] // Enter Interest
									[ ] wEnterTransaction.Interest.SetText(sInterest)
									[ ] // Enter ShortTermCapGainDist
									[ ] wEnterTransaction.ShortTermCapGainDist.SetText(sShortterm)
									[ ] // Enter MidTermCapGainDist
									[ ] wEnterTransaction.MidTermCapGainDist.SetText(sMidterm)
									[ ] // Enter LongTermCapGainDist
									[ ] wEnterTransaction.LongTermCapGainDist.SetText(sLongTerm)
									[ ] 
									[ ] // // Enter Miscellaneous
									[+] // if(Miscellaneous!=NULL)
										[ ] // wEnterTransaction.Miscellaneous.SetText(Miscellaneous)
									[ ] // Enter Miscellaneous
									[+] if(Miscellaneous!=NULL)
										[ ] wEnterTransaction.Miscellaneous.SetText(Miscellaneous)
										[+] if(sCategory!=NULL)
											[ ] wEnterTransaction.Miscellaneous.TypeKeys(KEY_TAB)
											[ ] wEnterTransaction.CategoryForMiscellaneous.SetText(sCategory)
											[ ] 
											[ ] 
											[ ] 
										[ ] 
									[ ] 
									[ ] // Click on Enter Done
									[ ] wEnterTransaction.EnterDone.Click()
									[ ] 
									[+] if(AddSecurityToQuicken2.Exists(10))
										[ ] AddSecurityToQuicken2.SetActive()
										[+] if (AddSecurityToQuicken2.SecurityListBox.Exists(10))
											[ ] AddSecurityToQuicken2.SecurityListBox.Select(1)
											[+] if (AddSecurityToQuicken2.NextButton.Exists(5))
												[ ] AddSecurityToQuicken2.NextButton.Click()
												[ ] sleep(SHORT_SLEEP)
											[ ] 
										[ ] 
										[ ] 
										[ ] 
										[ ] 
										[ ] 
										[ ] sleep(SHORT_SLEEP)
										[ ] 
										[ ] // This code is written to handle Connection error
										[+] if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
											[+] if(AddSecurityToQuicken.SelectTickerSymbol.Exists(SHORT_SLEEP))
												[ ] AddSecurityToQuicken.SelectTickerSymbol.Select("Add manually")
												[ ] AddSecurityToQuicken.Next.Click()
											[ ] 
										[ ] //Click on Done
										[+] if (AddSecurityToQuicken.Next.Exists(5))
											[ ] AddSecurityToQuicken.Next.Click()
										[ ] sleep(2)
										[ ] 
										[ ] AddSecurityToQuicken.Done.DoubleClick()
										[ ] 
										[ ] // 2015-09-30 KalyanG: if the date entered is a year or more
										[+] if(AlertMessage.Yes.Exists(3))
											[ ] AlertMessage.SetActive()
											[ ] AlertMessage.Yes.Click()
											[ ] WaitForState(AlertMessage , FALSE,5)
									[ ] 
									[ ] iFunctionResult = PASS
									[ ] 
									[ ] // Alert if date format is wrong
									[+] if(AlertMessage.Exists(SHORT_SLEEP))
										[ ] AlertMessage.OK.Click()
										[+] if(wEnterTransaction.Exists(SHORT_SLEEP))
											[ ] wEnterTransaction.Close()
											[ ] LogError("Date Formate is wrong")
										[ ] iFunctionResult = FAIL
										[ ] return iFunctionResult
										[ ] 
									[ ] 
								[+] else
									[ ] iFunctionResult = FAIL
									[ ] wEnterTransaction.Close()
									[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sBuyWindowTitle}")
									[ ] return iFunctionResult
									[ ] 
								[ ] 
							[ ] 
							[ ] // Reinvest Transaction
							[+] case("Reinvest")
								[ ] WaitForState(wEnterTransaction,TRUE,5)
								[+] if(wEnterTransaction.Exists(3))
									[ ] wEnterTransaction.SetActive()
									[ ] // Open Buy transaction window
									[ ] wEnterTransaction.EnterTransaction.SetFocus()
									[ ] 
									[ ] wEnterTransaction.EnterTransaction.Select(sTransactionTypeReinvest)
									[ ] sleep(2)
									[ ] // Enter transaction date
									[ ] wEnterTransaction.TransactionDate.SetText(sTransactionDate)
									[ ] 
									[ ] // Enter Security Name
									[ ] wEnterTransaction.SecurityName.SetText(sTickerSymbol)
									[ ] 
									[ ] wEnterTransaction.Dividend.SetText(sDivident)
									[ ] 
									[ ] // Enter Interest
									[ ] wEnterTransaction.Interest.SetText(sInterest)
									[ ] 
									[ ] // Enter ShortTermCapGainDist
									[ ] wEnterTransaction.ShortTermCapGainDist.SetText(sShortterm)
									[ ] 
									[ ] // Enter MidTermCapGainDist
									[ ] wEnterTransaction.MidTermCapGainDist.SetText(sMidterm)
									[ ] 
									[ ] // Enter LongTermCapGainDist
									[ ] wEnterTransaction.LongTermCapGainDist.SetText(sLongTerm)
									[ ] 
									[ ] // Enter Commision
									[ ] wEnterTransaction.Commission.SetText(Miscellaneous)
									[ ] 
									[ ] 
									[ ] 
									[ ] //Enter divident share
									[ ] wEnterTransaction.DividentShare.SetText(DiviShare)
									[ ] 
									[ ] //Enter Intrest share
									[ ] wEnterTransaction.IntrestShare.SetText(IntShare)
									[ ] 
									[ ] //enter short share
									[ ] wEnterTransaction.ShortShare.SetText(ShortShare)
									[ ] 
									[ ] //Enter mid term share
									[ ] wEnterTransaction.MidShare.SetText(MidShare)
									[ ] 
									[ ] //Enter long share
									[ ] wEnterTransaction.LongShare.MoveMouse()
									[ ] 
									[ ] wEnterTransaction.LongShare.SetFocus()
									[ ] 
									[ ] wEnterTransaction.LongShare.SetText(LongShare)
									[ ] 
									[ ] 
									[ ] // Click on Enter Done
									[ ] wEnterTransaction.EnterDone.Click()
									[ ] 
									[ ] // Check if Add security window is present
									[+] if(AddSecurityToQuicken2.Exists(10))
										[ ] AddSecurityToQuicken2.SetActive()
										[+] if (AddSecurityToQuicken2.SecurityListBox.Exists(10))
											[ ] AddSecurityToQuicken2.SecurityListBox.Select(1)
											[+] if (AddSecurityToQuicken2.NextButton.Exists(5))
												[ ] AddSecurityToQuicken2.NextButton.Click()
												[ ] sleep(SHORT_SLEEP)
											[ ] 
										[ ] 
										[ ] 
										[ ] 
										[ ] 
										[ ] 
										[ ] sleep(SHORT_SLEEP)
										[ ] 
										[ ] // This code is written to handle Connection error
										[+] if (AddSecurityToQuicken.NoDataFoundFor.Exists(MEDIUM_SLEEP) == TRUE)
											[+] if(AddSecurityToQuicken.SelectTickerSymbol.Exists(SHORT_SLEEP))
												[ ] AddSecurityToQuicken.SelectTickerSymbol.Select("Add manually")
												[ ] AddSecurityToQuicken.Next.Click()
											[ ] 
										[ ] //Click on Done
										[+] if (AddSecurityToQuicken.Next.Exists(5))
											[ ] AddSecurityToQuicken.Next.Click()
										[ ] sleep(2)
										[ ] 
										[ ] AddSecurityToQuicken.Done.DoubleClick()
										[ ] 
										[ ] // 2015-09-30 KalyanG: if the date entered is a year or more
										[+] if(AlertMessage.Yes.Exists(3))
											[ ] AlertMessage.SetActive()
											[ ] AlertMessage.Yes.Click()
											[ ] WaitForState(AlertMessage , FALSE,5)
										[ ] 
									[ ] 
									[ ] sleep(10)
									[ ] iFunctionResult = PASS
									[ ] 
									[ ] 
									[ ] // Alert if date format is wrong
									[+] if(AlertMessage.Exists(SHORT_SLEEP))
										[ ] AlertMessage.OK.Click()
										[+] if(wEnterTransaction.Exists(SHORT_SLEEP))
											[ ] wEnterTransaction.Close()
											[ ] LogError("Date Formate is wrong")
										[ ] iFunctionResult = FAIL
										[ ] return iFunctionResult
										[ ] 
									[ ] 
								[+] else
									[ ] iFunctionResult = FAIL
									[ ] wEnterTransaction.Close()
									[ ] ReportStatus("Window Title validation", FAIL, "Actual Window -  {sWindowTitle} is not matching with Expected Window - {sBuyWindowTitle}")
									[ ] return iFunctionResult
									[ ] 
								[ ] // 
							[ ] 
							[+] default
								[ ] // If Transaction Type not found 
								[ ] print(sTransactionType + "TransactionType Not found")
								[ ] // Return Fail  to the function
								[ ] iFunctionResult = FAIL
						[ ] 
					[+] else
						[ ] ReportStatus(" Account Page Open", FAIL, " Account is not invoked from AccountBar") 
					[ ] 
					[ ] 
					[ ] 
				[ ] 
				[ ] 
				[ ] 
				[ ] 
			[ ] 
			[ ] 
		[+] except
			[+] if (wEnterTransaction.Exists(SHORT_SLEEP))
				[ ] wEnterTransaction.SetActive()
				[ ] wEnterTransaction.close()
				[ ] 
			[ ] ExceptData()
			[ ] // Return FAIL to the function
			[ ] iFunctionResult = FAIL
			[ ] 
		[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] // // ==========================================================
	[+] // FUNCTION: SelectTransactionAction()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will find the transaction and select the required action for that transaction
		[ ] //
		[ ] // PARAMETERS:			STRING  	sAccountType		E.g. Banking
		[ ] //							STRING      sTab				E.g. General, Online Services, Display Option
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If expected transaction action window opened successfully
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //  Nov 23, 2012	Udita Dube Created
	[ ] // ==========================================================
	[+] public INTEGER SelectTransactionAction(STRING sWindowType, STRING sTxnSearch, STRING sTxnAction)
		[+] // Variable declaration
			[ ] INTEGER iValidate,irowcount,i,iSelect
		[ ] 
		[+] do
			[ ] 
			[+] switch(sTxnAction)
				[+] case "Move Transaction(s)"
					[ ] irowcount=15
				[ ] 
				[+] case "Delete"
					[ ] irowcount=12
				[ ] 
			[ ] 
			[ ] 
			[ ] iValidate = FindTransaction(sWindowType,sTxnSearch)		// find transaction
			[+] if(iValidate == PASS)
				[ ] ReportStatus("Validate Find Transaction", iValidate, "Transaction with Input - {sTxnSearch} is found") 
				[+] if(sWindowType=="MDI")
					[ ] 
					[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
					[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
					[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
					[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
					[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
					[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
					[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
					[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
					[ ] 
					[ ] sleep(SHORT_SLEEP)
					[ ] MDIClient.AccountRegister.TxList.TxToolBar.MoreActions.Click()
					[ ] // for ( i = 1; i<=irowcount; i++)
					[ ] MDIClient.AccountRegister.TxList.TxToolBar.TypeKeys(Replicate(KEY_DN,irowcount))
					[ ] MDIClient.AccountRegister.TxList.TxToolBar.Typekeys(KEY_ENTER)
					[ ] 
				[+] else
					[ ] 
					[ ] // Turn ON "Use Popup Register" option for Popup window type
					[ ] iSelect=UsePopupRegister("ON")
					[+] if(iSelect==PASS)
						[ ] ReportStatus("Verify Popup Register Option", PASS, "Popup register is ON for Popup") 
					[+] else
						[ ] ReportStatus("Verify Popup Register Option", FAIL, "Popup register is not ON for Popup") 
						[ ] 
					[ ] 
					[ ] BankingPopUp.VerifyEnabled(TRUE, 20)
					[ ] BankingPopUp.SetActive ()
					[ ] BankingPopUp.TypeKeys(KEY_TAB)
					[ ] BankingPopUp.TypeKeys(KEY_TAB)
					[ ] BankingPopUp.TypeKeys(KEY_TAB)
					[ ] BankingPopUp.TypeKeys(KEY_TAB)
					[ ] BankingPopUp.TypeKeys(KEY_TAB)
					[ ] BankingPopUp.TypeKeys(KEY_TAB)
					[ ] BankingPopUp.TypeKeys(KEY_TAB)
					[ ] BankingPopUp.TypeKeys(KEY_TAB)
					[ ] sleep(SHORT_SLEEP)
					[ ] BankingPopUp.TxList.TxToolbar.AccountActions.Click()
					[+] for ( i = 1; i<=irowcount; i++)
						[ ] BankingPopUp.TxList.TxToolbar.Typekeys(KEY_DN)
					[ ] BankingPopUp.TxList.TxToolbar.Typekeys(KEY_ENTER)
					[ ] 
					[ ] iFunctionResult = PASS
					[ ] 
				[ ] 
				[ ] // Message will be displayed for "Delete"
				[+] if(AlertMessage.Exists(3))
					[ ] AlertMessage.Yes.Click()
				[ ] 
				[+] if(BankingPopUp.Exists(SHORT_SLEEP))
					[ ] BankingPopUp.Close()
				[ ] 
				[ ] iFunctionResult=PASS
				[ ] 
				[ ] 
			[+] else
				[ ] ReportStatus("Validate Find Transaction", iValidate, "Transaction with Input - {sTxnSearch} is not found") 
				[ ] iFunctionResult=FAIL
			[ ] 
			[ ] 
			[ ] 
		[+] except
			[+] if(AccountDetails.Exists(SHORT_SLEEP))
				[ ] AccountDetails.Close()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] // 
	[ ] // // ==========================================================
	[+] // // FUNCTION: AccountRegisterSingleLineTwoLine()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will shift between single line and two line versions of Account Register 
		[ ] // //
		[ ] // // PARAMETERS:		 STRING		sAccountType           Type of account to be selected (e.g. Banking, Investing etc) 
		[ ] // //                                                           sAccountName         Name of account to convert to two line register
		[ ] // //
		[ ] // //
		[ ] // // RETURNS:			INTEGER         PASS Once register is changed
		[ ] // //                                                         FAIL   if any exception occurs
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //	 Feb 06, 2013	Dean Paes created
	[ ] // // ==========================================================
	[+] // public INTEGER AccountRegisterSingleLineTwoLine(STRING sAccountName,STRING sAccountType)                           
		[ ] // 
		[+] // do
			[ ] // 
			[+] // if(QuickenWindow.Exists(5))
				[ ] // 
				[ ] // QuickenWindow.SetActive()
				[ ] // //Activate two line mode or Single line mode
				[ ] // SelectAccountFromAccountBar(sAccountName,sAccountType)
				[ ] // QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer1.ListBox.TypeKeys("<Ctrl-2>")
				[ ] // iFunctionResult=PASS
				[ ] // 
			[+] // else
				[ ] // iFunctionResult=FAIL
				[ ] // 
			[ ] // 
		[+] // except
			[ ] // iFunctionResult=FAIL
			[ ] // 
		[ ] // return iFunctionResult
		[ ] // 
	[ ] // 
	[ ] // 
	[ ] // ==========================================================
	[+] // FUNCTION: GetTransactionsInRegister()
		[ ] // // // 
		[ ] // // // DESCRIPTION:
		[ ] // // // This function will search an account for a transaction and return a list of those transactions 
		[ ] // // // 
		[ ] // // // PARAMETERS:		STRING	 			sSearchEntry
		[ ] // // // 
		[ ] // // // 
		[ ] // // // RETURNS:			INTEGER		0		If list is returned
		[ ] // // //                                                          1		If any error occurs
		[ ] // // // 
		[ ] // // // REVISION HISTORY:
		[ ] // // // Dean Paes  created  Jan 11 2013
	[ ] // ==========================================================
	[+] public LIST OF STRING GetTransactionsInRegister(STRING sSearchEntry)
		[ ] STRING sActual,sExpected,hWnd,sCaption
		[ ] INTEGER iItem, iCounter
		[ ] LIST OF STRING lsTransactionList
		[ ] 
		[+] if(QuickenWindow.Exists(SHORT_SLEEP))
			[ ] QuickenWindow.SetActive()
			[ ] hWnd=NULL
			[ ] sActual=NULL
			[ ] bMatch=FALSE
			[ ] iItem=0
			[ ] QuickenWindow.TypeKeys(KEY_CTRL_H)
			[ ] //Agent.SetOption(OPT_NO_ICONIC_MESSAGE_BOXES,True)
			[ ] WaitForState(DlgFindAndReplace,True,2)
			[ ] DlgFindAndReplace.SearchTextField.SetText(sSearchEntry)
			[ ] DlgFindAndReplace.FindButton.Click()
			[+] if (AlertMessage.Exists(5))
				[ ] AlertMessage.SetActive()
				[ ] sCaption=AlertMessage.MessageText.GetText()
				[ ] AlertMessage.OK.Click()
				[ ] WaitForState(AlertMessage,FALSE,5)
				[ ] ReportStatus("Verify Transaction exists,", FAIL, "Transaction with Payee: {sSearchEntry} doesn't exist as message alert: {sCaption} is displayed.")
				[ ] 
			[+] else
				[ ] 
				[ ] ReportStatus("Verify Transaction exists,", PASS, "Transaction with Payee {sSearchEntry} exists.")
				[ ] hWnd = str(DlgFindAndReplace.FoundListBox.ListBox1.GetHandle())
				[+] for (iCounter=0;iCounter<DlgFindAndReplace.FoundListBox.ListBox1.GetItemCount();iCounter++)
					[ ] sActual = QwAutoExecuteCommand("LISTBOX_GETFULLROW", hWnd,  "{iCounter}")
					[ ] ListAppend(lsTransactionList,sActual)
					[ ] 
					[ ] 
				[ ] 
			[ ] DlgFindAndReplace.SetActive()
			[ ] DlgFindAndReplace.DoneButton.Click()
			[ ] WaitForState(DlgFindAndReplace,FALSE,2)
			[ ] 
		[+] else
			[ ] ReportStatus("Find Transaction In register",FAIL,"Exception")
		[ ] return lsTransactionList
	[ ] 
	[ ] //  // ==========================================================
	[+] //  // FUNCTION: GetTransactionsUsingEditTransactions()
		[ ] // // // // 
		[ ] // // // // DESCRIPTION:
		[ ] // // // // This function will search an account for a transaction and return a list of those transactions 
		[ ] // // // // 
		[ ] // // // // PARAMETERS:		STRING	 			sSearchEntry
		[ ] // // // // 
		[ ] // // // // 
		[ ] // // // // RETURNS:			INTEGER		0		If list is returned
		[ ] // // // //                                                          1		If any error occurs
		[ ] // // // // 
		[ ] // // // // REVISION HISTORY:
		[ ] // // // // Mukesh created  Aug 14 2013
	[ ] // // ==========================================================
	[+] public LIST OF STRING GetTransactionsUsingEditTransactions(STRING sSearchEntry)
		[ ] STRING sActual,sExpected,hWnd,sCaption
		[ ] INTEGER iItem, iCounter ,iCount
		[ ] LIST OF STRING lsTransactionList
		[+] do
			[+] if (DlgFindAndReplace.Exists(SHORT_SLEEP))
				[ ] DlgFindAndReplace.SetActive()
				[ ] hWnd = str(DlgFindAndReplace.FoundListBox.ListBox1.GetHandle())
				[ ] iCount=DlgFindAndReplace.FoundListBox.ListBox1.GetItemCount()
				[+] if (iCount==0)
					[ ] ReportStatus("Verify Find and Replace dialog.",FAIL," Transaction didn't appear on Find and Replace dialog.")
				[+] else
					[ ] 
					[+] for (iCounter=0;iCounter<DlgFindAndReplace.FoundListBox.ListBox1.GetItemCount();iCounter++)
						[ ] sActual = QwAutoExecuteCommand("LISTBOX_GETFULLROW", hWnd,  "{iCounter}")
						[+] ListAppend(lsTransactionList,sActual)
							[ ] 
							[ ] 
					[ ] DlgFindAndReplace.DoneButton.Click()
					[ ] WaitForState(DlgFindAndReplace,FALSE,2)
			[+] else
				[ ] ReportStatus("Verify Find and Replace dialog.",FAIL,"Find and Replace dialog didn't appear.")
		[+] except
			[ ] ExceptLog()
		[ ] return lsTransactionList
	[ ] 
	[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: FindTransactionsExistInRegister()
		[ ] // // // 
		[ ] // // // DESCRIPTION:
		[ ] // // // This function will search all accounts for a transaction if transaction exists it will return Pass else Fail
		[ ] // // // 
		[ ] // // // PARAMETERS:		STRING	 			sSearchEntry
		[ ] // // //
		[ ] // // //
		[ ] // // // 
		[ ] // // // RETURNS:			INTEGER		0		If transaction is found
		[ ] // // //                                                          1		If any error occurs
		[ ] // // // 
		[ ] // // // REVISION HISTORY:
		[ ] // // // Dean Paes  created  Jan 13 2013
	[ ] // ==========================================================
	[+] public INTEGER FindTransactionsInRegister(STRING sSearchEntry)
		[ ] STRING sActual,sExpected,hWnd,sCaption
		[ ] INTEGER iItem, iCounter
		[ ] 
		[ ] 
		[+] do
			[ ] QuickenWindow.SetActive()
			[ ] hWnd=NULL
			[ ] sActual=NULL
			[ ] bMatch=FALSE
			[ ] iItem=0
			[ ] QuickenWindow.TypeKeys(KEY_CTRL_H)
			[+] if (DlgFindAndReplace.Exists(2))
				[ ] DlgFindAndReplace.SearchTextField.SetText(sSearchEntry)
				[ ] DlgFindAndReplace.FindButton.Click()
				[+] if (AlertMessage.Exists(2))
					[ ] sCaption=AlertMessage.GetCaption()
					[+] if(sCaption=="Quicken 201*")
						[ ] ReportStatus("Verify Transaction exists,", FAIL, "Transaction with {sSearchEntry} doesn't exist.")
						[ ] AlertMessage.OK.Click()
						[ ] 
				[+] else
					[ ] ReportStatus("Verify Transaction exists,", PASS, "Transaction with {sSearchEntry} exists.")
					[ ] hWnd = str(DlgFindAndReplace.FoundListBox.ListBox1.GetHandle())
					[+] for (iCounter=0;iCounter<DlgFindAndReplace.FoundListBox.ListBox1.GetItemCount();iCounter++)
						[ ] sActual = QwAutoExecuteCommand("LISTBOX_GETFULLROW", hWnd,  "{iCounter}")
						[ ] bMatch = MatchStr("*{sSearchEntry}*", sActual)
						[+] if (bMatch)
							[ ] ReportStatus("Verify transactions present in register.", PASS, "Transactions found in Account Register")
							[ ] iFunctionResult=PASS
							[ ] break
						[ ] 
						[ ] 
					[+] if(bMatch==FALSE)
						[ ] ReportStatus("Verify transactions present in register.", FAIL, "Transactions not found in Account Register")
						[ ] 
						[ ] 
				[ ] DlgFindAndReplace.DoneButton.Click()
				[ ] WaitForState(DlgFindAndReplace,FALSE,2)
			[+] else
				[ ] ReportStatus("Verify Find and Replace dialog exists,", PASS, "Find and Replace dialog does not exist.")
			[ ] 
		[+] except
			[ ] iFunctionResult=FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] // // ==========================================================
	[+] // // FUNCTION: GetAccountNameFromRegister()
		[ ] // //
		[ ] // // DESCRIPTION:			
		[ ] // // This function will close a perticular account
		[ ] // //
		[ ] // // PARAMETERS:			STRING  	sAccountType		            E.g. Banking
		[ ] // //							STRING      sRegisterWindowType		MDI or PopUp
		[ ] // //							INTEGER    iRow 				            Row number where account is present      
		[ ] // //
		[ ] // // RETURNS:				INTEGER	PASS	If Account name is returned
		[ ] // //										FAIL	In case of failure
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // // Feb 7 , 2013   Dean Paes created.
	[ ] // // ==========================================================
	[+] // public STRING GetAccountNameFromRegister(STRING sRegisterWindowType,STRING sAccountType,STRING sAccountName)
		[ ] // 
		[ ] // 
		[+] // do
			[ ] // 
			[ ] // 
			[+] // if(sRegisterWindowType=="MDI")
				[ ] // 
				[ ] // UsePopupRegister("OFF")
				[ ] // SelectAccountFromAccountBar(sAccountName,sAccountType)
				[ ] // sAccountName=QuickenWindow.QWNavigator1.AccountName.GetText()
				[ ] // return sAccountName
				[ ] // 
			[ ] // 
			[+] // else if(sRegisterWindowType=="PopUp")
				[ ] // 
				[ ] // 
				[ ] // UsePopupRegister("ON")
				[ ] // SelectAccountFromAccountBar(sAccountName,sAccountType)
				[ ] // QuickenWindow.AccountRegisterPopUpWindow.SetActive()
				[ ] // sAccountName=QuickenWindow.AccountRegisterPopUpWindow.GetCaption()
				[ ] // QuickenWindow.AccountRegisterPopUpWindow.Close()
				[ ] // return sAccountName
				[ ] // 
			[ ] // 
			[+] // else
				[ ] // ReportStatus("Get Account Name from Register",FAIL,"Invalid Window type specified for register")
			[ ] // 
		[+] // except
			[ ] // ExceptLog()
			[ ] // 
		[ ] // 
		[ ] // 
	[ ] 
	[ ] 
	[+] // FUNCTION: AddPropertyTransaction()
		[ ] //
		[ ] // DESCRIPTION:		This function will add Transaction to Checking account
		[ ] // 
		[ ] //
		[ ] // PARAMETERS:		STRING 	sWindowType			MDI or Popup
		[ ] //						STRING 	sTransactionType		Payment or Deposit
		[ ] //						STRING 	sAmount				Transaction Amount
		[ ] //						STRING	sDate					Date of the transaction
		[ ] //						STRING	sChequeNo			Cheque number [Optional]
		[ ] //						STRING	sPayee				Payee	[Optional]
		[ ] //						STRING 	sMemo				Memo [Optional]
		[ ] //						STRING 	sCategory				Category [Optional]
		[ ] //						STRING 	sTag					Tag [Optional]
		[ ] //
		[ ] // RETURNS:			INTEGER	0 = If Transaction is created successfully
		[ ] //									1 = if any error occurs while adding Transaction
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // Dec 03, 2010	Mamta Jain created
		[ ] // Dec 27, 2010  	Udita Dube  Created
		[ ] // Dec 30, 2010	Udita Dube  merged functions for MDI and Popup
	[ ] // Added By Abhijit S on 07/02/2013
	[ ] // ==========================================================
	[+] public INTEGER AddPropertyTransaction(STRING sWindowType,STRING sTransactionType, STRING sAmount, STRING sDate , STRING sPayee optional, STRING sMemo  optional, STRING sCategory optional, STRING sTag optional)
		[+] // Variable declaration
			[ ] BOOLEAN bBalanceCheck
			[ ] INTEGER  iSelect
			[ ] STRING sActual
		[+] do
			[+] if(IsNULL(sDate))
				[ ] sDate = ""
			[+] if(IsNULL(sPayee))
				[ ] sPayee = ""
				[ ] 
			[+] if(IsNULL(sMemo))
				[ ] sMemo = ""
			[+] if( IsNULL(sCategory))
				[ ] sCategory = ""
			[+] if(IsNULL(sTag ))
				[ ] sTag = ""
			[ ] 
			[ ] 
			[+] switch(sWindowType)
				[ ] 
				[+] case("MDI")
					[ ] 
					[ ] // Turn Off "Use Popup Register" option for MDI window type
					[ ] iSelect=UsePopupRegister("OFF")
					[+] if(iSelect==PASS)
						[ ] ReportStatus("Verify Popup Register Option", PASS, "Popup register is OFF for MDI") 
						[ ] 
						[ ] 
						[ ] QuickenWindow.SetActive ()
						[ ] QuickenWindow.TypeKeys("{KEY_CONTROL}+ n")
						[ ] 
						[ ] // For Premier and Deluxe SKU's, tag column is not selected. Include the tag column from Account Settings options.
						[+] // if(SKU_TOBE_TESTED == "PREMIER" || SKU_TOBE_TESTED == "DELUXE")
							[ ] // BankingMDI.AccountActions.Click ()
							[ ] // BankingMDI.AccountActions.TypeKeys(  Replicate (KEY_DN, 16)) 
							[ ] // BankingMDI.AccountActions.TypeKeys(KEY_ENTER)
							[ ] // MDICalloutHolder.SetActive ()
							[ ] // MDICalloutHolder.CalloutPopup.Tag.Click (1, 12, 12)
							[ ] // MDICalloutHolder.CalloutPopup.Done.Click (1, 29, 11)
						[ ] 
						[+] switch(sTransactionType) 
							[+] case("Payment")
								[ ] 
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sDate)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sPayee)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sMemo)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sCategory)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[+] if(SKU_TOBE_TESTED != "QNUE")
									[ ] MDIClient.AccountRegister.TxList.TypeKeys (sTag)
									[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sAmount)
								[ ] sleep(SHORT_SLEEP)
								[ ] MDIClient.AccountRegister.TxList.TxToolBar.Save.Click()
								[ ] iFunctionResult = PASS
							[ ] 
							[+] case("Deposit")
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sDate)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sPayee)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sMemo)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sCategory)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sTag)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sAmount)
								[ ] sleep(SHORT_SLEEP)
								[ ] MDIClient.AccountRegister.TxList.TxToolBar.Save.Click()
								[ ] iFunctionResult = PASS
							[ ] 
							[+] default
								[ ] iFunctionResult = FAIL
							[ ] 
							[ ] 
						[ ] 
						[+] if(AlertMessage.Exists(SHORT_SLEEP)) // Handle message - You are entering a transaction over a year away. Is this correct?
							[ ] AlertMessage.SetActive()
							[ ] AlertMessage.DonTShowAgain.Check()
							[ ] AlertMessage.Yes.Click()
						[+] else if(AlertMessage.Exists(SHORT_SLEEP))
							[ ] AlertMessage.DonTShowAgain.Check()
							[ ] AlertMessage.Yes.Click()
						[+] else
							[ ] // do nothing
						[ ] 
					[+] else
						[ ] ReportStatus("Verify Popup Register Option", FAIL, "Popup register is not OFF for MDI") 
						[ ] 
					[ ] 
				[ ] 
				[+] case("PopUp")
					[ ] 
					[ ] // Turn ON "Use Popup Register" option for Popup window type
					[ ] iSelect=UsePopupRegister("ON")
					[ ] 
					[+] if(iSelect==PASS)
						[ ] ReportStatus("Verify Popup Register Option", PASS, "Popup register is ON for Popup") 
						[ ] 
						[ ] BankingPopUp.VerifyEnabled(TRUE, 20)
						[ ] // Maximize the Property account window as Popup Register is on
						[ ] BankingPopUp.SetActive()
						[ ] BankingPopUp.Maximize()
						[ ] BankingPopUp.TypeKeys("{KEY_CONTROL}+ n")
						[ ] 
						[ ] // For Premier and Deluxe SKU's, tag column is not selected. Include the tag column from Account Settings options.
						[+] // if(SKU_TOBE_TESTED == "PREMIER" || SKU_TOBE_TESTED == "DELUXE")
							[ ] // BankingPopUp.AccountActions.Click ()
							[ ] // BankingPopUp.AccountActions.TypeKeys(  Replicate (KEY_DN, 16)) 
							[ ] // BankingPopUp.AccountActions.TypeKeys(KEY_ENTER)
							[ ] // PopUpCalloutHolder.SetActive ()
							[ ] // PopUpCalloutHolder.CalloutPopup.Tag.Click (1, 12, 12)
							[ ] // PopUpCalloutHolder.CalloutPopup.Done.Click (1, 29, 11)
						[ ] 
						[+] switch(sTransactionType) 
							[+] case("Payment")
								[ ] 
								[ ] BankingPopUp.TypeKeys (sDate)
								[ ] BankingPopUp.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TypeKeys (sPayee)
								[ ] BankingPopUp.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TypeKeys (sMemo)
								[ ] BankingPopUp.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TypeKeys (sCategory)
								[ ] BankingPopUp.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TypeKeys (sTag)
								[ ] BankingPopUp.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TypeKeys (sAmount)
								[ ] sleep(SHORT_SLEEP)
								[ ] BankingPopUp.TxList.TxToolbar.Save.Click()
								[ ] 
								[ ] iFunctionResult = PASS
							[ ] 
							[+] case("Deposit")
								[ ] BankingPopUp.SetActive()
								[ ] BankingPopUp.TxList.TypeKeys (sDate)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sPayee)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sMemo)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sCategory)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sTag)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] //BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sAmount)
								[ ] sleep(SHORT_SLEEP)
								[ ] BankingPopUp.TxList.TxToolbar.Save.Click()
								[ ] iFunctionResult = PASS
							[ ] 
							[+] default
								[ ] iFunctionResult = FAIL
						[ ] 
						[+] // if(Quicken2012Popup.Exists(SHORT_SLEEP)) // Handle message - You are entering a transaction over a year away. Is this correct?
							[ ] // Quicken2012Popup.SetActive()
							[ ] // Quicken2012Popup.DonTShowAgain.Check()
							[ ] // Quicken2012Popup.Yes.Click()
						[+] // else if(PopUpDeleteTransaction.Exists(SHORT_SLEEP))
							[ ] // PopUpDeleteTransaction.DonTShowAgain.Check()
							[ ] // PopUpDeleteTransaction.Yes.Click()
						[+] // else
							[ ] // // do nothing
						[ ] 
					[+] else
						[ ] ReportStatus("Verify Popup Register Option", FAIL, "Popup register is not ON for Popup") 
						[ ] 
					[ ] 
			[ ] 
		[+] except
			[+] if(BankingPopUp.Exists(SHORT_SLEEP))
				[ ] BankingPopUp.Close()
				[ ] 
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: AddBusinessInvoiceTransaction()
		[ ] //
		[ ] // DESCRIPTION:		This function will add Invoice Transaction to Business account
		[ ] // 
		[ ] //		QTY						
		[ ] // PARAMETERS:		STRING 	sCustomerVendor           Customer/Vendor
		[ ] //						STRING 	sProject		                     Project [Optional]
		[ ] //						STRING 	sBusinessTag			BusinessTag  [Optional]
		[ ] //						STRING	sBillTo					BillTo  [Optional]
		[ ] //						STRING	sShipTo			              ShipTo  [Optional]
		[ ] //						STRING	sItem				       Item  [Optional]
		[ ] //						STRING 	sCategory				Category [Optional]
		[ ] //						STRING 	sDescription				Description [Optional]
		[ ] //						STRING 	sQTY				       QTY [Optional]
		[ ] //						STRING 	sRate				       Rate [Optional]
		[ ] //						STRING 	sAmount			       Amount [Optional]
		[ ] //						STRING 	sTaxFlag				TaxFlag [Optional]
		[ ] //						STRING 	sTaxPercentage			TaxPercentage [Optional]
		[ ] //						STRING 	sCustomMessage		 CustomeMessage[Optional]
		[ ] 
		[ ] 
		[ ] //
		[ ] // RETURNS:			INTEGER	0 = If Transaction is created successfully
		[ ] //									1 = if any error occurs while adding Transaction
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // March 30, 2013	Mukesh
	[ ] // ==========================================================
	[+] public INTEGER AddBusinessInvoiceTransaction(STRING sCustomerVendor, STRING sProject optional, STRING sBusinessTag optional, STRING sBillTo optional , STRING sShipTo optional, STRING sItem optional, STRING sCategory  optional, STRING sDescription optional, STRING sQTY optional,STRING sRate optional,STRING sAmount optional,STRING sTaxFlag optional,STRING sTaxPercentage optional,STRING sCustomMessage optional)
		[+] // Variable declaration
			[ ] BOOLEAN bBalanceCheck
			[ ] INTEGER  iSelect
			[ ] STRING sActual
		[+] do
			[+] if(IsNULL(sProject))
				[ ] sProject = ""
			[+] if(IsNULL(sBusinessTag))
				[ ] sBusinessTag = ""
				[ ] 
			[+] if(IsNULL(sBillTo))
				[ ] sBillTo = ""
				[ ] 
			[+] if(IsNULL(sShipTo))
				[ ] sShipTo = ""
				[ ] 
			[+] if(IsNULL(sItem))
				[ ] sItem = ""
			[+] if( IsNULL(sCategory))
				[ ] sCategory = ""
			[+] if( IsNULL(sDescription))
				[ ] sDescription = ""
			[+] if( IsNULL(sQTY))
				[ ] sQTY = ""
			[+] if( IsNULL(sRate))
				[ ] sRate = "0"
			[+] if( IsNULL(sAmount))
				[ ] sAmount = ""
			[+] if( IsNULL(sTaxFlag))
				[ ] sTaxFlag = ""
			[+] if( IsNULL(sTaxPercentage))
				[ ] sTaxPercentage = "0"
			[+] if( IsNULL(sCustomMessage))
				[ ] sCustomMessage = ""
			[ ] 
			[ ] 
			[+] if (DlgInvoice.Exists(SHORT_SLEEP))
				[ ] DlgInvoice.SetActive()
				[ ] DlgInvoice.CustomerTextField.SetText(sCustomerVendor)
				[ ] DlgInvoice.ProjectJobTextField.SetText(sProject)
				[ ] DlgInvoice.BusinessTagTextField.SetText(sBusinessTag)
				[ ] DlgInvoice.BILLTO1TextField.SetText(sBillTo)
				[ ] DlgInvoice.SHIPTO1TextField.SetText(sShipTo)
				[ ] DlgInvoice.QWListViewerItem.ListBox.Select("#1")
				[ ] DlgInvoice.QWListViewerItem.ListBox.TypeKeys(Replicate (KEY_SHIFT_TAB,2))
				[ ] DlgInvoice.QWListViewerItem.ListBox.TypeKeys(sItem) 
				[ ] DlgInvoice.QWListViewerItem.ListBox.TypeKeys(KEY_TAB)
				[+] if (AlertMessage.Exists(SHORT_SLEEP))
					[ ] AlertMessage.Yes.Click()
					[+] if (DlgNewItem.Exists(SHORT_SLEEP))
						[ ] DlgNewItem.SetActive()
						[ ] DlgNewItem.NewItemTextField.SetText(sItem)
						[ ] DlgNewItem.OKButton.Click()
						[ ] WaitForState(DlgNewItem,false,1)
					[+] else
						[ ] ReportStatus("Verify dialog New Item",FAIL,"Verify dialog New Item: Dialog New Item didn't appear.")
						[ ] 
					[ ] 
				[ ] DlgInvoice.QWListViewerItem.ListBox.TypeKeys(sCategory) 
				[ ] DlgInvoice.QWListViewerItem.ListBox.TypeKeys(KEY_TAB)
				[ ] DlgInvoice.QWListViewerItem.ListBox.TypeKeys(sDescription) 
				[ ] DlgInvoice.QWListViewerItem.ListBox.TypeKeys(KEY_TAB)
				[ ] DlgInvoice.QWListViewerItem.ListBox.TypeKeys(sQTY) 
				[ ] DlgInvoice.QWListViewerItem.ListBox.TypeKeys(KEY_TAB)
				[ ] DlgInvoice.QWListViewerItem.ListBox.TypeKeys(sRate) 
				[ ] DlgInvoice.QWListViewerItem.ListBox.TypeKeys(KEY_TAB)
				[ ] DlgInvoice.QWListViewerItem.ListBox.TypeKeys(sAmount) 
				[ ] DlgInvoice.QWListViewerItem.ListBox.TypeKeys(KEY_TAB)
				[ ] DlgInvoice.QWListViewerItem.ListBox.TypeKeys(sTaxFlag) 
				[ ] DlgInvoice.TaxTextField.SetText(sTaxPercentage) 
				[ ] DlgInvoice.CustomerMessageTextField.SetText(sCustomMessage)
				[ ] DlgInvoice.SaveAndDoneButton.Click()
				[+] if (AlertMessage.Exists(SHORT_SLEEP))
					[ ] AlertMessage.Yes.Click()
					[+] if (DlgNewProjectJob.Exists(SHORT_SLEEP))
						[ ] DlgNewProjectJob.SetActive()
						[ ] DlgNewProjectJob.OKButton.Click()
						[ ] WaitForState(DlgNewProjectJob,false,1)
					[+] else
						[ ] ReportStatus("Verify dialog New Project Job",FAIL,"Verify dialog New Project Job: Dialog New Project Job didn't appear.")
						[ ] 
					[ ] 
				[ ] WaitForState(DlgInvoice,False,1)
				[ ] iFunctionResult = PASS
				[ ] 
				[ ] 
			[+] else
				[ ] ReportStatus("Verify Invoice dialog.", FAIL, "Verify Invoice dialog: Invoice dialog doesn't exist.")
				[ ] iFunctionResult = FAIL
			[ ] 
			[ ] 
		[+] except
				[ ] Exceptlog()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] // ==========================================================
	[+] // FUNCTION: AddCustomerVendorPayment()
		[ ] //
		[ ] // DESCRIPTION:		This function will add Invoice Transaction to Business account
		[ ] // 
		[ ] //		QTY						
		[ ] // PARAMETERS:		STRING 	sCustomerVendor           Customer/Vendor
		[ ] //						STRING 	sToFromAccount		ToFromAccount 
		[ ] //						STRING 	sAmount			       Amount 
		[ ] //						STRING	sCheckNumber			CheckNumber [Optional]
		[ ] //						STRING	sMemo			              Memo  [Optional]
		[ ] 
		[ ] 
		[ ] //
		[ ] // RETURNS:			INTEGER	0 = If Transaction is created successfully
		[ ] //									1 = if any error occurs while adding Transaction
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // March 30, 2013	Mukesh
	[ ] // ==========================================================
	[+] public INTEGER AddCustomerVendorPayment(STRING sCustomerVendor, STRING sToFromAccount , STRING sAmount , STRING sCheckNumber optional , STRING sMemo optional)
		[+] // Variable declaration
			[ ] BOOLEAN bBalanceCheck
			[ ] INTEGER  iSelect
			[ ] STRING sActual
		[+] do
			[+] if(IsNULL(sCheckNumber))
				[ ] sCheckNumber = ""
			[+] if(IsNULL(sMemo))
				[ ] sMemo = ""
				[ ] 
			[ ] 
			[+] if (DlgPaymentInvoices.Exists(5))
				[ ] DlgPaymentInvoices.SetActive()
				[ ] DlgPaymentInvoices.CustomerVendorTextField.SetText(sCustomerVendor)
				[ ] DlgPaymentInvoices.ToFromAccountPopupList.Select(trim(sToFromAccount))
				[ ] DlgPaymentInvoices.AmountTextField.SetText(sAmount)
				[ ] DlgPaymentInvoices.CheckNumberTextField.SetText(sCheckNumber)
				[ ] DlgPaymentInvoices.MemoTextField.SetText(sMemo)
				[ ] DlgPaymentInvoices.EnterButton.Click()
				[ ] WaitForState(DlgPaymentInvoices,False,1)
				[ ] iFunctionResult = PASS
				[ ] 
			[+] else
				[ ] ReportStatus("Verify Invoice dialog.", FAIL, "Verify Invoice dialog: Invoice dialog doesn't exist.")
				[ ] iFunctionResult = FAIL
			[ ] 
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] // ==========================================================
	[+] // FUNCTION: AddCustomerCreditTransaction()
		[ ] //
		[ ] // DESCRIPTION:		This function will add Credit Transaction to Customer Business account
		[ ] // 
		[ ] //		QTY						
		[ ] // PARAMETERS:		STRING 	sCustomer                                  Customer
		[ ] //						STRING 	sProject		                     Project [Optional]
		[ ] //						STRING 	sBusinessTag			BusinessTag  [Optional]
		[ ] //						STRING	sCreditCustomer		sCreditCustomer [Optional]
		[ ] //						STRING	sCreditNo				       sCreditNo  [Optional]
		[ ] //						STRING	sItem				       Item  [Optional]
		[ ] //						STRING 	sCategory				Category [Optional]
		[ ] //						STRING 	sDescription				Description [Optional]
		[ ] //						STRING 	sQTY				       QTY [Optional]
		[ ] //						STRING 	sRate				       Rate [Optional]
		[ ] //						STRING 	sAmount			       Amount [Optional]
		[ ] //						STRING 	sTaxFlag				TaxFlag [Optional]
		[ ] //						STRING 	sTaxPercentage			TaxPercentage [Optional]
		[ ] //						STRING 	sCustomMessage		 CustomeMessage[Optional]
		[ ] 
		[ ] 
		[ ] //
		[ ] // RETURNS:			INTEGER	0 = If Transaction is created successfully
		[ ] //									1 = if any error occurs while adding Transaction
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // April 01, 2013	Mukesh
		[ ] // April 13, 2013  Updated by Anagha
	[ ] // ==========================================================
	[+] public INTEGER AddCustomerCreditTransaction(STRING sCustomerVendor, STRING sProject optional, STRING sBusinessTag optional, STRING sCreditCustomer optional , STRING sItem optional, STRING sCategory  optional, STRING sDescription optional, STRING sQTY optional,STRING sRate optional,STRING sAmount optional,STRING sTaxFlag optional,STRING sTaxPercentage optional,STRING sCustomMessage optional)
		[+] // Variable declaration
			[ ] BOOLEAN bBalanceCheck
			[ ] INTEGER  iSelect
			[ ] STRING sActual
		[+] do
			[ ] 
			[+] if(IsNULL(sProject))
				[ ] sProject = ""
			[+] if(IsNULL(sBusinessTag))
				[ ] sBusinessTag = ""
				[ ] 
			[+] if(IsNULL(sCreditCustomer))
				[ ] sCreditCustomer = ""
				[ ] 
			[+] if(IsNULL(sItem))
				[ ] sItem = ""
			[+] if( IsNULL(sCategory))
				[ ] sCategory = ""
			[+] if( IsNULL(sDescription))
				[ ] sDescription = ""
			[+] if( IsNULL(sQTY))
				[ ] sQTY = ""
			[+] if( IsNULL(sRate))
				[ ] sRate = "0"
			[+] if( IsNULL(sAmount))
				[ ] sAmount = ""
			[+] if( IsNULL(sTaxFlag))
				[ ] sTaxFlag = ""
			[+] if( IsNULL(sTaxPercentage))
				[ ] sTaxPercentage = "0"
			[+] if( IsNULL(sCustomMessage))
				[ ] sCustomMessage = ""
			[ ] 
			[ ] 
			[+] if (DlgCreditInvoices.Exists(SHORT_SLEEP))
				[ ] DlgCreditInvoices.SetActive()
				[ ] DlgCreditInvoices.CustomerTextField.SetText(sCustomerVendor)
				[ ] DlgCreditInvoices.ProjectJobTextField.SetText(sProject)
				[ ] DlgCreditInvoices.BusinessTagTextField.SetText(sBusinessTag)
				[ ] DlgCreditInvoices.CUSTOMER1TextField.SetText(sCreditCustomer)
				[ ] DlgCreditInvoices.QWListViewerItem.ListBox.Select("#1")
				[ ] DlgCreditInvoices.QWListViewerItem.ListBox.TypeKeys(Replicate (KEY_SHIFT_TAB,2))
				[ ] DlgCreditInvoices.QWListViewerItem.ListBox.TypeKeys(sItem) 
				[ ] DlgCreditInvoices.QWListViewerItem.ListBox.TypeKeys(KEY_TAB)
				[+] if (AlertMessage.Exists(SHORT_SLEEP))
					[ ] AlertMessage.Yes.Click()
					[+] if (DlgNewItem.Exists(SHORT_SLEEP))
						[ ] DlgNewItem.SetActive()
						[ ] DlgNewItem.NewItemTextField.SetText(sItem)
						[ ] DlgNewItem.OKButton.Click()
						[ ] WaitForState(DlgNewItem,false,1)
					[+] else
						[ ] ReportStatus("Verify dialog New Item",FAIL,"Verify dialog New Item: Dialog New Item didn't appear.")
						[ ] 
					[ ] 
				[ ] DlgCreditInvoices.QWListViewerItem.ListBox.TypeKeys(sCategory) 
				[ ] DlgCreditInvoices.QWListViewerItem.ListBox.TypeKeys(KEY_TAB)
				[ ] DlgCreditInvoices.QWListViewerItem.ListBox.TypeKeys(sDescription) 
				[ ] DlgCreditInvoices.QWListViewerItem.ListBox.TypeKeys(KEY_TAB)
				[ ] DlgCreditInvoices.QWListViewerItem.ListBox.TypeKeys(sQTY) 
				[ ] DlgCreditInvoices.QWListViewerItem.ListBox.TypeKeys(KEY_TAB)
				[ ] DlgCreditInvoices.QWListViewerItem.ListBox.TypeKeys(sRate) 
				[ ] DlgCreditInvoices.QWListViewerItem.ListBox.TypeKeys(KEY_TAB)
				[ ] DlgCreditInvoices.QWListViewerItem.ListBox.TypeKeys(sAmount) 
				[ ] DlgCreditInvoices.QWListViewerItem.ListBox.TypeKeys(KEY_TAB)
				[ ] DlgCreditInvoices.QWListViewerItem.ListBox.TypeKeys(sTaxFlag) 
				[ ] DlgCreditInvoices.TaxTextField.SetText(sTaxPercentage) 
				[ ] DlgCreditInvoices.CustomerMessageTextField.SetText(sCustomMessage)
				[ ] DlgCreditInvoices.EnterButton.Click()
				[+] if (AlertMessage.Exists(SHORT_SLEEP))
					[ ] AlertMessage.Yes.Click()
					[+] if (DlgNewProjectJob.Exists(SHORT_SLEEP))
						[ ] DlgNewProjectJob.SetActive()
						[ ] DlgNewProjectJob.OKButton.Click()
						[ ] WaitForState(DlgNewProjectJob,false,1)
					[+] else
						[ ] ReportStatus("Verify dialog New Project Job",FAIL,"Verify dialog New Project Job: Dialog New Project Job didn't appear.")
						[ ] 
					[ ] 
				[ ] WaitForState(DlgCreditInvoices,False,1)
				[ ] iFunctionResult = PASS
				[ ] 
				[ ] 
			[+] else
				[ ] ReportStatus("Verify Invoice dialog.", FAIL, "Verify Invoice dialog: Invoice dialog doesn't exist.")
				[ ] iFunctionResult = FAIL
			[ ] 
			[ ] 
		[+] except
				[ ] 
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] // ==========================================================
	[+] // FUNCTION: AddCustomerRefund()
		[ ] //
		[ ] // DESCRIPTION:		This function will add Customer Refund Transaction to Business account
		[ ] // 
		[ ] //								
		[ ] // PARAMETERS:		 	           
		[ ] //						STRING 	sToFromAccount		ToFromAccount 
		[ ] //						STRING 	sCustomer			       Customer 
		[ ] //						STRING 	sAmount			       Amount 
		[ ] //						STRING 	sBusinessTag			BusinessTag  [Optional]
		[ ] //						STRING 	sDate		                     Date  [Optional]
		[ ] //						STRING	sProjectJob			       ProjectJob [Optional]
		[ ] //						STRING	sMemo			              Memo  [Optional]
		[ ] //						STRING	sNumber		              Number  [Optional]
		[ ] //
		[ ] // RETURNS:			INTEGER	0 = If Transaction is created successfully
		[ ] //									1 = if any error occurs while adding Transaction
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // April 02, 2013	Mukesh
	[ ] // ==========================================================
	[+] public INTEGER AddCustomerRefund(STRING sToFromAccount, STRING sCustomer , STRING sAmount , STRING sBusinessTag optional , STRING sDate optional , STRING sProjectJob optional , STRING sMemo optional, STRING sNumber optional)
		[+] // Variable declaration
			[ ] BOOLEAN bBalanceCheck
			[ ] INTEGER  iSelect
			[ ] STRING sActual
			[ ] List of string lsClassmap={"QC_button=PushButton"}
			[ ] 
			[ ] 
		[+] // do
			[+] if(IsNULL(sBusinessTag))
				[ ] sBusinessTag = ""
			[+] if(IsNULL(sDate))
				[ ] sDate =FormatDateTime (GetDateTime(), "m/d/yyyy") 
			[+] if(IsNULL(sProjectJob))
				[ ] sProjectJob = ""
				[ ] 
			[+] if(IsNULL(sMemo))
				[ ] sMemo = ""
				[ ] 
			[+] if(IsNULL(sNumber))
				[ ] sNumber = ""
				[ ] 
			[ ] 
			[+] if (DlgRefund.Exists(SHORT_SLEEP))
				[ ] DlgRefund.SetActive()
				[ ] DlgRefund.AccountToFromPopupList.Select(sToFromAccount)
				[ ] DlgRefund.CustomerTextField.SetText(sCustomer)
				[ ] DlgRefund.AmountTextField.SetText(sAmount)
				[ ] DlgRefund.BusinessTagTextField.SetText(sBusinessTag)
				[ ] DlgRefund.DateTextField.SetText(sDate)
				[ ] DlgRefund.ProjectJobTextField.SetText(sProjectJob)
				[ ] DlgRefund.MemoTextField.SetText(sMemo)
				[ ] DlgRefund.NumberTextField.SetText(sNumber)
				[ ] DlgRefund.EnterButton.Click()
				[+] if (AlertMessage.Exists(SHORT_SLEEP))
					[ ] AlertMessage.Yes.Click()
					[+] if (DlgNewProjectJob.Exists(SHORT_SLEEP))
						[ ] DlgNewProjectJob.SetActive()
						[ ] DlgNewProjectJob.OKButton.Click()
						[ ] WaitForState(DlgNewProjectJob,false,1)
					[ ] 
				[+] if (AlertMessage.Exists(SHORT_SLEEP))
					[ ] AlertMessage.Yes.Click()
				[ ] 
				[ ] WaitForState(DlgRefund,False,1)
				[ ] iFunctionResult = PASS
				[ ] 
			[+] else
				[ ] ReportStatus("Verify Invoice dialog.", FAIL, "Verify Invoice dialog: Invoice dialog doesn't exist.")
				[ ] iFunctionResult = FAIL
			[ ] 
			[ ] 
		[+] // except
			[ ] // iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] // ==========================================================
	[+] // FUNCTION: AddCustomerFinanceCharge()
		[ ] //
		[ ] // DESCRIPTION:		This function will add Customer Refund Transaction to Business account
		[ ] // 
		[ ] //								
		[ ] // PARAMETERS:		 	           
		[ ] //						STRING 	sCustomer			       Customer 
		[ ] //						STRING 	sDate		                     Date  
		[ ] //						STRING 	sDueDate		              DueDate 
		[ ] //						STRING	sProjectJob			       ProjectJob [Optional]
		[ ] //						STRING 	sCategory				Category [Optional]
		[ ] //						STRING	sMemo			              Memo  [Optional]
		[ ] //						STRING 	sFinanceCharge			FinanceCharge [Optional] 
		[ ] //						STRING	sNumber		              Number  [Optional]
		[ ] //
		[ ] // RETURNS:			INTEGER	0 = If Transaction is created successfully
		[ ] //									1 = if any error occurs while adding Transaction
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // April 02, 2013	Mukesh
	[ ] // ==========================================================
	[+] public INTEGER AddCustomerFinanceCharge(STRING sCustomer, STRING sDate , STRING sDueDate , STRING sProjectJob optional , STRING sCategory optional , STRING sMemo optional , STRING sFinanceCharge optional, STRING sNumber optional)
		[+] // Variable declaration
			[ ] BOOLEAN bBalanceCheck
			[ ] INTEGER  iSelect
			[ ] STRING sActual
		[ ] 
		[+] // do
			[+] if(IsNULL(sProjectJob))
				[ ] sProjectJob = ""
				[ ] 
			[+] if(IsNULL(sCategory))
				[ ] sCategory = ""
				[ ] 
			[+] if(IsNULL(sMemo))
				[ ] sMemo = ""
				[ ] 
			[+] if(IsNULL(sFinanceCharge))
				[ ] sFinanceCharge = "0"
			[+] if(IsNULL(sNumber))
				[ ] sNumber = ""
				[ ] 
			[ ] 
			[+] if (DlgCreateFinanceCharge.Exists(SHORT_SLEEP))
				[ ] DlgCreateFinanceCharge.SetActive()
				[ ] DlgCreateFinanceCharge.CustomerTextField.SetText(sCustomer)
				[ ] DlgCreateFinanceCharge.ProjectJobTextField.SetText(sProjectJob)
				[ ] DlgCreateFinanceCharge.CategoryTextField.SetText(sCategory)
				[ ] DlgCreateFinanceCharge.MemoTextField.SetText(sMemo)
				[ ] DlgCreateFinanceCharge.DateTextField.SetText(sDate)
				[ ] DlgCreateFinanceCharge.DueDateTextField.SetText(sDueDate)
				[ ] DlgCreateFinanceCharge.FinanceChargeTextField.SetText(sFinanceCharge)
				[ ] DlgCreateFinanceCharge.NumberTextField.SetText(sNumber)
				[ ] DlgCreateFinanceCharge.OKButton.Click()
				[+] if (AlertMessage.Exists(SHORT_SLEEP))
					[ ] AlertMessage.Yes.Click()
					[+] if (DlgNewProjectJob.Exists(SHORT_SLEEP))
						[ ] DlgNewProjectJob.SetActive()
						[ ] DlgNewProjectJob.OKButton.Click()
						[ ] WaitForState(DlgNewProjectJob,false,1)
					[ ] 
				[ ] WaitForState(DlgCreateFinanceCharge,False,1)
				[ ] iFunctionResult = PASS
				[ ] 
			[+] else
				[ ] ReportStatus("Verify Create Finance Charge dialog.", FAIL, "Create Finance Charge dialog doesn't exist.")
				[ ] iFunctionResult = FAIL
			[ ] 
			[ ] 
		[+] // except
			[ ] // iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: SelectProjectJob()
		[ ] //
		[ ] // DESCRIPTION:		This function will select a projectjob from projectjob list if created if not then it will create the job and will select it./////
		[ ] // 
		[ ] //		QTY						
		[ ] // PARAMETERS:		STRING 	sProjectJobName          ProjectJobName
		[ ] //						STRING 	sCustomerName	     Customer 
		[ ] // RETURNS:			INTEGER	0 = if function returns the PASS status
		[ ] //									1 =  if function returns the FAIL status
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // March 30, 2013	Mukesh
	[ ] // ==========================================================
	[+] public INTEGER SelectProjectJob( STRING sCustomerName optional ,STRING sProjectJobName)
		[+] // Variable declaration
			[ ] INTEGER  iSelect,iCounter
			[ ] STRING sActual, sHandle
			[+] if (sCustomerName==NULL)
				[ ] sCustomerName=""
			[ ] 
		[+] do
			[ ] 
			[+] if (DlgSelectProjectJob.Exists(SHORT_SLEEP))
				[ ] DlgSelectProjectJob.SetActive()
				[ ] sHandle = Str(DlgSelectProjectJob.SelectProjectJobQWListViewer.ListBox1.GetHandle())
				[+] for (iCounter=0; iCounter<DlgSelectProjectJob.SelectProjectJobQWListViewer.ListBox1.GetItemCount()+1; ++iCounter)
					[ ] sActual = QwAutoExecuteCommand("LISTBOX_GETFULLROW", sHandle,  "{iCounter}")
					[ ] bMatch = MatchStr("*{sCustomerName}*{sProjectJobName}*",sActual)
					[+] if (bMatch==TRUE)
						[ ] QwAutoExecuteCommand("LISTBOX_SELECTROW", sHandle,  "{iCounter}")
						[ ] DlgSelectProjectJob.OKButton.Click()
						[ ] WaitForState(DlgNewProjectJob,false,1)
						[ ] iFunctionResult = PASS
						[ ] break
						[ ] 
					[ ] 
				[+] if (bMatch ==FALSE)
					[ ] DlgSelectProjectJob.SetActive()
					[ ] DlgSelectProjectJob.NewProjectJobButton.Click()
					[+] if (DlgNewProjectJob.Exists(SHORT_SLEEP))
						[ ] DlgNewProjectJob.SetActive()
						[ ] DlgNewProjectJob.CustomerTextField.SetText(sCustomerName)
						[ ] DlgNewProjectJob.ProjectJobTextField.SetText(sProjectJobName)
						[ ] DlgNewProjectJob.OKButton.Click()
						[ ] WaitForState(DlgNewProjectJob,false,1)
						[ ] iFunctionResult = PASS
					[+] else
						[ ] ReportStatus("Verify dialog New Project Job",FAIL,"Verify dialog New Project Job: Dialog New Project Job didn't appear.")
						[ ] iFunctionResult = FAIL
						[ ] 
					[ ] 
				[ ] 
				[ ] 
				[ ] 
			[+] else
				[ ] ReportStatus("Verify SelectProjectJob dialog.", FAIL, "Verify SelectProjectJob dialog: SelectProjectJob dialog doesn't exist.")
				[ ] iFunctionResult = FAIL
			[ ] 
			[ ] 
		[+] except
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] // // ==========================================================
	[+] // FUNCTION: AddVendorCreditTransaction()
		[ ] //
		[ ] // DESCRIPTION:		This function will add Credit Transaction to Customer Business account
		[ ] // 
		[ ] //		QTY						
		[ ] // PARAMETERS:		STRING 	sVendor                           Vendor
		[ ] //						STRING 	sVendorAddress  	      VendorAddress [Optional]
		[ ] //						STRING 	sProject		                     Project [Optional]
		[ ] //						STRING	sCustomer		              sCustomer [Optional]
		[ ] //						STRING 	sCategory				Category [Optional]
		[ ] //						STRING 	sDescription				Description [Optional]
		[ ] //						STRING 	sAmount			       Amount [Optional]
		[ ] //						STRING 	sMemo	                            Memo [Optional]
		[ ] //
		[ ] // RETURNS:			INTEGER	0 = if function returns the PASS status
		[ ] //									1 =  if function returns the FAIL status
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // April 01, 2013	Mukesh
	[ ] // ==========================================================
	[+] public INTEGER AddVendorCreditTransaction(STRING sVendor, STRING sVendorAddress optional, STRING sProject optional, STRING sCustomer optional , STRING sCategory optional, STRING sDescription  optional, STRING sAmount optional, STRING sMemo optional)
		[+] // Variable declaration
			[ ] BOOLEAN bBalanceCheck
			[ ] INTEGER  iSelect
			[ ] STRING sActual
		[+] do
			[ ] 
			[+] if(IsNULL(sVendorAddress))
				[ ] sVendorAddress = ""
			[+] if(IsNULL(sProject))
				[ ] sProject = ""
			[+] if( IsNULL(sCustomer))
				[ ] sCustomer = ""
			[+] if( IsNULL(sCategory))
				[ ] sCategory = ""
			[+] if( IsNULL(sDescription))
				[ ] sDescription = ""
			[+] if( IsNULL(sAmount))
				[ ] sAmount = ""
			[+] if( IsNULL(sMemo))
				[ ] sMemo = ""
			[ ] 
			[ ] 
			[+] if (DlgCreditInvoices.Exists(SHORT_SLEEP))
				[ ] DlgCreditInvoices.SetActive()
				[ ] DlgCreditInvoices.VendorTextField.SetText(sVendor)
				[ ] DlgCreditInvoices.TypeKeys(KEY_TAB)
				[ ] DlgCreditInvoices.AssignProjectJobButton.Click()
				[ ] WaitForState(DlgSelectProjectJob,True,1)
				[ ] SelectProjectJob(sProject, sCustomer)
				[ ] DlgCreditInvoices.VENDORADDRESS1TextField.SetText(sVendorAddress)
				[ ] DlgCreditInvoices.QWListViewerItem.ListBox.Select("#1")
				[ ] DlgCreditInvoices.QWListViewerItem.ListBox.TypeKeys(KEY_SHIFT_TAB)
				[ ] DlgCreditInvoices.QWListViewerItem.ListBox.TypeKeys(sCategory)
				[ ] DlgCreditInvoices.QWListViewerItem.ListBox.TypeKeys(KEY_TAB)
				[ ] DlgCreditInvoices.QWListViewerItem.ListBox.TypeKeys(sDescription)
				[ ] DlgCreditInvoices.QWListViewerItem.ListBox.TypeKeys(KEY_TAB)
				[ ] DlgCreditInvoices.QWListViewerItem.ListBox.TypeKeys(sAmount)
				[ ] DlgCreditInvoices.MemoTextField.SetText(sMemo)
				[ ] DlgCreditInvoices.EnterButton.Click()
				[ ] WaitForState(DlgCreditInvoices,False,1)
				[ ] iFunctionResult = PASS
			[+] else
				[ ] ReportStatus("Verify CreditInvoices dialog.", FAIL, "Verify CreditInvoices dialog: CreditInvoices dialog doesn't exist.")
				[ ] iFunctionResult = FAIL
			[ ] 
			[ ] 
		[+] except
				[ ] 
			[ ] iFunctionResult = FAIL
		[ ] ExceptLog()
		[ ] return iFunctionResult
	[ ] // ==========================================================
	[+] // FUNCTION: AddVendorRefund()
		[ ] //
		[ ] // DESCRIPTION:		This function will add Customer Refund Transaction to Business account
		[ ] // 
		[ ] //								
		[ ] // PARAMETERS:		 	           
		[ ] //						STRING 	sToFromAccount		ToFromAccount 
		[ ] //						STRING 	sVendor			              Vendor 
		[ ] //						STRING	sCustomer		              sCustomer [Optional]
		[ ] //						STRING 	sProject		                     Project [Optional]
		[ ] //						STRING 	sAmount			       Amount 
		[ ] //						STRING	sMemo			              Memo  [Optional]
		[ ] //						STRING	sNumber		              Number  [Optional]
		[ ] //
		[ ] // RETURNS:			INTEGER	0 =  if function returns the PASS status
		[ ] //									1 =  if function returns the FAIL status
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // April 04, 2013	Mukesh
	[ ] // ==========================================================
	[+] public INTEGER AddVendorRefund(STRING sToFromAccount, STRING sVendor , STRING sCustomer , STRING sProject optional , STRING sAmount optional , STRING sMemo optional, STRING sNumber optional)
		[+] // Variable declaration
			[ ] BOOLEAN bBalanceCheck
			[ ] INTEGER  iSelect
			[ ] STRING sActual
		[ ] 
		[+] // do
			[+] if( IsNULL(sVendor))
				[ ] sVendor = ""
			[+] if( IsNULL(sCustomer))
				[ ] sCustomer = ""
			[+] if( IsNULL(sProject))
				[ ] sProject = ""
			[+] if( IsNULL(sAmount))
				[ ] sAmount = ""
			[+] if( IsNULL(sMemo))
				[ ] sMemo = ""
			[+] if(IsNULL(sNumber))
				[ ] sNumber = ""
				[ ] 
			[ ] 
			[ ] 
			[ ] 
			[+] if (DlgRefund.Exists(SHORT_SLEEP))
				[ ] DlgRefund.SetActive()
				[ ] DlgRefund.AccountToFromPopupList.Select(sToFromAccount)
				[ ] DlgRefund.VendorTextField.SetText(sVendor)
				[ ] DlgRefund.TypeKeys(KEY_TAB)
				[ ] DlgRefund.AssignProjectJobButton.Click()
				[ ] WaitForState(DlgRefund,True,1)
				[ ] SelectProjectJob(sProject, sCustomer)
				[ ] DlgRefund.AmountTextField.SetText(sAmount)
				[ ] DlgRefund.MemoTextField.SetText(sMemo)
				[ ] DlgRefund.NumberTextField.SetText(sNumber)
				[ ] DlgRefund.EnterButton.Click()
				[+] if (AlertMessage.Exists(SHORT_SLEEP))
					[ ] AlertMessage.Yes.Click()
				[ ] 
				[ ] WaitForState(DlgRefund,False,1)
				[ ] iFunctionResult = PASS
				[ ] 
			[+] else
				[ ] ReportStatus("Verify Refund dialog.", FAIL, "Verify Refund dialog: Refund dialog doesn't exist.")
				[ ] iFunctionResult = FAIL
			[ ] 
			[ ] 
		[+] // except
			[ ] // iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: AddVendorInvoiceTransaction()
		[ ] //
		[ ] // DESCRIPTION:		This function will add Vendor Invoice Transaction to Business account
		[ ] // 
		[ ] //		QTY						
		[ ] // PARAMETERS:		STRING 	sCustomerVendor           Customer/Vendor
		[ ] //						STRING 	sProject		                     Project [Optional]
		[ ] //						STRING 	sCategory				Category [Optional]
		[ ] //						STRING 	sDescription				Description [Optional]
		[ ] //						STRING 	sAmount			       Amount [Optional]
		[ ] 
		[ ] 
		[ ] //
		[ ] // RETURNS:			INTEGER	0 = If Transaction is created successfully
		[ ] //									1 = if any error occurs while adding Transaction
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // March 30, 2013	Mukesh
	[ ] // ==========================================================
	[+] public INTEGER AddVendorInvoiceTransaction(STRING sCustomerVendor, STRING sProject optional, STRING sCategory  optional, STRING sDescription optional, STRING sAmount optional )
		[+] // Variable declaration
			[ ] BOOLEAN bBalanceCheck
			[ ] INTEGER  iSelect
			[ ] STRING sActual
		[+] do
			[+] if(IsNULL(sProject))
				[ ] sProject = ""
			[+] if( IsNULL(sDescription))
				[ ] sDescription = ""
			[+] if( IsNULL(sAmount))
				[ ] sAmount = ""
			[ ] 
			[ ] 
			[+] if (DlgInvoice.Exists(SHORT_SLEEP))
				[ ] DlgInvoice.SetActive()
				[ ] DlgInvoice.CustomerTextField.SetText(sCustomerVendor)
				[ ] DlgInvoice.AssignProjectJobButton.Click()
				[ ] SelectProjectJob(NULL ,sProject)
				[ ] DlgInvoice.QWListViewerItem.ListBox.Select("#1")
				[ ] DlgInvoice.QWListViewerItem.ListBox.TypeKeys(Replicate (KEY_SHIFT_TAB,1))
				[ ] DlgInvoice.QWListViewerItem.ListBox.TypeKeys(sCategory) 
				[ ] DlgInvoice.QWListViewerItem.ListBox.TypeKeys(KEY_TAB)
				[ ] DlgInvoice.QWListViewerItem.ListBox.TypeKeys(sDescription) 
				[ ] DlgInvoice.QWListViewerItem.ListBox.TypeKeys(KEY_TAB)
				[ ] DlgInvoice.QWListViewerItem.ListBox.TypeKeys(sAmount) 
				[ ] DlgInvoice.QWListViewerItem.ListBox.TypeKeys(KEY_TAB)
				[ ] DlgInvoice.SaveAndDoneButton.Click()
				[+] if (AlertMessage.Exists(SHORT_SLEEP))
					[ ] AlertMessage.Yes.Click()
					[+] if (DlgNewProjectJob.Exists(SHORT_SLEEP))
						[ ] DlgNewProjectJob.SetActive()
						[ ] DlgNewProjectJob.OKButton.Click()
						[ ] WaitForState(DlgNewProjectJob,false,1)
					[+] else
						[ ] ReportStatus("Verify dialog New Project Job",FAIL,"Verify dialog New Project Job: Dialog New Project Job didn't appear.")
						[ ] 
					[ ] 
				[ ] WaitForState(DlgInvoice,False,1)
				[ ] iFunctionResult = PASS
				[ ] 
				[ ] 
			[+] else
				[ ] ReportStatus("Verify Invoice dialog.", FAIL, "Verify Invoice dialog: Invoice dialog doesn't exist.")
				[ ] iFunctionResult = FAIL
			[ ] 
			[ ] 
		[+] except
				[ ] Exceptlog()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: AddEstimate()
		[ ] //
		[ ] // DESCRIPTION:		This function will add Invoice Transaction to Business account
		[ ] // 
		[ ] //		QTY						
		[ ] // PARAMETERS:		STRING 	sCustomerVendor           Customer/Vendor
		[ ] //						STRING 	sProject		                     Project [Optional]
		[ ] //						STRING 	sBusinessTag			BusinessTag  [Optional]
		[ ] //						STRING	sBillTo					BillTo  [Optional]
		[ ] ////						STRING	sItem				       Item  [Optional]
		[ ] //						STRING 	sCategory				Category [Optional]
		[ ] //						STRING 	sDescription				Description [Optional]
		[ ] //						STRING 	sQTY				       QTY [Optional]
		[ ] //						STRING 	sRate				       Rate [Optional]
		[ ] //						STRING 	sAmount			       Amount [Optional]
		[ ] //						STRING 	sTaxFlag				TaxFlag [Optional]
		[ ] //						STRING 	sTaxPercentage			TaxPercentage [Optional]
		[ ] //						STRING 	sCustomMessage		 CustomeMessage[Optional]
		[ ] 
		[ ] 
		[ ] //
		[ ] // RETURNS:			INTEGER	0 = If Transaction is created successfully
		[ ] //									1 = if any error occurs while adding Transaction
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // May 30, 2013	Anagha
	[ ] // ==========================================================
	[+] public INTEGER AddEstimate(STRING sCustomerVendor, STRING sProject optional, STRING sBusinessTag optional, STRING sBillTo optional ,  STRING sItem optional, STRING sCategory  optional, STRING sDescription optional, STRING sQTY optional,STRING sRate optional,STRING sAmount optional,STRING sTaxFlag optional,STRING sTaxPercentage optional,STRING sCustomMessage optional)
		[+] // Variable declaration
			[ ] BOOLEAN bBalanceCheck
			[ ] INTEGER  iSelect
			[ ] STRING sActual
		[+] do
			[ ]  Agent.SetOption(OPT_NO_ICONIC_MESSAGE_BOXES,True)
			[ ] 
			[+] if(IsNULL(sProject))
				[ ] sProject = ""
			[+] if(IsNULL(sBusinessTag))
				[ ] sBusinessTag = ""
				[ ] 
			[+] if(IsNULL(sBillTo))
				[ ] sBillTo = ""
				[ ] 
				[ ] 
			[+] if(IsNULL(sItem))
				[ ] sItem = ""
			[+] if( IsNULL(sCategory))
				[ ] sCategory = ""
			[+] if( IsNULL(sDescription))
				[ ] sDescription = ""
			[+] if( IsNULL(sQTY))
				[ ] sQTY = ""
			[+] if( IsNULL(sRate))
				[ ] sRate = "0"
			[+] if( IsNULL(sAmount))
				[ ] sAmount = ""
			[+] if( IsNULL(sTaxFlag))
				[ ] sTaxFlag = ""
			[+] if( IsNULL(sTaxPercentage))
				[ ] sTaxPercentage = "0"
			[+] if( IsNULL(sCustomMessage))
				[ ] sCustomMessage = ""
			[ ] 
			[ ] 
			[+] if (EstimateList.DlgEstimate.Exists())
				[ ] EstimateList.DlgEstimate.SetActive()
				[ ] EstimateList.DlgEstimate.CustomerTextField.SetText(sCustomerVendor)
				[ ] EstimateList.DlgEstimate.ProjectJobTextField.SetText(sProject)
				[ ] EstimateList.DlgEstimate.BusinessTagTextField.SetText(sBusinessTag)
				[ ] EstimateList.DlgEstimate.BILLTO1TextField.SetText(sBillTo)
				[ ] EstimateList.DlgEstimate.QWListViewerItem.ListBox1.Select("#1")
				[ ] EstimateList.DlgEstimate.QWListViewerItem.ListBox1.TypeKeys(Replicate (KEY_SHIFT_TAB,2))
				[ ] 
				[ ] EstimateList.DlgEstimate.QWListViewerItem.ListBox1.TypeKeys(sItem) 
				[ ] EstimateList.DlgEstimate.QWListViewerItem.ListBox1.TypeKeys(KEY_TAB)
				[+] if (MessageBox.Exists())
					[ ] MessageBox.Yes.Click()
					[+] if (DlgNewItem.Exists())
						[ ] DlgNewItem.SetActive()
						[ ] DlgNewItem.NewItemTextField.SetText(sItem)
						[ ] DlgNewItem.OKButton.Click()
						[ ] WaitForState(DlgNewItem,false,1)
					[+] else
						[ ] ReportStatus("Verify dialog New Item",FAIL,"Verify dialog New Item: Dialog New Item didn't appear.")
						[ ] 
					[ ] 
				[ ] EstimateList.DlgEstimate.QWListViewerItem.ListBox1.TypeKeys(sCategory) 
				[ ] EstimateList.DlgEstimate.QWListViewerItem.ListBox1.TypeKeys(KEY_TAB)
				[ ] EstimateList.DlgEstimate.QWListViewerItem.ListBox1.TypeKeys(sDescription) 
				[ ] EstimateList.DlgEstimate.QWListViewerItem.ListBox1.TypeKeys(KEY_TAB)
				[ ] EstimateList.DlgEstimate.QWListViewerItem.ListBox1.TypeKeys(sQTY) 
				[ ] EstimateList.DlgEstimate.QWListViewerItem.ListBox1.TypeKeys(KEY_TAB)
				[ ] EstimateList.DlgEstimate.QWListViewerItem.ListBox1.TypeKeys(sRate) 
				[ ] EstimateList.DlgEstimate.QWListViewerItem.ListBox1.TypeKeys(KEY_TAB)
				[ ] EstimateList.DlgEstimate.QWListViewerItem.ListBox1.TypeKeys(sAmount) 
				[ ] EstimateList.DlgEstimate.QWListViewerItem.ListBox1.TypeKeys(KEY_TAB)
				[ ] EstimateList.DlgEstimate.QWListViewerItem.ListBox1.TypeKeys(sTaxFlag) 
				[ ] EstimateList.DlgEstimate.TaxTextField.SetText(sTaxPercentage) 
				[ ] EstimateList.DlgEstimate.CustomerMessageTextField.SetText(sCustomMessage)
				[ ] EstimateList.DlgEstimate.SaveAndDoneButton.Click()
				[+] if (MessageBox.Exists())
					[ ] MessageBox.Yes.Click()
					[+] if (DlgNewProjectJob.Exists())
						[ ] DlgNewProjectJob.SetActive()
						[ ] DlgNewProjectJob.OKButton.Click()
						[ ] WaitForState(DlgNewProjectJob,false,1)
					[+] else
						[ ] ReportStatus("Verify dialog New Project Job",FAIL,"Verify dialog New Project Job: Dialog New Project Job didn't appear.")
						[ ] iFunctionResult = FAIL
					[ ] 
				[ ] WaitForState(EstimateList.DlgEstimate,False,1)
				[ ] iFunctionResult = PASS
				[ ] 
				[ ] 
			[+] else
				[ ] ReportStatus("Verify Invoice dialog.", FAIL, "Verify Invoice dialog: Invoice dialog doesn't exist.")
				[ ] iFunctionResult = FAIL
			[ ] 
			[ ] 
		[+] except
				[ ] 
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] // ==========================================================
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: FindandReplaceTransaction()
		[ ] //
		[ ] // DESCRIPTION:		This function will Find the transaction which needs to be replaced with some contents
		[ ] // 
		[ ] //		QTY						
		[ ] // PARAMETERS:		        STRING 	SearchString           String which should be searched
		[ ] //						STRING 	ReplaceString	       Replace string 
		[ ] //						STRING 	ReplaceCategory	category of transaction where it has to be replaced
		[ ] 
		[ ] //
		[ ] // RETURNS:			INTEGER	0 = If Transaction is created successfully
		[ ] //									1 = if any error occurs while adding Transaction
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // Sept 17, 2013	Anagha
	[ ] // ==========================================================
	[ ] 
	[+] public INTEGER FindandReplaceTransaction(STRING SearchString,STRING ReplaceString,STRING ReplaceCategory)
		[ ] // Variable declaration
		[ ] INTEGER  iSelect
		[ ] STRING sActual,sHandle
		[ ] 
		[ ] 
		[+] do
			[ ] QuickenWindow.SetActive()
			[ ] 
			[ ] QuickenWindow.Edit.Click()
			[ ] 
			[ ] QuickenWindow.Edit.FindReplace.Select()
			[ ] 
			[ ] sleep(2)
			[ ] 
			[+] if(FindAndReplace.Exists())
				[ ] FindAndReplace.SetActive()
				[ ] 
				[ ] FindAndReplace.FindAndReplace4.SetText(SearchString)
				[ ] 
				[ ] FindAndReplace.Find.Click()
				[ ] 
				[ ] Sleep(1)
				[ ] 
				[ ] sHandle = str(FindAndReplace.FindWindow.ListBox1.GetHandle())
				[ ] 
				[ ] sActual = QwAutoExecuteCommand("LISTBOX_GETFULLROW",sHandle,str(0))
				[ ] 
				[ ] bMatch = MatchStr("*{SearchString}*", sActual)
				[ ] 
				[+] if (bMatch==TRUE)
					[ ] QwAutoExecuteCommand("LISTBOX_SELECTROW",sHandle,str(0))
				[ ] 
				[ ] FindAndReplace.Replace.Select("{ReplaceCategory}")
				[ ] 
				[ ] FindAndReplace.With1.SetText(ReplaceString)
				[ ] 
				[ ] FindAndReplace.ReplaceAll.Click()
				[ ] 
				[ ] FindAndReplace.Done.Click()
				[ ] 
				[ ] iFunctionResult = PASS
			[+] else
				[ ] ReportStatus("Verify Find And Replace Window", PASS,"Find And Replace Window does not Exists")
			[ ] 
		[+] except
				[ ] ExceptLog()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[+] public LIST OF STRING GetTransactionFromFindAndReplace(STRING sSearchEntry,STRING sField optional, STRING sCriteria optional)
		[ ] STRING sActual,hWnd
		[ ] INTEGER iCounter
		[ ] LIST OF STRING lsTransactionList
		[ ] 
		[+] do
			[+] do
				[ ] QuickenWindow.TypeKeys(KEY_CTRL_SHIFT_H)
			[+] except
				[ ] QuickenWindow.TypeKeys(KEY_CTRL_H)
				[ ] 
			[ ] 
			[+] if(DlgFindAndReplace.Exists(3))
				[ ] DlgFindAndReplace.SetActive()
				[ ] DlgFindAndReplace.FieldPopUpList.Select(sField)
				[ ] DlgFindAndReplace.CriteriaPopUpList.Select(sCriteria)
				[ ] DlgFindAndReplace.SearchTextField.SetText(sSearchEntry)
				[ ] DlgFindAndReplace.FindButton.Click()
				[ ] sleep(4)
				[+] if (AlertMessage.Exists(2))
						[ ] AlertMessage.OK.Click()
						[ ] ReportStatus("Find Transaction In register",FAIL,"Transactions are not found for specified seach criteria")
						[ ] 
				[+] else
					[ ] 
					[ ] // ReportStatus("Verify Transaction exists,", PASS, "Transaction with {sSearchEntry} exists.")
					[ ] hWnd = str(DlgFindAndReplace.FoundListBox.ListBox1.GetHandle())
					[+] for (iCounter=0;iCounter<DlgFindAndReplace.FoundListBox.ListBox1.GetItemCount();iCounter++)
						[ ] sActual = QwAutoExecuteCommand("LISTBOX_GETFULLROW", hWnd,  "{iCounter}")
						[ ] ListAppend(lsTransactionList,sActual)
						[ ] 
						[ ] 
					[ ] 
				[ ] 
				[ ] DlgFindAndReplace.DoneButton.Click()
			[+] else
				[ ] ReportStatus("Verify Find and Replcae dialog",FAIL,"Find and Replace dialog does not exist")
				[ ] iFunctionResult = FAIL
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] lsTransactionList={"{ABORT}"}
		[ ] return lsTransactionList 
		[ ] 
	[ ] 
	[ ] // 
	[ ] // // ==========================================================
	[+] // // FUNCTION: VerifyTransactionInAccountRegister()
		[ ] // // // // 
		[ ] // // // // DESCRIPTION:
		[ ] // // // // This function will verify if transactions searched are displayed correctly under Account Register filter specified by matching the transaction count
		[ ] // // // // 
		[ ] // // // // PARAMETERS:		STRING	 			sSearchEntry                                     Search in Register with this string
		[ ] // // // //                                  STRING                  sExpectedNumberOfTransactions        Expected number of transactions to be found
		[ ] // // // //
		[ ] // // // // 
		[ ] // // // // RETURNS:			INTEGER		PASS		If transaction count matches with expected
		[ ] // // // //                                                          FAIL		If any error occurs
		[ ] // // // // 
		[ ] // // // // REVISION HISTORY:
		[ ] // // // // Dean Paes  created  Feb 22 2013
	[ ] // // ==========================================================
	[+] // public INTEGER VerifyTransactionInAccountRegister(STRING sSearchString,STRING sExpectedNumberOfTransactions ,STRING sWindowType optional)
		[ ] // STRING sNum,sTransactionCount
		[ ] // INTEGER nNum
		[ ] // 
		[+] // do
			[ ] // 
			[ ] // 
			[+] // switch(sWindowType)
				[+] // case "MDI"
					[ ] // QuickenWindow.SetActive()
					[+] // if(MDIClient.AccountRegister.SearchWindow.Exists(SHORT_SLEEP))
						[ ] // ReportStatus("Verify Transaction", PASS, "Search Window exists") 
						[ ] // 
						[ ] // //Search for transaction with Payee name
						[ ] // MDIClient.AccountRegister.SearchWindow.SetText(sSearchString)
						[ ] // 
						[ ] // sleep(2)
						[ ] // 
						[ ] // //Match value obtained from register to value given in Quicken
						[ ] // sTransactionCount  = MDIClient.AccountRegister.Balances.TransactionCount.GetText()
						[ ] // MDIClient.AccountRegister.SearchWindow.SetText("")
						[ ] // nNum=val(sExpectedNumberOfTransactions)
						[ ] // sNum=Str(nNum)
						[ ] // 
						[ ] // bMatch=MatchStr("*{ sNum }*",sTransactionCount)
						[+] // if(bMatch==TRUE)
							[ ] // iFunctionResult=PASS
						[+] // else
							[ ] // iFunctionResult=FAIL
							[ ] // 
					[+] // else
						[ ] // iFunctionResult=FAIL
				[+] // case "PopUp"
					[ ] // BankingPopUp.SetActive()
					[+] // if(BankingPopUp.SearchWindow.Exists(SHORT_SLEEP))
						[ ] // ReportStatus("Verify Transaction", PASS, "Search Window exists") 
						[ ] // 
						[ ] // //Search for transaction with Payee name
						[ ] // BankingPopUp.SearchWindow.SetText(sSearchString)
						[ ] // 
						[ ] // sleep(2)
						[ ] // 
						[ ] // // Match value obtained from register to value given in Quicken
						[ ] // sTransactionCount  = BankingPopUp.EndingBalance.NumOfTransactions.GetText()
						[ ] // BankingPopUp.SearchWindow.SetText("")
						[ ] // nNum=val(sExpectedNumberOfTransactions)
						[ ] // sNum=Str(nNum)
						[ ] // 
						[ ] // bMatch=MatchStr("*{ sNum }*",sTransactionCount)
						[+] // if(bMatch==TRUE)
							[ ] // iFunctionResult=PASS
						[+] // else
							[ ] // iFunctionResult=FAIL
							[ ] // 
					[+] // else
						[ ] // iFunctionResult=FAIL
					[ ] // 
					[ ] // 
			[ ] // 
			[ ] // 
			[ ] // 
			[ ] // 
			[ ] // 
		[+] // except
			[ ] // iFunctionResult=FAIL
		[ ] // return iFunctionResult
	[ ] // 
	[ ] //==========================================================
	[+] // FUNCTION: VerifyTransactionUsingSearchFieldInRegister()
		[ ] // // // 
		[ ] // // // DESCRIPTION:
		[ ] // // // This function will verify if transactions searched are displayed correctly under Account Register filter specified by matching the transaction count
		[ ] // // // 
		[ ] // // // PARAMETERS:		STRING	 	searchEntry                                     Search in Register with this string
		[ ] // // //
		[ ] // // // 
		[ ] // // // RETURNS:			STRING		PASS		It will return the transaction count if no error occurs
		[ ] // // //                                                                     FAIL		If any error occurs
		[ ] // // // 
		[ ] // // // REVISION HISTORY:
		[ ] // // // Mukesh created  May 28 2013
	[ ] // ==========================================================
	[+] public STRING VerifyTransactionUsingSearchFieldInRegister(STRING sSearchString)
		[ ] STRING sNum,sTransactionCount
		[ ] INTEGER iNum =0
		[ ] 
		[+] do
			[ ] QuickenWindow.SetActive()
			[ ] 
			[ ] 
			[ ] 
			[+] if(MDIClient.AccountRegister.SearchWindow.Exists(SHORT_SLEEP))
				[ ] ReportStatus("Verify Transaction", PASS, "Search Window exists") 
				[ ] 
				[ ] //Search for transaction with Payee name
				[ ] MDIClient.AccountRegister.SearchWindow.SetText(sSearchString)
				[ ] 
				[ ] sleep(2)
				[ ] 
				[ ] //Match value obtained from register to value given in Quicken
				[ ] sTransactionCount  = MDIClientSpending.SpendingWindow.TransactionsText.TransactionCount.GetText()
				[ ] iNum =VAL(sTransactionCount)
				[ ] //Clear the search window
				[ ] MDIClientSpending.SpendingWindow.SearchWindow.SetText("")
			[+] else
				[ ] iFunctionResult=FAIL
			[ ] 
			[ ] 
			[ ] 
			[ ] 
			[ ] 
		[+] except
			[ ] iFunctionResult=FAIL
		[ ] return Str(iNum)
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: C2RTransactionOperations()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will launch specified menu and click on specified menuitem name for a transaction in C2R
		[ ] //
		[ ] // 			
		[ ] //PARAMETERS:			STRING      sSearchString		            Name of string in entry on which operations are to be performed on in C2R
		[ ] //							STRING      sInvokeOperation		      Edit Button  OR  Right Click   
		[ ] //                                        STRING      sOperationType                   Name of option in menu on C2R ,  eg. Accept , Delete
		[ ] //
		[ ] //
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If specified menu is launched and menuitem is found
		[ ] //										FAIL	In case any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // March 4th , 2014  Dean Paes created
	[ ] // ==========================================================
	[+] public INTEGER C2RTransactionOperations(STRING sSearchString,STRING sInvokeOperation,STRING sOperationType  , STRING sAccountType optional)
		[ ] STRING sHandle,sActual
		[ ] STRING sEditText="Edit"
		[ ] INTEGER iCount
		[+] if (sAccountType==NULL)
			[ ] sAccountType = ACCOUNT_BANKING
		[ ] 
		[+] do
			[ ] 
			[ ] QuickenWindow.SetActive()
			[ ] 
			[+] if(sInvokeOperation=="Edit Button")
				[ ] 
				[ ] sHandle = Str(MDIClient.AccountRegister.QWSnapHolder1.StaticText1.DownloadedTransactions.ListBox.GetHandle())
				[+] for(iCount=0;iCount<=MDIClient.AccountRegister.QWSnapHolder1.StaticText1.DownloadedTransactions.ListBox.GetItemCount()*2;iCount++)
					[ ] 
					[ ] sActual = QwAutoExecuteCommand("LISTBOX_GETFULLROW", sHandle,str(iCount))
					[ ] bMatch=MatchStr("*{sSearchString}*",sActual)
					[+] if(bMatch==TRUE)
						[ ] 
						[ ] QwAutoExecuteCommand("LISTBOX_SELECTROW", sHandle,str(iCount))
						[ ] MDIClient.AccountRegister.QWSnapHolder1.StaticText1.DownloadedTransactions.ListBox.TextClick(sEditText)
						[ ] 
						[+] switch sOperationType
							[ ] 
							[+] case "Accept"
								[ ] QuickenWindow.TypeKeys(KEY_ESC)
								[ ] QuickenWindow.SetActive()
								[ ] MDIClient.AccountRegister.QWSnapHolder1.StaticText1.DownloadedTransactions.ListBox.TextClick(sOperationType)
								[ ] iFunctionResult=PASS
							[ ] 
							[+] case "Delete"
								[ ] C2RRightClick.DeleteTransaction.Click()
								[ ] iFunctionResult=PASS
							[ ] 
							[+] case "Match Manually"
								[ ] C2RRightClick.MatchManuallyTransaction.Click()
								[ ] iFunctionResult=PASS
								[ ] 
							[ ] 
							[+] case "Unmatch"
								[ ] C2RRightClick.UnMatchTransaction.Click()
								[ ] iFunctionResult=PASS
								[ ] 
							[ ] 
							[+] case "Make New"
								[ ] C2RRightClick.MakeNewTransaction.Click()
								[ ] iFunctionResult=PASS
							[ ] 
							[+] case "Make All New"
								[ ] C2RRightClick.MakeAllNewTransaction.Click()
								[ ] iFunctionResult=PASS
							[ ] 
							[+] case "Revert Payee"
								[ ] C2RRightClick.RevertPayeeTransaction.Click()
								[ ] iFunctionResult=PASS
							[ ] 
							[+] case "Show Renaming Rules"
								[ ] C2RRightClick.ShowRenamingRules.Click()
								[ ] iFunctionResult=PASS
							[ ] 
							[+] default 
								[ ] ReportStatus("Verify Operation Type parameter",FAIL,"Invalid Operation Type parameter {sOperationType} passed")
								[ ] iFunctionResult=FAIL
								[ ] 
							[ ] 
							[ ] 
						[ ] 
						[ ] 
						[ ] break
						[ ] 
						[ ] 
						[ ] 
					[ ] 
					[ ] 
					[ ] 
				[ ] 
				[+] if(bMatch==FALSE)
					[ ] ReportStatus("Verify Search String in C2R register",FAIL,"Search String {sSearchString} NOT found in C2R register")
					[ ] 
					[ ] iFunctionResult=FAIL
				[ ] 
				[ ] 
			[+] else if(sInvokeOperation=="Right Click")
				[ ] 
				[ ] MDIClient.AccountRegister.QWSnapHolder1.StaticText1.DownloadedTransactions.ListBox.TextClick(sSearchString)
				[ ] 
				[ ] MDIClient.AccountRegister.QWSnapHolder1.StaticText1.DownloadedTransactions.ListBox.TextClick(sSearchString,1,CT_RIGHT)
				[ ] sleep(1)
				[+] switch sOperationType
					[ ] 
					[+] case "Accept"
						[ ] iCount=1
						[+] if (sAccountType==ACCOUNT_INVESTING)
							[ ] iCount=2
					[+] case "Accept All"
						[ ] iCount=2
						[+] if (sAccountType==ACCOUNT_INVESTING)
							[ ] iCount=3
						[ ] 
					[ ] 
					[+] case "Delete"
						[ ] iCount=4
						[+] if (sAccountType==ACCOUNT_INVESTING)
							[ ] iCount=4
						[ ] 
					[ ] 
					[+] case "Match Manually"
						[ ] iCount=5
						[ ] 
					[ ] 
					[+] case "Unmatch"
						[ ] iCount=6
						[+] if (sAccountType==ACCOUNT_INVESTING)
							[ ] iCount=1
						[ ] 
					[ ] 
					[+] case "Make New"
						[ ] iCount=7
					[ ] 
					[+] case "Make All New"
						[ ] iCount=8
					[ ] 
					[+] case "Revert Payee"
						[ ] iCount=9
					[ ] 
					[+] case "Show Renaming Rules"
						[ ] iCount=10
					[ ] 
					[+] case "Hide Accepted"
						[ ] iCount=3
					[ ] 
					[+] default 
						[ ] ReportStatus("Verify Operation Type parameter",FAIL,"Invalid Operation Type parameter {sOperationType} passed")
						[ ] iFunctionResult=FAIL
						[ ] 
					[ ] 
					[ ] 
				[ ] 
				[ ] QuickenMainWindow.TypeKeys(replicate(KEY_DN ,iCount))
				[ ] QuickenMainWindow.TypeKeys(KEY_ENTER)
				[ ]  iFunctionResult=PASS
				[ ] 
			[+] else
				[ ] ReportStatus("Verify Invoke Operation parameter",FAIL,"Invalid Invoke Operation parameter {sInvokeOperation} passed")
				[ ] iFunctionResult=FAIL
				[ ] 
			[ ] 
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult=FAIL
			[ ] 
			[ ] 
		[ ] return iFunctionResult
		[ ]  
		[ ] 
		[ ] 
	[ ] 
	[ ] 
[ ] // 
[+] // //********************** Category related Functions***********************************************************
	[ ] // 
	[ ] // // ==========================================================
	[+] // // FUNCTION: SelectCategory()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will select multiple categories from Choose category window.
		[ ] // //
		[ ] // // PARAMETERS:		LIST OF STRING 		lsCategory		list of categories to select
		[ ] // //
		[ ] // // RETURNS:			INTEGER		0		If the categories are selected
		[ ] // //										1		If any error occured
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //	 Dec 27, 2010	Mamta Jain created
	[ ] // // ==========================================================
	[+] // public INTEGER SelectCategory(LIST OF STRING lsCategory)
		[+] // do
			[ ] // INTEGER  iCount, i
			[ ] // iCount = ListCount(lsCategory)
			[ ] // //ChooseCategories.SetActive()
			[ ] // SelectCategoriesToBudget.SetActive()
			[+] // for(i = 1; i<=iCount; i++)
				[ ] // //ChooseCategories.ChooseCategories.QWListViewer.ListBox.MultiSelect(lsCategory[i])
				[ ] // SelectCategoriesToBudget.ChooseTheCategories.QWListViewer.ListBox.MultiSelect(lsCategory[i])
				[ ] // ReportStatus("Select Category", PASS, "{lsCategory[i]} category is selected ")
			[ ] // iFunctionResult = PASS
		[+] // except
			[ ] // iFunctionResult = FAIL
		[ ] // return iFunctionResult
	[ ] // 
	[ ] // ==========================================================
	[+] // FUNCTION: AddCategory()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will add category with specified name and description.
		[ ] // If category is added successfully TRUE is returned else FALSE with error message is returned.
		[ ] 
		[ ] //
		[ ] // PARAMETERS:		STRING 	sCategoryName		Name of the Category 
		[ ] //						STRING     sType					Type of the Category to be created (Income/Expense)
		[ ] //						STRING 	sDesc					Description of category
		[ ] //
		[ ] // RETURNS:			INTEGER	PASS = If Category is created successfully
		[ ] //									FAIL = if any error occurs while adding Category
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	 Dec 03, 2010	Mamta Jain created
	[ ] // ==========================================================
	[+] public INTEGER AddCategory(STRING sCategoryName ,STRING sType, STRING sDesc ,STRING sParent optional)
		[+] // Variable declaration
			[ ] BOOLEAN bCountStatus, bFlag
			[ ] INTEGER  iCount , iCount1
			[ ] STRING sErrorMsg
		[+] // Values
			[ ] bFlag = FALSE 
		[+] do
			[ ] 
			[ ] QuickenWindow.SetActive()
			[ ] QuickenWindow.Tools.Click()
			[ ] QuickenWindow.Tools.CategoryList.Select()
			[+] if(CategoryList.Exists(SHORT_SLEEP))
				[ ] ReportStatus("Category List", PASS, "Category List dialog is launched") 
				[ ] 
				[ ] //getting no. of category in list before adding new category
				[ ] iCount= CategoryList.Show.QWListViewer1.ListBox1.GetItemCount()
				[ ] 
				[ ] CategoryList.New.Click()
				[ ] SetUpCategory.SetActive()
				[ ] SetUpCategory.CategoryName.SetText(sCategoryName)
				[+] if (sParent!=NULL)
					[ ] SetUpCategory.CategoryType.Select("Subcategory of:")
					[+] if (SetUpCategory.SubCategoryName.Exists(2) && SetUpCategory.SubCategoryName.IsEnabled())
						[ ] SetUpCategory.SubCategoryName.Select(sParent)
				[+] else
					[ ] SetUpCategory.CategoryType.Select(sType)
				[ ] 
				[ ] SetUpCategory.Description.SetText(sDesc)
				[+] SetUpCategory.OK.Click()
					[ ] 
					[ ] // // Verify Category list count is incremented
					[ ] iCount1 = CategoryList.Show.QWListViewer1.ListBox1.GetItemCount ()	// getting category count after adding new category
					[ ] 
					[ ] bCountStatus = AssertEquals(iCount1, iCount+1)									// Verify list count incremented by 1
					[+] if ( bCountStatus == TRUE)
						[ ] ReportStatus("Validate Category count", PASS, "Count before adding - {iCount}, Count after adding - {iCount1}") 
						[ ] iFunctionResult = PASS
					[+] else
						[ ] ReportStatus("Validate Category count", FAIL, "Count before adding - {iCount}, is not Matching with Count after adding - {iCount1}") 
						[ ] iFunctionResult = FAIL
				[ ] 
				[ ] CategoryList.DoneButton.Click()
				[ ] WaitForState(CategoryList , false ,1)
				[ ] iFunctionResult=PASS
			[+] else
				[ ] ReportStatus("Category List", FAIL, "Category List dialog didn't appear.") 
				[ ] iFunctionResult=FAIL
		[+] except
			[+] if(SetUpCategory.Exists(SHORT_SLEEP))
				[ ] SetUpCategory.SetActive()
				[ ] SetUpCategory.Close()
				[+] if(CategoryList.Exists(SHORT_SLEEP))
					[ ] CategoryList.SetActive()
					[ ] CategoryList.Close()
				[ ] 
				[ ] 
			[+] if(CategoryList.Exists(SHORT_SLEEP))
				[ ] CategoryList.SetActive()
				[ ] CategoryList.Close()
			[ ] 
			[ ] iFunctionResult = FAIL
		[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: SearchCategory()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will open category list and search category as per input parameter
		[ ] //
		[ ] // PARAMETERS:		STRING 	sCategoryName		Category name to be searched
		[ ] //						
		[ ] // RETURNS:			INTEGER	PASS			 if Category is found
		[ ] //									FAIL  			 if category is not found
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //   	Jan 4, 2011  Mamta Jain  Created
	[ ] // ==========================================================
	[+] public INTEGER SearchCategory(STRING sCategoryName)
		[+] // Variable Declaration
			[ ] INTEGER iNavigate,  iCount, i
			[ ] BOOLEAN bExist
			[ ] STRING sExpected, sActual, sHandle
		[+] do
			[ ] 
			[ ] QuickenWindow.SetActive ()
			[ ] iNavigate = NavigateQuickenTools(TOOLS_CATEGORY_LIST)			// Open Category List
			[+] if (iNavigate == PASS)
				[ ] bExist = CategoryList.Exists(SHORT_SLEEP)
				[+] if(bExist == TRUE)
					[ ] CategoryList.SetActive ()
					[ ] CategoryList.Panel.TextSearchCategory.SetPosition (1, 1)
					[ ] CategoryList.Panel.TextSearchCategory.SetText (sCategoryName)			// Type category to be searched in search box
					[ ] iCount = CategoryList.Show.QWListViewer1.ListBox1.GetItemCount ()	 // get the count to check whether searched category is present or not
					[ ] 
					[ ] sHandle = Str(CategoryList.Show.QWListViewer1.ListBox1.GetHandle())
					[ ] sExpected = "<font style=""background-color:#ffff00""" + "><u>{sCategoryName}</u></font>@"
					[ ] 
					[+] if (iCount == 0)
						[ ] ReportStatus("Search Category", FAIL, "Category - {sCategoryName} not found in Category List ") 
						[ ] iFunctionResult = FAIL
						[ ] 
					[+] if(iCount == 1)
						[ ] sActual = QWAutoExecuteCommand("LISTBOX_GETFULLROW", sHandle, "0")
						[ ] bMatch = MatchStr("{sExpected}*", sActual) 
						[+] if(bMatch == TRUE)
							[ ] ReportStatus("Search Category", PASS, "Category - {sCategoryName} found in Category List ") 
							[ ] iFunctionResult = PASS
						[ ] 
						[+] else
							[ ] ReportStatus("Search Category", FAIL, "Expected Category - {sExpected}, Actual category - {sActual}") 
							[ ] iFunctionResult = FAIL
						[ ] 
					[+] if(iCount >1)
						[ ] //ReportStatus("Search Category", FAIL, "Multiple Categories with Category Name - {sCategoryName} found in Category List ") 
						[+] for(i=0; i<iCount; i++)
							[ ] sActual = QWAutoExecuteCommand("LISTBOX_GETFULLROW", sHandle, Str(i))
							[ ] bMatch = MatchStr("{sExpected}*", sActual)
							[+] if(bMatch == TRUE)
								[ ] sActual = QWAutoExecuteCommand("LISTBOX_SELECTROW", sHandle, Str(i))
								[+] if(sActual == "1")
									[ ] iFunctionResult = PASS
									[ ] break
								[+] else
									[ ] iFunctionResult = FAIL
							[+] else
								[ ] iFunctionResult = FAIL
						[ ] 
					[ ] 
				[+] else
					[ ] ReportStatus("Validate Category List", bExist, "Category List window doesn't exists")
					[ ] iFunctionResult = FAIL
					[ ] 
			[+] else
				[ ] ReportStatus("Launch Category List", iNavigate, "Category List window is not launched")
				[ ] iFunctionResult = FAIL
				[ ] 
		[+] except
			[+] if(CategoryList.Exists(SHORT_SLEEP))
				[ ] CategoryList.Close()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: EditCategory()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will edit category name and description as per input parameter
		[ ] //
		[ ] // PARAMETERS:		 Record	CategoryRecord	rCategory	category name, type, description fields are stored
		[ ] 
		[ ] //						
		[ ] // RETURNS:			INTEGER	PASS			 if Category is editted successfully
		[ ] //									FAIL  			 if any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //   	Jan 4, 2011  Mamta Jain  Created
		[ ] //     May 14, 2012       Udita Dube  updated for QW2013
	[ ] // ==========================================================
	[+] public INTEGER EditCategory(CategoryRecord rCategory)
		[ ] // Variable Declaration
		[ ] 
		[+] do
			[ ] 
			[+] if(IsNull(rCategory.sCategoryName))
				[ ] rCategory.sCategoryName =""
			[+] if(IsNull(rCategory.sCategoryType))
				[ ] rCategory.sCategoryType =""
			[+] if(IsNull(rCategory.sCategoryDescription))
				[ ] rCategory.sCategoryDescription =""
			[ ] 
			[ ] CategoryList.SetActive()
			[ ] //CategoryList.Show.QWListViewer1.ListBox1.PopupSelect (11, 11, "Edit")		// right click on the category and select edit option
			[ ] //CategoryList.Show.QWListViewer1.ListBox1.PopupSelect (11, 22, "#2") 		// updated for QW2013
			[ ] CategoryList.Show.QWListViewer1.ListBox1.OpenContextSelect(11, 22, "#1") // for open agent
			[+] if(!SetUpCategory.Exists(SHORT_SLEEP))
				[ ] CategoryList.Show.QWListViewer1.ListBox1.TypeKeys(KEY_ENTER)
			[ ] SetUpCategory.SetActive ()
			[ ] SetUpCategory.CategoryName.SetPosition (1, 5)
			[ ] SetUpCategory.CategoryName.SetText (rCategory.sCategoryName)		// edit category name
			[+] if(rCategory.sCategoryType != "")
				[ ] SetUpCategory.CategoryType.Select(rCategory.sCategoryType)		// edit category type
			[ ] 
			[+] if(rCategory.sCategoryDescription != "")
				[ ] SetUpCategory.Description.SetText(rCategory.sCategoryDescription)			// edit description
			[ ] 
			[ ] SetUpCategory.OK.Click ()
			[ ] 
			[ ] CategoryList.Close()
			[ ] iFunctionResult = PASS
		[+] except
			[+] if(CategoryList.Exists(SHORT_SLEEP))
				[ ] CategoryList.Close()
			[+] if(SetUpCategory.Exists(SHORT_SLEEP))
				[ ] SetUpCategory.Close()
				[ ] if(CategoryList.Exists(SHORT_SLEEP))
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] // // ==========================================================
	[+] // // FUNCTION: CategoryEdit()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will edit category name and description as per input parameter
		[ ] // //
		[ ] // // PARAMETERS:		 Record	CategoryRecord	rCategory	category name, type, description fields are stored
		[ ] // 
		[ ] // //						
		[ ] // // RETURNS:			INTEGER	PASS			 if Category is editted successfully
		[ ] // //									FAIL  			 if any error occurs
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //   	Jan 4, 2011  Mamta Jain  Created
		[ ] // //     May 14, 2012       Udita Dube  updated for QW2013
	[ ] // // ==========================================================
	[+] public INTEGER CategoryEdit(CategoryRecord rCategory, STRING sOriginalCategoryName)
		[+] // Variable Declaration
			[ ] INTEGER  iYaxis , iCount ,iNavigate
			[ ] STRING sHandle ,sExpected ,sActual
			[ ] BOOLEAN bExist
			[ ] iYaxis=25
		[+] do
			[ ] 
			[ ] QuickenWindow.SetActive ()
			[ ] iNavigate = NavigateQuickenTools("Category List")			// Open Category List
			[+] if (iNavigate == PASS)
				[ ] 
				[+] if(CategoryList.Exists())
					[ ] CategoryList.SetActive ()
					[ ] CategoryList.Panel.TextSearchCategory.SetPosition (1, 1)
					[ ] CategoryList.Panel.TextSearchCategory.SetText (sOriginalCategoryName)			// Type category to be searched in search box
					[ ] iCount = CategoryList.Show.QWListViewer1.ListBox1.GetItemCount ()	 // get the count to check whether searched category is present or not
					[ ] 
					[ ] sHandle = Str(CategoryList.Show.QWListViewer1.ListBox1.GetHandle())
					[ ] sExpected = sOriginalCategoryName
					[+] for(iCount=0; iCount<CategoryList.Show.QWListViewer1.ListBox1.GetItemCount()+1 ; iCount++)
						[ ] sActual = QWAutoExecuteCommand("LISTBOX_GETFULLROW", sHandle, Str(iCount))
						[ ] bMatch = MatchStr("*{sExpected}*", sActual)
						[+] if(bMatch == TRUE)
							[ ] sActual = QWAutoExecuteCommand("LISTBOX_SELECTROW", sHandle, Str(iCount))
							[ ] break
							[ ] 
					[+] if(bMatch == TRUE)
						[+] if(IsNull(rCategory.sCategoryName))
							[ ] rCategory.sCategoryName =""
						[+] if(IsNull(rCategory.sCategoryType))
							[ ] rCategory.sCategoryType =""
						[+] if(IsNull(rCategory.sCategoryDescription))
							[ ] rCategory.sCategoryDescription =""
						[ ] 
						[ ] iYaxis=iYaxis*iCount 
						[ ] CategoryList.SetActive()
						[ ] CategoryList.Show.QWListViewer1.ListBox1.click(2, 11, iYaxis)   
						[ ] CategoryList.Show.QWListViewer1.ListBox1.TypeKeys(KEY_DN)
						[ ] CategoryList.Show.QWListViewer1.ListBox1.TypeKeys(KEY_ENTER)
						[ ] 
						[ ] //CategoryList.Show.QWListViewer1.ListBox1.PopupSelect (11, 11, "Edit")		// right click on the category and select edit option
						[ ] // CategoryList.Show.QWListViewer1.ListBox1.OpenContextSelect  (11, iYaxis, "Edit") 		// updated for QW2013
						[+] // if(!SetUpCategory.Exists())
							[ ] // CategoryList.Show.QWListViewer1.ListBox1.TypeKeys(KEY_ENTER)
						[ ] SetUpCategory.SetActive ()
						[ ] // SetUpCategory.CategoryName.SetPosition (1, 5)
						[ ] SetUpCategory.CategoryName.SetText (rCategory.sCategoryName)		// edit category name
						[+] if(rCategory.sCategoryType != "")
							[ ] SetUpCategory.CategoryType.Select(rCategory.sCategoryType)		// edit category type
						[ ] 
						[+] if(rCategory.sCategoryDescription != "")
							[ ] SetUpCategory.Description.SetText(rCategory.sCategoryDescription)			// edit description
						[ ] 
						[ ] SetUpCategory.OK.Click ()
						[ ] 
						[ ] CategoryList.DoneButton.Click()
						[ ] iFunctionResult = PASS
						[ ] 
					[+] else
						[ ] ReportStatus("Search Category", FAIL, "Category - {sOriginalCategoryName} not found in Category List ") 
						[ ] iFunctionResult = FAIL
					[ ] 
				[+] else
					[ ] ReportStatus("Validate Category List", bExist, "Category List window doesn't exists")
					[ ] iFunctionResult = FAIL
					[ ] 
			[+] else
				[ ] ReportStatus("Launch Category List", iNavigate, "Category List window is not launched")
				[ ] iFunctionResult = FAIL
				[ ] 
		[+] except
			[+] if(CategoryList.Exists())
				[ ] CategoryList.Close()
			[+] if(SetUpCategory.Exists())
				[ ] SetUpCategory.Close()
				[ ] if(CategoryList.Exists())
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
		[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: DeleteCategory()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will delete category as per input parameter passed
		[ ] //
		[ ] // PARAMETERS:		STRING 	sCategoryName		Category name 
		[ ] //						
		[ ] // RETURNS:			INTEGER	PASS			 if Category is deleted successfully
		[ ] //									FAIL  			 if any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //   	Jan 4, 2011  Mamta Jain  Created
		[ ] //    May 14, 2012       Udita Dube  updated for QW2013
	[ ] // ==========================================================
	[+] public INTEGER DeleteCategory(STRING sCategoryName,INTEGER iFlag optional)
		[+] // Variable Declaration
			[ ] INTEGER iNavigate, iFunctionResult, iCount, iSearch
			[ ] BOOLEAN bExist
			[+] if(IsNull(iFlag))
				[ ] iFlag=0
		[+] do
			[ ] 
			[ ] iSearch = SearchCategory(sCategoryName)
			[+] if( iSearch == PASS)
				[ ] CategoryList.SetActive()
				[ ] sleep(SHORT_SLEEP)
				[ ] //CategoryList.Show.QWListViewer1.ListBox1.PopupSelect (26, 11, "Delete")		// right click on category and select delete option
				[ ] // updated for QW2013: click on delete is not working because of Hide checkbox
				[+] if(iFlag==0)
					[ ] CategoryList.Show.QWListViewer1.ListBox1.Click (2, 55, 15)                                       // Click on editted category
				[+] else
					[ ] CategoryList.Show.QWListViewer1.ListBox1.Click (2, 55, 30)                                //Added by Shrivardhan ..... for deleting only sub category
				[ ] CategoryList.Show.QWListViewer1.ListBox1.TypeKeys(Replicate(KEY_DN, 5))      // Select Delete 
				[ ] CategoryList.Show.QWListViewer1.ListBox1.TypeKeys(KEY_ENTER)			       // press enter
				[ ] 
				[+] if (DeleteCategory.Exists(SHORT_SLEEP))
					[ ] DeleteCategory.SetActive ()
					[ ] DeleteCategory.OK.Click()
					[ ] iFunctionResult = PASS
				[+] else
					[ ] iFunctionResult = FAIL
				[ ] 
			[+] else
				[ ] iFunctionResult = FAIL
			[ ] 
			[ ] 
		[+] except
			[+] if (DeleteCategory.Exists(SHORT_SLEEP))
				[ ] DeleteCategory.Close()
				[+] if(CategoryList.Exists(SHORT_SLEEP))
					[ ] CategoryList.Close()
				[ ] 
			[+] if(CategoryList.Exists(SHORT_SLEEP))
				[ ] CategoryList.Close()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: AddCustomCategoryGroup(STRING sCustomCategoryGroup)
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will add a custom category group
		[ ] //
		[ ] // PARAMETERS:		STRING 	sCustomCategoryGroup		Custom Category Group name 
		[ ] //						
		[ ] // RETURNS:			INTEGER	PASS			 if Custom Category Group is added successfully
		[ ] //									FAIL  			 if any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] 
		[ ] //    March 27, 2014       Mukesh updated for QW2013
	[ ] // ==========================================================
	[+] public INTEGER AddCustomCategoryGroup(STRING sCustomCategoryGroup)
		[+] // Variable Declaration
			[ ] INTEGER  iListCount ,iCount
			[ ] STRING sActual ,sHandle
			[ ] 
			[ ] 
		[+] do
			[ ] 
			[+] if(QuickenWindow.Exists(5))
				[ ] QuickenWindow.SetActive()
				[ ] ////Create CustomCategory Group  
				[ ] QuickenWindow.TypeKeys(KEY_CTRL_SHIFT_C)
				[+] if (CategoryList.Exists(4))
					[ ] CategoryList.SetActive()
					[ ] CategoryList.OptionsButton.Click()
					[ ] CategoryList.Typekeys(KEY_DN)
					[ ] CategoryList.Typekeys(KEY_ENTER)
					[+] if (DlgAssignCategoryGroups.Exists(4))
						[ ] DlgAssignCategoryGroups.SetActive()
						[ ] DlgAssignCategoryGroups.AddRenameCustomGroupsButton.Click()
						[+] if (DlgCustomCategoryGroups.Exists(4))
							[ ] DlgCustomCategoryGroups.SetActive()
							[ ] sHandle =Str(DlgCustomCategoryGroups.ListBox.GetHandle())
							[ ] iListCount =DlgCustomCategoryGroups.ListBox.GetItemCount()+1
							[ ] 
							[+] for (iCount=0 ; iCount<iListCount ; iCount++)
								[ ] sActual=QwautoExecuteCommand("LISTBOX_GETFULLROW",sHandle,Str(iCount))
								[ ] bMatch=MatchStr("*{sCustomCategoryGroup}*",sActual)
								[+] if (bMatch)
									[ ] QwautoExecuteCommand("LISTBOX_SELECTROW",sHandle,Str(iCount))
									[ ] DlgCustomCategoryGroups.SetActive()
									[ ] DlgCustomCategoryGroups.DeleteButton.Click()
									[+] if(AlertMessage.Exists(3))
										[ ] AlertMessage.SetActive()
										[ ] AlertMessage.OK.Click()
										[ ] WaitForState(AlertMessage , false ,5)
									[ ] break
									[ ] 
								[ ] 
								[ ] 
							[ ] 
							[ ] DlgCustomCategoryGroups.NewButton.Click()
							[+] if (DlgCreateCategoryGroup.Exists(4))
								[ ] DlgCreateCategoryGroup.SetActive()
								[ ] DlgCreateCategoryGroup.GroupNameTextField.SetText(sCustomCategoryGroup)
								[ ] DlgCreateCategoryGroup.OKButton.Click()
								[ ] WaitForState(DlgCreateCategoryGroup, false ,5)
								[ ] 
							[+] else
								[ ] ReportStatus("Verify Create Custom Group dialog appeared. ", FAIL , "Create Custom Group dialog didn't appear.") 
								[ ] iFunctionResult = FAIL
							[ ] DlgCustomCategoryGroups.SetActive()
							[ ] DlgCustomCategoryGroups.DoneButton.Click()
							[ ] WaitForState(DlgCustomCategoryGroups, false ,5)
							[ ] DlgAssignCategoryGroups.SetActive()
							[+] do
								[ ] DlgAssignCategoryGroups.CustomCategoryGroupComboBox.Select(sCustomCategoryGroup)
								[ ] iFunctionResult = PASS
								[ ] 
							[+] except
								[ ] ReportStatus("Verify Custom Category Group added. ", FAIL , "Custom Category Group didn't add successfully.") 
								[ ] iFunctionResult = FAIL
							[ ] 
							[ ] 
							[ ] 
						[+] else
							[ ] ReportStatus("Verify Custom Category Groups dialog appeared. ", FAIL , "Custom Category Groups dialog didn't appear.") 
							[ ] iFunctionResult = FAIL
						[ ] 
						[ ] DlgAssignCategoryGroups.SetActive()
						[ ] DlgAssignCategoryGroups.DoneButton.Click()
						[ ] 
					[+] else
						[ ] ReportStatus("Verify Assign Category Groups dialog appeared. ", FAIL , "Assign Category Groups dialog didn't appear.") 
						[ ] iFunctionResult = FAIL
					[ ] CategoryList.SetActive()
					[ ] CategoryList.DoneButton.Click()
				[+] else
					[ ] ReportStatus("Verify Category List dialog appeared. ", FAIL , "Category List dialog didn't appear.") 
					[ ] iFunctionResult = FAIL
			[+] else
				[ ] ReportStatus("Verify Quicken exists. ", FAIL , "Quicken does not exist.") 
				[ ] iFunctionResult = FAIL
		[+] except
			[ ] Exceptlog()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: AddCategoriesToCustomCategoryGroup(STRING sCategoryType , LIST OF ANYTYPE lsCategories)
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will add categories a custom category group
		[ ] //
		[ ] // PARAMETERS:		STRING 	sCategoryType		Category Type	 
		[ ] //						STRING 	lsCategories		Category names	 
		[ ] //
		[ ] // RETURNS:			INTEGER	PASS			 if categories added to Custom Category Group successfully
		[ ] //									FAIL  			 if any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] 
		[ ] //    March 27, 2014       Mukesh updated for QW2013
	[ ] // ==========================================================
	[+] public INTEGER AddCategoriesToCustomCategoryGroup( STRING sCustomCategoryGroup , STRING sCategoryType , LIST OF ANYTYPE lsCategoryList)
		[+] // Variable Declaration
			[ ] INTEGER  iListCount , iCount
			[ ] STRING sItem ,sHandle ,sActual
			[ ] 
			[ ] 
		[+] do
			[ ] 
			[+] if(QuickenWindow.Exists(5))
				[ ] QuickenWindow.SetActive()
				[ ] ////Create CustomCategory Group  
				[ ] QuickenWindow.TypeKeys(KEY_CTRL_SHIFT_C)
				[+] if (CategoryList.Exists(4))
					[ ] CategoryList.SetActive()
					[ ] CategoryList.OptionsButton.Click()
					[ ] CategoryList.Typekeys(KEY_DN)
					[ ] CategoryList.Typekeys(KEY_ENTER)
					[+] if (DlgAssignCategoryGroups.Exists(4))
						[ ] DlgAssignCategoryGroups.SetActive()
						[ ] DlgAssignCategoryGroups.CustomCategoryGroupComboBox.Select(sCustomCategoryGroup)
						[ ] DlgAssignCategoryGroups.CategoriesinComboBox.Select(sCategoryType)
						[ ] sHandle= Str(DlgAssignCategoryGroups.AvailableCategoriesListBox.GetHandle())
						[ ] iListCount= DlgAssignCategoryGroups.AvailableCategoriesListBox.GetItemCount() +1
						[+] if (iListCount>0)
							[+] for each sItem in lsCategoryList
								[+] for(iCount= 0; iCount <= iListCount;  iCount++)
									[ ] sActual = QwAutoExecuteCommand("LISTBOX_GETFULLROW", sHandle, Str(iCount))
									[ ] bMatch = MatchStr("*{sItem}*", sActual)
									[+] if (bMatch)
										[ ] QwAutoExecuteCommand("LISTBOX_SELECTROW", sHandle, Str(iCount))
										[ ] DlgAssignCategoryGroups.AddButton.Click()
										[ ] break
							[ ] sHandle= Str(DlgAssignCategoryGroups.AddedCategoriesListBox.GetHandle())
							[+] for(iCount= 1; iCount <= ListCount(lsCategoryList);  iCount++)
								[ ] sActual = QwAutoExecuteCommand("LISTBOX_GETFULLROW", sHandle, Str(iCount-1))
								[ ] bMatch = MatchStr("*{lsCategoryList[iCount]}*", sActual)
								[+] if (bMatch)
									[ ] ReportStatus("Verify category  {lsCategoryList[iCount]} is added to the custom group: {sCustomCategoryGroup}.", PASS , "category {lsCategoryList[iCount]} is added to the custom group: {sCustomCategoryGroup}.") 
									[ ] iFunctionResult = PASS
								[+] else
									[ ] ReportStatus("Verify category  {lsCategoryList[iCount]} is added to the custom group: {sCustomCategoryGroup}.", FAIL , "category {lsCategoryList[iCount]} is not added to the custom group: {sCustomCategoryGroup}.")
									[ ] iFunctionResult = FAIL
							[ ] DlgAssignCategoryGroups.SetActive()
							[ ] DlgAssignCategoryGroups.DoneButton.Click()
							[ ] WaitForState(DlgAssignCategoryGroups , false ,5)
							[ ] 
						[+] else
							[ ] ReportStatus("Verify category is not null.", FAIL , "Category is null.") 
							[ ] iFunctionResult = FAIL
						[ ] 
					[+] else
						[ ] ReportStatus("Verify Assign Category Groups dialog appeared. ", FAIL , "Assign Category Groups dialog didn't appear.") 
						[ ] iFunctionResult = FAIL
					[ ] CategoryList.SetActive()
					[ ] CategoryList.DoneButton.Click()
				[+] else
					[ ] ReportStatus("Verify Category List dialog appeared. ", FAIL , "Category List dialog didn't appear.") 
					[ ] iFunctionResult = FAIL
			[+] else
				[ ] ReportStatus("Verify Quicken exists. ", FAIL , "Quicken does not exist.") 
				[ ] iFunctionResult = FAIL
		[+] except
			[ ] Exceptlog()
			[ ] iFunctionResult = FAIL
			[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: DeleteCustomCategoryGroup(STRING sCustomCategoryGroup)
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will delete a custom category group
		[ ] //
		[ ] // PARAMETERS:		STRING 	sCustomCategoryGroup		Custom Category Group name 
		[ ] //						
		[ ] // RETURNS:			INTEGER	PASS			 if Custom Category Group is deleted successfully
		[ ] //									FAIL  			 if any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] 
		[ ] //    April 01, 2014       Mukesh 
	[ ] // ==========================================================
	[+] public INTEGER DeleteCustomCategoryGroup(STRING sCustomCategoryGroup)
		[+] // Variable Declaration
			[ ] INTEGER  iListCount ,iCount
			[ ] STRING sActual ,sHandle
			[ ] 
			[ ] 
		[+] do
			[ ] 
			[+] if(QuickenWindow.Exists(5))
				[ ] QuickenWindow.SetActive()
				[ ] ////Create CustomCategory Group  
				[ ] QuickenWindow.TypeKeys(KEY_CTRL_SHIFT_C)
				[+] if (CategoryList.Exists(4))
					[ ] CategoryList.SetActive()
					[ ] CategoryList.OptionsButton.Click()
					[ ] CategoryList.Typekeys(KEY_DN)
					[ ] CategoryList.Typekeys(KEY_ENTER)
					[+] if (DlgAssignCategoryGroups.Exists(4))
						[ ] DlgAssignCategoryGroups.SetActive()
						[ ] DlgAssignCategoryGroups.AddRenameCustomGroupsButton.Click()
						[+] if (DlgCustomCategoryGroups.Exists(4))
							[ ] DlgCustomCategoryGroups.SetActive()
							[ ] sHandle =Str(DlgCustomCategoryGroups.ListBox.GetHandle())
							[ ] iListCount =DlgCustomCategoryGroups.ListBox.GetItemCount()+1
							[ ] 
							[+] for (iCount=0 ; iCount<iListCount ; iCount++)
								[ ] sActual=QwautoExecuteCommand("LISTBOX_GETFULLROW",sHandle,Str(iCount))
								[ ] bMatch=MatchStr("*{sCustomCategoryGroup}*",sActual)
								[+] if (bMatch)
									[ ] QwautoExecuteCommand("LISTBOX_SELECTROW",sHandle,Str(iCount))
									[ ] break
							[+] if (bMatch)
									[ ] DlgCustomCategoryGroups.SetActive()
									[ ] DlgCustomCategoryGroups.DeleteButton.Click()
									[+] if(AlertMessage.Exists(3))
										[ ] AlertMessage.SetActive()
										[ ] AlertMessage.OK.Click()
										[ ] WaitForState(AlertMessage , false ,5)
										[ ] iFunctionResult = PASS
									[+] else
										[ ] ReportStatus("Verify delete confirmation for custom category group." , FAIL , "Delete confirmation for custom category group didn't appear.")
										[ ] iFunctionResult = FAIL
								[ ] 
								[ ] 
							[+] else
								[ ] iFunctionResult = PASS
							[ ] 
							[ ] DlgCustomCategoryGroups.SetActive()
							[ ] DlgCustomCategoryGroups.DoneButton.Click()
							[ ] WaitForState(DlgCustomCategoryGroups, false ,5)
							[ ] 
							[ ] 
							[ ] 
						[+] else
							[ ] ReportStatus("Verify Custom Category Groups dialog appeared. ", FAIL , "Custom Category Groups dialog didn't appear.") 
							[ ] iFunctionResult = FAIL
						[ ] 
						[ ] DlgAssignCategoryGroups.SetActive()
						[ ] DlgAssignCategoryGroups.DoneButton.Click()
						[ ] 
					[+] else
						[ ] ReportStatus("Verify Assign Category Groups dialog appeared. ", FAIL , "Assign Category Groups dialog didn't appear.") 
						[ ] iFunctionResult = FAIL
					[ ] CategoryList.SetActive()
					[ ] CategoryList.DoneButton.Click()
				[+] else
					[ ] ReportStatus("Verify Category List dialog appeared. ", FAIL , "Category List dialog didn't appear.") 
					[ ] iFunctionResult = FAIL
			[+] else
				[ ] ReportStatus("Verify Quicken exists. ", FAIL , "Quicken does not exist.") 
				[ ] iFunctionResult = FAIL
		[+] except
			[ ] Exceptlog()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] 
	[ ] // // ==========================================================
	[+] // // FUNCTION: AddCategoryGeneric()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will add the categories based on input XLS data.
		[ ] // // This function is used when user wants to give any set of input (valid or invalid) data.
		[ ] // //
		[ ] // // PARAMETERS:		STRING 		sDataFile		File name where input is stored
		[ ] // //						STRING 		sWorksheet	Sheet name
		[ ] // //
		[ ] // // RETURNS:			INTEGER	PASS = If Utility is executed successfully
		[ ] // //									FAIL = if Utility is not executed successfully
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //	 Mar 01, 2011	Chandan Abhyankar	created
	[ ] // // ==========================================================
	[+] // public INTEGER AddCategoryGeneric(STRING sDataFile, STRING sWorkSheet)
		[+] // do
			[ ] // LIST of STRING lsCategory
			[ ] // LIST of ANYTYPE lsExcelData, lList
			[ ] // LIST OF INTEGER iListIndex
			[ ] // STRING sErrorMsg, sActual, sHandle, sErrorOccuredFlag
			[ ] // BOOLEAN  bValidTaxLineItem
			[ ] // INTEGER i, iCount, iCount1, iCount2, iFind
			[ ] // iFunctionResult = PASS
			[ ] // 
			[+] // if(FileExists(sDataFile))
				[ ] // // Read data from excel sheet
				[ ] // lsExcelData=ReadExcelTable(sDataFile, sWorkSheet)
				[ ] // 
				[ ] // QuickenMainWindow.SetActive ()
				[ ] // QuickenWindow.Tools.CategoryList.Select()
				[+] // if(CategoryList.Exists(SHORT_SLEEP))
					[ ] // 
					[ ] // iCount = ListCount(lsExcelData)			// Get the row count
					[ ] // 
					[+] // for (i = 1; i<=iCount; i++)
						[ ] // 
						[+] // do
							[ ] // 
							[ ] // // This flag is used to skip verification part if error is encountered
							[ ] // sErrorOccuredFlag = "NoError"
							[ ] // bValidTaxLineItem = TRUE
							[ ] // // Fetch rows from the given sheet
							[ ] // lsCategory=lsExcelData[i]
							[ ] // 
							[ ] // CategoryList.SetActive ()
							[ ] // iCount1 = CategoryList.Show.QWListViewer1.ListBox1.GetItemCount ()	// Get the category Count before adding new category 
							[ ] // 
							[ ] // CategoryList.New.Click ()
							[+] // if(SetUpCategory.Exists(SHORT_SLEEP))
								[ ] // 
								[ ] // SetUpCategory.SetActive ()
								[ ] // 
								[+] // if(lsCategory[1] != NULL)
									[ ] // SetUpCategory.CategoryName.SetText (lsCategory[1])
								[+] // if(lsCategory[4] != NULL)
									[ ] // SetUpCategory.Description.SetText (lsCategory[4])
								[+] // if(lsCategory[2] != NULL)
									[ ] // bMatch = MatchStr("*Subcategory*", lsCategory[2])
									[+] // if(bMatch == TRUE)
										[+] // if(lsCategory[3] != NULL)
											[ ] // SetUpCategory.CategoryType.Select (lsCategory[2])
											[ ] // lList = SetUpCategoryPopup.FileType.GetContents()			// Get the all Subcategory list items 
											[ ] // iFind = ListFind (lList, lsCategory[3])						// find the item in the list, if not find iFind = 0
											[+] // if(iFind == 0)
												[ ] // ReportStatus("Validate SubCategory", WARN, "Category - '{lsCategory[3]}' is not found in 'SubCategory of:' list")
												[ ] // 
											[ ] // 
											[+] // else					
												[ ] // SetUpCategory.SetActive ()
												[ ] // SetUpCategory.SubCategoryName.Select (lsCategory[3])			//if found, select the option
												[ ] // 
									[+] // else
										[ ] // SetUpCategory.CategoryType.Select (lsCategory[2])
								[ ] // 
								[ ] // SetUpCategory.SetActive ()
								[ ] // SetUpCategory.Click (1, 124, 42)		// Click on "Tax Reporting" tab
								[ ] // 
								[+] // // if( MessageBox.Exists(SHORT_SLEEP))
									[ ] // // MessageBox.SetActive ()
									[ ] // // sErrorMsg = MessageBox.ErrorMsg.GetText()
									[ ] // // ReportStatus("Validate Error Meassage", WARN, "Error Message - '{sErrorMsg}' is observed")
									[ ] // // 
									[+] // // if(MessageBox.OK.Exists(SHORT_SLEEP) == TRUE)
										[ ] // // MessageBox.OK.Click ()
									[+] // // else
										[ ] // // MessageBox.OK1.Click ()
										[ ] // // 
									[ ] // // sErrorOccuredFlag = "FoundError"
									[ ] // // SetUpCategory.SetActive()
									[ ] // // SetUpCategory.Close()
									[ ] // // 
								[+] // // else
									[+] // if((lsCategory[6] != NULL) ) 
										[ ] // SetUpCategoryPopup.SetActive()
										[ ] // lList = SetUpCategoryPopup.FileType.GetContents()			// Get the Tax line items for "Standard Line Item List" 
										[ ] // iFind = ListFind (lList, lsCategory[6])						// find the item in the list, if not find iFind = 0
										[+] // if(iFind == 0)	
											[ ] // SetUpCategory.SetActive()
											[ ] // SetUpCategory.ItemListOption.Select ("Extended line item list")	// Select "Extended Line Item list" option
											[ ] // lList = SetUpCategoryPopup.FileType.GetContents()			// Get the Tax line items for "Extended Line Item list" 
											[ ] // iFind = ListFind (lList, lsCategory[6])						// find the item in the list, if not find iFind = 0
											[+] // if(iFind == 0)
												[ ] // ReportStatus("Search Tax Line Item", WARN, "'{lsCategory[6]}' is not found in 'Standard Tax Line' as well as 'Extended Tax line'")
												[ ] // bValidTaxLineItem = FALSE
											[ ] // 
											[+] // else					
												[ ] // SetUpCategory.SetActive ()
												[ ] // SetUpCategoryPopup.FileType.Select (lsCategory[6])			// if found, select the option
										[+] // else
											[ ] // SetUpCategory.SetActive ()
											[ ] // SetUpCategoryPopup.FileType.Select (lsCategory[6])
										[ ] // 
										[ ] // 
									[+] // if(lsCategory[5] == "UnCheck")
										[ ] // SetUpCategory.TaxRelatedCategory.Uncheck ()
										[ ] // 
									[+] // else
										[ ] // SetUpCategory.TaxRelatedCategory.Check()
									[ ] // 
									[ ] // // Save Category
									[ ] // SetUpCategory.OK.Click (1, 30, 10)
									[+] // if(SetUpCategoryPopup.Exists(SHORT_SLEEP))
										[ ] // SetUpCategoryPopup.OK.click()
									[ ] // 
									[+] // // if( MessageBox.Exists(SHORT_SLEEP))
										[ ] // // MessageBox.SetActive()
										[ ] // // sErrorMsg = MessageBox.ErrorMsg.GetText()
										[ ] // // ReportStatus("Validate Error Meassage", WARN, "Error message - '{sErrorMsg}' is observed")
										[ ] // // 
										[+] // // if (MessageBox.OK.Exists(SHORT_SLEEP) == TRUE)
											[ ] // // MessageBox.OK.Click ()
										[+] // // else
											[ ] // // MessageBox.OK1.Click ()
										[ ] // // 
										[ ] // // sleep(SHORT_SLEEP)
										[ ] // // SetUpCategory.SetActive()
										[ ] // // SetUpCategory.Close()
										[ ] // // sErrorOccuredFlag = "FoundError"
										[ ] // // ReportStatus("Validate Category Addition", FAIL, "Category  - '{lsCategory[1]}' is not added, Error Observed - {sErrorMsg}")
										[ ] // // 
									[ ] // 
									[+] // // if((lsCategory[6] != NULL))
										[ ] // // sleep(SHORT_SLEEP)
										[ ] // // CategoryList.VerifyEnabled(TRUE, 10)
										[ ] // // CategoryList.SetActive()
										[ ] // // sHandle = Str(CategoryList.Show.QWListViewer1.ListBox1.GetHandle())
										[ ] // // iListIndex = CategoryList.Show.QWListViewer1.ListBox1.GetMultiSelIndex()		// get the index of the selected row
										[ ] // // 
										[+] // // // if (bValidTaxLineItem != FALSE)
											[ ] // // // 
											[ ] // // // sActual = QWAutoExecuteCommand("LISTBOX_GETFULLROW", sHandle, Str(iListIndex[1]-1))
											[ ] // // // bMatch = MatchStr("*{lsCategory[6]}*", sActual)			// Verify tax line item, if category is added
											[+] // // // if(bMatch == TRUE)
												[ ] // // // ReportStatus("Validate Tax Line Item", PASS, "Tax Line Item - '{lsCategory[6]}' is added for Category - {lsCategory[1]}")
											[+] // // // else
												[ ] // // // ReportStatus("Validate Tax Line Item", FAIL, "Actual -' {sActual}', Expected - '{lsCategory[6]}' is found on Category List window")
											[ ] // // // 
										[+] // // // else
											[ ] // // // ReportStatus("Validate Taxline Item", WARN, "Taxline Item is not verified on 'Category List' window as  - '{lsCategory[6]}' is invalid item")
								[ ] // 
							[+] // else
								[ ] // ReportStatus("Validate New Category window", FAIL, "Set up Category window for adding new category is not opened")
							[ ] // 
							[ ] // // CategoryList.SetActive()
							[ ] // // CategoryList.Show.QWListViewer1.ListBox1.SetFocus()
							[ ] // // iCount2 = CategoryList.Show.QWListViewer1.ListBox1.GetItemCount ()		// get the category count after above actions are performed
							[+] // // if(iCount2 == iCount1+1)
								[ ] // // ReportStatus("Validate Category Count", PASS, "Category '{lsCategory[1]}' is added, Count before addition -{iCount1} and after addition - {iCount2}")
								[ ] // // 
							[+] // // else
								[ ] // // ReportStatus("Validate Category Count", FAIL, "Category '{lsCategory[1]}' is not added as incomplete/inappropriate input data is provided.")
						[ ] // 
						[+] // except
							[ ] // // Clsoe SetupCategory window if it exists
							[+] // if(SetUpCategory.Exists(SHORT_SLEEP) == TRUE)
								[ ] // SetUpCategory.SetActive()
								[ ] // SetUpCategory.Close()
								[ ] // iFunctionResult = FAIL
								[ ] // 
								[ ] // // Continue execution for next iteration
								[ ] // continue
					[ ] // // 
					[ ] // // Close CategoryList window at the end..
					[ ] // CategoryList.SetActive ()
					[ ] // CategoryList.Close ()
				[ ] // 
				[+] // else
					[ ] // ReportStatus("Validate Category List window", FAIL, "Category List is not opened")
					[ ] // 
			[ ] // 
			[+] // else
				[ ] // ReportStatus("Validate Data file", FAIL, "{sDataFile} data file doesn't exists.")
			[ ] // 
		[+] // except
			[ ] // LogException("Error has occurred in Utility")
			[ ] // iFunctionResult = FAIL
		[ ] // 
		[ ] // return iFunctionResult
[ ] // 
[+] // //********************** Savings Goal Functions***************************************************************
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: SavingGoalPreReq()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will create new saving goal and setup accordingly
		[ ] //
		[ ] // PARAMETERS:			NONE
		[ ] 
		[ ] // RETURNS:				INTEGER	PASS	If Saving Goal is created successfully and available in Account Bar
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //  May 2, 2014	Jayashree Nagaraja Created
	[ ] // ==========================================================
	[+] public INTEGER SavingGoalPreReq()
		[+] // Variable declaration
			[ ] INTEGER iAddSavingGoal, iDeleteSavingGoal
			[ ] LIST OF ANYTYPE  lsExcelData,lsSavingGoalData,lsSavingGoalData2
			[ ] STRING sSavingGoals = "Saving Goal"
			[ ] STRING sSavingGoalData = "SavingGoal"
			[ ] STRING sGoalName
			[ ] INTEGER iSelect, iGoal
			[ ] STRING sAccount
			[ ] 
			[+] do
				[ ] // Activate Quicken window
				[ ] QuickenWindow.SetActive()
				[ ] 
				[ ] //Read data from excel sheet
				[ ] lsExcelData=ReadExcelTable(sSavingGoalData, sSavingGoals)
				[ ] // Fetch 2nd row from the given sheet
				[ ] lsSavingGoalData=lsExcelData[1]
				[ ] 
				[ ] // Delete saving goal from account bar
				[ ] iSelect = DeleteSavingGoalFromAccountBar()
				[ ] //Add Saving Goal
				[+] if (iSelect == PASS)
					[ ] iAddSavingGoal=AddSavingGoal(lsSavingGoalData[1],lsSavingGoalData[2])
					[ ] // Report Status if saving goal is added
					[+] if (iAddSavingGoal==PASS)
						[ ] //------------------Select the SavingGoal Account------------------
						[ ] sAccount = lsSavingGoalData[1]
						[ ] iSelect = SelectAccountFromAccountBar(sAccount,ACCOUNT_SAVINGGOALS)
						[+] if(iSelect == PASS)
							[ ] iFunctionResult = PASS
						[+] else
							[ ] ReportStatus("Validate Saving Goal in Account Bar", FAIL, "{lsSavingGoalData[1]} is not available in Account bar")
							[ ] iFunctionResult = FAIL
					[+] else
						[ ] ReportStatus("Add  Saving Goal", iAddSavingGoal, "Saving Goal-  {lsSavingGoalData[1]}  is not Added")
						[ ] iFunctionResult = FAIL
				[+] else
					[ ] iFunctionResult = FAIL
			[+] except
				[ ] ExceptLog()
				[ ] iFunctionResult = FAIL
			[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: AddSavingGoal()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will create new saving goal
		[ ] //
		[ ] // PARAMETERS:			STRING  	sGoalName		Saving Goal name
		[ ] //							STRING  	sGoalAmount		Saving Goal amount
		[ ] //							STRING  	sDate				Finish Date
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If Saving Goal created successful
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //  Jun 12, 2012	Udita Dube Created
	[ ] // ==========================================================
	[+] public INTEGER AddSavingGoal(STRING sGoalName, STRING sGoalAmount, STRING sDate optional)
		[+] // Variable declaration
			[ ] STRING sActual
			[ ] INTEGER iSwitchState
			[ ] 
			[ ] 
		[ ] 
		[+] do
			[ ] 
			[ ] // Activate Quicken window
			[ ] QuickenWindow.SetActive()
			[ ] 
			[ ] // Navigate to Planning > Saving Goals
			[ ] NavigateQuickenTab(sTAB_PLANNING,sTAB_SAVING_GOALS)
			[ ] iSwitchState = UsePopupRegister("OFF")	
			[+] if(iSwitchState == PASS)
				[ ] 
				[ ] //########Acttivate Planning#################//
				[+] if(GetStartedBrowserWindow.GetStarted.Exists(5))
					[ ] //########Click Get Started Button on Saving Goals Snapshot#################//
					[ ] GetStartedBrowserWindow.GetStarted.DoubleClick()
					[ ] //Planning.QWSnapHolder1.Panel.QWMsHtmlVw1.ShellEmbedding1.ShellDocObjectView1.InternetExplorer_Server1.Click (1, 238, 326)
					[ ] sleep(2)
					[ ] // Create new Saving Goal window should open
					[+] if(AddEditSavingsGoal.Exists(SHORT_SLEEP))
						[ ] AddEditSavingsGoal.SetActive ()
						[ ] // Enter test data in all fields
						[ ] AddEditSavingsGoal.GoalName.SetText(sGoalName)
						[ ] AddEditSavingsGoal.GoalAmount.SetText(sGoalAmount)
						[+] if(sDate!=NULL)
							[ ] AddEditSavingsGoal.FinishDate.SetText(sDate)
						[ ] AddEditSavingsGoal.OK.Click()
						[ ] 
						[ ] // If Create new Saving Goal window closed
						[+] if(QuickenWindow.Exists(SHORT_SLEEP))
							[ ] QuickenWindow.SetActive()
							[ ] 
							[ ] // Click on created Saving Goal link
							[ ] MDIClient.Planning.PlanningSubTab.Panel.SetupScreenHolder.Panel1.SavingGoal.Click()
							[ ] 
							[ ] sleep(2)
							[ ] // Verify Saving Goal name on Quicken main window's caption
							[ ] sActual=QuickenWindow.GetCaption()
							[ ] bMatch=MatchStr("*{sGoalName}*",sActual)
							[+] if(bMatch==TRUE)
								[ ] ReportStatus("Validate {sGoalName} window", PASS, "{sGoalName} window is displayed") 
								[ ] iFunctionResult = PASS
							[+] else
								[ ] ReportStatus("Validate {sGoalName} window", FAIL, "{sGoalName} window is not displayed") 
								[ ] iFunctionResult = FAIL
						[+] else
							[ ] ReportStatus("Validate Quicken Main Window after creating Saving Goal", FAIL, "Quicken Main Window is not available after creating Saving Goal")
							[ ] 
						[ ] 
					[+] else
						[ ] ReportStatus("Validate Create New Savings Goal Window ", FAIL, "Create New Savings Goal window is not opened")
						[ ] 
				[+] else 
					[ ] ReportStatus("Validate Planning snapshot displayed", FAIL, "Planning snapshot did not display.")
					[ ] iSwitchState = UsePopupRegister("OFF")	
					[ ] iFunctionResult = FAIL
				[ ] 
			[+] else
				[ ] iFunctionResult = FAIL
				[ ] ReportStatus("Verification of navigation to Planning > Saving Goals", FAIL, "Saving Goals tab is not opened")
				[ ] 
			[ ] 
			[ ] 
		[+] except
			[ ] ExceptLog()
			[+] // if(AddEditSavingsGoal.Exists(SHORT_SLEEP))
				[ ] // AddEditSavingsGoal.Close()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: EditSavingGoal()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will edit already created saving goal
		[ ] //
		[ ] // PARAMETERS:			STRING  	sGoalName		Saving Goal name
		[ ] //							STRING  	sGoalAmount		Saving Goal amount
		[ ] //							STRING  	sDate				Finish Date  dd/mm/yyyy	
		[ ] //							STRING	sExpectedDate	Finish Date  dd mon yyyy
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If Saving Goal edited successfully
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //  Jun 13, 2012	Udita Dube Created
		[ ] // May 1, 2014 Jayashree nagaraja Edited
	[ ] // ==========================================================
	[+] public INTEGER EditSavingGoal(STRING sGoalName, STRING sGoalAmount, STRING sDate)
		[+] // Variable declaration
			[ ] STRING sActualAmount,sActualFinishDate, sActualName, sEnteredDate
			[ ] INTEGER iNavigate
			[ ] INTEGER iDay, iMonth, iYear
			[ ] DATETIME dtDate
			[ ] BOOLEAN  bEnabled
			[ ] LIST of STRING lsDate
		[ ] 
		[+] do
			[ ] 
			[ ] // Activate Quicken window
			[ ] QuickenWindow.SetActive()
			[ ] 
			[ ] // Navigate to Planning > Saving Goals
			[ ] iNavigate=NavigateQuickenTab(sTAB_PLANNING,sTAB_SAVING_GOALS)
			[ ] ReportStatus("Navigate to {sTAB_PLANNING} > {sTAB_SAVING_GOALS} ", iNavigate, "Navigate to {sTAB_PLANNING} > {sTAB_SAVING_GOALS}") 
			[ ] 
			[+] if(iNavigate == PASS)
				[ ] 
				[ ] // Click on Edit Goal link
				[ ] MDIClient.Planning.PlanningSubTab.Panel.SetupScreenHolder.Panel.EditGoal.Click()
				[ ] // Edit Savings Goal window should open
				[+] if(AddEditSavingsGoal.Exists(SHORT_SLEEP))
					[ ] AddEditSavingsGoal.SetActive ()
					[ ] // Enter test data in all fields
					[ ] // CreateNewSavingsGoal.GoalName.SetText(sGoalName)
					[ ] bEnabled = AddEditSavingsGoal.GoalName.IsEnabled()
					[ ] AddEditSavingsGoal.GoalAmount.SetText(sGoalAmount)
					[ ] AddEditSavingsGoal.FinishDate.SetText(sDate)
					[ ] AddEditSavingsGoal.OK.Click()
					[ ] // Finish date must be after the start date
					[+] if(AlertMessage.Exists(5))
						[ ] AlertMessage.OK.Click()
						[ ] ReportStatus("Error message", FAIL, "Finish date must be after the start date message is displayed")
						[ ] AddEditSavingsGoal.Cancel.Click()
					[ ] // Verification of edited values
					[+] else
						[ ] // Get Actual goal amount after edit operation
						[ ] sActualAmount=MDIClient.Planning.PlanningSubTab.Panel.SetupScreenHolder.Panel1.GoalAmount.GetText()
						[ ] // Making expected goal amount in formate of 00.00 or 000.00
						[ ] sGoalAmount=GetField (sGoalAmount, ".", 1)
						[ ] sGoalAmount="{sGoalAmount}.00"
						[ ] // Matching expected with actual goal amount
						[ ] bMatch=MatchStr("${sGoalAmount}*",sActualAmount)
						[+] if(bMatch==TRUE)
							[ ] ReportStatus("Validate Goal amount {sGoalAmount}", PASS, "{sGoalAmount} is displayed as Goal amount") 
							[ ] iFunctionResult = PASS
						[+] else
							[ ] ReportStatus("Validate Goal amount {sGoalAmount}", FAIL, "Expected Goal Amount - {sGoalAmount}  and Actual Goal Amount - {sActualAmount}") 
							[ ] iFunctionResult = FAIL
						[ ] 
						[ ] // Get Actual goal finish date after edit operation
						[ ] sActualFinishDate=MDIClient.Planning.PlanningSubTab.Panel.SetupScreenHolder.Panel1.FinishDate.GetText()
						[ ] //Format entered date to match Quicken display  //Added by Jayashree Nagaraja 1 May 2014
						[ ] //Commented by Mukesh 1/14/2015 as this won't work all the time as we are trying e.g. day
						[ ] //as 4 th character from string 1/14/2014 this will return the date as 4 while date is 14
						[ ] //m/d/yyyy is the expected US date formate
						[ ] // iDay = Val(Substr (sDate, 4,2) )
						[ ] // iMonth = Val(Substr (sDate, 1, 2) )
						[ ] // iYear = Val(Substr (sDate, 7,4) )
						[ ] lsDate = split(sDate,"/")
						[ ] 
						[ ] iMonth= Val(lsDate[1])
						[ ] iDay= Val(lsDate[2])
						[ ] iYear= Val(lsDate[3])
						[ ] 
						[ ] dtDate = MakeDateTime(iYear, iMonth, iDay)
						[ ] sEnteredDate = FormatDateTime(dtDate, "mmm d yyyy")
						[ ] bMatch = MatchStr("by {sEnteredDate}*", sActualFinishDate)
						[+] if(bMatch==TRUE)
							[ ] ReportStatus("Validate Goal Finish Date {sDate}", PASS, "{sEnteredDate} is displayed as Goal Finish Date") 
							[ ] iFunctionResult = PASS
						[+] else
							[ ] ReportStatus("Validate Goal Finish Date {sDate}", FAIL, "Expected Finish Date - {sEnteredDate}  and Actual Finish Date - {sActualFinishDate}") 
							[ ] iFunctionResult = FAIL
						[ ] 
						[ ] // Get Actual Goal name after edit operation
						[ ] sActualName = MDIClient.Planning.PlanningSubTab.Panel.SetupScreenHolder.Panel1.SavingGoal.GetCaption()
						[ ] // // Match expected finish date to actual
						[ ] // bMatch=MatchStr(sGoalName,sActualName)
						[+] if(bEnabled==FALSE)
							[ ] ReportStatus("Validate Goal Name {sActualName}", PASS, "{sActualName} is not editable") 
							[ ] iFunctionResult = PASS
						[+] else
							[ ] ReportStatus("Validate Goal Name {sActualName}", FAIL, "{sActualName} is editable") 
							[ ] iFunctionResult = FAIL
						[ ] 
						[ ] 
					[ ] 
				[+] else
					[ ] iFunctionResult = FAIL
					[ ] ReportStatus("Validate Edit Savings Goal Window ", FAIL, "Edit Savings Goal window is not opened")
					[ ] 
			[+] else
				[ ] iFunctionResult = FAIL
				[ ] ReportStatus("Verification of navigation to Planning > Saving Goals", FAIL, "Saving Goals tab is not opened")
				[ ] 
			[ ] 
			[ ] 
		[+] except
			[ ] ExceptLog()
			[+] // if(AddEditSavingsGoal.Exists(SHORT_SLEEP))
				[ ] // AddEditSavingsGoal.Close()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: DeleteSavingGoal()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will delete saving goal
		[ ] //
		[ ] // PARAMETERS:			STRING  	sGoalName		Saving Goal name
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If Saving Goal deleted successfully
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //  Jun 12, 2012	Udita Dube Created
	[ ] // ==========================================================
	[+] public INTEGER DeleteSavingGoal(STRING sGoalName)
		[+] // Variable declaration
			[ ] STRING sActual
			[ ] INTEGER iNavigate
			[ ] 
		[ ] 
		[+] do
			[ ] 
			[ ] // Activate Quicken window
			[ ] QuickenWindow.SetActive()
			[ ] 
			[ ] // Navigate to Planning > Saving Goals
			[ ] iNavigate=NavigateQuickenTab(sTAB_PLANNING,sTAB_SAVING_GOALS)
			[ ] ReportStatus("Navigate to {sTAB_PLANNING} > {sTAB_SAVING_GOALS} ", iNavigate, "Navigate to {sTAB_PLANNING} > {sTAB_SAVING_GOALS}") 
			[ ] sleep(15)
			[+] if(iNavigate == PASS)
				[ ] 
				[ ] // Click on Goal Action button at the right most corner of the page
				[ ] MDIClient.Planning.PlanningSubTab.Panel.SetupScreenHolder.Panel1.DeleteIcon.Click()
				[ ] sleep(30)
				[ ] // Click on "New Saving Goal" option
				[ ] MDIClient.Planning.PlanningSubTab.Panel.SetupScreenHolder.Panel1.DeleteIcon.TypeKeys(Replicate(KEY_DN, 2)) 
				[ ] MDIClient.Planning.PlanningSubTab.Panel.SetupScreenHolder.Panel1.DeleteIcon.TypeKeys(KEY_ENTER)
				[ ] 
				[ ] // Create new Saving Goal window should open
				[+] if(DeleteSavingsGoal.Exists(30))
					[ ] DeleteSavingsGoal.SetActive ()
					[ ] // Enter test data in all fields
					[ ] DeleteSavingsGoal.OK.Click()
					[ ] 
					[ ] // // If Create new Saving Goal window closed
					[+] // if(!MDIClient.Planning.PlanningSubTab.Panel.SetupScreenHolder.Panel.EditGoal.Exists(SHORT_SLEEP))
						[ ] // ReportStatus("Validate Saving Goal {sGoalName} delete", PASS, "Saving Goal-{sGoalName} deleted successfully") 
						[ ] // iFunctionResult = PASS
					[+] // else
						[ ] // ReportStatus("Validate Saving Goal {sGoalName} delete", FAIL, "Saving Goal-{sGoalName} deleted successfully") 
						[ ] // iFunctionResult = FAIL
					[ ] 
					[ ] // If Create new Saving Goal window closed
					[+] if(GetStartedBrowserWindow.GetStarted.Exists(5))
						[ ] ReportStatus("Validate Saving Goal {sGoalName} delete", PASS, "Saving Goal-{sGoalName} deleted successfully") 
						[ ] iFunctionResult = PASS
					[+] else
						[ ] ReportStatus("Validate Saving Goal {sGoalName} delete", FAIL, "Saving Goal-{sGoalName} deleted successfully") 
						[ ] iFunctionResult = FAIL
					[ ] 
					[ ] 
					[ ] 
				[+] else
					[ ] ReportStatus("Validate Delete Savings Goal Window ", FAIL, "Delete Savings Goal window is not opened")
					[ ] iFunctionResult = FAIL
					[ ] 
				[ ] 
			[+] else
				[ ] iFunctionResult = FAIL
				[ ] ReportStatus("Verification of navigation to Planning > Saving Goals", FAIL, "Saving Goals tab is not opened")
				[ ] 
			[ ] 
			[ ] 
		[+] except
			[ ] ExceptLog()
			[+] // if(DeleteSavingsGoal.Exists(SHORT_SLEEP))
				[ ] // DeleteSavingsGoal.Close()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: DeleteSavingGoalFromAccountBar()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will delete the saving goal from account bar
		[ ] //
		[ ] // PARAMETERS:			NONE
		[ ] 
		[ ] // RETURNS:				INTEGER	PASS	If Saving Goal is deleted successfully and removed from Account Bar
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //  May 12, 2014	Jayashree Nagaraja Created
	[ ] // ==========================================================
	[+] public INTEGER DeleteSavingGoalFromAccountBar()
		[ ] 
		[+] //Variable declaration
			[ ] STRING sAccount
			[ ] INTEGER iSelect, iAccountNumber = 0
		[+] do
			[ ] //Activate Quicken window
			[ ] QuickenWindow.SetActive()
			[+] while (iAccountNumber != -1)
				[ ] NavigateQuickenTab(sTAB_PLANNING,sTAB_SAVING_GOALS)
				[+] if(Planning.PlanningSubTab.Panel.SavingsGoals.Panel.SmokeSavingGoal.Exists())
					[ ] ReportStatus("Validate Get Started Page", PASS, "Get Started page is not available")
					[ ] iAccountNumber = iAccountNumber+1
					[ ] sAccount = Planning.PlanningSubTab.Panel.SavingsGoals.Panel.SmokeSavingGoal.GetCaption()
					[ ] Planning.PlanningSubTab.Panel.SavingsGoals.Panel.SmokeSavingGoal.Click()
					[ ] iSelect = DeleteAccount(ACCOUNT_SAVINGGOALS, sAccount)
					[+] if (iSelect == PASS)
						[ ] ReportStatus("Deletion of Saving Goal", PASS, "{sAccount} is deleted successfully")
						[ ] iFunctionResult = PASS
					[+] else
						[ ] ReportStatus("Deletion of Saving Goal", FAIL, "{sAccount} could not be deleted")
						[ ] iFunctionResult = FAIL
				[+] else
					[ ] ReportStatus("Validate Get Started Page", PASS, "Get Started page is available")
					[ ] iAccountNumber = -1
					[ ] iFunctionResult = PASS
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult = FAIL
		[+] return iFunctionResult
			[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: ContributeToSavingGoal()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will contribute to saving goal
		[ ] //
		[ ] // PARAMETERS:			None
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If Saving Goal contribution is successfully
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //  May 19, 2014	 Jayashree Nagaraja Created
	[ ] // ==========================================================
	[+] public INTEGER ContributeToSavingGoal ()
		[ ] //Variable declaration
		[ ] STRING sAccountContributed, sDateContributed, sAmountContributed, sAmountOnGoalBar, sSavGoalBal, sChecAccContribution, sOpenBalChecAcc
		[ ] STRING sAccount = "SavingGoalChecking", sGoalAmount, sChecAccBal
		[ ] BOOLEAN bPattern
		[ ] REAL rOpenBalChecAcc, rChecAccBal, rChecAccContribution, rAmount
		[ ] INTEGER iSelect
		[ ] 
		[+] do
			[ ] // Activate Quicken window
			[ ] QuickenWindow.SetActive()
			[ ] 
			[ ] //Get the Opening Balance of the Checking Account
			[ ] iSelect = SelectAccountFromAccountBar( sAccount, ACCOUNT_BANKING)
			[+] if (iSelect == PASS)
				[ ] sOpenBalChecAcc = MDIClient.AccountRegister.Balances.EndingBalance.GetText()
				[ ] sOpenBalChecAcc = StrTran (sOpenBalChecAcc, ",", "")
				[ ] rOpenBalChecAcc = Val (sOpenBalChecAcc)
				[ ] 
				[ ] NavigateQuickenTab(sTAB_PLANNING,sTAB_SAVING_GOALS)
				[ ] Planning.PlanningSubTab.Panel.SetupScreenHolder.Panel1.ContributeButton.Click()
				[ ] 
				[ ] //Make contribution to goal from Contribute To Goal Window
				[+] if (DlgContributeToGoal.Exists())
					[ ] ReportStatus("Verify Contribute To Goal Window", PASS, "Contribute To Goal Window is available")
					[ ] DlgContributeToGoal.SetActive()
					[ ] DlgContributeToGoal.FromAccountPopupList.Click()
					[ ] sleep(3)
					[ ] DlgContributeToGoal.FromAccountPopupList.TypeKeys(Replicate(KEY_DN, 1))
					[ ] DlgContributeToGoal.FromAccountPopupList.TypeKeys(KEY_ENTER)
					[ ] sAccountContributed = DlgContributeToGoal.FromAccountPopupList.GetText()
					[ ] 
					[ ] //Verify if the Checking account is selected to Contribute
					[ ] bPattern=MatchStr("*{sAccountContributed}*", sAccount)
					[+] if(bPattern == TRUE)
						[ ] sDateContributed = DlgContributeToGoal.DateTextField.GetText()
						[ ] sAmountContributed = DlgContributeToGoal.AmountTextField.GetText()
						[ ] DlgContributeToGoal.OKButton.Click()
						[ ] sleep(3)
						[ ] 
						[ ] //Verify the amount contributed on the saving goal
						[+] do
							[ ] rAmount = Val (sAmountContributed)
							[ ] sGoalAmount = Str(rAmount)
							[ ] Planning.PlanningSubTab.Panel.SetupScreenHolder.Panel1.TextClick(sGoalAmount)
							[ ] ReportStatus("Verify amount contributed on saving goal", PASS, "Amount contributed on Saving Goal shows: {sGoalAmount}")
							[ ] 
							[ ] //Verify if Savings Goal register shows the correct amount
							[ ] MDIClient.Planning.PlanningSubTab.Panel.SetupScreenHolder.Panel.SmokeSavingGoal.Click()
							[ ] sSavGoalBal = MDIClient.AccountRegister.Balances.EndingBalance.GetText()
							[ ] bPattern=MatchStr("*{sSavGoalBal}*", sAmountContributed)
							[+] if (bPattern == TRUE)
								[ ] ReportStatus("Verify saving goal balance in register", PASS, "Saving Goal Balance in register is: {sSavGoalBal}")
								[ ] 
								[ ] //Verify if Checking Account Register shows the correct amount
								[ ] iSelect = SelectAccountFromAccountBar( sAccount, ACCOUNT_BANKING)
								[+] if (iSelect == PASS)
									[ ] sChecAccBal = MDIClient.AccountRegister.Balances.EndingBalance.GetText()
									[ ] sChecAccBal = StrTran (sChecAccBal, ",", "")
									[ ] rChecAccBal = Val (sChecAccBal)
									[ ] 
									[ ] //Calculate saving goal contribution
									[ ] rChecAccContribution = rOpenBalChecAcc - rChecAccBal
									[ ] sChecAccContribution = Str (rChecAccContribution,4,2)
									[ ] bPattern=MatchStr("*{sChecAccContribution}*", sAmountContributed)
									[+] if (bPattern == TRUE)
										[ ] ReportStatus("Verify Checking account register for saving goal contribution", PASS, "Amount contributed from Checking account register is: {sChecAccContribution}")
									[+] else
										[ ] ReportStatus("Verify Checking account register for saving goal contribution", FAIL, "Correct amount is not contributed from checking account")
								[+] else
									[ ] ReportStatus("Verify Checking account is selected", FAIL, "Checking account is not selected to get the balance")
							[+] else
								[ ] ReportStatus("Verify saving goal balance in register", FAIL, "Correct amount is not displayed in Saving Goal Register")
						[+] except
							[ ] ExceptLog()
							[ ] ReportStatus("Verify amount contributed on saving goal", FAIL, "Correct amount is not shown on the saving goal")
					[+] else
						[ ] ReportStatus("Verify Checking Account Selection to Contribute", FAIL, "Correct account is not selected to contribute to saving goal")
				[+] else
					[ ] ReportStatus("Verify if Contribute Dialog Exists", FAIL, "Contribute Dialog does not exist")
			[+] else
				[ ] ReportStatus("Verify Checking account is selected", FAIL, "Checking account is not selected to get the balance")
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: WithdrawFromSavingGoal()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will withdraw from saving goal
		[ ] //
		[ ] // PARAMETERS:			None
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If Saving Goal withdrawal is successfully
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //  May 19, 2014	 Jayashree Nagaraja Created
	[ ] // ==========================================================
	[+] public INTEGER WithdrawFromSavingGoal ()
		[ ] 
		[+] //Variable declaration
			[ ] STRING sChecAccBal, sDateWithdrawan, sWithdrawAmount = "5", sAmountAvailable2, sChecAccWithdrawal
			[ ] STRING sAccount = "SavingGoalChecking", sGoalAmount, sSavGoalBal, sAccountContributed, sOpenBalChecAcc, sAmountContributed
			[ ] REAL rAmountAvailable2, rWithdrawAmount, rChecAccWithdrawal, rChecAccContribution, rChecAccBal, rOpenBalChecAcc, rAmountContributed
			[ ] BOOLEAN bPattern
			[ ] INTEGER iSelect
		[+] do
			[ ] // Activate Quicken window
			[ ] QuickenWindow.SetActive()
			[ ] 
			[ ] NavigateQuickenTab(sTAB_PLANNING,sTAB_SAVING_GOALS)
			[ ] Planning.PlanningSubTab.Panel.SetupScreenHolder.Panel1.ContributeButton.Click()
			[ ] 
			[ ] //Make contribution to goal from Contribute To Goal Window
			[+] if (DlgContributeToGoal.Exists())
				[ ] ReportStatus("Verify Contribute To Goal Window", PASS, "Contribute To Goal Window is available")
				[ ] DlgContributeToGoal.SetActive()
				[ ] DlgContributeToGoal.FromAccountPopupList.Click()
				[ ] sleep(3)
				[ ] DlgContributeToGoal.FromAccountPopupList.TypeKeys(Replicate(KEY_DN, 1))
				[ ] DlgContributeToGoal.FromAccountPopupList.TypeKeys(KEY_ENTER)
				[ ] sAmountContributed = DlgContributeToGoal.AmountTextField.GetText()
				[ ] sAmountContributed = StrTran(sAmountContributed, ",", "")
				[ ] rAmountContributed = Val (sAmountContributed)
				[ ] 
				[ ] DlgContributeToGoal.OKButton.Click()
				[ ] 
				[ ] //Get the Balance of the Checking Account After Contribution
				[ ] iSelect = SelectAccountFromAccountBar( sAccount, ACCOUNT_BANKING)
				[+] if (iSelect == PASS)
					[ ] sOpenBalChecAcc = MDIClient.AccountRegister.Balances.EndingBalance.GetText()
					[ ] sOpenBalChecAcc = StrTran (sOpenBalChecAcc, ",", "")
					[ ] rOpenBalChecAcc = Val (sOpenBalChecAcc)
					[ ] 
					[ ] NavigateQuickenTab(sTAB_PLANNING,sTAB_SAVING_GOALS)
					[ ] Planning.PlanningSubTab.Panel.SetupScreenHolder.Panel1.WithdrawButton.Click()
					[ ] 
					[ ] //Withdrawal from saving goal 'Withdraw From' Window
					[+] if (DlgWithdrawFromGoal.Exists())
						[ ] ReportStatus("Verify Withdraw From Goal Window", PASS, "Withdraw From Goal Window is available")
						[ ] DlgWithdrawFromGoal.SetActive()
						[ ] DlgWithdrawFromGoal.WithdrawalAccount.Click()
						[ ] sleep(3)
						[ ] DlgWithdrawFromGoal.WithdrawalAccount.TypeKeys(Replicate(KEY_DN, 1))
						[ ] DlgWithdrawFromGoal.WithdrawalAccount.TypeKeys(KEY_ENTER)
						[ ] sAccountContributed = DlgWithdrawFromGoal.WithdrawalAccount.GetText()
						[ ] 
						[ ] //Verify if the Checking account is selected to Withdraw
						[ ] bPattern=MatchStr("*{sAccountContributed}*", sAccount)
						[+] if(bPattern == TRUE)
							[ ] sDateWithdrawan = DlgWithdrawFromGoal.WithdrawalDate.GetText()
							[ ] sWithdrawAmount = "5.00"
							[ ] rWithdrawAmount = Val (sWithdrawAmount)
							[ ] DlgWithdrawFromGoal.AmountToWithdraw.SetText(sWithdrawAmount)
							[ ] sleep (3)
							[ ] DlgWithdrawFromGoal.OKButton.Click()
							[ ] 
							[ ] //Get Available Amount in Saving Goal After Withdrawal
							[ ] Planning.PlanningSubTab.Panel.SetupScreenHolder.Panel1.WithdrawButton.Click()
							[ ] sAmountAvailable2 = DlgWithdrawFromGoal.TotalContributed.GetText()
							[ ] sAmountAvailable2 = StrTran(sAmountAvailable2, ",", "")
							[ ] sAmountAvailable2 = StrTran(sAmountAvailable2, "$", "")
							[ ] rAmountAvailable2 = Val (sAmountAvailable2)
							[ ] DlgWithdrawFromGoal.CancelButton.Click()
							[ ] 
							[+] if (rAmountAvailable2 < rAmountContributed)
								[ ] //Verify the amount withdrawn from the saving goal on goal bar
								[+] do
									[ ] sGoalAmount = Str(rAmountAvailable2)
									[ ] Planning.PlanningSubTab.Panel.SetupScreenHolder.Panel1.TextClick(sGoalAmount)
									[ ] ReportStatus("Verify amount contributed on saving goal", PASS, "Amount contributed on Saving Goal shows: {sGoalAmount}")
									[ ] 
									[ ] //Verify if Savings Goal register shows the correct amount
									[ ] MDIClient.Planning.PlanningSubTab.Panel.SetupScreenHolder.Panel.SmokeSavingGoal.Click()
									[ ] sSavGoalBal = MDIClient.AccountRegister.Balances.EndingBalance.GetText()
									[ ] bPattern=MatchStr("*{sSavGoalBal}*", sAmountAvailable2)
									[+] if (bPattern == TRUE)
										[ ] ReportStatus("Verify saving goal balance in register", PASS, "Saving Goal Balance in register is: {sSavGoalBal}")
										[ ] 
										[ ] //Verify if Checking Account Register shows the correct amount
										[ ] iSelect = SelectAccountFromAccountBar( sAccount, ACCOUNT_BANKING)
										[+] if (iSelect == PASS)
											[ ] sChecAccBal = MDIClient.AccountRegister.Balances.EndingBalance.GetText()
											[ ] sChecAccBal = StrTran (sChecAccBal, ",", "")
											[ ] rChecAccBal = Val (sChecAccBal)
											[ ] 
											[ ] //Calculate saving goal Withdrawal
											[ ] rChecAccWithdrawal = rChecAccBal - rOpenBalChecAcc
											[ ] sChecAccWithdrawal = Str (rChecAccWithdrawal,4,2)
											[ ] bPattern=MatchStr("*{sChecAccWithdrawal}*", sWithdrawAmount)
											[+] if (bPattern == TRUE)
												[ ] ReportStatus("Verify Checking account register for saving goal withdrawal", PASS, "Amount withdrawn and deposited to Checking account is: {sChecAccWithdrawal}")
											[+] else
												[ ] ReportStatus("Verify Checking account register for saving goal withdrawal", FAIL, "Correct amount is not deposited to Saving Goal")
										[+] else
											[ ] ReportStatus("Verify Checking account is selected", FAIL, "Checking account is not selected to get the balance")
									[+] else
										[ ] ReportStatus("Verify saving goal balance in register", FAIL, "Correct amount is not displayed in Saving Goal Register")
								[+] except
									[ ] ExceptLog()
									[ ] ReportStatus("Verify amount contributed on saving goal", FAIL, "Correct amount is not shown on the saving goal")
							[+] else
								[ ] ReportStatus("Verify if amount available on saving goal is now lesser", FAIL, "Amount Available on Saving Goal has not reduced after withdrawal")
						[+] else
							[ ] ReportStatus("Verify Checking Account Selection to Contribute", FAIL, "Correct account is not selected to contribute to saving goal")
							[+] 
								[ ] 
							[ ] 
					[+] else
						[ ] ReportStatus("Verify if Withdrawal Dialog Exists", FAIL, "Withdrawal Dialog does not exist")
				[+] else
					[ ] ReportStatus("Verify Checking account is selected", FAIL, "Checking account is not selected to get the balance after contribution")
			[+] else
				[ ] ReportStatus("Verify if Contribute Dialog Exists", FAIL, "Contribute Dialog does not exist")
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
[ ] // 
[+] // //********************** Reminder Functions*******************************************************************
	[ ] // // ==========================================================
	[+] // // FUNCTION: AddReminder()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will add Reminder either from Home tab or from Bills tab.
		[ ] // //
		[ ] // // PARAMETERS:		AnyType 		WindowName			Window name from where Add bill page opened
		[ ] // //						STRING	 	sPayeeName			Payee name
		[ ] // //								 		sAmount				Amount
		[ ] // //								 		sDate
		[ ] // //								 		sFrequency			How often reminder should be displayed
		[ ] // //								 		sPayAccount			Account for payment
		[ ] // //						 				sPaymentMethod		Method of Payment
		[ ] // //										sCategory				Category
		[ ] // //
		[ ] // // RETURNS:			INTEGER 		0 		if bill is created
		[ ] // //										1		if bill is not created
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //	 Dec 22, 2010	Mamta Jain created
	[ ] // // ==========================================================
	[+] // public INTEGER AddReminder (AnyType WindowName, STRING sPayeeName, STRING sAmount, STRING sDate, STRING sFrequency, STRING sPayAccount, STRING sCategory optional, STRING sPaymentTo optional, STRING sReminderType optional)
		[+] // // Variable declaration
			[ ] // INTEGER  iSelect
			[ ] // STRING sCompanyName
			[ ] // 
		[+] // do
			[ ] // 
			[+] // if(sReminderType == "Income Reminder")
				[ ] // iSelect = 2
			[+] // if(sReminderType == "Transfer Reminder")
				[ ] // iSelect = 3
			[ ] // 
			[ ] // 
			[+] // switch (sReminderType)
				[ ] // 
				[+] // case "StayOnTopOfMonthlyBills"
					[+] // // if (StayOnTopOfMonthlyBills.AddABillReminder.Exists(SHORT_SLEEP))
						[ ] // // StayOnTopOfMonthlyBills.AddABillReminder.Panel.Control.PayTo.SetText(sPayeeName)
						[ ] // // StayOnTopOfMonthlyBills.AddABillReminder.Next.Click()
						[ ] // // StayOnTopOfMonthlyBills.AddABillReminder.Panel.Control.DueNextOn.SetText(sDate)
						[ ] // // StayOnTopOfMonthlyBills.AddABillReminder.Panel.Control.AmountDue.SetText(sAmount)
						[ ] // // StayOnTopOfMonthlyBills.AddABillReminder.Panel.Control.FromAccount.Select(sPayAccount)
						[ ] // // StayOnTopOfMonthlyBills.AddABillReminder.Panel.Control.Panel1.AddCategoryTagOrMemo.Click()
						[ ] // // StayOnTopOfMonthlyBills.AddABillReminder.Control.Category.SetText(sCategory)
						[ ] // // StayOnTopOfMonthlyBills.AddABillReminder.Control.Tag.SetText(sTag)
						[ ] // // StayOnTopOfMonthlyBills.AddABillReminder.Control.Memo.SetText(sMemo)
						[ ] // // StayOnTopOfMonthlyBills.AddABillReminder.Control.OK.Click()
						[ ] // // StayOnTopOfMonthlyBills.AddABillReminder.Done.Click()
						[ ] // // 
						[ ] // // iFunctionResult = PASS
					[+] // // else
						[ ] // // iFunctionResult = FAIL
				[ ] // 
				[+] // // case "Reminder"
					[ ] // // QuickenMainWindow.QWNavigator.AddReminder.Click()
					[ ] // // QuickenMainWindow.QWNavigator.AddReminder.TypeKeys(Replicate(KEY_DN, iSelect)) // Select PayCheck/Invoice Reminder from drop down 
					[ ] // // QuickenMainWindow.QWNavigator.AddReminder.TypeKeys(KEY_ENTER)			// press enter
					[+] // // if(Reminder.Exists(SHORT_SLEEP))
						[ ] // // Reminder.SetActive ()
						[ ] // // Reminder.Panel.Control.VendorCustomer.SetText(sCompanyName)
						[ ] // // Reminder.Payee.SetText (sPayeeName)
						[ ] // // Reminder.AddBillReminder.SetText (sAmount)
						[ ] // // Reminder.DueDate.SetText (sDate)
						[ ] // // Reminder.HowOften.Select (sFrequency)
						[ ] // // Reminder.PayeeAccount.Select (sPayAccount)
						[+] // // if(sReminderType == "Transfer Reminder")
							[ ] // // Reminder.PaymentMethod.Select (sPaymentTo)
							[ ] // // 
						[+] // // if(sReminderType == "Bill Reminder" || sReminderType == "Income Reminder" )
							[ ] // // Reminder.Category.SetText (sCategory)
							[ ] // // 
						[ ] // // Reminder.OK.DoubleClick ()
						[ ] // // iFunctionResult = PASS
					[+] // // else
						[ ] // // iFunctionResult = FAIL
		[+] // except
			[+] // if(StayOnTopOfMonthlyBills.Exists(SHORT_SLEEP))
				[ ] // StayOnTopOfMonthlyBills.Close()
			[+] // if(Reminder.Exists(SHORT_SLEEP))
				[ ] // Reminder.Close()
			[ ] // iFunctionResult = FAIL
		[ ] // return iFunctionResult
	[ ] // ==========================================================
	[+] // FUNCTION: AddBill()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will add Bill either from Home tab or from Bills tab.
		[ ] //
		[ ] // PARAMETERS:		STRING	 	sPayeeName			Payee name
		[ ] //								 		sAmount				Amount
		[ ] //								 		sDate
		[ ] //								 		sPaymentFrom		Account for payment
		[ ] //						 				sCategory				Category
		[ ] //										sTag					Tag
		[ ] //										sMemo				Memo
		[ ] //
		[ ] // RETURNS:			INTEGER 		PASS 		if bill is created
		[ ] //										FAIL		if bill is not created
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	 July 29, 2011	Udita Dube created
	[ ] // ==========================================================
	[+] public INTEGER AddBill( STRING sPayeeName, STRING sAmount, STRING sDate, STRING sPaymentFrom, STRING sCategory optional, STRING sTag optional, STRING sMemo optional )
		[+] // Variable declaration
			[ ] INTEGER  iSelect
			[ ] 
		[+] do
			[ ] 
			[ ] 
			[+] // if (StayOnTopOfMonthlyBills.AddBillReminder.Exists(SHORT_SLEEP))
				[ ] // StayOnTopOfMonthlyBills.AddBillReminder.Panel.Control.PayTo.SetText(sPayeeName)
				[ ] // StayOnTopOfMonthlyBills.AddBillReminder.Next.Click()
				[ ] // StayOnTopOfMonthlyBills.AddBillReminder.Panel.Control.DueNextOn.SetText(sDate)
				[ ] // StayOnTopOfMonthlyBills.AddBillReminder.Panel.Control.AmountDue.SetText(sAmount)
				[ ] // StayOnTopOfMonthlyBills.AddBillReminder.Panel.Control.FromAccount.Select(sPaymentFrom)
				[ ] // // StayOnTopOfMonthlyBills.AddBillReminder.Panel.Control.Panel1.AddCategoryTagOrMemo.Click()
				[ ] // StayOnTopOfMonthlyBills.AddBillReminder.Control.Category.SetText(sCategory)
				[ ] // StayOnTopOfMonthlyBills.AddBillReminder.Control.Tag.SetText(sTag)
				[ ] // StayOnTopOfMonthlyBills.AddBillReminder.Control.Memo.SetText(sMemo)
				[ ] // StayOnTopOfMonthlyBills.AddBillReminder.Control.OK.Click()
				[ ] // StayOnTopOfMonthlyBills.AddBillReminder.Done.Click()
				[ ] // 
				[ ] // iFunctionResult = PASS
			[ ] 
			[+] if (DlgAddEditReminder.Exists(SHORT_SLEEP))
				[ ] 
				[ ] DlgAddEditReminder.Step1Panel.HomeChildPanel.PayToTextField.SetText(sPayeeName)
				[ ] DlgAddEditReminder.NextButton.Click()
				[ ] 
				[ ] 
				[ ] DlgAddEditReminder.Step2Panel.QWinChild1.DueNextOnTextField.SetText(sDate)
				[ ] DlgAddEditReminder.Step2Panel.QWinChild1.AmountDueTextField.SetText(sAmount)
				[ ] 
				[ ] // From Account object changed from popup list to text box in QW2013
				[ ] DlgAddEditReminder.Step2Panel.QWinChild1.FromAccountTextField.SetText(sPaymentFrom)
				[ ] //DlgAddEditReminder.Step2Panel.QWinChild1.Typekeys(KEY_TAB)
				[ ] sleep(2)
				[ ] //DlgAddEditReminder.Step2Panel.QWinChild1.AddCategoryTagMemoPanel1.Click (MB_LEFT, 92, 36)
				[ ] //StayOnTopOfMonthlyBills.AddBillReminder.AddCategoryTagOrMemo.Click(1,131,30)
				[ ] //DlgAddEditReminder.Step2Panel.QWinChild1.AddCategoryTagMemoPanel1.Click(1,131,30)
				[ ] //AddCategoryTagOrMemo.Click()
				[ ] //AddBillReminder.QWPanel.QWinChild.QWPanel.AddCategoryTagOrMemo.Click(1,131,30)
				[ ] DlgAddEditReminder.Step2Panel.QWinChild1.AddCategoryTagMemoPanel1.AddCategoryTagMemoButton.Click(1,131,30)
				[ ] 
				[ ] 
				[ ] 
				[ ] 
				[ ] Agent.SetOption (OPT_SCROLL_INTO_VIEW, FALSE)
				[ ] 
				[+] if(sCategory!=NULL)
					[ ] // DlgAddEditReminder.BillReminder.Category.SetText (sCategory)
					[ ] // DlgAddEditReminder.BillReminder.TypeKeys(KEY_TAB)
					[ ] // DlgAddEditReminder.BillReminder.Tag.SetFocus()
					[ ] DlgOptionalSetting.CategoryTextField.SetText(sCategory)
					[ ] DlgOptionalSetting.TypeKeys(KEY_TAB)
					[ ] 
					[ ] 
					[ ] 
				[+] if(sTag!=NULL)
					[ ] DlgOptionalSetting.TagTextField.SetText(sTag)
					[ ] DlgOptionalSetting.MemoTextField.SetText (sMemo)
				[ ] 
				[ ] DlgOptionalSetting.OKButton.Click(1, 29, 15)
				[ ] 
				[ ] //DlgAddEditReminder.BillReminder.OK.Click (1, 29, 15)
				[+] if(NewCategory.Exists(2))
					[ ] NewCategory.SetActive()
					[ ] NewCategory.Yes.Click()
					[+] if(SetUpCategory.Exists(SHORT_SLEEP))
						[ ] SetUpCategory.OK.Click()
						[ ] 
				[+] if(NewTag.Exists(2))
					[ ] NewTag.SetActive()
					[ ] NewTag.OKButton.Click()
					[ ] // NewTag.OK.Click (1, 23, 13)
				[ ] DlgAddEditReminder.SetActive ()
				[ ] DlgAddEditReminder.DoneButton.Click()
				[ ] WaitForState(DlgAddEditReminder,FALSE,2)
				[ ] iFunctionResult = PASS
				[ ] 
				[ ] 
			[+] else
				[ ] iFunctionResult = FAIL
				[ ] 
			[ ] 
			[ ] 
			[ ] 
			[+] // if (AddBillReminder.Exists(SHORT_SLEEP))
				[ ] // AddBillReminder.Panel.Control.PayTo.SetText(sPayeeName)
				[ ] // AddBillReminder.Next.Click()
				[ ] // AddBillReminder.Panel2.QWinChild.DueNextOn.SetText(sDate)
				[ ] // AddBillReminder.Panel2.QWinChild.AmountDue.SetText(sAmount)
				[ ] // //AddBillReminder.Panel2.QWinChild.FromAccount.Select(sPaymentFrom)
				[ ] // // From Account object changed from popup list to text box in QW2013
				[ ] // AddBillReminder.Panel2.QWinChild.FromAccount.SetText(sPaymentFrom)
				[ ] // AddBillReminder.Panel2.QWinChild.Typekeys(KEY_TAB)
				[ ] // sleep(2)
				[ ] // //BillReminder.Panel2.QWinChild1.Control.AddCategoryTagOrMemo.Click (1, 92, 22)
				[ ] // AddBillReminder.Panel2.QWinChild.Panel1.AddCategoryTagOrMemo.Click (1, 92, 36)
				[ ] // Agent.SetOption (OPT_SCROLL_INTO_VIEW, FALSE)
				[ ] // BillDlgOptionalSetting.SetActive()
				[+] // if(sCategory!=NULL)
					[ ] // BillDlgOptionalSetting.Category.SetText (sCategory)
					[ ] // BillDlgOptionalSetting.TypeKeys(KEY_TAB)
					[ ] // BillDlgOptionalSetting.Tag.SetFocus()
				[ ] // 
				[ ] // BillDlgOptionalSetting.Tag.SetText (sTag)
				[ ] // BillDlgOptionalSetting.Memo.SetText (sMemo)
				[ ] // BillDlgOptionalSetting.OK.Click (1, 29, 15)
				[+] // if(NewTagForBill.Exists(SHORT_SLEEP))
					[ ] // NewTagForBill.SetActive ()
					[ ] // NewTagForBill.OK.Click (1, 23, 13)
				[ ] // AddBillReminder.SetActive ()
				[ ] // Agent.SetOption (OPT_SCROLL_INTO_VIEW, TRUE)
				[ ] // AddBillReminder.Done.Click (1, 34, 7)
				[ ] // //################Added by Mukesh 08-14-2012###################//
				[ ] // WaitForState(Reminder,FALSE,2)
				[ ] // iFunctionResult = PASS
				[ ] // 
				[ ] // 
			[+] // else
				[ ] // iFunctionResult = FAIL
				[ ] // 
		[ ] 
		[+] except
			[+] if (DlgAddEditReminder.Exists(SHORT_SLEEP))
				[ ] DlgAddEditReminder.SetActive()
				[ ] DlgAddEditReminder.Close()
			[+] if(StayOnTopOfMonthlyBills.Exists(SHORT_SLEEP))
				[ ] StayOnTopOfMonthlyBills.SetActive()
				[ ] StayOnTopOfMonthlyBills.Close()
			[ ] iFunctionResult = FAIL
		[ ] 
		[ ] // 2015-10-19 KalyanG: added the condition to dismiss add biller dialog, ref build 25.0.0.452
		[+] if (LinkBiller.Exists(5))
			[ ] LinkBiller.SetActive()
			[ ] LinkBiller.btnClose.Click()
			[ ] sleep(1)
		[ ] 
		[ ] return iFunctionResult
	[ ] // ==========================================================
	[ ] 
	[ ] 
	[ ] 
	[+] // FUNCTION: AddIncomeTransferReminder()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will add Income or Transfer Reminder
		[ ] //
		[ ] // PARAMETERS:		Record	rIncTranReminderRecord	sReminderType,sCategory,sTag,sMemo,sPayeeName,sDate,sAmount,sFromAccount,sToAccount are stored
		[ ] //
		[ ] // RETURNS:			INTEGER 		PASS 		if Reminder is created
		[ ] //									       FAIL		if Reminder is not created
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	 July 30, 2011	Udita Dube created
	[ ] // ==========================================================
	[+] public INTEGER AddIncomeTransferReminder (IncTranReminderRecord rIncTranReminderRecord)
		[ ] 
		[+] // Variable declaration
			[ ] INTEGER  iSelect
		[+] do
			[ ] 
			[+] if(rIncTranReminderRecord.sReminderType == "Income Reminder")
				[ ] iSelect = 2
			[+] if(rIncTranReminderRecord.sReminderType == "Transfer Reminder")
				[ ] iSelect = 3
			[+] if(IsNULL(rIncTranReminderRecord.sCategory))
				[ ] rIncTranReminderRecord.sCategory=""
			[+] if(IsNULL(rIncTranReminderRecord.sTag))
				[ ] rIncTranReminderRecord.sTag=""
			[+] if(IsNULL(rIncTranReminderRecord.sMemo))
				[ ] rIncTranReminderRecord.sMemo=""
			[ ] 
			[ ] QuickenWindow.SetActive()
			[ ] 
			[ ] // Navigate to Bills Tab
			[ ] NavigateQuickenTab(sTAB_BILL)
			[ ] 
			[ ] 
			[+] if(AddReminderButton.Exists())
				[ ] AddReminderButton.Click()
				[ ] AddReminderButton.TypeKeys(Replicate(KEY_DN, iSelect)) 
				[ ] AddReminderButton.TypeKeys(KEY_ENTER)
				[ ] 
				[ ] // QuickenMainWindow.QWNavigator.AddReminder.Click()
				[ ] // QuickenMainWindow.QWNavigator.AddReminder.TypeKeys(Replicate(KEY_DN, iSelect)) // Select PayCheck Reminder from drop down 
				[ ] // QuickenMainWindow.QWNavigator.AddReminder.TypeKeys(KEY_ENTER)			// press enter
				[ ] //QuickenMainWindow.QWNavigator.AddReminder.MenuSelect(1, 19, sReminderType)
				[ ] sleep(3)
				[+] if(DlgAddEditReminder.Exists(SHORT_SLEEP))
					[ ] DlgAddEditReminder.SetActive ()
					[ ] DlgAddEditReminder.Step1Panel.HomeChildPanel.PayToTextField.SetText(rIncTranReminderRecord.sPayeeName)
					[ ] DlgAddEditReminder.NextButton.Click()
					[ ] DlgAddEditReminder.SetActive ()
					[ ] DlgAddEditReminder.Step1Panel.HomeChildPanel.PayToTextField.SetText(rIncTranReminderRecord.sPayeeName)
					[ ] //DlgAddEditReminder.Step1Panel.HomeChildPanel.TypeKeys(KEY_TAB)
					[ ] DlgAddEditReminder.Step2Panel.QWinChild1.DueNextOnTextField.SetText(rIncTranReminderRecord.sDate)
					[ ] //DlgAddEditReminder.Step2Panel.QWinChild1.TypeKeys(KEY_TAB)
					[ ] //DlgAddEditReminder.Step2Panel.QWinChild1.TypeKeys(KEY_TAB)
					[ ] DlgAddEditReminder.Step2Panel.QWinChild1.AmountDueTextField.SetText(rIncTranReminderRecord.sAmount)
					[+] if(rIncTranReminderRecord.sReminderType == "Income Reminder")
						[+] // To Account object changed from popup list to text box in QW2013
							[ ] //Reminder.Panel2.QWinChild1.ToAccount.Select (rIncTranReminderRecord.sToAccount)
						[ ] DlgAddEditReminder.Step2Panel.QWinChild1.ToAccountTextField.SetText (rIncTranReminderRecord.sToAccount)
						[ ] //DlgAddEditReminder.Step2Panel.QWinChild1.Typekeys(KEY_TAB)
					[+] else
						[ ] iFunctionResult = FAIL
					[ ] 
					[+] if(rIncTranReminderRecord.sReminderType == "Transfer Reminder")
						[+] // To Account and From Account objects are changed from popup list to text box in QW2013
							[ ] //Reminder.Panel2.QWinChild1.FromAccount.Select (rIncTranReminderRecord.sFromAccount)
							[ ] //Reminder.Panel2.QWinChild1.ToAccount.Select (rIncTranReminderRecord.sToAccount)
						[ ] DlgAddEditReminder.Step2Panel.QWinChild1.FromAccountTextField.SetText (rIncTranReminderRecord.sFromAccount)
						[ ] DlgAddEditReminder.Step2Panel.QWinChild1.ToAccountTextField.SetText (rIncTranReminderRecord.sToAccount)
						[ ] //DlgAddEditReminder.Step2Panel.QWinChild1.Typekeys(KEY_TAB)
					[ ] 
					[+] if((rIncTranReminderRecord.sMemo!= "")||(rIncTranReminderRecord.sTag!="")||(rIncTranReminderRecord.sCategory!=""))
						[ ] DlgAddEditReminder.Step2Panel.QWinChild1.AddCategoryTagMemoPanel1.AddCategoryTagMemoButton.Click (1, 92, 22)
						[ ] Agent.SetOption (OPT_SCROLL_INTO_VIEW, FALSE)
						[+] if(DlgOptionalSetting.Exists(2))
							[+] if(rIncTranReminderRecord.sReminderType == "Income Reminder" && rIncTranReminderRecord.sCategory!="")
								[ ] DlgOptionalSetting.CategoryTextField.SetText (rIncTranReminderRecord.sCategory)
								[ ] //DlgOptionalSetting.TypeKeys(KEY_TAB)
								[ ] DlgOptionalSetting.TagTextField.SetFocus()
							[ ] 
							[ ] DlgOptionalSetting.TagTextField.SetText (rIncTranReminderRecord.sTag)
							[ ] DlgOptionalSetting.MemoTextField.SetText (rIncTranReminderRecord.sMemo)
							[ ] DlgOptionalSetting.OKButton.Click (1, 29, 15)
						[+] if(DlgOptionalSetting.NewTag.Exists(2))
							[ ] DlgOptionalSetting.NewTag.SetActive ()
							[ ] DlgOptionalSetting.NewTag.TagOKButton.Click (1, 23, 13)
						[ ] Agent.SetOption (OPT_SCROLL_INTO_VIEW, TRUE)
						[ ] iFunctionResult = PASS
					[+] else
						[ ] iFunctionResult = FAIL
					[ ] 
					[+] if(DlgAddEditReminder.Exists(2))
						[ ] DlgAddEditReminder.SetActive ()
						[ ] DlgAddEditReminder.DoneButton.Click (1, 36, 12)
						[ ] iFunctionResult = PASS
					[+] else
						[ ] iFunctionResult = FAIL
					[ ] 
					[ ] iFunctionResult = PASS
					[ ] 
					[+] if(DlgAddEditReminder.Exists(2))
						[ ] DlgAddEditReminder.SetActive()
						[ ] DlgAddEditReminder.Step2Panel.QWinChild1.AmountDueTextField.SetFocus()
						[ ] DlgAddEditReminder.Step2Panel.QWinChild1.TypeKeys(KEY_TAB)
						[ ] DlgAddEditReminder.Step2Panel.QWinChild1.TypeKeys(KEY_ENTER)
						[ ] iFunctionResult = PASS
					[ ] 
				[+] else
					[ ] iFunctionResult = FAIL
			[+] else
				[ ] iFunctionResult = FAIL
		[+] except
			[ ] ExceptLog()
			[+] // if(DlgOptionalSetting.Exists(SHORT_SLEEP))
				[ ] // DlgOptionalSetting.SetActive()
				[ ] // DlgOptionalSetting.Close()
			[+] if(DlgAddEditReminder.Exists(SHORT_SLEEP))
				[ ] DlgAddEditReminder.SetActive()
				[ ] DlgAddEditReminder.Close()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] // ==========================================================
	[+] //  // FUNCTION: VerifyReminderDialog()
		[ ] // // // // 
		[ ] // // // // DESCRIPTION:
		[ ] // // // // This function will verify the caption of the reminder window
		[ ] // // // // 
		[ ] // // // // PARAMETERS:		STRING	 			sActualName                  Expected Name of the reminder dialog
		[ ] // // // //
		[ ] // // // // 
		[ ] // // // // RETURNS:			INTEGER		 		PASS        if caption returned matches with expected
		[ ] // // /                                                                           FAIL          if any error returns
		[ ] // // // //                                                          
		[ ] // // // // 
		[ ] // // // // REVISION HISTORY:
		[ ] // // // // Suyash Joshi  created  Feb 14 2013
	[ ] // // ==========================================================
	[+] // public INTEGER VerifyReminderDialog(STRING sActualName)
		[ ] // STRING sDialogName
		[+] // if(DlgAddEditReminder.Exists(SHORT_SLEEP))
			[ ] // sDialogName=DlgAddEditReminder.getcaption()
			[+] // if(sDialogName==sActualName)
				[ ] // iFunctionResult=PASS
			[+] // else
				[ ] // DlgAddEditReminder.Close()
				[ ] // iFunctionResult=FAIL
			[ ] // return iFunctionResult
		[+] // else
			[ ] // //ReportStatus("Add Bill Reminder flow  ", FAIL, "{sActualName} flow is not launched")
			[ ] // iFunctionResult=FAIL
			[ ] // return iFunctionResult
	[ ] // // ==========================================================
	[+] // // FUNCTION: DeleteAllReminders()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will delete all reminders visible in stack view of Bills tab.
		[ ] // //
		[ ] // //
		[ ] // // RETURNS:			INTEGER 		       PASS 		if bills are deleted
		[ ] // //										FAIL		if any error occurs
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //	 April 22 , 2013	Dean Paes created
	[ ] // // ==========================================================
	[+] // public INTEGER DeleteAllReminders()
		[ ] // 
		[ ] // 
		[+] // //Variable Declaration
			[ ] // INTEGER iResult,iFunctionResult
			[ ] // BOOLEAN bExists
			[ ] // 
		[ ] // 
		[+] // do
			[ ] // Agent.SetOption (OPT_NO_ICONIC_MESSAGE_BOXES, TRUE)
			[ ] // 
			[ ] // QuickenWindow.SetActive()
			[ ] // iResult=NavigateQuickenTab(sTAB_BILL)
			[ ] // 
			[+] // if( iResult==PASS)
				[ ] // 
				[ ] // 
				[ ] // ReportStatus("Navigate to Bills Tab", PASS, " Bills tab navigation successful")
				[ ] // Bills.ViewAsPopupList.Select(1)
				[ ] // Bills.DueWithinNextPopupList.Select(3)
				[ ] // 
				[ ] // START:
				[+] // if(!Bills.Panel.QWMsHtmlVw1.ShellEmbedding1.ShellDocObjectView1.GetStartedBillsButton.Exists(SHORT_SLEEP))
					[ ] // Bills.Panel.Panel1.QWinChild1.Edit.Click()
					[+] // if(DlgAddEditReminder.Exists(2))
						[ ] // bExists=TRUE
						[ ] // ReportStatus("Navigate to Edit Reminder dialog", PASS, " Edit Reminder dialog is displayed")
					[+] // else
						[ ] // bExists=FALSE
					[ ] // 
					[+] // if(bExists==FALSE)
						[ ] // Bills.Panel.Panel1.QWinChild1.Edit.Click()
						[ ] // Bills.Panel.Panel1.QWinChild1.Edit.TypeKeys(Replicate(KEY_DN,2))
						[ ] // Bills.Panel.Panel1.QWinChild1.Edit.TypeKeys(KEY_ENTER)
					[ ] // 
					[ ] // 
					[ ] // 
					[+] // if(DlgAddEditReminder.Exists(2))
						[ ] // ReportStatus("Navigate to Edit Reminder dialog", PASS, " Edit Reminder dialog is displayed")
						[ ] // 
						[ ] // 
						[ ] // DlgAddEditReminder.DeleteButton.Click()
						[+] //  if(Quicken2013Popup.Exists(SHORT_SLEEP))
							[ ] // Quicken2013Popup.SetActive()
							[ ] // Quicken2013Popup.OKButton.Click()
							[ ] // 
							[ ] // iFunctionResult=PASS
							[ ] // 
						[+] // else if(Quicken2012Popup.Exists(SHORT_SLEEP))
							[ ] // Quicken2012Popup.SetActive()
							[ ] // Quicken2012Popup.OK.Click()
							[ ] // 
							[ ] // iFunctionResult=PASS
							[ ] // 
						[+] // else
							[ ] // ReportStatus("Delete Reminder", FAIL, " Delete Reminder confirmation dialog is not displayed")
							[ ] // iFunctionResult=FAIL
						[ ] // 
						[ ] // 
					[+] // else
						[ ] // ReportStatus("Navigate to Edit Reminder dialog", FAIL, " Edit Reminder dialog is not displayed")
						[ ] // iFunctionResult=FAIL
						[ ] // 
				[ ] // 
				[ ] // NavigateQuickenTab(sTAB_BILL)
				[+] // if(Bills.Panel.QWMsHtmlVw1.ShellEmbedding1.ShellDocObjectView1.GetStartedBillsButton.Exists(SHORT_SLEEP))
					[ ] // ReportStatus("Delete Reminders",PASS,"All Reminders deleted")
				[+] // else
					[ ] // goto START
					[ ] // 
				[ ] // 
				[ ] // 
				[ ] // 
			[+] // else
				[ ] // ReportStatus("Navigate to Bills Tab", FAIL, " Bills tab navigation not successful")
				[ ] // iFunctionResult=FAIL
				[ ] // 
				[ ] // 
			[ ] // 
			[ ] // 
			[ ] // 
		[+] // except
			[ ] // iFunctionResult=FAIL
			[ ] // 
		[ ] // return iFunctionResult
		[ ] // 
	[ ] // // ==========================================================
	[+] // // FUNCTION: VerifyCreatedReminder(STRING sPayeeName)
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will verify whether created reminder is present in Managed Reminders
		[ ] // //
		[ ] // //
		[ ] // // RETURNS:			INTEGER 		       PASS 		if bill is deleted
		[ ] // //										FAIL		if any error occurs
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //	 April 19, 2013	Anagha created
	[ ] // // ==========================================================
	[+] // public INTEGER VerifyCreatedReminder(STRING sSearchEntry)
		[+] // //Variable Declaration
			[ ] // INTEGER iResult,iFunctionResult,iCounter
			[ ] // STRING sHandle,sActual
		[+] // do
			[ ] // 
			[ ] // QuickenWindow.SetActive()
			[ ] // 
			[ ] // QuickenMainWindow.QWNavigator.TypeKeys(KEY_CTRL_J)
			[ ] // 
			[+] // if (DlgManageReminders.Exists(SHORT_SLEEP))
				[ ] // 
				[ ] // DlgManageReminders.AllBillsDepositsTab.Click()
				[ ] // 
				[ ] // sHandle=str(DlgManageReminders.StaticText2.ManageRemindersListViewer.ListBox1.GetHandle())
				[ ] // 
				[+] // for( iCounter=0;iCounter<DlgManageReminders.StaticText2.ManageRemindersListViewer.ListBox1.GetItemCount();iCounter++)
					[ ] // 
					[ ] // sActual=QwAutoExecuteCommand("LISTBOX_GETFULLROW", sHandle,"{iCounter}")
					[ ] // 
					[ ] // bMatch = MatchStr("*{sSearchEntry}*",sActual)
					[ ] // 
					[+] // if(bMatch == TRUE)
						[ ] // break
					[+] // else
						[ ] // continue
				[ ] // 
				[ ] // //verify whether it is present in the List
				[+] // if(bMatch == TRUE)
					[ ] // //ReportStatus("Verify Reminder is created ", PASS, "{sSearchEntry}  is available in the list so Reminder is created")
					[ ] // iFunctionResult=PASS
					[ ] // 
				[+] // else
					[ ] // //ReportStatus("Verify Reminder is created ", FAIL, "{sSearchEntry} is not available in the list so Reminder is not created")
					[ ] // iFunctionResult=FAIL
					[ ] // 
				[ ] // 
				[ ] // DlgManageReminders.Close()
				[ ] // 
			[+] // else
				[ ] // iFunctionResult=FAIL
			[ ] // 
		[+] // except
			[ ] // iFunctionResult=FAIL
			[ ] // 
		[ ] // return iFunctionResult
		[ ] // 
	[ ] // 
	[ ] // ==========================================================
	[+] // FUNCTION: AddPaycheck()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will add Net amount either from Home tab or from Bills tab.
		[ ] //
		[ ] // PARAMETERS:		STRING 		sPaycheckType		Gross amount/Net amount
		[ ] //						STRING	 		sPayeeName		Payee name
		[ ] //								 		sAmount		      Amount
		[ ] //								 		sDate                     Date
		[ ] //								 		sToAccount			Account name
		[ ] //								 		sCategory			Category
		[ ] //						 				sTag		            Tag name
		[ ] //										sMemo				Memo name
		[ ] // 										bSplit				TRUE/FALSE
		[ ] //	         LIST of LIST OF STRING          sSplitCategory 	       {{sCategory,sAmount},{sCategory,sAmount}}
		[ ] //
		[ ] // RETURNS:			INTEGER 		0 		if paycheck created successfully
		[ ] //										1		if paycheck is not created
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	 June 05, 2013	Udita Dube created
	[ ] // ==========================================================
	[+] public INTEGER AddPaycheck (STRING sPaycheckType, STRING sPayeeName, STRING sAmount, STRING sDate, STRING sToAccount, STRING sCategory optional, STRING sTag optional,STRING sMemo optional,BOOLEAN bSplit optional, LIST of LIST OF STRING lsSplitCategory optional)
		[+] // Variable declaration
			[ ] INTEGER  iCount,i
			[ ] STRING sCompanyName
			[+] if(IsNULL(sTag))
				[ ] sTag=""
			[+] if(IsNULL(sMemo))
				[ ] sMemo=""
			[+] if(IsNULL(bSplit))
				[ ] bSplit=FALSE
			[ ] 
		[+] do
			[ ] 
			[ ] SetViewMode(VIEW_CLASSIC_MENU)
			[ ] 
			[ ] QuickenWindow.SetActive ()
			[ ] QuickenWindow.Bills.Click()
			[ ] QuickenWindow.Bills.AddReminder.Click()
			[ ] QuickenWindow.Bills.AddReminder.PaycheckReminder.Select()
			[ ] 
			[+] if(PayCheckSetup.Exists(SHORT_SLEEP) == TRUE)
				[ ] PayCheckSetup.SetActive ()
				[ ] PayCheckSetup.HowMuchPaycheck.Select(sPaycheckType)
				[ ] PayCheckSetup.Next.Click ()
				[+] switch(sPaycheckType)
					[ ] 
					[+] case "Net amount" 
						[+] if(DlgAddEditReminder.Exists(SHORT_SLEEP))
							[ ] DlgAddEditReminder.SetActive ()
							[ ] DlgAddEditReminder.Step1Panel.HomeChildPanel.PayToTextField.SetText(sPayeeName)
							[ ] DlgAddEditReminder.NextButton.Click()
							[ ] DlgAddEditReminder.SetActive ()
							[ ] DlgAddEditReminder.Step1Panel.HomeChildPanel.PayToTextField.SetText(sPayeeName)
							[ ] DlgAddEditReminder.Step1Panel.HomeChildPanel.TypeKeys(KEY_TAB)
							[ ] DlgAddEditReminder.Step2Panel.QWinChild1.DueNextOnTextField.SetText(sDate)
							[ ] DlgAddEditReminder.TypeKeys(KEY_TAB)
							[ ] DlgAddEditReminder.TypeKeys(KEY_TAB)
							[ ] 
							[ ] DlgAddEditReminder.Step2Panel.QWinChild1.AmountDueTextField.SetText(sAmount)
							[ ] DlgAddEditReminder.Step2Panel.QWinChild1.ToAccountTextField.SetText (sToAccount)
							[ ] DlgAddEditReminder.TypeKeys(KEY_TAB)
							[+] if((sMemo!= "")||(sTag!="")||(sCategory!=""))
								[ ] DlgAddEditReminder.Step2Panel.QWinChild1.AddCategoryTagMemoPanel1.AddCategoryTagMemoButton.Click (1, 92, 22)
								[+] if(DlgOptionalSetting.Exists(SHORT_SLEEP))
									[+] if(bSplit==TRUE)
										[ ] iCount=ListCount(lsSplitCategory)
										[ ] 
										[+] if(DlgOptionalSetting.SplitCategoryButton.Exists(SHORT_SLEEP))
											[ ] DlgOptionalSetting.SplitCategoryButton.Click()
											[+] if(SplitTransaction.Exists(SHORT_SLEEP))
												[ ] ReportStatus("Verify Reminder Split Transaction dialog present", PASS, "Reminder Split Transaction dialog is present")
												[+] for(i=1;i<=iCount;i++)
													[ ] // Entering data in Category List for first row
													[ ] SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.Select ("#{Str(i)}")
													[ ] SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField2.TypeKeys(KEY_SHIFT_TAB)
													[ ] SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField1.SetText(lsSplitCategory[i][1])
													[+] if (CategoryQuickList.Exists())
														[ ] CategoryQuickList.Close()
														[ ] 
													[ ] SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField1.TypeKeys(KEY_TAB)
													[ ] SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField2.TypeKeys(KEY_TAB)
													[ ] SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField3.TypeKeys(KEY_TAB)
													[ ] SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField4.SetText(lsSplitCategory[i][2])
													[ ] SplitTransaction.EnterMultipleCategoriesToI2.ListBox1.TextField4.TypeKeys(KEY_ENTER)
													[ ] 
												[ ] 
												[ ] //Close both the dialogs
												[ ] sleep(1)
												[+] if(SplitTransaction.Adjust.IsEnabled())
													[ ] SplitTransaction.Adjust.Click()
												[ ] SplitTransaction.OK.Click()
												[ ] Sleep(2)
												[ ] DlgOptionalSetting.OKButton.Click()
												[ ] Sleep(2)
												[ ] iFunctionResult=PASS
												[ ] 
											[+] else
												[ ] ReportStatus("Verify Reminder Split Transaction dialog present", FAIL , "Reminder Split Transaction dialog is not present")
												[ ] 
										[+] else
											[ ] ReportStatus("Split Category Button on Add Category,Tag & Memo dialog present", FAIL , "Split Category Button on Add Category,Tag & Memo dialog is not present")
											[ ] 
										[ ] 
									[+] else
										[ ] DlgOptionalSetting.CategoryTextField.SetText (sCategory)
										[ ] DlgOptionalSetting.TypeKeys(KEY_TAB)
										[ ] DlgOptionalSetting.TagTextField.SetText (sTag)
										[ ] DlgOptionalSetting.MemoTextField.SetText (sMemo)
										[ ] DlgOptionalSetting.OKButton.Click (1, 29, 15)
										[ ] iFunctionResult=PASS
								[+] if(DlgOptionalSetting.NewTag.Exists(SHORT_SLEEP))
									[ ] DlgOptionalSetting.NewTag.SetActive ()
									[ ] DlgOptionalSetting.NewTag.TagOKButton.Click (1, 23, 13)
								[ ] 
								[ ] 
							[+] if(DlgAddEditReminder.Exists(SHORT_SLEEP))
								[ ] DlgAddEditReminder.SetActive ()
								[ ] DlgAddEditReminder.DoneButton.Click (1, 36, 12)
							[+] if(DlgAddEditReminder.Exists(SHORT_SLEEP))
								[ ] DlgAddEditReminder.Step2Panel.QWinChild1.AmountDueTextField.SetFocus()
								[ ] DlgAddEditReminder.Step2Panel.QWinChild1.TypeKeys(KEY_TAB)
								[ ] DlgAddEditReminder.Step2Panel.QWinChild1.TypeKeys(KEY_ENTER)
							[ ] iFunctionResult = PASS
						[+] else
							[ ] iFunctionResult = FAIL
							[ ] 
						[ ] 
				[+] 
					[ ] // PayCheckSetup.CompanyName.SetPosition (1, 1)
					[ ] // PayCheckSetup.CompanyName.SetText (lsAddAccount[1])
					[ ] // PayCheckSetup.MemoOptional.SetPosition (1, 1)
					[ ] // PayCheckSetup.MemoOptional.SetText (lsAddAccount[2])
					[ ] // PayCheckSetup.Next.Click ()
					[ ] // bExist = PayCheckError.Exists(SHORT_SLEEP)
					[+] // if(bExist == TRUE)						// check for error message
						[ ] // PayCheckError.OK.Click()
						[ ] // PayCheckSetup.Close()
						[ ] // bFlag = TRUE							// set flag to True - states that error message exists
					[+] // else
						[ ] // PayCheckSetup.SetActive ()
						[ ] // PayCheckSetup.Account.Select (lsAddAccount[3])
						[ ] // Agent.SetOption (OPT_VERIFY_ACTIVE, FALSE)
						[ ] // PayCheckSetup.QWSnapHolder.AcceptClearenceTransaction.TransactionFrame.AddEarning.Click()
						[ ] // PayCheckSetup.QWSnapHolder.AcceptClearenceTransaction.TransactionFrame.AddEarning.TypeKeys(Replicate(KEY_DN, 1)) 
						[ ] // PayCheckSetup.QWSnapHolder.AcceptClearenceTransaction.TransactionFrame.AddEarning.TypeKeys(KEY_ENTER)
						[ ] // waitforstate(AddEarning,TRUE,10)
						[+] // if(AddEarning.Exists(SHORT_SLEEP))
							[ ] // AddEarning.SetActive ()
							[ ] // AddEarning.AmountTextField.SetText (lsAddAccount[4])
							[ ] // AddEarning.OKButton.Click (1, 40, 8)
							[ ] // 
						[+] // else
							[ ] // PayCheckAddEarning.AmountTextField.SetText (lsAddAccount[4])
							[ ] // PayCheckAddEarning.OKButton.Click (1, 40, 8)
							[ ] // 
						[ ] // Agent.SetOption (OPT_VERIFY_ACTIVE, TRUE)
						[ ] // PayCheckSetup.StartOn.SetText(lsAddAccount[5])
						[ ] // PayCheckSetup.Frequency.Select (lsAddAccount[6])
						[ ] // PayCheckSetup.Done.Click ()
						[+] // if(EnterYearToDateInformation.Exists(SHORT_SLEEP))
							[ ] // EnterYearToDateInformation.OK.Click()
							[+] // if(PaycheckYearToDateAmounts.Exists(SHORT_SLEEP))
								[ ] // PaycheckYearToDateAmounts.Enter.Click()
			[+] else
				[ ] ReportStatus("Validate PayCheck Window", FAIL, "PayCheck window doesn't exists") 
				[ ] iFunctionResult=FAIL
			[ ] 
			[ ] 
			[ ] 
		[+] except
			[ ] ExceptLog()
			[+] if(DlgAddEditReminder.Exists(SHORT_SLEEP))
				[ ] DlgAddEditReminder.Close()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: AddReminderInDataFile()
		[ ] // 
		[ ] // DESCRIPTION:
		[ ] // This function will add a bill , income or transfer reminder in Quicken data file
		[ ] // 
		[ ] // PARAMETERS:		STRING 		
		[ ] // 
		[ ] // 
		[ ] // RETURNS:			INTEGER		PASS		Reminder is added successfully to data file
		[ ] // FAIL		If any error occured during switching
		[ ] // 
		[ ] // 
		[ ] // REVISION HISTORY:
		[ ] // June 21 2013 ,  Dean Paes created
	[ ] // ==========================================================
	[+] public INTEGER AddReminderInDataFile(STRING sReminderType,STRING sPayeeName,STRING sTransactionAmount,STRING sBillDate,STRING sDaysBefore optional,STRING sFromAccount optional,STRING sToAccount optional,STRING sCategory optional,STRING sMemo optional,STRING sTag optional)
		[ ] 
		[ ] INTEGER iCounter,iCount ,iValidate
		[ ] STRING sHandle , sActual
		[ ] 
		[ ] 
		[+] if(sCategory==NULL)
			[ ] sCategory=""
		[+] if(sTag==NULL)
			[ ] sTag=""
		[+] if(sMemo==NULL)
			[ ] sMemo=""
		[+] do
			[ ] 
			[ ] //---------------------Add Reminder----------------------------------------
			[ ] QuickenWindow.SetActive()
			[+] if( DlgAddEditReminder.Exists(10))
				[ ] DlgAddEditReminder.SetActive()
				[ ] ReportStatus("Navigate to reminder details second screen", PASS, " Add Bill Reminder dialog second screen is displayed.")
				[ ] DlgAddEditReminder.Step2Panel.QWinChild1.AmountDueTextField.SetText(sTransactionAmount)
				[ ] DlgAddEditReminder.Step2Panel.QWinChild1.DueNextOnTextField.SetText(sBillDate)
				[ ] 
				[+] if(sFromAccount!=NULL)
					[ ] DlgAddEditReminder.Step2Panel.QWinChild1.FromAccountTextField.SetText(sFromAccount)
				[+] if(sToAccount!=NULL)
					[ ] DlgAddEditReminder.Step2Panel.QWinChild1.ToAccountTextField.SetText(sToAccount)
				[+] if(sDaysBefore!=NULL)
					[+] if(!DlgAddEditReminder.Step2Panel.QWinChild1.OptionalSettingsPanel3.RemindDaysInAdvanceChangeLink.Exists(SHORT_SLEEP))
						[ ] DlgAddEditReminder.Step2Panel.QWinChild1.Panel2.OptionalSettingsButton.Click()
					[ ] 
					[+] if(DlgAddEditReminder.Step2Panel.QWinChild1.OptionalSettingsPanel3.RemindDaysInAdvanceChangeLink.Exists(SHORT_SLEEP))
						[ ] 
						[ ] DlgAddEditReminder.Step2Panel.QWinChild1.OptionalSettingsPanel3.RemindDaysInAdvanceChangeLink.Click()
						[ ] 
						[+] if(DlgOptionalSetting.Exists(SHORT_SLEEP))
							[ ] // Agent.SetOption(OPT_SCROLL_INTO_VIEW,FALSE)
							[ ] DlgOptionalSetting.RemindMeRadioList.Select ("Remind me")
							[ ] DlgOptionalSetting.DaysBeforeTheDueDateTextField.SetText(sDaysBefore)
							[ ] DlgOptionalSetting.OKButton.Click()
							[ ] 
							[ ] 
						[+] else
							[ ] ReportStatus("Reminder details window",FAIL,"Reminder Details window not displayed")
						[ ] 
						[ ] 
						[ ] 
						[ ] 
						[ ] 
						[ ] 
					[+] else
						[ ] ReportStatus("Verify change link",FAIL,"Change link not found")
						[ ] iFunctionResult=FAIL
				[ ] DlgAddEditReminder.Step2Panel.QWinChild1.AddCategoryTagMemoPanel1.AddCategoryTagMemoButton.Click()
				[ ] 
				[+] if (sReminderType!="Transfer")
					[ ] DlgOptionalSetting.CategoryTextField.SetText(sCategory)
				[ ] DlgOptionalSetting.MemoTextField.SetText(sMemo)
				[ ] DlgOptionalSetting.TagTextField.SetText(sTag)
				[ ] DlgOptionalSetting.OKButton.Click()
				[+] if(NewTag.Exists(SHORT_SLEEP))
					[ ] NewTag.SetActive ()
					[ ] NewTag.OKButton.Click ()
					[ ] 
				[ ] 
				[ ] DlgAddEditReminder.TextClick("Done")
				[ ] 
				[ ] WaitForState(DlgAddEditReminder,FALSE,5)
				[ ] CloseAddLinkBiller()
				[ ] iFunctionResult=PASS
				[ ] 
				[ ] 
				[ ] 
			[+] else
				[ ] ReportStatus("Verify dialog AddEdit Reminder.", FAIL, " Add Reminder dialog is not displayed")
				[ ] iFunctionResult=FAIL
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult=FAIL
		[ ] return iFunctionResult
		[ ] 
		[ ] 
		[ ] 
		[ ] 
		[ ] 
		[ ] 
		[ ] 
		[ ] 
		[ ] 
		[ ] 
		[ ] 
		[ ] 
		[ ] 
		[ ] 
		[ ] 
		[ ] 
		[ ] 
		[ ] 
		[ ] 
		[ ] 
		[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: NavigateReminderDetailsPage(sReminderType,sPayee)
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will navigate to reminder's details page i.e. reminder details page
		[ ] //
		[ ] // PARAMETERS:		STRING	 		sReminderType		Bill/Income/Transfer
		[ ] //						STRING 		sPayee	 			Payee name : Payee
		[ ] //
		[ ] // RETURNS:			INTEGER		PASS		navigation successful
		[ ] //										FAIL		If navigation failed
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //  	 Feb 20, 2013 Udita Dube created
	[ ] // ==========================================================
	[+] // public INTEGER NavigateReminderDetailsPage(STRING sReminderType,STRING sPayee)			
		[ ] // 
		[+] // // Variable Declaration
			[ ] // STRING sDateStamp = FormatDateTime (GetDateTime(), "m/d/yyyy") 
			[ ] // 
			[+] // switch(sReminderType)
				[+] // case "Bill"
					[ ] // i=1
				[+] // case "Income"
					[ ] // i=2
				[+] // case "Transfer"
					[ ] // i=3
				[+] // case "Invoice"
					[ ] // i=4
				[ ] // 
				[+] // default
					[ ] // i=1
		[ ] // 
		[+] // do
			[ ] // 
			[ ] // // Navigate to Bills Tab
			[ ] // NavigateQuickenTab(sTAB_BILL)
			[ ] // 
			[ ] // // Click on add Reminder button and select Reminder										  	 
			[+] // if(AddReminderButton.Exists(SHORT_SLEEP))
				[ ] // AddReminderButton.Click()
				[ ] // AddReminderButton.TypeKeys(Replicate(KEY_DN, i)) 
				[ ] // AddReminderButton.TypeKeys(KEY_ENTER)
				[ ] // 
				[ ] // // Add Reminder dialog opened																
				[+] // if (DlgAddEditReminder.Exists(SHORT_SLEEP))
					[ ] // DlgAddEditReminder.SetActive()
					[ ] // // Enter Payee name and go to next screen
					[ ] // 
					[ ] // DlgAddEditReminder.Step1Panel.HomeChildPanel.PayeeNameTextField.SetText(sPayee)
					[ ] // DlgAddEditReminder.TypeKeys(KEY_TAB)											
					[ ] // DlgAddEditReminder.NextButton.Click()
					[ ] // iFunctionResult=PASS
				[+] // else
					[ ] // ReportStatus("Verify {sReminderType} Reminder dialog",FAIL,"Add {sReminderType} Reminder dialog is not available")	
					[ ] // iFunctionResult=FAIL
				[ ] // 
			[+] // else
				[ ] // ReportStatus("Verify Quicken main window",FAIL,"Quicken main window is not available")
				[ ] // iFunctionResult=FAIL
				[ ] // 
				[ ] // 
		[+] // except
			[ ] // ExceptLog()
			[ ] // iFunctionResult = FAIL
		[ ] // return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: NavigateReminderDetailsPage(sReminderType,sPayee)
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will navigate to reminder's details page i.e. reminder details page
		[ ] //
		[ ] // PARAMETERS:		STRING	 		sReminderType		Bill/Income/Transfer
		[ ] //						STRING 		sPayee	 			Payee name : Payee
		[ ] //
		[ ] // RETURNS:			INTEGER		PASS		navigation successful
		[ ] //										FAIL		If navigation failed
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //  	 Feb 20, 2013 Udita Dube created
	[ ] // ==========================================================
	[+] public INTEGER NavigateReminderDetailsPage(STRING sReminderType,STRING sPayee)			
		[ ] 
		[+] // Variable Declaration
			[ ] INTEGER i
			[ ] STRING sDateStamp = FormatDateTime (GetDateTime(), "m/d/yyyy") 
			[ ] 
			[+] switch(sReminderType)
				[+] case "Bill"
					[ ] i=1
				[+] case "Income"
					[ ] i=2
				[+] case "Transfer"
					[ ] i=3
				[+] case "Invoice"
					[ ] i=4
				[ ] 
				[+] default
					[ ] i=1
		[ ] 
		[+] do
			[ ] 
			[ ] // Navigate to Bills Tab
			[ ] NavigateQuickenTab(sTAB_BILL,sTAB_UPCOMING)
			[ ] 
			[ ] // Click on add Reminder button and select Reminder										  	 
			[+] // if(AddReminderButton.Exists(SHORT_SLEEP))
				[ ] // AddReminderButton.Click()
				[ ] // AddReminderButton.TypeKeys(Replicate(KEY_DN, i)) 
				[ ] // AddReminderButton.TypeKeys(KEY_ENTER)
				[ ] 
				[ ] 
			[+] if(QuickenMainWindow.QWNavigator.AddReminder.Exists(10))
				[ ] QuickenMainWindow.QWNavigator.AddReminder.Click()
				[ ] QuickenMainWindow.QWNavigator.TypeKeys(Replicate(KEY_DN, i)) 
				[ ] QuickenMainWindow.QWNavigator.TypeKeys(KEY_ENTER)
				[ ] 
				[ ] 
				[ ] // Add Reminder dialog opened																
				[+] if (DlgAddEditReminder.Exists(10))
					[ ] DlgAddEditReminder.SetActive()
					[ ] // Enter Payee name and go to next screen
					[ ] 
					[ ] DlgAddEditReminder.Step1Panel.HomeChildPanel.PayeeNameTextField.SetText(sPayee)
					[ ] DlgAddEditReminder.TypeKeys(KEY_TAB)											
					[ ] DlgAddEditReminder.NextButton.Click()
					[ ] iFunctionResult=PASS
				[+] else
					[ ] ReportStatus("Verify {sReminderType} Reminder dialog",FAIL,"Add {sReminderType} Reminder dialog is not available")	
					[ ] iFunctionResult=FAIL
				[ ] 
			[+] else
				[ ] ReportStatus("Verify Quicken main window",FAIL,"Quicken main window is not available")
				[ ] iFunctionResult=FAIL
				[ ] 
				[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: CloseAddLinkBiller()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will close Add Biller / Link Biller dialog
		[ ] //
		[ ] // PARAMETERS:		
		[ ] //						
		[ ] //
		[ ] // RETURNS:			
		[ ] //										
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //  	 Nov 24, 2015 Mukesh created
	[ ] // ==========================================================
	[+] public void CloseAddLinkBiller()	
		[+] do 
			[+] if (AddLinkBiller.Exists(10))
				[ ] AddLinkBiller.SetActive()
				[ ] AddLinkBiller.btnClose.Click()
				[ ] WaitForState(AddLinkBiller, False ,2)
		[+] except
			[ ] exceptlog()
	[ ]  
	[ ] 
	[ ] 
	[ ]  // ==========================================================
	[+]  // FUNCTION: VerifyReminderDialog()
		[ ] // // // 
		[ ] // // // DESCRIPTION:
		[ ] // // // This function will verify the caption of the reminder window
		[ ] // // // 
		[ ] // // // PARAMETERS:		STRING	 			sActualName                  Expected Name of the reminder dialog
		[ ] // // //
		[ ] // // // 
		[ ] // // // RETURNS:			INTEGER		 		PASS        if caption returned matches with expected
		[ ] // /                                                                           FAIL          if any error returns
		[ ] // // //                                                          
		[ ] // // // 
		[ ] // // // REVISION HISTORY:
		[ ] // // // Suyash Joshi  created  Feb 14 2013
	[ ] // ==========================================================
	[+] public INTEGER VerifyReminderDialog(STRING sActualName)
		[ ] STRING sDialogName
		[+] if(DlgAddEditReminder.Exists(SHORT_SLEEP))
			[ ] sDialogName=DlgAddEditReminder.getcaption()
			[+] if(sDialogName==sActualName)
				[ ] iFunctionResult=PASS
			[+] else
				[ ] DlgAddEditReminder.Close()
				[ ] iFunctionResult=FAIL
			[ ] return iFunctionResult
		[+] else
			[ ] //ReportStatus("Add Bill Reminder flow  ", FAIL, "{sActualName} flow is not launched")
			[ ] iFunctionResult=FAIL
			[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: DeleteSingleBillReminder()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will delete single Bill reminder from Bills tab.
		[ ] //
		[ ] //
		[ ] // RETURNS:			INTEGER 		PASS 		if bill is deleted
		[ ] //										FAIL		if any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	 April 3 , 2013	Dean Paes created
	[ ] // ==========================================================
	[+] public INTEGER DeleteSingleBillReminder()
		[ ] 
		[ ] 
		[+] //Variable Declaration
			[ ] INTEGER iResult
			[ ] 
		[ ] 
		[+] do
			[ ] Agent.SetOption (OPT_NO_ICONIC_MESSAGE_BOXES, TRUE)
			[ ] 
			[ ] QuickenWindow.SetActive()
			[ ] iResult=NavigateQuickenTab(sTAB_BILL)
			[ ] 
			[+] if( iResult==PASS)
				[ ] 
				[ ] 
				[ ] ReportStatus("Navigate to Bills Tab", PASS, " Bills tab navigation successful")
				[ ] MDIClient.Bills.ViewAsPopupList.Select(1)
				[ ] MDIClient.Bills.DueWithinNextPopupList.Select(3)
				[ ] 
				[ ] MDIClient.Bills.Panel.Panel1.QWinChild1.Edit.Click()
				[ ] MDIClient.Bills.Panel.Panel1.QWinChild1.Edit.TypeKeys(Replicate(KEY_DN,2))
				[ ] MDIClient.Bills.Panel.Panel1.QWinChild1.Edit.TypeKeys(KEY_ENTER)
				[ ] 
				[ ] 
				[+] if(DlgAddEditReminder.Exists(2))
					[ ] ReportStatus("Navigate to Edit Bill Reminder dialog", PASS, " Edit Bill Reminder dialog is displayed")
					[ ] 
					[ ] 
					[ ] DlgAddEditReminder.DeleteButton.Click()
					[+]  if(AlertMessage.Exists(SHORT_SLEEP))
						[ ] AlertMessage.SetActive()
						[ ] AlertMessage.OK.Click()
						[ ] 
						[ ] iFunctionResult=PASS
						[ ] 
					[+] else if(AlertMessage.Exists(SHORT_SLEEP))
						[ ] AlertMessage.SetActive()
						[ ] AlertMessage.OK.Click()
						[ ] 
						[ ] iFunctionResult=PASS
						[ ] 
					[+] else
						[ ] ReportStatus("Delete Reminder", FAIL, " Delete Reminder confirmation dialog is not displayed")
						[ ] iFunctionResult=FAIL
					[ ] 
					[ ] 
				[+] else
					[ ] ReportStatus("Navigate to Edit Bill Reminder dialog", FAIL, " Edit Bill Reminder dialog is not displayed")
					[ ] iFunctionResult=FAIL
					[ ] 
				[ ] 
				[ ] 
				[ ] 
			[+] else
				[ ] ReportStatus("Navigate to Bills Tab", FAIL, " Bills tab navigation not successful")
				[ ] iFunctionResult=FAIL
				[ ] 
				[ ] 
			[ ] 
			[ ] 
			[ ] 
		[+] except
			[ ] iFunctionResult=FAIL
			[ ] 
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: DeleteInvoiceReminder()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will delete Invoice reminder from Bills tab.
		[ ] //
		[ ] //
		[ ] // RETURNS:			INTEGER 		PASS 		if bill is deleted
		[ ] //										FAIL		if any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	 April 8 , 2013	Dean Paes created
	[ ] // ==========================================================
	[+] public INTEGER DeleteInvoiceReminder()
		[ ] 
		[ ] 
		[+] //Variable Declaration
			[ ] INTEGER iResult
			[ ] 
		[ ] 
		[+] do
			[ ] 
			[ ] QuickenWindow.SetActive()
			[ ] iResult=NavigateQuickenTab(sTAB_BILL)
			[ ] 
			[+] if( iResult==PASS)
				[ ] 
				[ ] 
				[ ] ReportStatus("Navigate to Bills Tab", PASS, " Bills tab navigation successful")
				[ ] MDIClient.Bills.ViewAsPopupList.Select(1)
				[ ] MDIClient.Bills.DueWithinNextPopupList.Select(3)
				[ ] 
				[ ] MDIClient.Bills.Panel.Panel1.QWinChild1.Edit.Click()
				[ ] 
				[ ] 
				[+] if(DlgAddEditReminder.Exists(2))
					[ ] ReportStatus("Navigate to Edit Bill Reminder dialog", PASS, " Edit Bill Reminder dialog is displayed")
					[ ] 
					[ ] 
					[ ] DlgAddEditReminder.DeleteButton.Click()
					[+] if(AlertMessage.Exists(SHORT_SLEEP))
						[ ] AlertMessage.SetActive()
						[ ] AlertMessage.OK.Click()
						[ ] iFunctionResult=PASS
						[ ] 
					[+] else
						[ ] ReportStatus("Delete Reminder", FAIL, " Delete Reminder confirmation dialog is not displayed")
						[ ] iFunctionResult=FAIL
					[ ] 
					[ ] 
				[+] else
					[ ] ReportStatus("Navigate to Edit Bill Reminder dialog", FAIL, " Edit Bill Reminder dialog is not displayed")
					[ ] iFunctionResult=FAIL
					[ ] 
				[ ] 
				[ ] 
				[ ] 
			[+] else
				[ ] ReportStatus("Navigate to Bills Tab", FAIL, " Bills tab navigation not successful")
				[ ] iFunctionResult=FAIL
				[ ] 
				[ ] 
			[ ] 
		[+] except
			[ ] iFunctionResult=FAIL
			[ ] 
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: ReminderOperations()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will open manage reminders dialog, searcch for the reminder with sReminderPayeeName(if specified)  and execute command as mentioned in the parameters
		[ ] //
		[ ] // PARAMETERS:			STRING sCommand :                      Command to be executed Edit,Delete,Enter,Skip
		[ ] //                                        STRING sReminderPayeeName:      Payee name of reminder              (optional)
		[ ] //                                        INTEGER iXCord,iYCord :                X and Y coordinates of the bill in the manage reminders listbox    (optional)
		[ ] //
		[ ] //
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If the operation on the Reminder is executed successfully
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //Date                             June 3, 2013		
		[ ] //Author                          Dean Paes
		[ ] 
	[ ] // ==========================================================
	[+] public INTEGER ReminderOperations(STRING sCommand,STRING sReminderPayeeName optional,STRING sReminderType optional,INTEGER iXCord optional,INTEGER iYCord optional,STRING sBillStatus optional)
		[ ] 
		[ ] INTEGER iX,iY,i
		[ ] STRING sHandle,sActual
		[ ] 
		[ ] 
		[+] do
			[ ] 
			[+] if(iXCord==NULL)
				[ ] iX=337
			[+] else
				[ ] iX=iXCord
			[ ] 
			[+] if(iYCord==NULL)
				[ ] iY=10
			[+] else
				[ ] iY=iYCord
			[ ] 
			[ ] 
			[ ] 
			[ ] 
			[ ] QuickenWindow.SetActive()
			[ ] 
			[ ] 
			[ ] //-----------------Open Manage reminders dialog-------------
			[+] do
				[ ] QuickenWindow.TypeKeys(KEY_CTRL_J)
			[+] except
				[ ] QuickenMainWindow.QWNavigator.ManageReminders.Click()
			[ ] 
			[+] if (DlgManageReminders.Exists(5))
				[ ] 
				[ ] 
				[ ] 
				[+] if(sReminderPayeeName!=NULL)
					[ ] 
					[ ] sHandle=Str(DlgManageReminders.StaticText2.ManageRemindersListViewer.ListBox1.GetHandle())
					[+] for(i=0;i<=DlgManageReminders.StaticText2.ManageRemindersListViewer.ListBox1.GetItemCount();i++)
						[ ] sActual=QwAutoExecuteCommand("LISTBOX_GETFULLROW",sHandle,Str(i))
						[ ] 
						[ ] bMatch=MatchStr("*{sReminderPayeeName}*",sActual)
						[+] if(bMatch==TRUE)
							[ ] DlgManageReminders.StaticText2.ManageRemindersListViewer.ListBox1.OpenContextMenu(iX,iY)
							[ ] break
						[+] else
							[ ] iY=iY+25
							[ ] 
						[ ] 
						[ ] 
						[ ] 
					[ ] 
					[+] if(bMatch==FALSE)
						[ ] ReportStatus("Verify if string is found",FAIL,"Reminder is not found in manage reminder dialog")
						[ ] iFunctionResult=FAIL
					[ ] 
				[+] else
					[ ] DlgManageReminders.StaticText2.ManageRemindersListViewer.ListBox1.PopupSelect (iX,iY,sCommand)
				[ ] 
				[ ] 
				[ ] 
				[+] if(sReminderType=="Invoice"||sReminderType=="Loan")
					[ ] 
					[+] switch sCommand
						[ ] 
						[+] case "Enter"
							[ ] 
							[+] // if(DlgManageReminders.Enter.Exists(2))
								[ ] // DlgManageReminders.Enter.Pick()
							[ ] 
							[ ] DlgManageReminders.TypeKeys(KEY_DN)
							[ ] DlgManageReminders.TypeKeys(KEY_ENTER)
							[ ] 
							[ ] 
							[ ] 
							[+] if(EnterExpenseIncomeTxn.Exists(5))
								[ ] EnterExpenseIncomeTxn.SetActive()
								[ ] EnterExpenseIncomeTxn.EnterTransactionButton.Click()
								[ ] 
								[ ] DlgManageReminders.Close()
								[ ] WaitForState(DlgManageReminders,FALSE,SHORT_SLEEP)
								[ ] 
								[ ] 
								[ ] iFunctionResult=PASS
								[ ] 
								[ ] 
							[+] else
								[ ] ReportStatus("Enter Transaction window",FAIL,"Enter Transaction window not open")
								[ ] iFunctionResult=FAIL
								[ ] 
							[ ] 
							[ ] 
							[ ] 
						[ ] 
						[+] case "Skip"
							[ ] 
							[ ] DlgManageReminders.TypeKeys(Replicate(KEY_DN,2))
							[ ] DlgManageReminders.TypeKeys(KEY_ENTER)
							[ ] 
							[ ] 
							[+] if(DlgAddEditReminder.Exists(SHORT_SLEEP))
								[ ] DlgAddEditReminder.SkipConfirmButton.Click()
								[ ] DlgManageReminders.Close()
								[ ] WaitForState(DlgManageReminders,FALSE,SHORT_SLEEP)
								[ ] 
								[ ] 
								[ ] iFunctionResult=PASS
								[ ] 
							[+] else
								[ ] ReportStatus("Skip Transaction dialog",FAIL,"Skip Transaction dialog not open")
								[ ] iFunctionResult=FAIL
								[ ] 
							[ ] 
						[ ] 
						[+] case "Edit Multiple"
							[ ] 
							[ ] 
							[ ] DlgManageReminders.TypeKeys(Replicate(KEY_DN,3))
							[ ] DlgManageReminders.TypeKeys(KEY_ENTER)
							[ ] 
							[ ] 
							[+] if(DlgAddEditReminder.Exists(SHORT_SLEEP))
								[ ] ReportStatus("Verify Edit Reminder window",PASS,"Edit Reminder window did not open")
								[ ] iFunctionResult=PASS
								[ ] 
							[+] else
								[ ] ReportStatus("Verify Edit Reminder window",FAIL,"Edit Reminder window did not open")
								[ ] iFunctionResult=FAIL
								[ ] 
							[ ] 
						[ ] 
						[+] case "Delete"
							[ ] 
							[ ] DlgManageReminders.TypeKeys(Replicate(KEY_DN,4))
							[ ] DlgManageReminders.TypeKeys(KEY_ENTER)
							[ ] 
							[ ] 
							[ ] 
							[+] if(DlgManageReminders.Delete.Exists(2))
								[ ] DlgManageReminders.Delete.Pick()
							[ ] 
							[ ] 
							[ ] 
							[+] if(AlertMessage.Exists(5))
								[ ] AlertMessage.SetActive()
								[ ] AlertMessage.OK.Click()
								[ ] WaitForState(AlertMessage,FALSE,5)
								[ ] 
								[ ] DlgManageReminders.Close()
								[ ] WaitForState(DlgManageReminders,FALSE,SHORT_SLEEP)
								[ ] 
								[ ] 
								[ ] iFunctionResult=PASS
								[ ] 
								[ ] 
							[+] else
								[ ] ReportStatus("Delete Reminder Dialog",FAIL,"Delete Reminder Dialog does not appear")
								[ ] iFunctionResult=FAIL
								[ ] 
							[ ] 
							[ ] 
						[ ] 
						[+] default
							[ ] iFunctionResult=FAIL
							[ ] 
							[ ] 
						[ ] 
						[ ] 
					[ ] 
				[+] else
					[ ] 
					[+] switch sCommand
						[ ] 
						[+] case "Enter"
							[ ] 
							[+] // if(DlgManageReminders.Enter.Exists(2))
								[ ] // DlgManageReminders.Enter.Pick()
							[ ] 
							[ ] DlgManageReminders.TypeKeys(KEY_DN)
							[ ] DlgManageReminders.TypeKeys(KEY_ENTER)
							[ ] 
							[ ] 
							[ ] 
							[+] if(EnterExpenseIncomeTxn.Exists(5))
								[ ] EnterExpenseIncomeTxn.SetActive()
								[ ] EnterExpenseIncomeTxn.EnterTransactionButton.Click()
								[ ] 
								[ ] DlgManageReminders.Close()
								[ ] WaitForState(DlgManageReminders,FALSE,SHORT_SLEEP)
								[ ] 
								[ ] 
								[ ] iFunctionResult=PASS
								[ ] 
								[ ] 
							[+] else
								[ ] ReportStatus("Enter Transaction window",FAIL,"Enter Transaction window not open")
								[ ] iFunctionResult=FAIL
								[ ] 
							[ ] 
							[ ] 
							[ ] 
						[ ] 
						[+] case "Skip"
							[ ] 
							[ ] DlgManageReminders.TypeKeys(Replicate(KEY_DN,2))
							[ ] DlgManageReminders.TypeKeys(KEY_ENTER)
							[ ] 
							[ ] 
							[+] if(DlgAddEditReminder.Exists(SHORT_SLEEP))
								[ ] DlgAddEditReminder.SkipConfirmButton.Click()
								[ ] DlgManageReminders.Close()
								[ ] WaitForState(DlgManageReminders,FALSE,SHORT_SLEEP)
								[ ] 
								[ ] 
								[ ] iFunctionResult=PASS
								[ ] 
							[+] else
								[ ] ReportStatus("Skip Transaction dialog",FAIL,"Skip Transaction dialog not open")
								[ ] iFunctionResult=FAIL
								[ ] 
							[ ] 
						[ ] 
						[+] case "Edit"
							[ ] 
							[ ] 
							[ ] DlgManageReminders.TypeKeys(Replicate(KEY_DN,3))
							[ ] DlgManageReminders.TypeKeys(KEY_ENTER)
							[ ] 
							[ ] 
							[+] if(DlgAddEditReminder.Exists(SHORT_SLEEP))
								[ ] ReportStatus("Verify Edit Reminder window",PASS,"Edit Reminder window did not open")
								[ ] iFunctionResult=PASS
								[ ] 
							[+] else
								[ ] ReportStatus("Verify Edit Reminder window",FAIL,"Edit Reminder window did not open")
								[ ] iFunctionResult=FAIL
								[ ] 
							[ ] 
						[ ] 
						[+] case "Edit Multiple"
							[ ] 
							[ ] 
							[ ] DlgManageReminders.TypeKeys(Replicate(KEY_DN,4))
							[ ] DlgManageReminders.TypeKeys(KEY_ENTER)
							[ ] 
							[ ] 
							[+] if(DlgAddEditReminder.Exists(SHORT_SLEEP))
								[ ] ReportStatus("Verify Edit Reminder window",PASS,"Edit Reminder window did not open")
								[ ] iFunctionResult=PASS
								[ ] 
							[+] else
								[ ] ReportStatus("Verify Edit Reminder window",FAIL,"Edit Reminder window did not open")
								[ ] iFunctionResult=FAIL
								[ ] 
							[ ] 
						[ ] 
						[ ] 
						[+] case "Delete"
							[ ] 
							[+] if (sReminderType=="Paycheque")
								[ ] DlgManageReminders.TypeKeys(Replicate(KEY_DN,4))
								[ ] DlgManageReminders.TypeKeys(KEY_ENTER)
							[+] else if (sBillStatus=="Paid")
								[ ] DlgManageReminders.TypeKeys(Replicate(KEY_DN,3))
								[ ] DlgManageReminders.TypeKeys(KEY_ENTER)
							[ ] 
							[+] else
								[ ] DlgManageReminders.TypeKeys(Replicate(KEY_DN,5))
								[ ] DlgManageReminders.TypeKeys(KEY_ENTER)
								[ ] 
							[ ] 
							[ ] 
							[ ] 
							[ ] 
							[ ] 
							[ ] 
							[+] if(AlertMessage.Exists(5))
								[ ] AlertMessage.SetActive()
								[ ] AlertMessage.OK.Click()
								[ ] WaitForState(AlertMessage,FALSE,5)
								[ ] 
								[ ] DlgManageReminders.Close()
								[ ] WaitForState(DlgManageReminders,FALSE,SHORT_SLEEP)
								[ ] 
								[ ] 
								[ ] iFunctionResult=PASS
								[ ] 
								[ ] 
							[+] else
								[ ] ReportStatus("Delete Reminder Dialog",FAIL,"Delete Reminder Dialog does not appear")
								[ ] iFunctionResult=FAIL
								[ ] 
							[ ] 
							[ ] 
						[ ] 
						[+] default
							[ ] iFunctionResult=FAIL
							[ ] 
							[ ] 
						[ ] 
						[ ] 
					[ ] 
					[ ] 
				[ ] 
				[ ] 
				[ ] 
				[ ] 
				[ ] 
				[ ] 
				[ ] 
			[+] else
				[ ] ReportStatus("Mange Reminders Dialog",FAIL,"Manage Reminders dialog is not displayed")
				[ ] iFunctionResult=FAIL
			[ ] 
			[ ] 
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult=FAIL
		[ ] return iFunctionResult
		[ ] 
		[ ] 
	[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: BillsTabListViewOperations()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will carry out operations on transactions in List view of Bills Tab
		[ ] //
		[ ] // 			
		[ ] //PARAMETERS:			STRING      sReminderPayeeName		       Payee Nam of entry on which operations are to be performed
		[ ] //                                        STRING      sCommand                                 Name of option in list view. Enter ,Edit , Skip
		[ ] //
		[ ] //
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If command is executed on specified entry
		[ ] //										FAIL	In case any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // March 4th , 2014  Dean Paes created
	[ ] // ==========================================================
	[+] public INTEGER BillsTabListViewOperations(STRING sReminderPayeeName,STRING sCommand)
		[ ] 
		[+] //Variable Declaration
			[ ] STRING sHandle,sActual,sAlertMessageText
			[ ] INTEGER iCount
			[ ] 
		[ ] 
		[ ] 
		[+] do
			[ ] 
			[ ] QuickenWindow.SetActive()
			[ ] 
			[ ] sHandle=Str(MDIClient.Bills.ListBox.GetHandle())
			[+] for(iCount=0;iCount<=MDIClient.Bills.ListBox.GetItemCount();iCount++)
				[ ] 
				[ ] 
				[ ] sActual=QwAutoExecuteCommand("LISTBOX_GETFULLROW",sHandle,Str(iCount))
				[ ] 
				[ ] bMatch=MatchStr("*{sReminderPayeeName}*",sActual)
				[+] if(bMatch==TRUE)
					[ ] 
					[ ] QwAutoExecuteCommand("LISTBOX_SELECTROW",sHandle,Str(iCount))
					[ ] 
					[+] switch sCommand
						[ ] 
						[+] case "Enter"
							[ ] 
							[ ] 
							[ ] MDIClient.Bills.ListBox.TextClick(sCommand)
							[ ] iFunctionResult=PASS
							[+] if(EnterExpenseIncomeTxn.Exists(5))
								[ ] EnterExpenseIncomeTxn.SetActive()
								[ ] EnterExpenseIncomeTxn.EnterTransactionButton.Click()
								[ ] 
								[ ] iFunctionResult=PASS
								[ ] 
								[ ] 
							[+] else if(AlertMessage.Exists(5))
								[ ] 
								[ ] sAlertMessageText=AlertMessage.StaticText.GetText()
								[ ] 
								[ ] ReportStatus("Alert Message is displayed",PASS,"Alert Message is displayed, transaction matches transaction in register. Message on AlertMessage {sAlertMessageText}")
								[ ] AlertMessage.SetActive()
								[ ] AlertMessage.Yes.Click()
								[ ] WaitForState(AlertMessage,FALSE,5)
								[ ] iFunctionResult=PASS
								[ ] 
							[+] else
								[ ] ReportStatus("Enter Transaction window",FAIL,"Enter Transaction window not open")
								[ ] iFunctionResult=FAIL
								[ ] 
							[ ] 
							[ ] 
						[ ] 
						[+] case "Skip"
							[ ] 
							[ ] MDIClient.Bills.ListBox.TextClick(sCommand)
							[+] if(DlgAddEditReminder.Exists(SHORT_SLEEP))
								[ ] DlgAddEditReminder.SkipConfirmButton.Click()
								[ ] 
								[ ] iFunctionResult=PASS
								[ ] 
							[+] else
								[ ] ReportStatus("Skip Transaction dialog",FAIL,"Skip Transaction dialog not open")
								[ ] iFunctionResult=FAIL
								[ ] 
							[ ] 
						[ ] 
						[+] case "Edit"
							[ ] 
							[ ] MDIClient.Bills.ListBox.TextClick(sCommand)
							[ ] MDIClient.Bills.ListBox.TypeKeys((Replicate(KEY_DN,2)))
							[ ] MDIClient.Bills.ListBox.TypeKeys(KEY_ENTER)
							[ ] 
							[+] if(DlgAddEditReminder.Exists(SHORT_SLEEP))
								[ ] ReportStatus("Verify Edit Reminder window",PASS,"Edit Reminder window did not open")
								[ ] iFunctionResult=PASS
								[ ] 
							[+] else
								[ ] ReportStatus("Verify Edit Reminder window",FAIL,"Edit Reminder window did not open")
								[ ] iFunctionResult=FAIL
								[ ] 
							[ ] 
						[ ] 
						[+] case "Go to Register"
							[ ] MDIClient.Bills.ListBox.TextClick(sCommand)
							[ ] 
							[ ] 
							[ ] 
						[ ] 
						[ ] 
						[+] default
							[ ] iFunctionResult=FAIL
							[ ] 
							[ ] 
					[ ] break
					[ ] 
				[ ] 
				[ ] 
				[ ] 
			[+] if(bMatch==FALSE)
				[ ] ReportStatus("Verify if string is found",FAIL,"{sReminderPayeeName} is not found in List view of Bills Tab")
				[ ] iFunctionResult=FAIL
			[ ] 
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult=FAIL
			[ ] 
			[ ] 
		[ ] return iFunctionResult
		[ ]  
		[ ] 
		[ ] 
	[ ] 
	[ ] 
	[ ] 
	[ ] 
	[ ] 
	[ ] 
[ ] // 
[+] // //********************** Reports Functions**********************************************************************
	[ ] // ==========================================================
	[+] // FUNCTION: CheckEndingBalance() 
		[ ] //
		[ ] // DESCRIPTION: 			This function will return Ending Balance.
		[ ] //
		[ ] // PARAMETER IN:		STRING	sEndingBalance	Expected Ending Balance
		[ ] //							STRING	sRowNo			Row no for Qwauto
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS		If verification pass
		[ ] //										FAIL		If any error occurs
		[ ] //
		[ ] // REVISION HISTORY:	06/04/2011   Created By	Mamta Jain
	[ ] // ==========================================================
	[+] public INTEGER CheckEndingBalance(STRING sEndingBalance)
		[ ] 
		[+] // Variable declaration
			[ ] STRING  sHandle,sActual, sRowNo
			[ ] INTEGER  iOpenStatus
		[ ] 
		[+] do
			[ ] // Active Quicken Screen
			[ ] QuickenWindow.SetActive()
			[ ] 
			[ ] //Get the EndingBalance
			[ ] iOpenStatus = OpenReport(lsReportCategory[4], sREPORT_NETWORTH)
			[+] if(iOpenStatus == PASS)
				[ ] NetWorthReports.SetActive ()
				[ ] sHandle = Str(NetWorthReports.QWListViewer1.ListBox1.GetHandle ())
				[ ] sRowNo = Str(NetWorthReports.QWListViewer1.ListBox1.GetItemCount () -1)
				[ ] 
				[ ] sActual = QwAutoExecuteCommand("LISTBOX_GETFULLROW", sHandle, sRowNo)
				[ ] NetWorthReports.SetActive ()
				[ ] NetWorthReports.Close ()
				[ ] 
				[ ] bMatch = MatchStr("*{sEndingBalance}*", sActual)
				[+] if(bMatch == TRUE)
					[ ] iFunctionResult = PASS
				[+] else
					[ ] ReportStatus("Validate Ending balance", FAIL, "EndingBalance : Expected - {sEndingBalance} is not matching with Actual {sActual}")
					[ ] iFunctionResult = FAIL
			[+] else
				[ ] iFunctionResult=FAIL
		[+] except
			[+] if(NetWorthReports.Exists())
				[ ] NetWorthReports.Close ()
			[ ] iFunctionResult = FAIL
			[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: OpenReport()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will Open any Report as per parameters
		[ ] //
		[ ] // PARAMETERS:		STRING 	sReportCategory		First Option in Reports menu
		[ ] //						STRING 	sReportName			Second option in reports
		[ ] //
		[ ] // RETURNS:			INTEGER	0 = If Reports opened successfully
		[ ] //									1 = if any error occurs 
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //   	Dec 27, 2010  Created by Udita Dube  
		[ ] //	06/01/2011   Updated by 	Mamta
	[ ] // ==========================================================
	[+] public INTEGER OpenReport(STRING sReportCategory, STRING sReportName)
		[ ] 
		[+] // Variable declaration
			[ ] BOOLEAN bBalanceCheck
			[ ] STRING sHandle, sActual
		[ ] 
		[+] do
			[ ] 
			[ ] // Activate Quicken window
			[ ] QuickenWindow.SetActive()
			[ ] 
			[ ] // Select Report Category
			[+] switch(sReportCategory) 
				[ ] 
				[+] case sREPORT_NETWORTH_BALANCES
					[ ] 
					[+] if(sReportName==sREPORT_NETWORTH)
						[ ] QuickenWindow.SetActive()
						[+] do
							[ ] QuickenWindow.Reports.Click()
							[ ] QuickenWindow.Reports.NetWorthBalances.Click()
							[ ] QuickenWindow.Reports.NetWorthBalances.NetWorth.Select()
						[+] except
							[ ] QuickenWindow.MainMenu.Select("/_Reports/Net W_orth & Balances/_Net Worth")
						[ ] sleep(2)
						[ ] iFunctionResult = PASS
					[+] else if (sReportName==sREPORT_ACCOUNT_BALANCE)
						[ ] QuickenWindow.SetActive()
						[ ] QuickenWindow.Reports.Click()
						[ ] QuickenWindow.Reports.NetWorthBalances.Click()
						[ ] QuickenWindow.Reports.NetWorthBalances.AccountBalances.Select()
						[ ] iFunctionResult = PASS
					[+] else
						[ ] print(sReportName + "Not found")
						[ ] iFunctionResult = FAIL
						[ ] 
				[ ] 
				[+] case sREPORT_SPENDING
					[ ] 
					[+] if(sReportName == sREPORT_SPENDING_BY_CAT)
						[ ] QuickenWindow.SetActive()
						[ ] QuickenWindow.Reports.Click()
						[ ] QuickenWindow.Reports.Spending.Click()
						[ ] QuickenWindow.Reports.Spending.SpendingByCategory.Select()
						[ ] iFunctionResult = PASS
					[+] else if (sReportName==sREPORT_SPENDING_BY_PAYEE)
						[ ] QuickenWindow.Reports.Click()
						[ ] QuickenWindow.Reports.Spending.Click()
						[ ] QuickenWindow.Reports.Spending.SpendingByPayee.Select()
						[ ] iFunctionResult = PASS
					[+] else if(sReportName == sREPORT_ITEMIZED_CAT)
						[ ] QuickenWindow.Reports.Spending.ItemizedCategories.Select()
						[ ] iFunctionResult = PASS
					[ ] 
					[+] else
						[ ] print(sReportName + "Not found")
						[ ] iFunctionResult = FAIL
						[ ] 
					[ ] 
				[ ] 
				[+] case sREPORT_GRAPHS
					[ ] 
					[+] if(sReportName==sREPORT_SPENDING_BY_CAT)
						[ ] QuickenWindow.Reports.Graphs.SpendingByCategory.Select()
						[ ] // wReport.SetActive()
						[ ] iFunctionResult = PASS
						[ ] return iFunctionResult
					[+] else if (sReportName==sREPORT_SPENDING_BY_PAYEE)
						[ ] QuickenWindow.Reports.Graphs.SpendingByPayee.Select()
						[ ] iFunctionResult = PASS
					[+] else if (sReportName==sREPORT_ACCOUNT_BALANCE)
						[ ] QuickenWindow.Reports.Graphs.AccountBalances.Select()
						[ ] iFunctionResult = PASS
					[+] else if(sReportName==sREPORT_NETWORTH)
						[ ] sleep(SHORT_SLEEP)
						[ ] QuickenWindow.SetActive()
						[ ] QuickenWindow.Reports.Click()
						[ ] QuickenWindow.Reports.Graphs.Click()
						[ ] QuickenWindow.Reports.Graphs.NetWorth.Select()
						[ ] // wReport.SetActive()
						[ ] iFunctionResult = PASS
						[ ] return iFunctionResult
					[+] else if(sReportName==sREPORT_INVESTMENT_PERFORMANCE)
						[ ] QuickenWindow.Reports.Graphs.InvestmentPerformance.Select()
						[ ] // wReport.SetActive()
						[ ] iFunctionResult = PASS
						[ ] return iFunctionResult
					[+] else if(sReportName==sREPORT_MY_SAVED_REPORTS_GRAPHS)
						[ ] QuickenWindow.Reports.MySavedReportsGraphs.Report1.Select()
						[ ] // wReport.SetActive()
						[ ] iFunctionResult = PASS
						[ ] return iFunctionResult
					[+] else
						[ ] print(sReportName + "Not found")
						[ ] iFunctionResult = FAIL
						[ ] 
				[ ] 
				[+] case("Banking")
					[+] if(sReportName=="Transaction")
						[ ] QuickenWindow.Reports.Click()
						[ ] QuickenWindow.Reports.Banking.Click()
						[ ] QuickenWindow.Reports.Banking.Transaction.Select()
						[ ] iFunctionResult = PASS
					[+] else if(sReportName == "CashFlow")
						[ ] QuickenWindow.Reports.Click()
						[ ] QuickenWindow.Reports.Banking.Click()
						[ ] QuickenWindow.Reports.Banking.CashFlow.Select()
						[ ] iFunctionResult = PASS
						[ ] 
					[ ] 
				[+] case sREPORT_MY_SAVED_REPORTS_GRAPHS
					[ ] QuickenWindow.Reports.Click()
					[+] if(QuickenWindow.Reports.MySavedReportsGraphs.Exists(SHORT_SLEEP))
						[+] if(sReportName=="Spending")
							[ ] QuickenWindow.Reports.MySavedReportsGraphs.Report1.Select()
							[ ] iFunctionResult = PASS
							[ ] 
						[ ] // Added by mamta
						[+] else if(sReportName == "My Transaction Report")
							[ ] QuickenWindow.Reports.MySavedReportsGraphs.Click()
							[ ] QuickenWindow.Reports.MySavedReportsGraphs.Report1.Select()
							[ ] iFunctionResult = PASS
							[ ] 
						[+] else if(sReportName == "My Itemized Payees")
							[ ] QuickenWindow.Reports.MySavedReportsGraphs.Click()
							[ ] QuickenWindow.Reports.MySavedReportsGraphs.Report2.Select()
							[ ] iFunctionResult = PASS
							[ ] 
						[+] else if(sReportName == "Account Balances_2007_Premier1")
							[ ] QuickenWindow.Reports.MySavedReportsGraphs.Click()
							[ ] QuickenWindow.Reports.MySavedReportsGraphs.Report3.Select()
							[ ] iFunctionResult = PASS
							[ ] 
						[+] else
							[ ] ReportStatus("Validate Report", FAIL, "{sReportName} not found")
							[ ] iFunctionResult = FAIL
					[+] else
						[ ] ReportStatus("Vaidate Option", WARN, "'MySavedReportsandGraphs' option is not present in Reports Menu")
						[ ] 
				[+] case("Investing")
					[+] if(sReportName == "InvestmentPerformance")
						[ ] QuickenWindow.Reports.Investing.InvestmentPerformance.Select()
						[ ] iFunctionResult = PASS
					[+] if(sReportName == "PortfolioValue")
						[ ] QuickenWindow.Reports.Investing.PortfolioValue.Select()
						[ ] iFunctionResult = PASS
					[+] if(sReportName == "Investment Transactions")
						[ ] QuickenWindow.Reports.Click()
						[ ] QuickenWindow.Reports.Investing.Click()
						[ ] QuickenWindow.Reports.Investing.InvestmentTransactions.Select()
						[ ] iFunctionResult = PASS
					[ ] 
					[ ] 
					[ ] 
				[+] case("Rental Property")
					[+] if(sReportName == "Schedule E-Supplemental Profit and Loss")
						[+] do
							[ ] QuickenWindow.Reports.Click()
							[ ] QuickenWindow.Reports.RentalProperty.Click()
							[ ] QuickenWindow.Reports.RentalProperty.ScheduleE.Select()
						[+] except
							[ ] QuickenWindow.MainMenu.Select("/_Reports/Re_ntal Property/Schedule _E-Supplemental Income and Loss")
						[ ] iFunctionResult = PASS
				[+] case sREPORT_TAX
					[+] if(sReportName == "Tax Schedule")
						[ ] QuickenWindow.Reports.Click()
						[ ] QuickenWindow.Reports.Tax.Click()
						[ ] QuickenWindow.Reports.Tax.TaxSchedule.Select()
						[ ] iFunctionResult = PASS
				[+] case("Business")
					[+] if(sReportName == "Profit and Loss Statement")
						[ ] QuickenWindow.Reports.Click()
						[ ] QuickenWindow.Reports.Business.Click()
						[ ] QuickenWindow.Reports.Business.ProfitAndLossStatement.Select()
						[ ] iFunctionResult = PASS
					[ ] 
					[ ] 
				[+] default
						[ ] print(sReportCategory + "Not found")
						[ ] iFunctionResult = FAIL
			[ ] 
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult = FAIL
		[ ] 
		[ ] sleep(SHORT_SLEEP)
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: TransactionReportOperations()
		[ ] // 
		[ ] // DESCRIPTION:			
		[ ] // This function will restore from the backup of Quicken
		[ ] // 
		[ ] // PARAMETERS:			STRING  	sSearchString      Option to search the register to find transaction for which transaction report is to be opened
		[ ] // STRING  	sReportAction	  Option to be selected from the right click menu on the report (e.g:  Retag transaction(s))
		[ ] // INTEGER    iLineNo                Line of the report where the transaction is found
		[ ] // 
		[ ] // RETURNS:				INTEGER	PASS	If Transaction report is opened and option is selected
		[ ] // FAIL	In case of failure
		[ ] // 
		[ ] // REVISION HISTORY:
		[ ] // May 3rd, 2013 	Dean Paes created
	[ ] // ==========================================================
	[+] public INTEGER TransactionReportOperations(STRING sSearchString,STRING sReportAction, STRING sPayeeOnline optional )
		[ ] 
		[ ] 
		[+] // Variable Declaration
			[ ] STRING sWindowType
			[ ] BOOLEAN bCheckStatus
			[ ] 
			[ ] // Account Register Coordinates
			[ ] INTEGER iX1=251
			[ ] INTEGER iY1=21
			[ ] // Report Coordinates
			[ ] INTEGER iX2=380
			[ ] INTEGER iY2=50
			[ ] 
			[ ] STRING sAction="Launch Mini-Report for Payee Manual" 
			[+] if (sPayeeOnline!=NULL)
				[ ] sAction=sPayeeOnline
		[ ] 
		[+] do
			[ ] 
			[ ] 
			[+] // bCheckStatus = QuickenWindow.View.UsePopUpRegisters.GetProperty("IsChecked")
				[ ] 
			[+] if (BankingPopUp.Exists(2))
				[ ] sWindowType= "Popup"
			[+] else
				[ ] sWindowType= "MDI"
			[ ] 
			[ ] 
			[ ] 
			[ ] // ---------Open Paye Mini Rpeort----------
			[ ] AccountActionsOnTransaction(sWindowType,sSearchString,sAction,"",iX1,iY1)
			[+] if(MDICalloutHolder.CalloutPopup.Exists(SHORT_SLEEP))
				[ ] ReportStatus("Open Register Mini Report",PASS,"Mini Report Opened")
				[ ] 
				[ ] // -----------Click on Show Report button on Callout----------
				[ ] MDICalloutHolder.CalloutPopup.ShowReport.Click()
				[ ] 
				[+] if(TransactionReports.Exists(4))
					[ ] ReportStatus("Open Report from Register Mini Report",PASS,"Report Opened")
					[ ] 
					[ ] // Select Include All dates from date filter
					[ ] TransactionReports.SetActive()
					[ ] TransactionReports.QWCustomizeBar1.DateRange.Select(1)
					[ ] 
					[ ] 
					[ ] // -------------Select Action of report from right click dropdown menu------------
					[ ] TransactionReports.QWListViewer1.ListBox1.Select(1)
					[ ] ReportActionsOnTransaction(TransactionReports,sReportAction)
					[ ] 
					[ ] iFunctionResult=PASS
					[ ] 
					[ ] 
				[+] else
					[ ] ReportStatus("Open Report from Register Mini Report",FAIL,"Report Not Opened")
					[ ] iFunctionResult=FAIL
				[ ] 
				[ ] 
			[+] else
				[ ] ReportStatus("Open Register Mini Report",FAIL,"Mini Report Not Opened")
				[ ] iFunctionResult=FAIL
			[ ] 
			[ ] 
			[ ] 
			[ ] 
			[ ] 
			[ ] 
		[+] except
			[ ] iFunctionResult=FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: ReportActionsOnTransaction()
		[ ] // // // 
		[ ] // // // DESCRIPTION:
		[ ] // // // This function will perform the rightclick on report transaction will select the menu from the context menu
		[ ] // // // 
		[ ] // // // PARAMETERS:    STRING	 		    sSearchEntry                                    Search in Register with this string
		[ ] // // //                                  STRING                  sAction                                             Action to be performed on 1st transaction in register
		[ ] // // //                                                                                                                        e.g. Copy Transactions(s), New, Delete
		[ ] // // //                                                                           
		[ ] // // //  
		[ ] // // // RETURNS:			INTEGER		PASS  If menu from the context menu selected
		[ ] // // //                                                                      FAIL		If any error occurs
		[ ] // // //  
		[ ] // // // REVISION HISTORY:
		[ ] // // // Muekesh Aug 9 2013
	[ ] // ==========================================================
	[+] public INTEGER ReportActionsOnTransaction(window  wReport,STRING sAction, INTEGER iXpos optional,INTEGER iYpos optional)
		[ ] 
		[ ] INTEGER iX,iY ,iKeyCount , iSubKeyCount
		[ ] 
		[+] do
			[ ] 
			[ ] 
			[+] if(wReport.Exists(5))
				[ ] 
				[ ] //Search for transaction with Payee name
				[+] if(iXpos==NULL)
					[ ] iX=380
				[+] else
					[ ] iX=iXpos
					[ ] 
				[ ] 
				[+] if(iYpos==NULL)
					[ ] iY=22
				[+] else
					[ ] iY=iYpos
					[ ] 
				[+] switch trim(sAction)
					[+] case "Delete transaction(s)"
						[ ] iKeyCount=3
					[+] case "Recategorize transaction(s)"
						[ ] iKeyCount=4
					[+] case "Retag transaction(s)"
						[ ] iKeyCount=5
					[+] case "Rename payee(s)"
						[ ] iKeyCount=6
					[+] case "Edit memo(s)"
						[ ] iKeyCount=7
					[+] case "Preferences"
						[ ] iKeyCount=14
					[ ] 
					[ ] 
					[ ] 
				[ ] wReport.QWListViewer1.ListBox1.OpenContextMenu(iX,iY)
				[ ] sleep(1)
				[ ] wReport.QWListViewer1.ListBox1.TypeKeys(replicate( KEY_DN , iKeyCount))
				[ ] wReport.QWListViewer1.ListBox1.TypeKeys(KEY_ENTER)
				[ ] 
				[ ] iFunctionResult=PASS
				[ ] 
			[+] else
				[ ] iFunctionResult=FAIL
			[ ] 
			[ ] 
			[ ] 
			[ ] 
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult=FAIL
		[ ] 
		[ ] return iFunctionResult
	[ ] 
[ ] // 
[+] // //********************** CustomerCentralResponse Functions************************************************
	[ ] // // ==========================================================
	[+] // // FUNCTION: OFXLogParsingFunctionForResponse()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will parse the OFX log file for Response
		[ ] // //
		[ ] // // PARAMETERS:		
		[ ] // //
		[ ] // // RETURNS:			INTEGER	PASS			 if all the file parse  successfully
		[ ] // //									FAIL  			 if any error occurs
		[ ] // //
		[ ] // // REVISION HISTORY:May 9, 2012  Puja Verma  Created
	[ ] // // ==========================================================
	[+] // public  OFXLogParsingFunctionForResponse(STRING sFileName,STRING sTabName )
		[+] // //VARIABLES
			[ ] // STRING sClosigS="</cc:CCWSResponse>"
			[ ] // STRING  CommonTerm="<?xml version"
			[ ] // BOOLEAN flag,flag1,flag2
			[ ] // flag=FALSE
			[ ] // flag1=FALSE
			[ ] // HFILE FileHandle
			[ ] // HANDLE hFile,hFile2
			[ ] // STRING sline,sline2
			[ ] // STRING sExcelName="CCScripting"
			[ ] // LIST OF ANYTYPE  lsExcelData
			[ ] // INTEGER i
			[ ] // BOOLEAN bDeleteStatus
			[ ] // STRING sClosigS1="</OFX>"
			[ ] // STRING  CommonTerm1="OFXHEADER:100"
			[ ] // HFILE hFile1
			[ ] // STRING CommonTerm2="<!-- ***** RECV from https://ccqdagf.intuit.com"
			[ ] // STRING sData="eeeeeee     eeeeee   eeeeee      eeeeeee  eeeeee    eeeeeeeeeee   eeeeeee  eeeeeeeeeee   eeeeee  eeeeeeeee  eeeeeeee  eeeeeeee  eeeeeeee   eeeeee   eeeeeeeee  eeeeeeee  eeeee  eeeeeee  eeee  eeeeeeeeee    rrrrrrrrr   tttttttttttttttttttt gsh gjhgd uihskdjjkhsk     jjkhdjkah   jkhdkjh jkhdjk   eeeee  eeeeeeeee  eeeeeeee  eeeeeeee  eeeeeeee   eeeeee   eeeeeeeee  eeeeeeee  eeeee  eeeeeee  eeee  eeeeeeeeee    rrrrrrrrr   tttttttttttttttttttt gsh gjhgd uihskdjjkhsk  eeeee  eeeeeeeee  eeeeeeee  eeeeeeee  eeeeeeee   eeeeee   eeeeeeeee  eeeeee"
			[ ] // STRING sOFXLOG=ROOT_PATH+"\"+sTabName
		[+] // if(SYS_DirExists(sOFXLOG))
			[ ] // bDeleteStatus=DeleteDir(sOFXLOG)
			[ ] // print(bDeleteStatus)
		[ ] // MakeDir(sOFXLOG)
		[ ] // lsExcelData=ReadExcelTable(sExcelName, sTabName)
		[ ] // // Fetch data  from the given sheet
		[+] // for(i=1;i<=ListCount(lsExcelData);i++)
			[ ] // lsData=lsExcelData[i]
			[ ] // print(lsData[1])
			[ ] // sleep(1)
			[+] // if(lsData[1]=="Branding")
				[ ] // hFile = FileOpen (APP_PATH + "\Data\TestData\"+sFileName, FM_READ) 
				[ ] // print(hFile)
				[+] // while (FileReadLine (hFile, sline))
					[+] // if(flag == TRUE)
						[+] // if MatchStr("*{CommonTerm1}*",sline)
								[ ] // flag1=TRUE
								[ ] // flag=FALSE
					[+] // else
						[+] // if MatchStr("*{"RECV from https://ofx-prod-brand"}*", sline)
								[ ] // flag=TRUE
								[ ] // 
					[+] // if(flag1 == TRUE)
							[+] // if MatchStr("*{sClosigS1}*", sline)
								[ ] // // Open file, append line, and close
								[ ] // FileHandle = FileOpen ("{ROOT_PATH}\{sTabName}\{lsData[1]}.txt", FM_APPEND)
								[ ] // FileWriteLine (FileHandle, sline)
								[ ] // FileClose (FileHandle)
								[ ] // flag1=FALSE
								[ ] // flag=FALSE
							[+] // else
								[ ] // // Open file, append line, and close
								[ ] // sleep(3)
								[ ] // FileHandle = FileOpen ("{ROOT_PATH}\{sTabName}\{lsData[1]}.txt", FM_APPEND)
								[ ] // FileWriteLine (FileHandle, sline)
								[ ] // sleep(1)
								[ ] // FileClose (FileHandle)
								[ ] // sleep(1)
			[+] // else
				[ ] // hFile = FileOpen (APP_PATH + "\Data\TestData\"+sFileName, FM_READ) 
				[+] // while (FileReadLine (hFile, sline))
					[+] // if(flag == TRUE)
						[+] // if MatchStr("*{CommonTerm}**",sline)
								[ ] // flag1=TRUE
								[ ] // flag=FALSE
					[+] // else
						[+] // if MatchStr("*{lsData[1]}*", sline)
							[ ] // flag=TRUE
					[+] // if(flag1 == TRUE)
							[+] // if MatchStr("*{sClosigS}*", sline)
								[ ] // // Open file, append line, and close
								[ ] // FileHandle = FileOpen ("{ROOT_PATH}\{sTabName}\{lsData[1]}.txt", FM_APPEND)
								[ ] // FileWriteLine (FileHandle, sline)
								[ ] // FileClose (FileHandle)
								[ ] // flag1=FALSE
								[ ] // flag = FALSE
								[+] // if(ListCount(lsData) > 1)
									[+] // if(lsData[2]=="CCAdminRepsonse")
										[ ] // hFile1 = FileOpen (APP_PATH + "\Data\TestData\"+sFileName, FM_UPDATE)
										[+] // while (FileReadLine (hFile1,sline2))
												[+] // if(MatchStr("*{CommonTerm2}*",sline2))
													[ ] // print("matched")
													[ ] // FileWriteLine (hFile1,sData)
													[+] // if FileExists("{ROOT_PATH}\{sTabName}\{lsData[1]}.txt")
														[ ] // SYS_MoveFile ("{ROOT_PATH}\{sTabName}\{lsData[1]}.txt", "{ROOT_PATH}\{sTabName}\{lsData[2]}.txt")
														[+] // if SYS_FileExists ("{ROOT_PATH}\{sTabName}\{lsData[1]}.txt")
															[ ] // Print ("File was moved") 
													[+] // else
														[ ] // print("File not exists")
													[ ] // FileClose (hFile1)
													[ ] // sleep(1)
													[ ] // //FileClose (FileHandle)
													[ ] // sleep(1)
													[ ] // break
												[+] // else
														[ ] // 
									[+] // else
										[ ] // break
								[ ] // break
							[+] // else
								[ ] // // Open file, append line, and close
								[ ] // sleep(3)
								[ ] // FileHandle = FileOpen ("{ROOT_PATH}\{sTabName}\{lsData[1]}.txt", FM_APPEND)
								[ ] // FileWriteLine (FileHandle, sline)
								[ ] // sleep(1)
								[ ] // FileClose (FileHandle)
								[ ] // sleep(1)
			[ ] // FileClose (hFile)
	[ ] // 
	[ ] // // ==========================================================
	[+] // // FUNCTION: OFXLogParsingFunctionForRequest()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will parse the OFX log file for Response
		[ ] // //
		[ ] // // PARAMETERS:		
		[ ] // //
		[ ] // // RETURNS:			INTEGER	PASS			 if all the file parse  successfully
		[ ] // //									FAIL  			 if any error occurs
		[ ] // //
		[ ] // // REVISION HISTORY:May 9, 2012  Puja Verma  Created
	[ ] // // ==========================================================
	[+] // public  OFXLogParsingFunctionForRequest(STRING sFileName,STRING sTabName )
		[+] // //VARIABLES
			[ ] // STRING sClosigS="</cc:CCWSRequest"
			[ ] // STRING  CommonTerm="<?xml version"
			[ ] // BOOLEAN flag,flag1
			[ ] // flag=FALSE
			[ ] // flag1=FALSE
			[ ] // HFILE FileHandle
			[ ] // HANDLE hFile,hFile2
			[ ] // STRING sline,sline2
			[ ] // STRING sExcelName="CCScripting"
			[ ] // LIST OF ANYTYPE  lsExcelData
			[ ] // INTEGER i
			[ ] // BOOLEAN bDeleteStatus
			[ ] // STRING sClosigS1="</OFX>"
			[ ] // STRING  CommonTerm1="OFXHEADER:100"
			[ ] // 
			[ ] // STRING sOFXLOG=ROOT_PATH+"\"+sTabName
		[+] // if(SYS_DirExists(sOFXLOG))
			[ ] // bDeleteStatus=DeleteDir(sOFXLOG)
			[ ] // print(bDeleteStatus)
		[ ] // MakeDir(sOFXLOG)
		[ ] // lsExcelData=ReadExcelTable(sExcelName, sTabName)
		[ ] // // Fetch data  from the given sheet
		[+] // for(i=1;i<=ListCount(lsExcelData);i++)
			[ ] // lsData=lsExcelData[i]
			[ ] // sleep(1)
			[+] // if(lsData[1]=="Branding")
				[ ] // hFile = FileOpen (APP_PATH + "\Data\TestData\"+sFileName, FM_READ) 
				[ ] // print(hFile)
				[+] // while (FileReadLine (hFile, sline))
					[+] // if(flag == TRUE)
						[+] // if MatchStr("*{CommonTerm1}*",sline)
								[ ] // flag1=TRUE
								[ ] // flag=FALSE
					[+] // else
						[+] // if MatchStr("*{"SEND to https://ofx-prod-brand"}*", sline)
								[ ] // flag=TRUE
								[ ] // 
					[+] // if(flag1 == TRUE)
							[+] // if MatchStr("*{sClosigS1}*", sline)
								[ ] // // Open file, append line, and close
								[ ] // FileHandle = FileOpen ("{ROOT_PATH}\{sTabName}\{lsData[1]}.txt", FM_APPEND)
								[ ] // FileWriteLine (FileHandle, sline)
								[ ] // FileClose (FileHandle)
								[ ] // flag1=FALSE
								[ ] // flag=FALSE
								[ ] // break
							[+] // else
								[ ] // // Open file, append line, and close
								[ ] // sleep(3)
								[ ] // FileHandle = FileOpen ("{ROOT_PATH}\{sTabName}\{lsData[1]}.txt", FM_APPEND)
								[ ] // FileWriteLine (FileHandle, sline)
								[ ] // sleep(1)
								[ ] // FileClose (FileHandle)
								[ ] // sleep(1)
			[+] // else
				[ ] // hFile = FileOpen (APP_PATH + "\Data\TestData\"+sFileName, FM_READ) 
				[ ] // print(hFile)
				[ ] // 
				[+] // while (FileReadLine (hFile, sline))
					[+] // if(flag == TRUE)
						[+] // if MatchStr("*{CommonTerm}**",sline)
								[ ] // flag1=TRUE
								[ ] // flag=FALSE
					[+] // else
						[+] // if MatchStr("*{lsData[1]}*", sline)
								[ ] // flag=TRUE
								[ ] // 
					[+] // if(flag1 == TRUE)
							[+] // if MatchStr("*{sClosigS}*", sline)
								[ ] // // Open file, append line, and close
								[ ] // FileHandle = FileOpen ("{ROOT_PATH}\{sTabName}\{lsData[1]}.txt", FM_APPEND)
								[ ] // FileWriteLine (FileHandle, sline)
								[ ] // FileClose (FileHandle)
								[ ] // flag1=FALSE
								[ ] // flag=FALSE
								[ ] // break
							[+] // else
								[ ] // // Open file, append line, and close
								[ ] // sleep(3)
								[ ] // FileHandle = FileOpen ("{ROOT_PATH}\{sTabName}\{lsData[1]}.txt", FM_APPEND)
								[ ] // FileWriteLine (FileHandle, sline)
								[ ] // sleep(1)
								[ ] // FileClose (FileHandle)
								[ ] // sleep(1)
				[ ] // 
			[ ] // FileClose (hFile)
	[ ] // 
[ ] // 
[+] // //********************** File Management Functions***********************************************************
	[ ] // 
	[+] //FUNCTION:FIleInpoutOutput() 
		[ ] //
		[ ] // DESCRIPTION:	This function will create backup for existing file and new file
		[ ] // 
		[ ] //
		[ ] // PARAMETERS IN:		STRING 	sFileType			What type of file Old file or new file 
		[ ] //										sFilePath			What is the source location of File
		[ ] //										sFileName		Name of file
		[ ] //										sLocation			Location of File
		[ ] //										sFile				New or Existing file
		[ ] //										sAddChekcbox	Check box to add date 
		[ ] 
		[ ] // RETURNS:				INTEGER		PASS  = If backup and restore validate properly
		[ ] //											FAIL   = if any error occurs or validation  fail
		[ ] //
		[ ] // REVISION HISTORY:	1/04/2011   Created By	Puja Verma
		[ ] //	 									   
	[ ] //===========================================================
	[+] public INTEGER FIleInputOutput(STRING sFileType,STRING sFilePath,STRING sFileName,STRING sLocation,STRING AddDateCheck)
		[+] // Variable declaration
			[ ] INTEGER iFileResult,iAddAccount,j
			[ ] STRING CheckBoxStatus="1"
			[ ] STRING sFileWithPath = sFilePath + "\" + sFileName + ".QDF"
			[ ] STRING  sCmdLine = "{QUICKEN_ROOT}\qw.exe"
			[ ] STRING sSmokeData = "SmokeTestData"
			[ ] STRING sAccountWorksheet = "Account"
			[ ] LIST OF ANYTYPE  lsExcelData
			[ ] LIST OF STRING lsAddAccount,IsNetWorth
			[ ] STRING sHandle,sActual,NetWorthActual
			[ ] STRING sNetWorth="OVERALL TOTAL"
			[ ] 
		[+] do
			[ ] 
			[ ] //Switch case for Existing file or new created file
			[+] switch(sFileType)
				[+] case ("CreateFile")
					[ ] sFileWithPath = sFilePath + "\" + sFileName + ".QDF"
					[ ] iFileResult=DataFileCreate(sFileName,sFilePath)
					[ ] ListAppend(lscontent, sFileWithPath) 
					[+] if(iFileResult==PASS)
						[ ] lsExcelData=ReadExcelTable(sSmokeData, sAccountWorksheet)
						[ ] // Fetch 1st row from the given sheet
						[ ] lsAddAccount=lsExcelData[1]
						[ ] // Add Checking Account
						[ ] iAddAccount = AddManualSpendingAccount(lsAddAccount[1], lsAddAccount[2], lsAddAccount[3], lsAddAccount[4])
						[ ] // Report Status if checking Account is created
						[+] if(iAddAccount==PASS)
							[ ] ReportStatus("Validate Backup and restore",PASS,"Test Data has created properly!")
							[ ] 
						[+] else
							[ ] ReportStatus("Validate Backup and restore",FAIL,"Test Data has not created properly!")
							[ ] iFunctionResult=FAIL
					[+] else
						[ ] iFunctionResult=FAIL
				[ ] 
				[+] case ("ExistingFile")
					[ ] //Checking mentioned file exist or not
					[+] if(!FileExists(sFileWithPath))
						[ ] ReportStatus("Open File ",FAIL,"File did not present in required location")
						[ ] iFunctionResult=FAIL
						[ ] 
					[ ] iFileResult=OpenDataFile(sFileName,sFilePath)
					[+] if(iFileResult==PASS)
						[ ] ReportStatus("Open File ",PASS,"File opened successfully")
						[ ] 
					[+] else
						[ ] iFunctionResult=FAIL
					[ ] 
				[+] default
					[ ] iFunctionResult = FAIL
				[ ] 
			[ ] sleep(2)
			[ ] QuickenWindow.SetActive()
			[ ] QuickenWindow.File.Click()
			[ ] QuickenWindow.File.BackupAndRestore.Click()
			[ ] QuickenWindow.File.BackupAndRestore.BackUpQuickenFile.Select()
			[+] if(QuickenBackup.Exists(10))
				[ ] QuickenBackup.BackupFile.SetText(sLocation)
				[ ] 
				[ ] bMatch=MatchStr(AddDateCheck,CheckBoxStatus)
				[ ] 
				[+] if(bMatch==true)
					[+] if(!QuickenBackup.AddDateToBackupFileName.IsChecked ())
						[ ] QuickenBackup.AddDateToBackupFileName.Check()
						[ ] iFunctionResult=PASS
					[+] else
						[ ] iFunctionResult=PASS
				[+] else
					[+] if(QuickenBackup.AddDateToBackupFileName.IsChecked ())
						[ ] QuickenBackup.AddDateToBackupFileName.Uncheck()
						[ ] iFunctionResult=PASS
					[+] else
						[ ] iFunctionResult=PASS
			[+] else
				[ ] ReportStatus("Validate Backup and restore", FAIL,"QuickenBackup popup did not appear" )
				[ ] iFunctionResult=FAIL
				[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult=FAIL
		[ ] return iFunctionResult
	[ ] //==========================================================
	[ ] // =========================================================
	[+] // FUNCTION: BeaconVerification()
		[ ] // 
		[ ] // DESCRIPTION:
		[ ] // This function will verify download transaction count , Ending balance,Online ending balance and Online Center compare to register button
		[ ] // 
		[ ] // PARAMETERS:		
		[ ] // 
		[ ] // RETURNS:			INTEGER	PASS			 if all the verifycation match  successfully
		[ ] // FAIL  			 if any error occurs
		[ ] // 
		[ ] // REVISION HISTORY:jun 15 2011  Puja Verma  Created
		[ ] // June 8 2012  Udita Dube	  Updated
	[ ] // ==========================================================
	[+] public INTEGER BeaconVerification(STRING sDownloadedTrxn,STRING sEndingbalance,STRING sOnlineBalance)
		[+] //VARIABLE 
			[ ] INTEGER iXCords,iYCords
			[ ] iXCords = 38
			[ ] iYCords = 5
			[ ] STRING sTrnxCount,sTotalTxnCount
			[ ] Agent.SetOption(OPT_NO_ICONIC_MESSAGE_BOXES,True)
			[ ] 
		[+] do
			[+] if(QuickenWindow.Exists(15) == TRUE)
				[ ] QuickenWindow.SetActive()
				[ ] 
				[ ] // Turning On pop up register mode
				[+] if(QuickenWindow.Exists(SHORT_SLEEP))
					[ ] UsePopupRegister("OFF")			
				[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.QWAcctBarHolder.QWListViewer1.ListBox.Click(1,iXCords, iYCords)
				[ ] 
				[ ] //Getting Total Downloaded transactions
				[ ] sTrnxCount=MDIClient.AccountRegister.StaticText1.QWinChild.DownloadedTransactions.GetCaption()
				[ ] 
				[ ] bMatch = MatchStr("*{sDownloadedTrxn}*",sTrnxCount)
				[ ] 
				[+] if(bMatch == TRUE)
					[ ] ReportStatus("Validate Download transaction", PASS, " Transactions Downloaded count {sDownloadedTrxn}  matching successfully")
					[ ] iFunctionResult=PASS
					[ ] 
				[+] else
					[ ] ReportStatus("Validate Download transaction", FAIL, "Download transaction {sTrnxCount} and {sDownloadedTrxn}  not matching successfully")
					[ ] iFunctionResult=FAIL
				[ ] // Accepting all downloaded transactions
				[+] if(MDIClient.AccountRegister.StaticText1.QWinChild.DownloadedTransactions.Exists(SHORT_SLEEP))
					[ ] MDIClient.AccountRegister.StaticText1.QWinChild.DownloadedTransactions.Click()
					[ ] 
					[+] if(MDIClient.AccountRegister.QWSnapHolder1.StaticText2.AcceptAll.Exists(SHORT_SLEEP))
						[ ] 
						[ ] BOOLEAN bButnStatus=MDIClient.AccountRegister.QWSnapHolder1.StaticText2.AcceptAll.IsEnabled()
						[ ] 
						[ ] // print(bButnStatus)
						[+] if(bButnStatus==TRUE)
							[ ] ReportStatus("Verify Accept All Button in C2R",PASS,"Accept All button is enabled in C2R")
							[ ] MDIClient.AccountRegister.QWSnapHolder1.StaticText2.AcceptAll.Click()
						[+] else
							[ ] iFunctionResult=PASS
					[+] else
						[ ] iFunctionResult=PASS
				[ ] 
				[+] if(RenameYourPayees.Exists(2))
					[ ] RenameYourPayees.SetActive()
					[ ] RenameYourPayees.ApplySettings.Click()
				[ ] 
				[+] if(MDIClient.AccountRegister.Balances.EndingBalance.Exists(3))
					[ ] STRING Endingbalance= MDIClient.AccountRegister.Balances.EndingBalance.GetText()
					[ ] bMatch = MatchStr(sEndingbalance, Endingbalance)
					[+] if(bMatch == TRUE)
						[ ] ReportStatus("Validate Ending balance", PASS, "Ending balance {sEndingbalance}l and expected {Endingbalance} matching successfully")
						[ ] iFunctionResult=PASS
					[+] else
						[ ] ReportStatus("Validate Ending balance", FAIL, "Ending balance actual and expected not matching successfully")
						[ ] iFunctionResult=FAIL
				[+] else
					[ ] ReportStatus("Validate Ending balance", FAIL, "Ending balance field is not present")
					[ ] iFunctionResult=FAIL
					[ ] 
				[ ] 
				[ ] // //Verifying Online balances
				[ ] // STRING OnlineBalance =MDIClient.AccountRegister.Balances.OnlineBalance.GetText()
				[ ] // bMatch = MatchStr(sOnlineBalance, OnlineBalance)
				[+] // if(bMatch == TRUE)
					[ ] // BankingPopUp.Close()
					[ ] // ReportStatus("Validate Online Balance", PASS, "Oline balance Actual {sOnlineBalance} and expected {OnlineBalance} matching successfully")
					[ ] // iFunctionResult=PASS
				[+] // else
					[ ] // ReportStatus("Validate Online Balance", FAIL, "Oline balance Actual {sOnlineBalance} and expected {OnlineBalance} not matching successfully")
					[ ] // iFunctionResult=FAIL
					[ ] // 
				[ ] 
				[ ] //Verifying online center register button
				[ ] QuickenWindow.SetActive()
				[ ] QuickenWindow.Tools.Click()
				[ ] QuickenWindow.Tools.OnlineCenter.Select()
				[ ] 
				[ ] WaitForState(OnlineCenter,TRUE,5)
				[ ] 
				[ ] OnlineCenter.SetActive()
				[ ] BOOLEAN bEnabled=OnlineCenter.CompareToRegister.IsEnabled()
				[+] if(bEnabled==FALSE)
					[ ] ReportStatus("Verify Caompare to register button ", PASS, "Caompare to register Button is disable")
					[ ] iFunctionResult=PASS
					[ ] OnlineCenter.Close()
				[+] else
					[ ] ReportStatus("Verify Caompare to register button ", FAIL, "Caompare to register button is enabled")
					[ ] iFunctionResult=FAIL
					[ ] OnlineCenter.Close()
					[ ] 
					[ ] 
				[ ] 
			[+] else
				[ ] ReportStatus("Quicken is not available",FAIL,"Quicken is not available")
				[ ] iFunctionResult =FAIL
		[+] except
			[+] if(QuickenWindow.Exists(SHORT_SLEEP))
				[ ] // QuickenMainWindow.Exit()
			[ ] iFunctionResult=FAIL
		[ ] return iFunctionResult
		[ ] 
		[ ] 
	[ ] // ==========================================================
	[ ] 
	[ ] 
	[ ] 
	[ ] 
[ ] // 
[+] // //********************** Rental Property Functions*************************************************************
	[ ] // ==========================================================
	[+] // FUNCTION: AddRentalProperty()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will Add Rental Property
		[ ] //
		[ ] // PARAMETERS:			List of AnyType		AddRentalProperty
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If Property added successfully
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //Date                             Oct 3, 2012		
		[ ] //Author                          Mukesh 	
		[ ] 
	[ ] // ==========================================================
	[+] public INTEGER AddRentalProperty (LIST OF ANYTYPE lsAddProperty)
		[ ] // Variable Declaration
		[ ] INTEGER iNavigate,iCounter
		[ ] STRING  hWnd,sExpected, sActual
		[ ] BOOLEAN bAssert, bEnabled
		[ ] 
		[+] do
			[ ] iNavigate=NavigateQuickenTab(sTAB_RENTAL_PROPERTY,sTAB_RENT_CENTER)
			[+] if (iNavigate==PASS)
					[ ] //############## Verify Property added in Propertylist############
					[ ] QuickenWindow.SetActive()
					[ ] QuickenMainWindow.QWNavigator1.PropertiesTenants.Click()
					[ ] sleep(1)
					[ ] QuickenMainWindow.QWNavigator1.TypeKeys(Replicate (KEY_DN, 2))	
					[ ] sleep(1)
					[ ] QuickenMainWindow.QWNavigator1.TypeKeys(KEY_ENTER)
					[ ] 
					[+] if  (PropertyListTable.Exists(5))
						[ ] hWnd = Str(PropertyListTable.PropertyList.QWListViewer1.ListBox1.GetHandle())
						[ ] sExpected=  lsAddProperty[3]+"  @" +lsAddProperty[2]
						[ ] 
						[+] for( iCounter=0;iCounter<PropertyListTable.PropertyList.QWListViewer1.ListBox1.GetItemCount() +1;++iCounter)
							[ ] sActual = QwAutoExecuteCommand("LISTBOX_GETFULLROW", hWnd,  "{iCounter}")
							[ ] bAssert = MatchStr("*{sExpected}*",sActual)
							[+] if ( bAssert)
								[ ] break
						[+] if ( bAssert)
							[ ] ReportStatus("Verify Property added", PASS, "Property {lsAddProperty[1]} already exists.") 
							[ ] iFunctionResult = PASS
							[ ] 
						[+] else
							[ ] WaitForState(PropertyListTable,TRUE,1)
							[ ] PropertyListTable.SetActive()
							[ ] PropertyListTable.New.Click()
							[ ] WaitForState(AddEditRentalProperty,TRUE,1)
							[+] if (AddEditRentalProperty.Exists(SHORT_SLEEP))
								[ ] AddEditRentalProperty.AddEditRentalPropertyName.SetText(lsAddProperty[1])
								[ ] AddEditRentalProperty.AddEditRentalPropertyTag.SetText(lsAddProperty[2])
								[ ] AddEditRentalProperty.AddEditRentalPropertyStreet.SetText(lsAddProperty[3])
								[ ] AddEditRentalProperty.OK.Click()
								[ ] WaitForState(AddEditRentalProperty,FALSE,1)
								[ ] WaitForState(PropertyListTable,TRUE,1)
								[ ] PropertyListTable.SetActive()
								[+] if  (PropertyListTable.Exists(2))
									[ ] hWnd = Str(PropertyListTable.PropertyList.QWListViewer1.ListBox1.GetHandle())
									[ ] sExpected=  lsAddProperty[3]+"  @" +lsAddProperty[2]
									[+] for( iCounter=0;iCounter<PropertyListTable.PropertyList.QWListViewer1.ListBox1.GetItemCount() +1;++iCounter)
										[ ] sActual = QwAutoExecuteCommand("LISTBOX_GETFULLROW", hWnd,  "{iCounter}")
										[ ] bAssert = MatchStr("*{sExpected}*",sActual)
										[+] if ( bAssert)
											[ ] break
									[+] if ( bAssert)
										[ ] ReportStatus("Verify Property added", PASS, "Property {lsAddProperty[1]} is added.") 
										[ ] iFunctionResult = PASS
									[+] else
										[ ] ReportStatus("Verify Property added", FAIL, "Property {lsAddProperty[1]} is not added.") 
										[ ] iFunctionResult = FAIL
								[+] else
									[ ] ReportStatus("Verify Property list appears", FAIL, "Property list didn't appear.") 
								[ ] 
							[+] else
								[ ] ReportStatus("Verify AddEditRentalProperty dialog appears", FAIL, "AddEditRentalProperty dialog didn't appear.") 
					[+] else
						[ ] ReportStatus("Verify Property list appears", FAIL, "Property list didn't appear.") 
					[ ] 
				[ ] 
			[+] else
				[ ] ReportStatus("Navigate to {sTAB_RENTAL_PROPERTY} > {sTAB_RENT_CENTER} ", FAIL, "Navigate to {sTAB_RENTAL_PROPERTY} > {sTAB_RENT_CENTER} Not displayed") 
				[ ] iFunctionResult = FAIL
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult = FAIL
		[ ] PropertyListTable.Done.Click()
		[ ] WaitForState(PropertyListTable,False,2)
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: DeleteRentalProperty()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will Add Rental Property
		[ ] //
		[ ] // PARAMETERS:			List of AnyType		lsAddProperty
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If Property deleted successfully
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //Date                             Oct 5, 2012		
		[ ] //Author                          Mukesh 	
		[ ] 
	[ ] // ==========================================================
	[+] public INTEGER DeleteRentalProperty (STRING lsAddProperty)
		[ ] INTEGER iNavigate
		[ ] STRING  hWnd,sExpected, sActual
		[ ] BOOLEAN bAssert, bEnabled
		[+] do
					[ ] iNavigate=NavigateQuickenTab(sTAB_RENTAL_PROPERTY,sTAB_RENT_CENTER)
					[+] if (iNavigate==0)
						[ ] ReportStatus("Navigate to {sTAB_RENTAL_PROPERTY} > {sTAB_RENT_CENTER} ", PASS, "Navigate to {sTAB_RENTAL_PROPERTY} > {sTAB_RENT_CENTER} displayed.") 
						[+] if (QuickenMainWindow.QWNavigator1.PropertiesTenants.Exists())
							[ ] QuickenMainWindow.QWNavigator1.PropertiesTenants.Click()
							[ ] sleep(1)
							[ ] QuickenMainWindow.QWNavigator1.TypeKeys(KEY_DN)
							[ ] QuickenMainWindow.QWNavigator1.TypeKeys(KEY_DN)
							[ ] sleep(1)
							[ ] QuickenMainWindow.QWNavigator1.TypeKeys(KEY_ENTER)
							[ ] // //############## Verify property exists in the Propertylist############
							[ ] hWnd = Str(PropertyListTable.PropertyList.QWListViewer1.ListBox1.GetHandle())
							[ ] sActual= QwAutoExecuteCommand("LISTBOX_GETFULLROW", hWnd,  "0")
							[ ] sExpected= "@" + lsAddProperty[1]+"@@@"
							[ ] bAssert = MatchStr("*{sExpected}*",sActual)
							[+] if ( bAssert == TRUE)
								[ ] ReportStatus("Verify property exists in property list table.", PASS, "Property {Str(Val(lsAddProperty[1]), NULL, 1)} exists.") 
								[ ] PropertyListTable.Delete.Exists(2)
							[+] else
								[ ] ReportStatus("Verify property exists in property list table.", PASS, "Property {Str(Val(lsAddProperty[1]), NULL, 1)} does not exist.") 
								[ ] iFunctionResult = FAIL
								[ ] ////#########The delete property code should be under the above IF condition but not done So as QWAuto is not working Oct 5, 2012#####/////
							[+] if (PropertyListTable.Delete.IsEnabled())
								[ ] ReportStatus(" Verify Delete button enabled on PropertyList screen", PASS, "Delete button enabled on Rental Property screen.") 
								[ ] hWnd=NULL
								[ ] sActual=NULL
								[ ] bAssert=False
								[ ] // //############## Verify property deleted from the Propertylist############
								[ ] PropertyListTable.Delete.Click()
								[ ] MessageBox.Yes.Click()
								[ ] hWnd = Str(PropertyListTable.PropertyList.QWListViewer1.ListBox1.GetHandle())
								[ ] sActual= QwAutoExecuteCommand("LISTBOX_GETFULLROW", hWnd,  "0")
								[ ] sExpected= "@" + lsAddProperty[1]+"@@@"
								[ ] bAssert = MatchStr("*{sExpected}*",sActual)
								[+] if ( bAssert == TRUE)
									[ ] ReportStatus("Verify Property deleted", FAIL, "Property {Str(Val(lsAddProperty[1]), NULL, 1)} did not delete.") 
									[ ] iFunctionResult = FAIL
								[+] else
									[ ] ReportStatus("Verify Property deleted", PASS, "Expected -  {sExpected} is deleted.") 
									[ ] iFunctionResult = PASS
								[ ] 
							[+] else
								[ ] ReportStatus(" Verify Delete button enabled on PropertyList screen", FAIL, "Delete  button is not enabled on Rental Property screen.") 
								[ ] iFunctionResult = FAIL
								[ ] 
						[ ] 
		[+] except
			[ ] iFunctionResult = FAIL
		[ ] PropertyListTable.Done.Click()
		[ ] WaitForState(PropertyListTable,False,2)
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: AddRentalPropertyTenant()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will Add Rental Property
		[ ] //
		[ ] // PARAMETERS:			List of AnyType		lsAddTenant
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If Tenant added successfully
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //Date                             Oct 18, 2012		
		[ ] //Author                          Mukesh 	
		[ ] 
	[ ] // ==========================================================
	[+] public INTEGER AddRentalPropertyTenant (LIST OF ANYTYPE lsAddTenant)
		[ ] // Variable Declaration
		[ ] INTEGER iCounter
		[ ] STRING  hWnd,sExpected, sActual
		[ ] 
		[+] do
				[ ] QuickenWindow.SetActive()
				[ ] NavigateQuickenTab(sTAB_RENTAL_PROPERTY,sTAB_RENT_CENTER)
				[ ] sleep(3)
				[ ] QuickenMainWindow.QWNavigator1.PropertiesTenants.DoubleClick()
				[ ] sleep(2)
				[ ] QuickenMainWindow.QWNavigator1.PropertiesTenants.TypeKeys(Replicate (KEY_DN, 4))	
				[ ] sleep(2)
				[ ] QuickenMainWindow.QWNavigator1.PropertiesTenants.TypeKeys(KEY_ENTER)
				[ ] 
				[+] if  (TenantList.Exists(SHORT_SLEEP))
					[ ] TenantList.SetActive()
					[ ] hWnd = Str(TenantList.ChildTenantList.QWListViewer1.ListBox1.GetHandle())
					[ ] sExpected=  lsAddTenant[1]+"@"+lsAddTenant[2]
					[+] for (iCounter=0 ; iCounter< TenantList.ChildTenantList.QWListViewer1.ListBox1.GetItemCount()+1 ;  ++iCounter)
						[ ] sActual= QwAutoExecuteCommand("LISTBOX_GETFULLROW", hWnd,  Str(iCounter))
						[ ] bMatch=MatchStr("*{sExpected}*" , sActual)
						[+] if (bMatch)
							[ ] iFunctionResult = PASS
							[ ] break
					[+] if (bMatch==FALSE)
						[ ] TenantList.SetActive()
						[ ] TenantList.Done.Click()
						[ ] WaitForState(TenantList,False,5)
						[ ] sleep(3)
						[ ] QuickenWindow.SetActive()
						[ ] 
						[ ] QuickenMainWindow.QWNavigator1.PropertiesTenants.DoubleClick()
						[ ] sleep(2)
						[ ] QuickenMainWindow.QWNavigator1.PropertiesTenants.TypeKeys(Replicate (KEY_DN, 3))	
						[ ] sleep(2)
						[ ] QuickenMainWindow.QWNavigator1.PropertiesTenants.TypeKeys(KEY_ENTER)
						[ ] 
						[+] if (DlgAddRentalPropertyTenant.Exists(MEDIUM_SLEEP))
							[ ] DlgAddRentalPropertyTenant.SetActive()
							[ ] DlgAddRentalPropertyTenant.AddEditTenantDetails.QWinChild1.EditTenantName.SetText(lsAddTenant[1])
							[ ] DlgAddRentalPropertyTenant.AddEditTenantDetails.QWinChild1.PopupListProperty.SetFocus()
							[ ] DlgAddRentalPropertyTenant.AddEditTenantDetails.QWinChild1.PopupListProperty.Select(lsAddTenant[2])
							[ ] DlgAddRentalPropertyTenant.AddEditTenantDetails.QWinChild1.EditRentAmount.SetText(lsAddTenant[3])
							[ ] //DlgAddRentalPropertyTenant.AddEditTenantDetails.QWinChild1.PopupListAccountName.VerifyEnabled(2)
							[ ] //DlgAddRentalPropertyTenant.AddEditTenantDetails.QWinChild1.PopupListAccountName.SetFocus()
							[ ] DlgAddRentalPropertyTenant.AddEditTenantDetails.QWinChild1.PopupListAccountName.Select(lsAddTenant[4])
							[ ] DlgAddRentalPropertyTenant.OK.Click()
							[ ] WaitForState(DlgAddRentalPropertyTenant,False,2)
							[ ] // #################Verify  Tenant in Tenant List###############///
							[ ] WaitForState(QuickenMainWindow.QWNavigator1.PropertiesTenants,True,2)
							[ ] QuickenMainWindow.QWNavigator1.PropertiesTenants.Click()
							[ ] sleep(1)
							[ ] QuickenMainWindow.QWNavigator1.PropertiesTenants.TypeKeys(Replicate (KEY_DN, 4))	
							[ ] sleep(1)
							[ ] QuickenMainWindow.QWNavigator1.PropertiesTenants.TypeKeys(KEY_ENTER)
							[+] if  (TenantList.Exists(SHORT_SLEEP))
								[ ] hWnd = Str(TenantList.ChildTenantList.QWListViewer1.ListBox1.GetHandle())
								[ ] sExpected=  lsAddTenant[1]+"@"+lsAddTenant[2]
								[+] for (iCounter=0 ; iCounter< TenantList.ChildTenantList.QWListViewer1.ListBox1.GetItemCount()+1 ;  ++iCounter)
									[ ] sActual= QwAutoExecuteCommand("LISTBOX_GETFULLROW", hWnd,  Str(iCounter))
									[ ] bMatch=MatchStr("*{sExpected}*" , sActual)
									[+] if (bMatch)
										[ ] break
								[ ] 
								[+] if ( bMatch == TRUE)
									[ ] ReportStatus("Verify Tenant added ", PASS, "Tenant {lsAddTenant[1]} added in TenantList.") 
									[ ] iFunctionResult = PASS
								[+] else
									[ ] ReportStatus("Verify Tenant added", FAIL, "Tenant {lsAddTenant[1]} did not add in TenantList.") 
									[ ] iFunctionResult = FAIL
							[+] else
								[ ] ReportStatus(" Verify TenantList ", FAIL, "TenantList did not appear and Item {lsAddTenant[1]}  couldn't be verified.") 
								[ ] iFunctionResult = FAIL
							[ ] TenantList.SetActive()
							[ ] TenantList.Done.Click()
							[ ] WaitForState(TenantList,False,2)
							[ ] 
						[+] else
							[ ] ReportStatus(" Verify AddRentalPropertyTenant ", FAIL, "AddRentalPropertyTenant did not appear.") 
							[ ] iFunctionResult = FAIL
					[+] else
						[ ] ReportStatus("Verify Tenant added ", PASS, "Tenant {lsAddTenant[1]} already added in TenantList.") 
						[ ] iFunctionResult = PASS
						[ ] 
				[+] else
					[ ] ReportStatus("Verify Tenant list exists ", FAIL, "TenantList didn't appear.") 
					[ ] iFunctionResult = FAIL
		[+] except
			[ ] iFunctionResult = FAIL
		[+] if (TenantList.Exists(SHORT_SLEEP))
			[ ] TenantList.SetActive()
			[ ] TenantList.Done.Click()
			[ ] WaitForState(TenantList,False,2)
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: DeleteRentalPropertyTenant()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will Add Rental Property
		[ ] //
		[ ] // PARAMETERS:			List of AnyType		lsAddTenant
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If Property added successfully
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //Date                             Oct 5, 2012		
		[ ] //Author                          Mukesh 	
		[ ] 
	[ ] // ==========================================================
	[+] public INTEGER DeleteRentalPropertyTenant (LIST OF ANYTYPE lsAddTenant)
		[ ] INTEGER iNavigate
		[ ] STRING  hWnd,sExpected, sActual, sExpectedErrorMsg, sActualErrorMsg
		[ ] BOOLEAN bAssert, bEnabled
		[+] do
				[ ] // #################Verify Tenant deletion from Tenant List###############///
				[ ] WaitForState(QuickenMainWindow,True,2)
				[ ] QuickenWindow.SetActive()
				[ ] NavigateQuickenTab(sTAB_RENTAL_PROPERTY,sTAB_RENT_CENTER)
				[ ] QuickenWindow.SetActive()
				[ ] QuickenMainWindow.QWNavigator1.PropertiesTenants.Click()
				[ ] sleep(1)
				[ ] QuickenMainWindow.QWNavigator1.PropertiesTenants.TypeKeys(Replicate (KEY_DN, 4))	
				[ ] QuickenMainWindow.QWNavigator1.PropertiesTenants.TypeKeys(KEY_ENTER)
				[ ] sleep(3)
				[ ] WaitForState(TenantList,true,2)
				[ ] TenantList.SetActive()
				[ ] // //############## Verify Tenant exists in the TenantList############
				[ ] hWnd=NULL
				[ ] sActual=NULL
				[ ] bAssert=False
				[ ] hWnd = Str(TenantList.ChildTenantList.QWListViewer1.ListBox1.GetHandle())
				[ ] sActual= QwAutoExecuteCommand("LISTBOX_GETFULLROW", hWnd,  "0")
				[ ] sExpected=  lsAddTenant[1]+"@"+lsAddTenant[2]
				[ ] bAssert = MatchStr("*{sExpected}*",sActual)
				[+] if ( bAssert == TRUE)
					[ ] ReportStatus("Verify Tenant exists", PASS, "Expected -  {sExpected} Tenant exists.") 
				[+] else
					[ ] ReportStatus("Verify Tenant exists", FAIL, "Expected -  {sExpected} Tenant does not exist.") 
				[ ] WaitForState(TenantList,true,1)
				[ ] TenantList.SetActive()
				[ ] TenantList.Delete.Exists()
				[+] if (TenantList.Delete.IsEnabled())
					[ ] ReportStatus(" Verify Delete button enabled on TenantList screen", PASS, "Delete button enabled on Tenant List screen.") 
					[ ] hWnd=NULL
					[ ] sActual=NULL
					[ ] bAssert=False
					[ ] // //############## Verify Tenant deleted from the TenantList############
					[ ] TenantList.Delete.Click()
					[ ] WaitForState(AlertMessage,True,2)
					[ ] sExpectedErrorMsg="Are you sure you want to delete the tenant named {lsAddTenant[1]}?"
					[ ] sActualErrorMsg=AlertMessage.MessageText.GetText()
					[+] if ( sActualErrorMsg == sExpectedErrorMsg)
						[ ] ReportStatus("Verify Tenant deletion error message", PASS, " {sExpectedErrorMsg} error message displayed.") 
						[ ] AlertMessage.SetActive()
						[ ] AlertMessage.Yes.Click()
						[ ] WaitForState(AlertMessage,False,1)
						[ ] hWnd=NULL
						[ ] sActual=NULL
						[ ] bAssert=False
						[ ] hWnd = Str(TenantList.ChildTenantList.QWListViewer1.ListBox1.GetHandle())
						[ ] sActual= QwAutoExecuteCommand("LISTBOX_GETFULLROW", hWnd,  "0")
						[ ] sExpected=  lsAddTenant[1]+"@"+lsAddTenant[2]
						[ ] bAssert = MatchStr("*{sExpected}*",sActual)
						[+] if ( bAssert == TRUE)
							[ ] ReportStatus("Verify Tenant deleted", FAIL, "Property {lsAddTenant[1]} Tenant not deleted.") 
							[ ] iFunctionResult = FAIL
						[+] else
							[ ] ReportStatus("Verify Tenant deleted", PASS, "Expected -  {sExpected} Tenant is deleted.") 
							[ ] iFunctionResult = PASS
							[ ] 
						[ ] 
					[+] else
						[ ] ReportStatus("Verify Tenant deletion error message", FAIL, " {sActualErrorMsg}  expected error message not displayed.") 
					[ ] TenantList.SetActive()
					[ ] TenantList.Done.Click()
					[ ] WaitForState(TenantList,False,1)
				[+] else
					[ ] ReportStatus(" Verify Delete button enabled on TenantList screen", FAIL, "Delete button not enabled on Tenant List screen.") 
					[ ] TenantList.Done.Click()
					[ ] WaitForState(TenantList,False,2)
		[+] except
			[ ] iFunctionResult = FAIL
			[ ] TenantList.Done.Click()
			[ ] WaitForState(PropertyListTable,False,2)
		[ ] return iFunctionResult
		[ ] 
	[ ] 
[ ] // 
[+] // //********************** Business Functions********************************************************************
	[ ] // 
	[ ] // ==========================================================
	[+] // FUNCTION: AddBusiness()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will Add a Business
		[ ] //
		[ ] // PARAMETERS:			String	sBusiness
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If Business added successfully
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //Date                             Nov 20, 2012		DlgManageBusinessInformation
		[ ] //Author                          Mukesh 	
		[ ] 
	[ ] // ==========================================================
	[+] public INTEGER AddBusiness (STRING sBusiness, STRING sBusinessTag)
		[ ] INTEGER iNavigate,i,iCount
		[ ] BOOLEAN bAssert
		[ ] STRING  hWnd,sExpected, sActual, sExpectedErrorMsg, sActualErrorMsg
		[+] do
			[ ] QuickenWindow.SetActive()
			[ ] SetViewMode(VIEW_CLASSIC_MENU)
			[ ] sleep(1)
			[ ] NavigateQuickenTab(sTAB_BUSINESS,sTAB_PROFIT_LOSS)
			[ ] QuickenWindow.SetActive()
			[ ] WaitForState(Business,TRUE,1)
			[+] if (Business.Exists(SHORT_SLEEP))
				[ ] QuickenWindow.SetActive()
				[ ] QuickenWindow.Business.Click()
				[ ] QuickenWindow.Business.ManageBusinessInformation.Select()
				[ ] WaitForState(DlgManageBusinessInformation,TRUE,1)
				[+] if (DlgManageBusinessInformation.Exists(SHORT_SLEEP))
					[ ] hWnd=NULL
					[ ] sActual=NULL
					[ ] bAssert=False
					[ ] hWnd = Str(DlgManageBusinessInformation.ManageBusinessInformationList.QWListViewer1.ListBox1.GetHandle())
					[ ] sActual= QwAutoExecuteCommand("LISTBOX_GETFULLROW", hWnd,  "0")
					[ ] bAssert = MatchStr("*{sBusiness}*{sBusinessTag}*",sActual)
					[+] if ( bAssert == TRUE)
						[ ] ReportStatus("Verify Business exists.", PASS, " {sBusiness} Already exists.") 
						[ ] iFunctionResult = PASS
					[+] else
						[ ] WaitForState(DlgManageBusinessInformation,TRUE,1)
						[ ] DlgManageBusinessInformation.SetActive()
						[ ] DlgManageBusinessInformation.ManageBusinessInformationList.AddButton.Click()
						[ ] WaitForState(DlgAddBusiness,TRUE,1)
						[+] if (DlgAddBusiness.Exists(SHORT_SLEEP))
							[ ] DlgAddBusiness.SetActive()
							[ ] DlgAddBusiness.BusinessNameTextField.SetText(sBusiness)
							[ ] DlgAddBusiness.BusinessTagTextField.SetText(sBusinessTag)
							[ ] DlgAddBusiness.OKButton.Click()
						[+] else
							[ ] ReportStatus("Verify Dialog Add Business exists.", FAIL, " Dialog Add Business does not exist.") 
							[ ] iFunctionResult = FAIL
						[ ] WaitForState(DlgAddBusiness,FALSE,1)
						[ ] WaitForState(DlgManageBusinessInformation,TRUE,1)
						[ ] DlgManageBusinessInformation.SetActive()
						[ ] hWnd=NULL
						[ ] sActual=NULL
						[ ] bAssert=False
						[ ] iCount=DlgManageBusinessInformation.ManageBusinessInformationList.QWListViewer1.ListBox1.GetItemCount()
						[+] for(i=0;i<=iCount;i++)
							[ ] hWnd = Str(DlgManageBusinessInformation.ManageBusinessInformationList.QWListViewer1.ListBox1.GetHandle())
							[ ] sActual= QwAutoExecuteCommand("LISTBOX_GETFULLROW", hWnd,  str(i))
							[ ] bAssert = MatchStr("*{sBusiness}*{sBusinessTag}*",sActual)
							[+] if ( bAssert == TRUE)
								[ ] ReportStatus("Verify Business added.", PASS, " {sBusiness} added.") 
								[ ] iFunctionResult = PASS
								[ ] break
							[+] else
								[+] if(i==iCount)
									[ ] ReportStatus("Verify Business added.", FAIL, " {sBusiness} didn't add.") 
									[ ] iFunctionResult = FAIL
					[ ] DlgManageBusinessInformation.DoneButton.Click()
					[ ] WaitForState(DlgManageBusinessInformation,FALSE,1)
				[+] else
					[ ] ReportStatus("Verify Dialog Manage Business Information  exists.", FAIL, " Dialog Manage Business Information does not exist.") 
					[ ] 
			[+] else
				[ ] ReportStatus("Verify Business tab exists.", FAIL, " Business tab does not exist.") 
				[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: SelectBusiness()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will search a Business in Manage Business Information window
		[ ] //
		[ ] // PARAMETERS:			String	sBusiness    It can be Any search string e.g. Business name, Business tag etc
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If Business searched in Manage Business Information window successfully
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //Date                             May 10, 2013
		[ ] //Author                          Udita 	
		[ ] 
	[ ] // ==========================================================
	[+] public INTEGER SelectBusiness (STRING sBusiness)
		[ ] INTEGER i,iNavigate,iCount
		[ ] BOOLEAN bAssert = FALSE
		[ ] STRING  hWnd,sActual
		[+] do
			[ ] 
			[ ] iNavigate= NavigateQuickenTab(sTAB_BUSINESS,sTAB_PROFIT_LOSS)
			[ ] WaitForState(Business,TRUE,1)
			[+] if(iNavigate==PASS)
				[+] if (Business.Exists(SHORT_SLEEP))
					[ ] QuickenWindow.Business.ManageBusinessInformation.Select()
					[ ] WaitForState(DlgManageBusinessInformation,TRUE,1)
					[+] if (DlgManageBusinessInformation.Exists(SHORT_SLEEP))
						[ ] hWnd = Str(DlgManageBusinessInformation.ManageBusinessInformationList.QWListViewer1.ListBox1.GetHandle())
						[ ] iCount=DlgManageBusinessInformation.ManageBusinessInformationList.QWListViewer1.ListBox1.GetItemCount()
						[+] for(i=0;i<=iCount;i++)
							[ ] sActual= QwAutoExecuteCommand("LISTBOX_GETFULLROW", hWnd,  str(i))
							[ ] bAssert = MatchStr("*{sBusiness}*",sActual)
							[+] if ( bAssert == TRUE)
								[ ] sActual= QwAutoExecuteCommand("LISTBOX_SELECTROW", hWnd,  str(i))
								[ ] ReportStatus("Verify Business exists.", PASS, " {sBusiness} exists.") 
								[ ] iFunctionResult = PASS
								[ ] break
							[+] else
								[+] if(i==iCount)
									[ ] ReportStatus("Verify Business exists.", FAIL, " {sBusiness} does not exist.") 
									[ ] iFunctionResult = FAIL
							[ ] 
					[+] else
						[ ] ReportStatus("Verify Dialog Manage Business Information  exists.", FAIL, " Dialog Manage Business Information does not exist.") 
						[ ] iFunctionResult = FAIL
						[ ] 
				[+] else
					[ ] ReportStatus("Verify Business tab exists.", FAIL, " Business tab does not exist.") 
					[ ] iFunctionResult = FAIL
					[ ] 
			[+] else
				[ ] ReportStatus("Verify Profit/Loss tab exists.", FAIL, " Profit/Loss tab does not exist.") 
				[ ] iFunctionResult = FAIL
				[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: EditBusiness()
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will Edit a Business
		[ ] //
		[ ] // PARAMETERS:			STRING	  		sSearchString				  - Can be any thing business name,description,owner
		[ ] //							STRING  		sBusinessName
		[ ] //							STRING  		sBusinessTag
		[ ] //                                        STRING  		sDescription
		[ ] //                                        STRING   		sOwner 						- Self/Spouse
		[ ] //							BOOLEAN 		bBusinessTxnWithoutTag		- TRUE/FALSE
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If Business edited successfully
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //Date                             May 10, 2013		
		[ ] //Author                          Udita
		[ ] 
	[ ] // ==========================================================
	[+] public INTEGER EditBusiness (STRING sSearchString, STRING sBusinessName, STRING sBusinessTag, STRING sDescription optional, STRING sOwner optional, BOOLEAN bBusinessTxnWithoutTag optional)
		[ ] INTEGER iNavigate,iCount,i
		[ ] BOOLEAN bAssert = FALSE
		[ ] STRING  hWnd,sActual
		[+] do
			[ ] // Select business which need to be edited
			[ ] iNavigate=SelectBusiness(sSearchString)
			[+] if(iNavigate==PASS)
				[ ] // Edit Business
				[ ] DlgManageBusinessInformation.SetActive()
				[ ] DlgManageBusinessInformation.ManageBusinessInformationList.EditButton.Click()
				[ ] WaitForState(DlgAddBusiness,TRUE,1)
				[+] if (DlgAddBusiness.Exists(SHORT_SLEEP))
					[ ] DlgAddBusiness.SetActive()
					[ ] DlgAddBusiness.BusinessNameTextField.SetText(sBusinessName)
					[ ] DlgAddBusiness.BusinessTagTextField.SetText(sBusinessTag)
					[+] if(sDescription!=NULL)
						[ ] DlgAddBusiness.DescriptionTextField.SetText(sDescription)
					[+] if(sOwner!=NULL)
						[ ] DlgAddBusiness.DescriptionRadioList.Select(sOwner)
						[ ] 
					[+] if(bBusinessTxnWithoutTag!=NULL)
						[+] if(bBusinessTxnWithoutTag==TRUE)
							[+] if(!DlgAddBusiness.BusinessTransactionsWithout.IsChecked())
								[ ] DlgAddBusiness.BusinessTransactionsWithout.Check()
						[+] else if(bBusinessTxnWithoutTag==FALSE)
							[+] if(DlgAddBusiness.BusinessTransactionsWithout.IsChecked())
								[ ] DlgAddBusiness.BusinessTransactionsWithout.Uncheck()
							[ ] 
						[+] else
							[ ] ReportStatus("Verify bBusinessTxnWithoutTag value", FAIL, "Incorrect value for bBusinessTxnWithoutTag")
						[ ] 
					[ ] DlgAddBusiness.OKButton.Click()
					[ ] 
					[ ] WaitForState(DlgManageBusinessInformation,TRUE,1)
					[ ] // Verify Edited Business
					[+] if (DlgManageBusinessInformation.Exists(SHORT_SLEEP))
						[ ] hWnd = Str(DlgManageBusinessInformation.ManageBusinessInformationList.QWListViewer1.ListBox1.GetHandle())
						[ ] iCount=DlgManageBusinessInformation.ManageBusinessInformationList.QWListViewer1.ListBox1.GetItemCount()
						[+] for(i=0;i<=iCount;i++)
							[ ] sActual= QwAutoExecuteCommand("LISTBOX_GETFULLROW", hWnd,  str(i))
							[ ] bAssert = MatchStr("*{sBusinessName}*",sActual)
							[+] if ( bAssert == TRUE)
								[ ] ReportStatus("Verify Business exists.", PASS, " {sSearchString} edited successfully.") 
								[ ] iFunctionResult = PASS
								[ ] break
							[+] else
								[+] if(i==iCount)
									[ ] ReportStatus("Verify Business exists.", FAIL, " {sBusinessName} is not edited.") 
									[ ] iFunctionResult = FAIL
							[ ] 
						[ ] 
						[ ] DlgManageBusinessInformation.SetActive()
						[ ] DlgManageBusinessInformation.DoneButton.Click()
						[ ] WaitForState(DlgManageBusinessInformation,FALSE,1)
					[ ] 
					[+] else
						[ ] ReportStatus("Verify Dialog Manage Business Information  exists.", FAIL, " Dialog Manage Business Information does not exist.") 
						[ ] iFunctionResult = FAIL
						[ ] 
					[ ] 
					[ ] iFunctionResult = PASS
					[ ] 
				[+] else
					[ ] ReportStatus("Verify Dialog Add Business exists.", FAIL, " Dialog Add Business does not exist.") 
					[ ] iFunctionResult = FAIL
				[ ] 
			[+] else
				[ ] ReportStatus("Select searched business in  Manage Business Information window",FAIL,"Searched Business is not found in  Manage Business Information window")
				[ ] iFunctionResult = FAIL
				[ ] 
		[+] except
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: AddCustomerVendor(STRING sPayee, STRING sIncludeIn optional, STRING sStreet optional, STRING sCity optional, STRING sState optional, STRING sZipCode optional, STRING sCountry optional,STRING  sAttnLine optional, STRING sEmail optional)
		[ ] //
		[ ] // DESCRIPTION:			
		[ ] // This function will Add a Customer/Vendor
		[ ] //
		[ ] //QTY								
		[ ] // PARAMETERS:		        STRING sPayee	                        Name of the Customer/Vendor
		[ ] // 						STRING sIncludeIn
		[ ] //						STRING  sStreet				Current date
		[ ] //						STRING  sCity			        Amount for the Reminder
		[ ] //						STRING sState	                        Account Name from which the amount is going to deduce
		[ ] //						STRING sZipCode			Category of the reminder
		[ ] //						STRING sCountry 			Tag of the reminder
		[ ] //						STRING sAttnLine 			Tag of the reminder     
		[ ] //						STRING sEmail 			        Tag of the reminder                  
		[ ] //                                               
		[ ] //
		[ ] // RETURNS:				INTEGER	PASS	If Business added successfully
		[ ] //										FAIL	In case of failure
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //Date                              20 May,2013          	Created by	Anagha Bhandare
		[ ] 
	[ ] // ==========================================================
	[+] public INTEGER AddCustomerVendor (STRING sPayee, STRING sIncludeIn optional, STRING sStreet optional, STRING sCity optional, STRING sState optional, STRING sZipCode optional, STRING sCountry optional,STRING  sAttnLine optional, STRING sEmail optional)
		[ ] INTEGER iNavigate,i,iCount
		[ ] 
		[+] if(IsNULL(sIncludeIn))
			[ ] sIncludeIn="Customer List"
		[+] if(IsNULL(sStreet))
			[ ] sStreet=""
		[+] if(IsNULL(sCity))
			[ ] sCity=""
		[+] if(IsNULL(sState))
			[ ] sState=""
		[+] if(IsNULL(sZipCode))
			[ ] sZipCode=""
		[+] if(IsNULL(sCountry))
				[ ] sCountry =""
			[ ] 
		[+] if(IsNULL(sAttnLine))
			[ ] sAttnLine=""
		[+] if(IsNULL(sEmail))
				[ ] sEmail=""
			[ ] 
		[ ] 
		[+] do
			[ ] QuickenWindow.SetActive()
			[ ] 
			[+] if(AddressBookRecord.DlgEditAddressBookRecord.Exists(SHORT_SLEEP))
				[ ] AddressBookRecord.DlgEditAddressBookRecord.SetActive()
				[ ] AddressBookRecord.DlgEditAddressBookRecord.Payee.SetText(sPayee)
				[ ] AddressBookRecord.DlgEditAddressBookRecord.Street.SetText(sStreet)
				[ ] AddressBookRecord.DlgEditAddressBookRecord.City.SetText(sCity)
				[ ] AddressBookRecord.DlgEditAddressBookRecord.State.SetText(sState)
				[ ] AddressBookRecord.DlgEditAddressBookRecord.ZipCode.SetText(sZipCode)
				[ ] AddressBookRecord.DlgEditAddressBookRecord.Country.SetText(sCountry)
				[ ] AddressBookRecord.DlgEditAddressBookRecord.AttnLine.SetText(sAttnLine)
				[ ] AddressBookRecord.DlgEditAddressBookRecord.EMail.SetText(sEmail)
				[ ] 
				[+] if(sIncludeIn=="QuickFill List")
					[ ] AddressBookRecord.DlgEditAddressBookRecord.QuickFillList.Check()
				[+] else if(sIncludeIn=="Vendor List")
					[ ] AddressBookRecord.DlgEditAddressBookRecord.VendorList.Check()
				[+] else
					[ ] AddressBookRecord.DlgEditAddressBookRecord.CustomerList.Check()
				[ ] AddressBookRecord.DlgEditAddressBookRecord.OKButton.Click()
				[ ] iFunctionResult=PASS
				[ ] 
			[+] else
				[ ] iFunctionResult=FAIL
		[+] except
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] // ======================================================================================
	[+] // FUNCTION: CreateNewTaxAccount(STRING sTaxName ,STRING  sPercentage)
		[ ] //
		[ ] // DESCRIPTION: This function will create a new tax account for Business Account
		[ ] // 
		[ ] //		QTY						
		[ ] // PARAMETERS:		STRING 	sTaxName          Tax Account Name
		[ ] //						STRING 	Percentage	       Tax amount in Percentage to apply
		[ ] // RETURNS:			INTEGER	0 = if function returns the PASS status
		[ ] //									1 =  if function returns the FAIL status
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // 26 April,2013          	Created by	Anagha Bhandare
	[ ] // ======================================================================================
	[+] public INTEGER CreateNewTaxAccount(STRING sTaxName ,STRING  sPercentage)
		[+] // Variable Declaration
			[ ] INTEGER iCounter,iResult
			[ ] iCounter = 2
		[+] do
			[ ] NavigateToAccountActionBanking(3)
			[ ] 
			[+] if(DlgInvoice.Exists(10))
				[ ] DlgInvoice.SetActive()
				[+] if (DlgInvoice.TaxAccountPopupList.FindItem(sTaxName)==0)
					[ ] DlgInvoice.TaxAccountPopupList.Select(iCounter)
					[+] if(CreateTaxAccount.Exists(SHORT_SLEEP))
						[ ] CreateTaxAccount.SetActive()
						[ ] CreateTaxAccount.AccountNameTextField.SetText(sTaxName)
						[ ] CreateTaxAccount.TaxRateTextField.SetText(sPercentage)
						[ ] CreateTaxAccount.OKButton.Click()
						[ ] WaitForState(CreateTaxAccount , FALSE , 3)
						[ ] iFunctionResult = PASS
					[+] else
						[ ] iFunctionResult = FAIL
					[ ] 
				[+] else
					[ ] iFunctionResult = PASS
				[+] if (DlgInvoice.Exists(3))
					[ ] DlgInvoice.SetActive()
					[ ] DlgInvoice.Close()
					[+] if (AlertMessage.Exists(3))
						[ ] AlertMessage.SetActive()
						[ ] AlertMessage.Yes.Click()
						[ ] WaitForState(AlertMessage , FALSE , 3)
				[ ] 
			[+] else
				[ ] iFunctionResult = FAIL
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult = FAIL
			[ ] 
		[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] // ======================================================================================
	[+] // FUNCTION: CreateProjectJob(STRING sCustomerName, STRING sProjectName , STRING sStartDate)
		[ ] //
		[ ] // DESCRIPTION: This function will create a new tax account for Business Account
		[ ] // 
		[ ] //		QTY						
		[ ] // PARAMETERS:		STRING 	sTaxName          Tax Account Name
		[ ] //						STRING 	Percentage	       Tax amount in Percentage to apply
		[ ] // RETURNS:			INTEGER	0 = if function returns the PASS status
		[ ] //									1 =  if function returns the FAIL status
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // 26 April,2013          	Created by	Anagha Bhandare
	[ ] // ======================================================================================
	[+] public INTEGER CreateProjectJob(STRING sCustomerName, STRING sProjectName)
		[ ] // Variable Declaration
		[+] do
			[ ] QuickenWindow.SetActive()
			[ ] QuickenWindow.View.Click()
			[ ] QuickenWindow.View.ClassicMenus.Select()
			[ ] sleep(1)
			[ ] QuickenWindow.Business.Click()
			[ ] QuickenWindow.Business.Customers.Click()
			[ ] QuickenWindow.Business.Customers.CreateProjectJob.Select()
			[ ] 
			[+] if(DlgNewProjectJob.Exists(SHORT_SLEEP))
				[ ] 
				[ ] DlgNewProjectJob.CustomerTextField.SetText(sCustomerName)
				[ ] DlgNewProjectJob.ProjectJobTextField.SetText(sProjectName)
				[ ] DlgNewProjectJob.OKButton.Click()
				[ ] iFunctionResult=PASS
				[ ] 
				[ ] 
			[+] else
				[ ] iFunctionResult = FAIL
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult = FAIL
			[ ] 
		[ ] 
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] // 
[ ] // 
[+] // //********************** Tag Functions***************************************************************************
	[ ] // // ==========================================================
	[+] // // FUNCTION: AddTag()
		[ ] // //
		[ ] // // DESCRIPTION:			
		[ ] // // This function will Add a Business
		[ ] // //
		[ ] // // PARAMETERS:			String	sBusiness
		[ ] // //
		[ ] // // RETURNS:				INTEGER	PASS	If Tag added successfully
		[ ] // //										FAIL	In case of failure
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //Date                             Nov 21, 2012		DlgManageBusinessInformation
		[ ] // //Author                          Mukesh 	
		[ ] // 
	[ ] // // ==========================================================
	[+] // public INTEGER AddTag (STRING sTag)
		[ ] // 
		[ ] // 
		[+] // do
			[ ] // 
			[ ] // QuickenWindow.SetActive()
			[ ] // QuickenWindow.Tools.TagList.Select()
		[ ] // 
		[ ] // 
		[ ] // 
		[ ] // 
		[+] // except
			[ ] // iFunctionResult = FAIL
		[ ] // return iFunctionResult
		[ ] // 
	[ ] // 
[ ] // 
[-] // // //**********************Mobile and Alerts Related Functions***************************************************
	[ ] // ==========================================================
	[+] // FUNCTION: MobileSignUp()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will Carry out Mobile Sign Up and sync data to cloud upto "Select Acocunt to Add screen"
		[ ] //
		[ ] // PARAMETERS:		STRING	 			Cloud ID
		[ ] //						STRING 			Cloud Password
		[ ] //                                  STRING                   ZIP Code
		[ ] //
		[ ] // RETURNS:			INTEGER		0		If sign up process is complete
		[ ] //										1		If any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //Dean Paes  created  Jan 11 2013
	[ ] // ==========================================================
	[+] // public INTEGER MobileSignUp(STRING sCloudID, STRING sCloudPassword ,STRING sCloudZIPCode)
		[ ] // INTEGER iCloudZIPCode
		[ ] // iCloudZIPCode =VAL(sCloudZIPCode)
		[+] // do
			[ ] // 
			[ ] // QuickenWindow.SetActive()
			[ ] // QuickenMainWindow.QWNavigator.MobileAlerts.DoubleClick()
			[ ] // 
			[+] // if (GetStartedBrowserWindow.GetStarted.Exists(5))
				[ ] // GetStartedBrowserWindow.GetStarted.DomClick()
				[+] // if (DlgIAMSignIn.Exists(15))
					[ ] // DlgIAMSignIn.SetActive()
					[ ] // DlgIAMSignIn.IntuitPasswordTextBox.SetText(sPassword)
					[ ] // DlgIAMSignIn.LoginButton.Click()
					[+] // if (DlgSyncCreatePasswordVault.Exists(10))
						[ ] // DlgSyncCreatePasswordVault.SetActive()
						[ ] // DlgSyncCreatePasswordVault.PasswordVaultContentControl.Cancel.Click()
						[ ] // WaitForState(DlgSyncCreatePasswordVault , False , 2)
						[ ] // 
				[+] // if (DlgReplaceExistingID.Exists(20))
					[ ] // DlgReplaceExistingID.SetActive()
					[ ] // DlgReplaceExistingID.YesButton.Click()
				[ ] // 
				[+] // if (AlertMessage.Exists(5))
					[ ] // AlertMessage.SetActive()
					[ ] // AlertMessage.Yes.Click()
					[ ] // 
					[ ] // 
				[ ] // 
				[+] // if (WinMoblieSync.QWSnapHolder1.CreateQuickenCloudIDPanel.Exists(300)&& WinMoblieSync.QWSnapHolder1.CreateQuickenCloudIDPanel.IsEnabled())
					[ ] // ReportStatus(" Verify Select account to Sync snapshot", PASS, "Select account to Sync snapshot displayed.") 
					[ ] // iFunctionResult=PASS
				[+] // else
					[ ] // ReportStatus(" Verify Select account to Sync snapshot", FAIL, "Verify Select account to Sync snapshot displayed on clicking NEXT on Create Quicken CloudID snapshot : Select account to Sync snapshot didn't display.") 
					[ ] // iFunctionResult=FAIL
					[ ] // 
			[+] // else
				[ ] // ReportStatus(" Verify Mobile & Alerts sanapshot", FAIL, "Verify Mobile & Alerts sanapshot displayed on clicking Cancel on Create Quicken CloudID snapshot : Mobile & Alerts sanapshot didn't display.") 
				[ ] // iFunctionResult=FAIL
			[ ] // 
		[+] // except
			[ ] // ExceptLog()
			[ ] // iFunctionResult=FAIL
		[ ] // return iFunctionResult
	[+] public INTEGER MobileSignUp(STRING sIntuitPassword optional)
		[ ] // INTEGER iCloudZIPCode
		[ ] // iCloudZIPCode =VAL(sCloudZIPCode)
		[+] do
			[ ] 
			[ ] QuickenWindow.SetActive()
			[ ] QuickenMainWindow.QWNavigator.MobileAlerts.DoubleClick()
			[ ] 
			[+] if (GetStartedBrowserWindow.GetStarted.Exists(5))
				[ ] GetStartedBrowserWindow.GetStarted.DomClick()
				[+] if (DlgIAMSignIn.Exists(15))
					[ ] DlgIAMSignIn.SetActive()
					[ ] DlgIAMSignIn.IntuitPasswordTextBox.SetText(sIntuitPassword)
					[ ] DlgIAMSignIn.LoginButton.Click()
				[+] if (DlgReplaceExistingID.Exists(20))
					[ ] DlgReplaceExistingID.SetActive()
					[ ] DlgReplaceExistingID.YesButton.Click()
				[+] if (DlgEnterIntuitPassword.Exists(10))
					[ ] DlgEnterIntuitPassword.SetActive()
					[ ] DlgEnterIntuitPassword.Cancel.Click()
					[ ] WaitForState(DlgEnterIntuitPassword , FALSE , 2)
					[ ] 
				[ ] 
				[+] if (QuickenMainWindow.SelectAccountsToSync.Exists (10))
					[ ] ReportStatus(" Verify Select account to Sync snapshot", PASS, "Select account to Sync snapshot is displayed.") 
					[ ] QuickenMainWindow.Done.Click()
					[+] if (DlgAccountsSynced.Exists(60))
						[ ] ReportStatus("Verify if 'Accounts Synced' dialog appears", PASS, "'Accounts Synced' dialog appeared")
						[ ] DlgAccountsSynced.OK.Click()
						[ ] 
					[+] if (QuickenMainWindow.SyncNow.Exists(300))
						[+] if (QuickenMainWindow.ViewErrors.Exists(10))
							[ ] ReportStatus ("Verify if Sync has errors", FAIL, "Sync to cloud has errors")
							[ ] iFunctionResult=FAIL
						[+] else
							[ ] ReportStatus ("Verify if Sync has errors", PASS, "Sync to cloud has no errors")
							[ ] iFunctionResult=PASS
					[+] else
						[ ] ReportStatus ("Verify if Sync is successful", FAIL, "Sync to cloud was not successful")
						[ ] iFunctionResult=FAIL
				[+] else
					[ ] ReportStatus(" Verify Select account to Sync snapshot", FAIL, "Verify Select account to Sync snapshot displayed on clicking NEXT on Create Quicken CloudID snapshot : Select account to Sync snapshot didn't display.") 
					[ ] iFunctionResult=FAIL
					[ ] 
			[+] else
				[ ] ReportStatus(" Verify Mobile & Alerts sanapshot", FAIL, "Verify Mobile & Alerts sanapshot displayed on clicking Cancel on Create Quicken CloudID snapshot : Mobile & Alerts sanapshot didn't display.") 
				[ ] iFunctionResult=FAIL
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult=FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] // // ==========================================================
	[+] // // FUNCTION: MobileSignUpComplete()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will Carry out Mobile Sign Up and create a new cloud account for user including syncing all existing acccounts
		[ ] // //
		[ ] // // PARAMETERS:		STRING	 			Cloud ID
		[ ] // //						STRING 			Cloud Password
		[ ] // //                                  STRING                   ZIP Code
		[ ] // //
		[ ] // // RETURNS:			INTEGER		0		If sign up process is complete
		[ ] // //										1		If any error occurs
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // //Dean Paes  created  Jan 11 2013
	[ ] // // ==========================================================
	[+] // public INTEGER MobileSignUpComplete(STRING sCloudID, STRING sCloudPassword ,STRING sCloudZIPCode,STRING sAccountPassword )
		[ ] // STRING sActual,sExpected
		[ ] // INTEGER iCloudZIPCode
		[ ] // iCloudZIPCode =VAL(sCloudZIPCode)
		[ ] // 
		[ ] // sExpected="Accounts Synced"
		[ ] // 
		[+] // do
			[ ] // QuickenWindow.SetActive()
			[ ] // QuickenMainWindow.QWNavigator.MobileAlerts.Click()
			[ ] // 
			[+] // if (GetStartedBrowserWindow.GetStarted.Exists(5))
				[ ] // GetStartedBrowserWindow.GetStarted.DomClick()
				[+] // if (DlgIAMSignIn.Exists(10))
					[ ] // DlgIAMSignIn.SetActive()
					[ ] // DlgIAMSignIn.IntuitPasswordTextBox.SetText(sPassword)
					[ ] // DlgIAMSignIn.LoginButton.Click()
					[ ] // WaitForState(DlgIAMSignIn , False , 2)
					[+] // if (DlgSyncCreatePasswordVault.Exists(10))
						[ ] // DlgSyncCreatePasswordVault.SetActive()
						[ ] // DlgSyncCreatePasswordVault.PasswordVaultContentControl.Cancel.Click()
						[ ] // WaitForState(DlgSyncCreatePasswordVault , False , 2)
						[ ] // 
					[ ] // 
				[+] // if (DlgReplaceExistingID.Exists(20))
					[ ] // DlgReplaceExistingID.SetActive()
					[ ] // DlgReplaceExistingID.YesButton.Click()
				[ ] // 
				[+] // if (AlertMessage.Exists(20))
					[ ] // AlertMessage.SetActive()
					[ ] // AlertMessage.Yes.Click()
					[ ] // 
					[ ] // 
				[ ] // 
				[+] // if (WinMoblieSync.QWSnapHolder1.CreateQuickenCloudIDPanel.Exists(360))
					[+] // if (sAccountPassword!=NULL)
						[ ] // QuickenWindow.SetActive()
						[ ] // 
						[ ] // WinMoblieSync.QWSnapHolder1.CreateQuickenCloudIDPanel.QWinChild1.AllButton.Click()
						[ ] // WinMoblieSync.QWSnapHolder1.CreateQuickenCloudIDPanel.QWinChild1.QWListViewer1.ListBox1.Click(1,330,7)
						[+] // if (WinMoblieSync.QWSnapHolder1.CreateQuickenCloudIDPanel.QWinChild1.QWListViewer1.ListBox1.AccountPasswordTextField.Exists())
							[ ] // WinMoblieSync.QWSnapHolder1.CreateQuickenCloudIDPanel.QWinChild1.QWListViewer1.ListBox1.AccountPasswordTextField.TypeKeys(sAccountPassword)
							[ ] // 
							[ ] // WinMoblieSync.QWSnapHolder1.CreateQuickenCloudIDPanel.DoneButton.DoubleClick()
							[+] // if (DlgAccountsSynced.Exists(400))
								[ ] // DlgAccountsSynced.SetActive()
								[ ] // sActual=DlgAccountsSynced.GetCaption()
								[ ] // bMatch = MatchStr("*{sExpected}*", sActual)
								[+] // if (bMatch==TRUE)
									[ ] // ReportStatus("Verify few account sync", PASS, "Verify few account sync: Accounts synced.")
									[ ] // iFunctionResult=PASS
								[+] // else
									[ ] // ReportStatus("Verify few account sync", FAIL, "Verify few account sync: Accounts NOT synced.")
								[ ] // DlgAccountsSynced.OK.Click()
								[ ] // WaitForState(DlgAccountsSynced,FALSE,1)
							[+] // else
								[ ] // ReportStatus("Verify few account sync", FAIL, "Verify few account sync: Accounts NOT synced.")
						[+] // else
							[ ] // ReportStatus("Verify AccountPasswordTextField exists", FAIL, "Verify AccountPasswordTextField exists: Verify AccountPasswordTextField doesn't exist.")
						[ ] // 
				[+] // else
					[ ] // ReportStatus(" Verify Select account to Sync snapshot", FAIL, "Verify Select account to Sync snapshot displayed on clicking NEXT on Create Quicken CloudID snapshot : Select account to Sync snapshot didn't display.") 
					[ ] // iFunctionResult=FAIL
			[+] // else
				[ ] // ReportStatus(" Verify Mobile & Alerts sanapshot", FAIL, "Verify Mobile & Alerts sanapshot displayed on clicking Cancel on Create Quicken CloudID snapshot : Mobile & Alerts sanapshot didn't display.") 
				[ ] // iFunctionResult=FAIL
			[ ] // 
		[+] // except
			[ ] // ExceptLog()
			[ ] // iFunctionResult=FAIL
		[ ] // return iFunctionResult
	[ ] 
	[+] public INTEGER MobileSignUpComplete(STRING sAccountPassword )
		[ ] STRING sActual,sExpected
		[ ] 
		[ ] // INTEGER iCloudZIPCode
		[ ] // iCloudZIPCode =VAL(sCloudZIPCode)
		[ ] 
		[ ] sExpected="Accounts Synced"
		[ ] 
		[+] do
			[ ] QuickenWindow.SetActive()
			[ ] QuickenMainWindow.QWNavigator.MobileAlerts.Click()
			[ ] 
			[+] if (GetStartedBrowserWindow.GetStarted.Exists(5))
				[ ] GetStartedBrowserWindow.GetStarted.DomClick()
				[+] if (DlgIAMSignIn.Exists(10))
					[ ] DlgIAMSignIn.SetActive()
					[ ] DlgIAMSignIn.IntuitPasswordTextBox.SetText(sPassword)
					[ ] DlgIAMSignIn.LoginButton.Click()
					[ ] WaitForState(DlgIAMSignIn , False , 2)
					[+] if (DlgSyncCreatePasswordVault.Exists(10))
						[ ] DlgSyncCreatePasswordVault.SetActive()
						[ ] DlgSyncCreatePasswordVault.PasswordVaultContentControl.Cancel.Click()
						[ ] WaitForState(DlgSyncCreatePasswordVault , False , 2)
						[ ] 
					[ ] 
				[+] if (DlgReplaceExistingID.Exists(20))
					[ ] DlgReplaceExistingID.SetActive()
					[ ] DlgReplaceExistingID.YesButton.Click()
				[ ] 
				[+] if (AlertMessage.Exists(20))
					[ ] AlertMessage.SetActive()
					[ ] AlertMessage.Yes.Click()
					[ ] 
					[ ] 
				[ ] 
				[+] if (WinMoblieSync.QWSnapHolder1.CreateQuickenCloudIDPanel.Exists(360))
					[+] if (sAccountPassword!=NULL)
						[ ] QuickenWindow.SetActive()
						[ ] 
						[ ] WinMoblieSync.QWSnapHolder1.CreateQuickenCloudIDPanel.QWinChild1.AllButton.Click()
						[ ] WinMoblieSync.QWSnapHolder1.CreateQuickenCloudIDPanel.QWinChild1.QWListViewer1.ListBox1.Click(1,330,7)
						[+] if (WinMoblieSync.QWSnapHolder1.CreateQuickenCloudIDPanel.QWinChild1.QWListViewer1.ListBox1.AccountPasswordTextField.Exists())
							[ ] WinMoblieSync.QWSnapHolder1.CreateQuickenCloudIDPanel.QWinChild1.QWListViewer1.ListBox1.AccountPasswordTextField.TypeKeys(sAccountPassword)
							[ ] 
							[ ] WinMoblieSync.QWSnapHolder1.CreateQuickenCloudIDPanel.DoneButton.DoubleClick()
							[+] if (DlgAccountsSynced.Exists(400))
								[ ] DlgAccountsSynced.SetActive()
								[ ] sActual=DlgAccountsSynced.GetCaption()
								[ ] bMatch = MatchStr("*{sExpected}*", sActual)
								[+] if (bMatch==TRUE)
									[ ] ReportStatus("Verify few account sync", PASS, "Verify few account sync: Accounts synced.")
									[ ] iFunctionResult=PASS
								[+] else
									[ ] ReportStatus("Verify few account sync", FAIL, "Verify few account sync: Accounts NOT synced.")
								[ ] DlgAccountsSynced.OK.Click()
								[ ] WaitForState(DlgAccountsSynced,FALSE,1)
							[+] else
								[ ] ReportStatus("Verify few account sync", FAIL, "Verify few account sync: Accounts NOT synced.")
						[+] else
							[ ] ReportStatus("Verify AccountPasswordTextField exists", FAIL, "Verify AccountPasswordTextField exists: Verify AccountPasswordTextField doesn't exist.")
						[ ] 
				[+] else
					[ ] ReportStatus(" Verify Select account to Sync snapshot", FAIL, "Verify Select account to Sync snapshot displayed on clicking NEXT on Create Quicken CloudID snapshot : Select account to Sync snapshot didn't display.") 
					[ ] iFunctionResult=FAIL
			[+] else
				[ ] ReportStatus(" Verify Mobile & Alerts sanapshot", FAIL, "Verify Mobile & Alerts sanapshot displayed on clicking Cancel on Create Quicken CloudID snapshot : Mobile & Alerts sanapshot didn't display.") 
				[ ] iFunctionResult=FAIL
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult=FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] // // // ==========================================================
	[+] // // // FUNCTION: MobileLogIn()
		[ ] // // //
		[ ] // // // DESCRIPTION:
		[ ] // // // This function will Carry out Mobile Log In 
		[ ] // // //
		[ ] // // // PARAMETERS:		STRING	 			Cloud ID
		[ ] // // //						STRING 			Cloud Password
		[ ] // // //                             
		[ ] // // //
		[ ] // // // RETURNS:			INTEGER		0		If log in process is complete
		[ ] // // //										1		If any error occurs
		[ ] // // //
		[ ] // // // REVISION HISTORY:
		[ ] // // //Dean Paes  created  Jan 11 2013
	[ ] // // // ==========================================================
	[+] // // public INTEGER MobileLogIn(STRING sCloudID, STRING sCloudPassword)
		[ ] // // 
		[+] // // do
			[ ] // // 
			[ ] // // QuickenWindow.SetActive()
			[ ] // // //NavigateQuickenTab(sTAB_MOBILE_ALERTS,sTAB_QUICKEN_MOBILE)
			[ ] // // 
			[ ] // // QuickenMainWindow.QWNavigator.MobileAlerts.Click()
			[ ] // // 
			[+] // // if (WinMoblieSync.QWSnapHolder1.Panel.QWMsHtmlVw1.ShellEmbedding1.ShellDocObjectView1.InternetExplorer_Server1.Exists())
				[ ] // // 
				[ ] // // WinMoblieSync.QWSnapHolder1.Panel.QWMsHtmlVw1.ShellEmbedding1.ShellDocObjectView1.InternetExplorer_Server1.Click(1,331, 331)
				[ ] // // 
				[+] // //  if (DlgSignInMoblieSync.Exists())
					[ ] // // DlgSignInMoblieSync.Click()
					[ ] // // DlgSignInMoblieSync.QuickenCloudIDTextField.SetText(sCloudID)
					[ ] // // DlgSignInMoblieSync.QuickenCloudPasswordTextField.SetText(sCloudPassword)
					[ ] // // DlgSignInMoblieSync.SignInButton.Click()
					[ ] // // iFunctionResult=PASS
				[+] // // else
					[ ] // // ReportStatus(" Verify Log Into Quicken Cloud ", FAIL, "Log In to  Quicken CloudID dialog not dispayed.") 
					[ ] // // iFunctionResult=FAIL
			[+] // // else
				[ ] // // ReportStatus(" Verify Log Into Quicken Cloud ", FAIL, "Verify Log In to  Quicken CloudID :Login Process Not complete.") 
				[ ] // // iFunctionResult=FAIL
			[ ] // // 
		[+] // // except
			[ ] // // ExceptLog()
			[ ] // // iFunctionResult=FAIL
		[ ] // // return iFunctionResult
	[ ] // // 
	[ ] // // 
	[ ] // ==========================================================
	[+] // FUNCTION: DeleteCloudID()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will delete the signed-in Quicken CloudID
		[ ] //
		[ ] // PARAMETERS:		
		[ ] //						
		[ ] //                                  
		[ ] //
		[ ] // RETURNS:			INTEGER		0		If deletion process is complete
		[ ] //										1		If any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //MUkesh created  Jan 15 2013
	[ ] // ==========================================================
	[+] public INTEGER DeleteCloudID(STRING sPassword)
		[ ] 
		[ ] 
		[ ] STRING sYes="YES"
		[ ] 
		[+] do
			[ ] QuickenWindow.SetActive()
			[ ] QuickenMainWindow.QWNavigator.MobileAlerts.DoubleClick()
			[+] if (WinMoblieSync.QWSnapHolder1.PanelMoblieSyncOverview.EditProfileLink.Exists(2))
				[ ] WinMoblieSync.QWSnapHolder1.PanelMoblieSyncOverview.EditProfileLink.DoubleClick()
				[ ] 
				[+] if (DlgIAMSignIn.Exists(20))
					[ ] DlgIAMSignIn.SetActive()
					[ ] DlgIAMSignIn.IntuitPasswordTextBox.SetText(sPassword)
					[ ] DlgIAMSignIn.LoginButton.Click()
					[ ] 
				[+] if (Preferences.Exists(60))
					[ ] Preferences.SetActive()
					[ ] Preferences.DeleteyourCloudData.Click()
					[+] if (DlgDeleteQuickenCloudAccount.Exists(5))
						[ ] DlgDeleteQuickenCloudAccount.SetActive()
						[ ] DlgDeleteQuickenCloudAccount.TypeYesToConfirmDeletionTextField.SetText(sYes)
						[ ] WaitForState(DlgDeleteQuickenCloudAccount.DeleteButton,TRUE,2)
						[+] if (DlgDeleteQuickenCloudAccount.DeleteButton.IsEnabled()==TRUE)
							[ ] DlgDeleteQuickenCloudAccount.DeleteButton.Click()
							[ ] WaitForState(DlgDeleteQuickenCloudAccount,FALSE,20)
							[ ] sleep(3)
							[ ] Preferences.SetActive()
							[ ] Preferences.OK.Click()
							[ ] WaitForState(Preferences,FALSE,3)
							[+] if (GetStartedBrowserWindow.GetStarted.Exists(20))
								[ ] ReportStatus(" Verify Quicken CloudID deleted.", PASS, " Verify Quicken CloudID deleted: Quicken CloudID deleted and Mobile & Alerts sanapshot displayed.") 
								[ ] iFunctionResult=PASS
							[+] else
								[ ] ReportStatus(" Verify Quicken CloudID deleted.", FAIL, " Verify Quicken CloudID deleted: Quicken CloudID didn't delete.") 
								[ ] iFunctionResult=FAIL
						[+] else
							[ ] ReportStatus(" Verify Delete Profile Confirmation Dailog> Delete Button", FAIL, "Verify Delete Profile Confirmation Dailog> Delete Button enabled: Delete Profile Confirmation Dailog> Delete Button is disabled.") 
							[ ] iFunctionResult=FAIL
					[+] else
						[ ] ReportStatus(" Verify Delete Quicken Cloud Account dialog ", FAIL, " Verify Delete Quicken Cloud Account dialog: Delete Quicken Cloud Account dialog doesn't exist.") 
						[ ] iFunctionResult=FAIL
				[+] else
					[ ] ReportStatus(" Verify Preferences dialog", FAIL, "Verify Preferences dialog: Preferences dialog didn't appear.") 
					[ ] iFunctionResult=FAIL
			[+] else
				[ ] ReportStatus(" Verify Edit Profile link", FAIL, " Verify Edit Profile link: Edit Profile link doesn't exist.") 
				[ ] iFunctionResult=FAIL
		[+] except
			[ ] iFunctionResult=FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: OpenAndSaveCloudSyncLog()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will open and save cloud sync log to default or specified location
		[ ] //
		[ ] // PARAMETERS:		STRING	 			sLogType
		[ ] //						STRING 			sSaveLocation
		[ ] //                             
		[ ] //
		[ ] // RETURNS:			INTEGER		PASS		If og is successfully saved at location
		[ ] //										FAIL      	If any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //Dean Paes  created  Jan 24 2013
		[ ] //Udita Dube  updated Feb 04 2013 -
	[ ] // ==========================================================
	[+] public INTEGER OpenAndSaveCloudSyncLog(STRING sSaveLocation optional)
		[ ] 
		[+] //Variable Declaration
			[ ] 
			[ ] STRING sDefaultSaveLocation=AUT_DATAFILE_PATH + "\SyncLog.txt"
			[ ] STRING sLocation
			[ ] INTEGER iLogType
			[ ] 
		[ ] 
		[+] do
			[ ] 
			[+] if((sSaveLocation)!=NULL)
				[+] if(FileExists(sSaveLocation))
					[ ] DeleteFile(sSaveLocation)
			[+] else if(FileExists(sDefaultSaveLocation))
				[ ] DeleteFile(sDefaultSaveLocation)
			[ ] 
			[ ] 
			[+] if(QuickenWindow.Exists(2))
				[ ] QuickenWindow.SetActive()
				[ ] //Open Log Files window
				[ ] QuickenWindow.Help.Click()
				[ ] QuickenWindow.Help.LogFiles.Select()
				[+] if(QuickenLogFiles.Exists(10))
					[ ] QuickenLogFiles.BrowserWindow.CloudSyncLog.DomClick()
					[ ] 
					[ ] //Verify presence of Cloud Sync Log
					[+] if(ViewCloudSyncLog.Exists(10))
						[ ] 
						[ ] //Click on Save As button
						[ ] ViewCloudSyncLog.SaveAs.Click()
						[ ] WaitForState(SaveAs,TRUE,5)
						[+] if (SaveAsDialog.Exists(3))
							[ ] SaveAsDialog.SetActive()
							[ ] //Determine location to save
							[+] if(sSaveLocation==NULL)
								[ ] sLocation=sDefaultSaveLocation
							[+] else
								[ ] sLocation=sSaveLocation
							[ ] //Set Location to Save
							[ ] SaveAsDialog.FileName.SetText(sLocation)
							[ ] SaveAsDialog.Save.Click()
							[ ] //Overite File Save
							[+] if(ConfirmSaveAs.Exists(2))
								[ ] ConfirmSaveAs.SetActive ()
								[ ] ConfirmSaveAs.Yes.Click ()
							[ ] //Close Cloud Sync Report
							[ ] ViewCloudSyncLog.Close.Click()
							[ ] 
							[ ] //Close Reports Window
							[+] if(QuickenLogFiles.Exists())
								[ ] QuickenLogFiles.SetActive()
								[ ] QuickenLogFiles.Close()
							[ ] iFunctionResult=PASS
						[+] else
							[ ] ReportStatus("Verify SaveAs dailog",FAIL,"SaveAs dailog didn't appear.")
							[ ] iFunctionResult=FAIL
					[+] else
						[ ] ReportStatus(" Save Cloud Sync Log",FAIL, "Log Files Window not available") 
						[ ] iFunctionResult=FAIL
			[+] else
				[ ] ReportStatus(" Save Cloud Sync Log",FAIL, "Quicken Window not available") 
				[ ] iFunctionResult=FAIL
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult=FAIL
		[ ] 
		[ ] return iFunctionResult
		[ ] 
		[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: SearchTransactionsInRegister()
		[ ] // 
		[ ] // DESCRIPTION:
		[ ] // This function will search all accounts for a transaction if transaction is unique it will return Pass else Fail
		[ ] // 
		[ ] // PARAMETERS:		STRING	 			Cloud ID
		[ ] // STRING 			Cloud Password
		[ ] // STRING                   ZIP Code
		[ ] // 
		[ ] // RETURNS:			INTEGER		0		If sign up process is complete
		[ ] // 1		If any error occurs
		[ ] // 
		[ ] // REVISION HISTORY:
		[ ] // Dean Paes  created  Jan 11 2013
	[ ] // ==========================================================
	[+] public INTEGER SearchTransactionsInRegister(STRING sPayee )
		[ ] STRING sActual,sExpected,hWnd
		[ ] INTEGER iItem, iCounter
		[ ] 
		[+] do
			[ ] QuickenWindow.SetActive()
			[ ] hWnd=NULL
			[ ] sActual=NULL
			[ ] bMatch=FALSE
			[ ] iItem=0
			[ ] QuickenWindow.TypeKeys(KEY_CTRL_H)
			[ ] 
			[+] if (DlgFindAndReplace.Exists(5))
				[ ]  DlgFindAndReplace.SetActive()
				[ ] DlgFindAndReplace.SearchTextField.SetText(sPayee)
				[ ] DlgFindAndReplace.FindButton.Click()
				[+] // if (MessageBox.Exists(2))
					[ ] // ReportStatus("Verify Transaction exists,", FAIL, "Transaction with Payee {sPayee} doesn't exist.")
					[ ] // MessageBox.OK.Click()
					[ ] // WaitForState(MessageBox,FALSE,2)
				[+] // else
					[ ] // ReportStatus("Verify Transaction exists,", PASS, "Transaction with Payee {sPayee} doesn't exist.")
				[ ] hWnd = str(DlgFindAndReplace.FoundListBox.ListBox1.GetHandle())
				[+] for (iCounter=0;iCounter<DlgFindAndReplace.FoundListBox.ListBox1.GetItemCount()+1;++iCounter)
					[ ] sActual = QwAutoExecuteCommand("LISTBOX_GETFULLROW", hWnd,  "{iCounter}")
					[ ] bMatch = MatchStr("*{sPayee}*", sActual)
					[+] if (bMatch==TRUE)
						[ ] iItem++
						[+] if (iItem>2)
							[ ] bMatch=FALSE
							[ ] break
				[+] if(iItem == 1)
					[ ] ReportStatus("Verify transactions not duplicated after sync.", PASS, "Verify transactions not duplicated after sync: Transactions didn't duplicate")
					[ ] iFunctionResult=PASS
				[+] else
					[ ] ReportStatus("Verify transactions not duplicated after sync", FAIL, "Verify transactions not duplicated after sync: Transactions duplicated.")
					[ ] iFunctionResult=FAIL
				[ ] DlgFindAndReplace.DoneButton.Click()
				[ ] WaitForState(DlgFindAndReplace,FALSE,2)
			[+] else
				[ ] ReportStatus("Verify transactions not duplicated after sync", FAIL, "Verify transactions not duplicated after sync: Dialog Find and Replace didn't appear.")
				[ ] iFunctionResult=FAIL
		[+] except
			[ ] iFunctionResult=FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: GetOnlineTransactionResponseFromCloudSyncLog()
		[ ] // 
		[ ] // DESCRIPTION:
		[ ] // This function will fetch Online Transaction Response From CloudSyncLog if it has been inserted into the Cloud
		[ ] // 
		[ ] // PARAMETERS:		STRING	 			sFITID
		[ ] // 
		[ ] // RETURNS:			If pass list of verified responses after verifying the Online transaction
		[ ] //If Fail returns the empty list and logs the failure
		[ ] // 
		[ ] // REVISION HISTORY:
		[ ] // Mukesh  created  Jan 27 2013
	[ ] // ==========================================================
	[+] public LIST OF ANYTYPE GetOnlineTransactionResponseFromSyncLog(STRING sFITID , INTEGER iAccountId)
		[ ] STRING sActual, sLine, sExpectedRequest, sExpectedResponse, sItem,sTransactionParam 
		[ ] STRING sExpectedModifiedResponse,sModifiedResponse
		[ ] List OF ANYTYPE lsExcelData, lsTxnRequestParams,lsResponse,lsModifiedResponse, lsSyncId,lsImportTxnRequest
		[ ] List OF ANYTYPE lsImportTxnResults , lsModifiedTxns, lsFITIDCount,lsAccountIdCount,lsTemp
		[ ] HANDLE hFile
		[ ] HFILE FileHandle
		[ ] STRING sItemResponse,sStrSyncId
		[ ] BOOLEAN  bResult
		[ ] INTEGER iCounter, iLower, iUpper, iSyncId, iUpperIndex,iLowerIndex,iCountData,iFITIDIndex,iBankccIndex
		[ ] STRING sRequestFileName="SyncLog.txt"
		[ ] STRING sResponseFileName="ResponseFileName"
		[ ] STRING sPayeeDescription
		[ ] // sExpected =sFITID
		[ ] ///////Fetching the request record////
		[ ] rTransactionReqRespRecord rTxnReqResp
		[ ] rTxnReqResp = lsTransactionReqRespValue
		[ ] ///////Fetching the Account record////
		[ ] rAccountReqRespRecord rAccountReqResp
		[ ] rAccountReqResp = lsAccountReqRespRecordValue
		[ ] 
		[ ] 
		[ ] sExpectedRequest="*{rTxnReqResp.sImportTransactions}*{rTxnReqResp.sIsLastInImportSequence}*{rAccountReqResp.sAccountId}*{iAccountId}*{rTxnReqResp.sfiTId}*{sFITID}*"
		[ ] sExpectedResponse="*{rTxnReqResp.sImportTransactionsResult}*{rTxnReqResp.sImportedTransactions}*{rTxnReqResp.sfiTId}*{sFITID}*{rAccountReqResp.sAccountId}*{iAccountId}*"
		[ ] sExpectedModifiedResponse="*{rTxnReqResp.sModifiedTransactions}*{rTxnReqResp.sTransactions}*{rTxnReqResp.sfiTId}*{sFITID}*{rAccountReqResp.sAccountId}*{iAccountId}*"
		[ ] 
		[+] do
			[ ] 
			[ ] hFile = FileOpen (APP_PATH + "\Data\TestData\"+sRequestFileName, FM_READ) 
			[ ] print(hFile)
			[ ] ///Verify Transaction Request////
			[+] while (FileReadLine (hFile, sLine))
				[ ] bMatch=MatchStr(sExpectedRequest,sLine)
				[+] if (bMatch==TRUE)
					[ ] break
			[+] if (bMatch==TRUE)
				[ ] //// If Transaction Request found write the matched line to sResponseFileName///
				[ ] FileHandle = FileOpen (APP_PATH + "\Data\TestData\"+sResponseFileName+".txt", FM_APPEND)
				[ ] //// Split matched line to get it in a list
				[ ] FileWriteLine (FileHandle, "Importtransactionsrequest for :")
				[ ] FileWriteLine (FileHandle, "----------------------------------------------------------------------------------------")
				[ ] FileWriteLine (FileHandle, sLine)
				[ ] FileClose (FileHandle)
				[ ] lsTxnRequestParams= Split(sLine,",")
				[+] for  (iCounter=1;iCounter<ListCount( lsTxnRequestParams)+1;++iCounter)
					[ ] ListAppend(lsImportTxnRequest,StrTran(StrTran(StrTran(lsTxnRequestParams[iCounter],chr(123),""),chr(125),""),chr(34),""))
				[ ] iCounter=1
				[ ] /// Fetch the FITID of the fetched transaction by searching it on PayeeName///
				[ ] iUpper=1
				[ ] iLower=1
				[ ] iCountData=0
				[ ] bResult=FALSE
				[ ] INTEGER i=0
				[ ] ////Verifying the FITID is not duplicated within the same account///// 
				[+] for  (iCounter=1;iCounter<ListCount( lsImportTxnRequest)+1;++iCounter)
					[ ] bMatch =MatchStr("*{rTxnReqResp.sfiTId}*{sFITID}*",lsImportTxnRequest[iCounter])
					[+] if (bMatch==TRUE)
						[ ] bMatch=FALSE
						[ ] iUpper=iCounter
						[ ] ListAppend(lsFITIDCount,iCounter)
						[+] for (iUpper=iCounter;iUpper>0;--iUpper)
							[ ] bMatch =MatchStr("*{rAccountReqResp.sAccountId}*",lsImportTxnRequest[iUpper])
							[+] if (bMatch==TRUE)
								[ ] ListAppend(lsAccountIdCount,iUpper)
								[ ] break
								[ ] 
								[ ] // bMatch=FALSE
								[ ] // bMatch =MatchStr("*{rAccountReqResp.sAccountId}*{iAccountId}*",lsImportTxnRequest[iUpper])
								[+] // if (bMatch ==TRUE)
									[ ] // iLower=iUpper
									[ ] // ListAppend(lsAccountIdCount,iCounter)
									[ ] // break
									[ ] // 
				[ ] 
				[+] for (iCounter=1;iCounter<ListCount( lsFITIDCount)+1;++iCounter)
					[ ] bMatch =MatchStr("*{rTxnReqResp.sfiTId}*{sFITID}*",lsImportTxnRequest[lsFITIDCount[iCounter]])
					[+] if (bMatch==TRUE)
						[ ] bMatch=FALSE
						[ ] bMatch =MatchStr("*{rAccountReqResp.sAccountId}*{iAccountId}*",lsImportTxnRequest[lsAccountIdCount[iCounter]])
						[+] if (bMatch==TRUE)
							[ ] bMatch=FALSE
							[ ] iLower=lsFITIDCount[iCounter] 
							[ ] iCountData=iCountData+1
							[ ] break
					[+] if (iCountData>1)
						[ ] bResult=TRUE
						[ ] break
				[+] if (bResult==TRUE)
					[ ] ReportStatus("Verify transaction request", FAIL, "Verify importtransactions request in Cloud SyncLog: FITID {sFITID} is generated multiple times within the same Account {iAccountId}.")
					[ ] iFunctionResult=FAIL
				[+] else
					[+] // // for  (iCounter=iUpper;iCounter>0;--iCounter)
						[ ] // // bMatch =MatchStr("*{rTxnReqResp.sBankcc}*",lsRequestResponse[iCounter])
						[+] // // if (bMatch==TRUE)
							[ ] // // iLower=iCounter
							[ ] // // break
					[+] // // for  (iCounter=iLower;iCounter<ListCount( lsTxnRequestParams)+1;++iCounter)
						[ ] // // bMatch =MatchStr("*{rTxnReqResp.sfiTId}*",lsRequestResponse[iCounter])
						[+] // // if (bMatch==TRUE)
							[ ] // // sFITID=lsRequestResponse[iCounter]
							[ ] // // break
					[ ] //// Fetch the transaction response////
					[ ] hFile = FileOpen (APP_PATH + "\Data\TestData\"+sRequestFileName, FM_READ) 
					[ ] ///Verify Transaction Response////
					[ ] sLine=NULL
					[+] while (FileReadLine (hFile, sLine))
						[ ] bMatch=MatchStr(sExpectedResponse,sLine)
						[+] if bMatch==TRUE
							[ ] break
							[ ] 
					[+] if (bMatch==TRUE)
						[ ] // Open file, append line, and close
						[ ] //// If Transaction Request found write the matched line to sResponseFileName///
						[ ] FileHandle = FileOpen (APP_PATH + "\Data\TestData\"+sResponseFileName+".txt", FM_APPEND)
						[ ] //// Split matched line to get it in a list
						[ ] FileWriteLine (FileHandle, "Importtransactionsresult response:")
						[ ] FileWriteLine (FileHandle, "----------------------------------------------------------------------------------------")
						[ ] FileWriteLine (FileHandle, sLine)
						[ ] FileClose (FileHandle)
						[ ] lsTxnRequestParams=NULL
						[ ] lsTxnRequestParams= Split(sLine,",")
						[+] for  (iCounter=1;iCounter<ListCount( lsTxnRequestParams)+1;++iCounter)
							[ ] ListAppend(lsImportTxnResults,StrTran(StrTran(StrTran(StrTran(StrTran(lsTxnRequestParams[iCounter],chr(123),""),chr(125),""),chr(34),""),chr(91),""),chr(93),""))
						[ ] iCounter=1
						[ ] /// Match the FITID of the fetched transaction and get the index of FITID list item from the response list///
						[ ] iUpper=1
						[ ] iLower=1
						[ ] iCountData=0
						[ ] lsFITIDCount=lsTemp
						[ ] lsAccountIdCount=lsTemp
						[ ] ////Verifying the FITID is not duplicated within the same account///// 
						[+] for  (iCounter=1;iCounter<ListCount( lsImportTxnResults)+1;++iCounter)
							[ ] bMatch =MatchStr("*{rTxnReqResp.sfiTId}*{sFITID}*",lsImportTxnResults[iCounter])
							[+] if (bMatch==TRUE)
								[ ] bMatch=FALSE
								[ ] iUpper=iCounter
								[ ] ListAppend(lsFITIDCount,iCounter)
								[+] for (iUpper=iCounter;iUpper<ListCount( lsImportTxnResults)+1;++iUpper)
									[ ] bMatch =MatchStr("*{rAccountReqResp.sAccountId}*",lsImportTxnResults[iUpper])
									[+] if (bMatch==TRUE)
										[ ] ListAppend(lsAccountIdCount,iUpper)
										[ ] break
						[ ] 
						[+] for (iCounter=1;iCounter<ListCount( lsFITIDCount)+1;++iCounter)
							[ ] bMatch =MatchStr("*{rTxnReqResp.sfiTId}*{sFITID}*",lsImportTxnResults[lsFITIDCount[iCounter]])
							[+] if (bMatch==TRUE)
								[ ] bMatch=FALSE
								[ ] bMatch =MatchStr("*{rAccountReqResp.sAccountId}*{iAccountId}*",lsImportTxnResults[lsAccountIdCount[iCounter]])
								[+] if (bMatch==TRUE)
									[ ] bMatch=FALSE
									[ ] iLower=lsAccountIdCount[iCounter] 
									[ ] iCountData=iCountData+1
									[ ] break
							[+] if (iCountData>1)
								[ ] bResult=TRUE
								[ ] break
						[ ] 
						[+] if (bResult==TRUE)
							[ ] ReportStatus("Verify importTransactionsResult response", FAIL, "Verify importTransactionsResult response in Cloud SyncLog: FITID {sFITID} is generated multiple times within the same Account {iAccountId}.")
							[ ] iFunctionResult=FAIL
						[+] else
							[+] for (iCounter=iLower;iCounter>0;--iCounter)
								[ ] bMatch =MatchStr("*{rTxnReqResp.sImported}*",lsImportTxnResults[iCounter])
								[+] if (bMatch==True) 
									[ ] iLowerIndex=iCounter
									[ ] break
							[+] for (iCounter=iLowerIndex+1;iCounter<ListCount( lsImportTxnResults)+1;++iCounter)
								[ ] bMatch =MatchStr("*{rTxnReqResp.sImported}*",lsImportTxnResults[iCounter])
								[+] if ((bMatch==True)|| iCounter==ListCount( lsImportTxnResults)) 
									[ ] iUpper=iCounter
									[ ] break
									[ ] 
							[ ] 
							[+] for (iCounter= iLowerIndex ; iCounter<iUpper+1 ; ++iCounter)
								[ ] ListAppend(lsResponse,lsImportTxnResults[iCounter])
							[ ] /////Verify Transaction in getModifiedTransactions response////
							[ ] hFile = FileOpen (APP_PATH + "\Data\TestData\"+sRequestFileName, FM_READ) 
							[ ] lsTxnRequestParams=NULL
							[ ] ///Verify Transaction Response////
							[ ] sLine=NULL
							[ ] 
							[+] while (FileReadLine (hFile, sLine))
								[ ] bMatch=MatchStr(sExpectedModifiedResponse,sLine)
								[+] if bMatch==TRUE
									[ ] break
							[+] if (bMatch==TRUE)
								[ ] // Open file, append line, and close
								[ ] //// If Transaction Request found write the matched line to sResponseFileName///
								[ ] 
								[ ] FileHandle = FileOpen (APP_PATH + "\Data\TestData\"+sResponseFileName+".txt", FM_APPEND)
								[ ] //// Split matched line to get it in a list
								[ ] FileWriteLine (FileHandle, "Getmodifiedtransactions response")
								[ ] FileWriteLine (FileHandle, "----------------------------------------------------------------------------------------")
								[ ] FileWriteLine (FileHandle, sLine)
								[ ] FileClose (FileHandle)
								[ ] lsTxnRequestParams=NULL
								[ ] lsTxnRequestParams= Split(sLine,",")
								[+] for  (iCounter=1;iCounter<ListCount( lsTxnRequestParams)+1;++iCounter)
									[ ] ListAppend(lsModifiedTxns,StrTran(StrTran(StrTran(StrTran(StrTran(lsTxnRequestParams[iCounter],chr(123),""),chr(125),""),chr(34),""),chr(91),""),chr(93),""))
								[ ] iCounter=1
								[ ] iUpper=1
								[ ] iLower=1
								[ ] iCountData=0
								[ ] lsFITIDCount=lsTemp
								[ ] lsAccountIdCount=lsTemp
								[ ] ////Verifying the FITID is not duplicated within the same account///// 
								[+] for  (iCounter=1;iCounter<ListCount( lsModifiedTxns)+1;++iCounter)
									[ ] bMatch =MatchStr("*{rTxnReqResp.sfiTId}*{sFITID}*",lsModifiedTxns[iCounter])
									[+] if (bMatch==TRUE)
										[ ] bMatch=FALSE
										[ ] iUpper=iCounter
										[ ] ListAppend(lsFITIDCount,iCounter)
										[+] for  (iUpper=iCounter;iUpper<ListCount( lsModifiedTxns)+1;++iUpper)
											[ ] bMatch =MatchStr("*{rAccountReqResp.sAccountId}*",lsModifiedTxns[iUpper])
											[+] if (bMatch==TRUE)
												[ ] ListAppend(lsAccountIdCount,iUpper)
												[ ] break
								[ ] 
								[+] for (iCounter=1;iCounter<ListCount( lsFITIDCount)+1;++iCounter)
									[ ] bMatch =MatchStr("*{rTxnReqResp.sfiTId}*{sFITID}*",lsModifiedTxns[lsFITIDCount[iCounter]])
									[+] if (bMatch==TRUE)
										[ ] bMatch=FALSE
										[ ] bMatch =MatchStr("*{rAccountReqResp.sAccountId}*{iAccountId}*",lsModifiedTxns[lsAccountIdCount[iCounter]])
										[+] if (bMatch==TRUE)
											[ ] bMatch=FALSE
											[ ] iFITIDIndex=lsFITIDCount[iCounter] 
											[ ] iCountData=iCountData+1
											[ ] break
									[+] if (iCountData>1)
										[ ] bResult=TRUE
										[ ] break
								[ ] 
								[+] if (bResult==TRUE)
									[ ] ReportStatus("Verify getModifiedTransactions response", FAIL, "Verify getModifiedTransactions response in Cloud SyncLog: FITID {sFITID} is generated multiple times within the same Account {iAccountId}.")
									[ ] iFunctionResult=FAIL
								[+] else
									[ ] 
									[+] for (iCounter=iFITIDIndex;iCounter<ListCount( lsModifiedTxns)+1;++iCounter)
										[ ] bMatch =MatchStr("*{rTxnReqResp.sUserDescription}*",lsModifiedTxns[iCounter])
										[+] if (bMatch==TRUE)
											[ ] sPayeeDescription=lsModifiedTxns[iCounter]
											[ ] iLower=iCounter
											[ ] break
									[+] for (iCounter=iLower;iCounter>0;--iCounter)
										[ ] bMatch =MatchStr("*{rTxnReqResp.sBankcc}*",lsModifiedTxns[iCounter])
										[+] if (bMatch==True) 
											[ ] iLowerIndex=iCounter
											[ ] break
											[ ] 
									[+] for (iCounter=iLower+1;iCounter<ListCount( lsModifiedTxns)+1;++iCounter)
										[ ] bMatch =MatchStr("*{rTxnReqResp.sUserDescription}*",lsModifiedTxns[iCounter])
										[+] if ((bMatch==True) || (iCounter==ListCount( lsModifiedTxns)) )
											[+] if (sPayeeDescription!=lsModifiedTxns[iCounter])
												[ ] iUpper=iCounter
												[ ] break
									[+] for (iCounter=iUpper;iCounter>iFITIDIndex-1;--iCounter)
										[+] if (sPayeeDescription==lsModifiedTxns[iCounter])
											[+] for  (iUpper=iCounter;iUpper>iFITIDIndex;--iUpper)
												[ ] bMatch =MatchStr("*{rAccountReqResp.sAccountId}*{iAccountId}*",lsModifiedTxns[iUpper])
												[+] if (bMatch==TRUE)
													[ ] iUpperIndex=iUpper
													[+] for (iUpper=iUpperIndex;iUpper<ListCount( lsModifiedTxns)+1;++iUpper)
														[ ] bMatch =MatchStr("*{rTxnReqResp.sBankcc}*",lsModifiedTxns[iUpper])
														[ ] bResult=FALSE
														[ ] bResult=MatchStr("*{rTxnReqResp.sModifiedFrom}*",lsModifiedTxns[iUpper])
														[+] if (bMatch==True || (iUpper==ListCount( lsModifiedTxns)) || bResult==TRUE)
															[ ] iUpperIndex=iUpper
															[ ] break
													[ ] break
											[ ] break
											[ ] 
									[+] for (iCounter= iLowerIndex ; iCounter<iUpperIndex ; ++iCounter)
										[ ] bMatch = MatchStr("*{rTxnReqResp.sModifiedTransactions}*", lsModifiedTxns[iCounter])
										[+] if ( bMatch == TRUE)
											[ ] lsModifiedTxns[iCounter]=StrTran( lsModifiedTxns[iCounter],"{rTxnReqResp.sModifiedTransactions}:","")
										[ ] bMatch = MatchStr("*{rTxnReqResp.sTransactions}*", lsModifiedTxns[iCounter])
										[+] if ( bMatch == TRUE)
											[ ] lsModifiedTxns[iCounter]=StrTran( lsModifiedTxns[iCounter],"{rTxnReqResp.sTransactions}:","")
										[ ] ListAppend(lsModifiedResponse,lsModifiedTxns[iCounter])
									[ ] 
									[ ] /// Delete date parameters from the modified response list as it will not match due to differnce of seconds///
									[+] for each sTransactionParam in lsTransactionParams
										[+] for  (iCounter=1;iCounter<ListCount(lsModifiedResponse)+1;++iCounter)
											[ ] bMatch = MatchStr("*{sTransactionParam}*", lsModifiedResponse[iCounter])
											[+] if ( bMatch == TRUE)
												[ ] ListDelete(lsModifiedResponse,iCounter)
												[ ] 
											[ ] 
										[ ] 
									[ ] ////////Verify importtransactionresults response with getmodifiedtransactions response://////
									[ ] 
									[+] for each sModifiedResponse in lsModifiedResponse
										[+] for each sItemResponse in lsResponse
											[ ] bMatch = MatchStr("*{rTxnReqResp.sBankcc}*",sModifiedResponse)
											[+] if ( bMatch == TRUE)
												[ ] sModifiedResponse=StrTran(sModifiedResponse,"{rTxnReqResp.sBankcc}:","")
											[ ] bMatch=FALSE
											[ ] bMatch = MatchStr("*{sModifiedResponse}*", sItemResponse)
											[+] if ( bMatch == TRUE)
												[ ] break
										[+] if(bMatch==FALSE)
											[ ] ReportStatus("Verify transaction responses", FAIL, " Verify getmodifiedtransactions responses: getmodifiedtransactions Response  {sModifiedResponse} didn't match with importtransactionresults response  .")
										[+] // // // if(bMatch)
											[ ] // // // ReportStatus("Verify transaction responses", PASS, " Verify getmodifiedtransactions responses: getmodifiedtransactions Response is {sModifiedResponse} same as importtransactionresults response {sItemResponse}.")
										[+] // // // else
											[ ] // // // ReportStatus("Verify transaction responses", FAIL, " Verify getmodifiedtransactions responses: getmodifiedtransactions Response  {sModifiedResponse} didn't match with importtransactionresults response  .")
										[ ] 
							[+] else
								[ ] ReportStatus("Verify transaction response", FAIL, "Verify getModifiedTransactions response in Cloud SyncLog: Transaction request with {sFITID} not found.")
								[ ] iFunctionResult=FAIL
					[+] else
						[ ] ReportStatus("Verify transaction response", FAIL, "Verify importtransactionsresult response in Cloud SyncLog: Transaction request with {sFITID} not found.")
						[ ] iFunctionResult=FAIL
			[+] else
				[ ] ReportStatus("Verify transaction request", FAIL, "Verify importtransactions request in Cloud SyncLog: Transaction request with {sFITID} not found.")
				[ ] iFunctionResult=FAIL
				[ ] 
			[ ] FileClose (hFile)
			[ ] ///This sleep is here just to ensure hFile is set to nothing////
			[ ] sleep(1)
			[ ] 
		[+] except
			[ ] iFunctionResult=FAIL
		[ ] ///Returning the list of response parameters///
		[ ] return lsModifiedResponse
	[ ] 
	[ ] 
	[ ] // // ==========================================================
	[+] // // FUNCTION: GetManualTransactionResponseFromCloudSyncLog()
		[ ] // // 
		[ ] // // DESCRIPTION:
		[ ] // // This function will fetch Manual Transaction Response From CloudSyncLog if it has been inserted into the Cloud
		[ ] // // 
		[ ] // // PARAMETERS:		STRING	 			sPayee
		[ ] // // 
		[ ] // // RETURNS:			List of response		PASS		If sign up process is complete
		[ ] // // 											FAIL 		If any error occurs
		[ ] // // 
		[ ] // // REVISION HISTORY:
		[ ] // // Mukesh  created  Jan 27 2013
	[ ] // // ==========================================================
	[+] // public LIST OF ANYTYPE GetManualTransactionResponseFromCloudSyncLog(STRING sPayee )
		[ ] // STRING sActual, sLine, sExpected, sExpectedRequest, sExpectedResponse, sItem
		[ ] // STRING sFITID, sExpectedDescription
		[ ] // List OF ANYTYPE lsExcelData, lsTxnRequestParams,lsResponse
		[ ] // HANDLE hFile
		[ ] // HFILE FileHandle
		[ ] // 
		[ ] // INTEGER iCounter, iLower, iUpper
		[ ] // STRING sRequestFileName="SyncLog.txt"
		[ ] // STRING sResponseFileName="ResponseFileName"
		[ ] // 
		[ ] // rTransactionReqRespRecord rTxnReqResp
		[ ] // rTxnReqResp = lsTransactionReqRespValue
		[ ] // 
		[ ] // sExpected =sPayee
		[ ] // 
		[ ] // sExpectedRequest="*{rTxnReqResp.sImportTransactions}*{rTxnReqResp.sIsLastInImportSequence}*{rTxnReqResp.sDescription}*{sExpected}*"
		[ ] // sExpectedResponse="*{rTxnReqResp.sImportTransactionsResult}*{rTxnReqResp.sImportedTransactions}*"
		[ ] // 
		[+] // do
			[ ] // 
			[ ] // hFile = FileOpen (APP_PATH + "\Data\TestData\"+sRequestFileName, FM_READ) 
			[ ] // //print(hFile)
			[ ] // //Verify Transaction Request
			[+] // while (FileReadLine (hFile, sLine))
				[ ] // bMatch=MatchStr(sExpectedRequest,sLine)
				[+] // if (bMatch==TRUE)
					[ ] // break
					[ ] // 
			[+] // if (bMatch==TRUE)
				[ ] // //If Transaction Request found write the matched line to sResponseFileName///
				[ ] // FileHandle = FileOpen (APP_PATH + "\Data\TestData\"+sResponseFileName+".txt", FM_APPEND)
				[ ] // //Split matched line to get it in a list
				[ ] // FileWriteLine (FileHandle, sLine)
				[ ] // FileClose (FileHandle)
				[ ] // lsTxnRequestParams= Split(sLine,",")
				[ ] // //print (lsTxnRequestParams)
				[ ] // iCounter=1
				[ ] // // Fetch the FITID of the fetched transaction by searching it on PayeeName
				[+] // for each sItem in lsTxnRequestParams
					[ ] // bMatch =MatchStr("*{sExpected}*",sItem)
					[+] // if (bMatch==TRUE)
						[ ] // sFITID=lsTxnRequestParams[iCounter-4]
						[ ] // //print(sFITID)
						[ ] // break
					[ ] // ++iCounter
				[ ] // //Fetch the transaction response
				[ ] // sExpectedDescription="*{rTxnReqResp.sUserDescription}*{sExpected}*"
				[ ] // hFile = FileOpen (APP_PATH + "\Data\TestData\"+sRequestFileName, FM_READ) 
				[ ] // lsTxnRequestParams=NULL
				[ ] // //Verify Transaction Response
				[ ] // sLine=NULL
				[+] // while (FileReadLine (hFile, sLine))
					[ ] // bMatch=MatchStr(sExpectedResponse,sLine)
					[+] // if bMatch==TRUE
						[ ] // break
						[ ] // 
				[+] // if (bMatch==TRUE)
					[ ] // //Open file, append line, and close
					[ ] // //If Transaction Request found write the matched line to sResponseFileName///
					[ ] // 
					[ ] // FileHandle = FileOpen (APP_PATH + "\Data\TestData\"+sResponseFileName+".txt", FM_APPEND)
					[ ] // //Split matched line to get it in a list
					[ ] // FileWriteLine (FileHandle, sLine)
					[ ] // FileClose (FileHandle)
					[ ] // lsTxnRequestParams= Split(sLine,",")
					[ ] // //print (lsTxnRequestParams)
					[ ] // iCounter=1
					[ ] // // Match the FITID of the fetched transaction and get the index of FITID list item from the response list///
					[ ] // 
					[+] // for (iCounter=1;iCounter<ListCount( lsTxnRequestParams)+1;++iCounter)
						[ ] // bMatch =MatchStr("*{sFITID}*",lsTxnRequestParams[iCounter])
						[+] // if (bMatch==TRUE)
							[ ] // ++iCounter
							[ ] // bMatch =MatchStr("*{rTxnReqResp.sImported}*",lsTxnRequestParams[iCounter])
							[+] // if (bMatch==TRUE)
								[ ] // iLower=iCounter
								[ ] // break
					[+] // for (iCounter=iLower+1;iCounter<ListCount( lsTxnRequestParams)+1;++iCounter)
						[ ] // bMatch =MatchStr("*{rTxnReqResp.sImported}*",lsTxnRequestParams[iCounter])
						[+] // if ((bMatch==TRUE) || (iCounter==ListCount( lsTxnRequestParams)) )
							[ ] // iUpper=iCounter
							[ ] // break
					[ ] // 
					[+] // for (iCounter= iLower-1 ; iCounter<iUpper+1 ; ++iCounter)
						[ ] // // lsResponse=Split(lsTxnRequestParams[iCounter],":")
						[ ] // // ListAppend(lsResponseKey,lsResponse[1])
						[ ] // // ListAppend(lsResponseVal,lsResponse[2])
						[ ] // ListAppend(lsResponse,lsTxnRequestParams[iCounter])
					[ ] // 
				[+] // else
					[ ] // ReportStatus("Verify transaction response", FAIL, "Verify response in Cloud SyncLog: Ttransaction response not found.")
					[ ] // iFunctionResult=FAIL
			[+] // else
				[ ] // ReportStatus("Verify transaction request", FAIL, "Verify transactions in Cloud SyncLog: Transaction request not found.")
				[ ] // iFunctionResult=FAIL
				[ ] // 
			[ ] // FileClose (hFile)
			[ ] // 
		[+] // except
			[ ] // iFunctionResult=FAIL
		[ ] // //Returning the list of response parameters
		[ ] // return lsResponse
	[ ] // 
	[ ] // ==========================================================
	[+] // FUNCTION: DeleteSyncLogFile()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will delete the cloud sync log file
		[ ] //
		[ ] // PARAMETERS:		STRING	 			QDF Filename            
		[ ] //						STRING 			Sync Log location           //Path
		[ ] //                               
		[ ] //
		[ ] // RETURNS:			INTEGER		PASS		If sign up process is complete
		[ ] //										FAIL		If any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //Dean Paes  created  Jan 28 2013
		[ ] // Udita Dube updated Feb 04 2013 - Remove OFXLOG.DAT file as well
	[ ] // ==========================================================
	[+] public INTEGER DeleteSyncLogFile(STRING sDataFileName,STRING sLogFileLocation optional) 
		[ ] 
		[+] //Variable
			[ ] 
			[ ] STRING sLogFile
			[ ] 
		[ ] 
		[+] do
			[ ] 
			[ ] //Cloud Log file location
			[+] if(sLogFileLocation==NULL)
				[ ] sLogFile="C:\Quicken\ApplicationSpecific\Data\TestData"
				[ ] 
			[+] else
				[ ] sLogFile=sLogFileLocation
				[ ] 
				[ ] 
			[ ] 
			[ ] //If log file exists delete cloud log file
			[+] if(FileExists(sLogFile+"\"+sDataFileName+"_SyncLog.dat"))
				[ ] SYS_RemoveFile(sLogFile+"\"+sDataFileName+"_SyncLog.dat")
				[ ] 
				[ ] 
			[+] else
				[ ] ReportStatus("Delete log File",FAIL,"Log file does not exist")
				[ ] 
			[ ] 
			[ ] iFunctionResult= PASS
			[ ] 
		[+] except
			[ ] iFunctionResult=FAIL
		[ ] return iFunctionResult
		[ ] 
		[ ] 
	[ ] // 
	[ ] // ==========================================================
	[+] // FUNCTION: GetManualTransactionResponseFromCloudSyncLog()
		[ ] // 
		[ ] // DESCRIPTION:
		[ ] // This function will fetch Manual Transaction Response From CloudSyncLog if it has been inserted into the Cloud
		[ ] // 
		[ ] // PARAMETERS:		STRING	 			sPayee
		[ ] // 
		[ ] // RETURNS:			If pass list of verified responses after verifying the manual transaction
		[ ] // If Fail returns the empty list and logs the failure
		[ ] // 1		If any error occurs
		[ ] // 
		[ ] // REVISION HISTORY:
		[ ] // Mukesh  created  Jan 27 2013
	[ ] // ==========================================================
	[+] public LIST OF ANYTYPE GetManualTransactionResponseFromCloudSyncLog(STRING sPayee , STRING sCategoryid optional)
		[ ] STRING  sExpectedRequest, sExpectedResponse, sExpectedModifiedResponse,sItemResponse, sModifiedResponse
		[ ] STRING sFITID, sExpectedDescription, sStrSyncId,sStrNextSyncId,sItem,sExpected,sActual,sLine
		[ ] List OF ANYTYPE lsExcelData, lsTxnRequestParams,lsResponse,lsModifiedResponse, lsSyncId,lsRequestResponse
		[ ] List OF ANYTYPE lsImportTxnResults , lsModifiedTxns
		[ ] HANDLE hFile
		[ ] HFILE FileHandle
		[ ] STRING sTransactionParam, sCorrelationId
		[ ] INTEGER iCounter, iLower, iUpper, iSyncId, iUpperIndex
		[ ] STRING sRequestFileName="SyncLog.txt"
		[ ] STRING sResponseFileName="ResponseFileName"
		[ ] 
		[ ] rTransactionReqRespRecord rTxnReqResp
		[ ] rTxnReqResp = lsTransactionReqRespValue
		[ ] 
		[ ] sExpected =sPayee
		[+] if (sCategoryid!=NULL)
			[ ] sExpectedRequest="*{rTxnReqResp.sImportTransactions}*{rTxnReqResp.sIsLastInImportSequence}*{rTxnReqResp.sCategoryId}*{sCategoryid}*{rTxnReqResp.sDescription}*{sExpected}*"
			[ ] sExpectedResponse="*{rTxnReqResp.sImportTransactionsResult}*{rTxnReqResp.sImportedTransactions}*{rTxnReqResp.sCategoryId}*{sCategoryid}*{rTxnReqResp.sDescription}*{sExpected}*"
			[ ] sExpectedModifiedResponse="*{rTxnReqResp.sModifiedTransactions}*{rTxnReqResp.sTransactions}*{rTxnReqResp.sCategoryId}*{sCategoryid}*{rTxnReqResp.sDescription}*{sExpected}*"
			[ ] 
		[+] else
			[ ] sExpectedRequest="*{rTxnReqResp.sImportTransactions}*{rTxnReqResp.sIsLastInImportSequence}*{rTxnReqResp.sDescription}*{sExpected}*"
			[ ] sExpectedResponse="*{rTxnReqResp.sImportTransactionsResult}*{rTxnReqResp.sImportedTransactions}*"
			[ ] sExpectedModifiedResponse="*{rTxnReqResp.sModifiedTransactions}*{rTxnReqResp.sTransactions}*{rTxnReqResp.sDescription}*{sExpected}*"
			[ ] 
		[ ] 
		[+] do
			[ ] 
			[ ] hFile = FileOpen (APP_PATH + "\Data\TestData\"+sRequestFileName, FM_READ) 
			[ ] print(hFile)
			[ ] // /Verify Transaction Request////
			[+] while (FileReadLine (hFile, sLine))
				[ ] bMatch=MatchStr(sExpectedRequest,sLine)
				[+] if (bMatch==TRUE)
					[ ] break
					[ ] 
			[+] if (bMatch==TRUE)
				[ ] // If Transaction Request found write the matched line to sResponseFileName///
				[ ] FileHandle = FileOpen (APP_PATH + "\Data\TestData\"+sResponseFileName+".txt", FM_APPEND)
				[ ] // Split matched line to get it in a list
				[ ] FileWriteLine (FileHandle, sLine)
				[ ] FileClose (FileHandle)
				[ ] lsTxnRequestParams=NULL
				[ ] // lsRequestResponse=NULL
				[ ] lsTxnRequestParams= Split(sLine,",")
				[+] for  (iCounter=1;iCounter<ListCount( lsTxnRequestParams)+1;++iCounter)
					[ ] ListAppend(lsRequestResponse,StrTran(StrTran(StrTran(StrTran(StrTran(lsTxnRequestParams[iCounter],chr(123),""),chr(125),""),chr(34),""),chr(91),""),chr(93),""))
				[ ] iCounter=1
				[ ] // / Fetch the sCorrelationId of the fetched transaction by searching it on PayeeName///
				[ ] iUpper=1
				[ ] iLower=1
				[+] for  (iCounter=1;iCounter<ListCount( lsRequestResponse)+1;++iCounter)
					[ ] bMatch =MatchStr("*{sExpected}*",lsRequestResponse[iCounter])
					[+] if (bMatch==TRUE)
						[ ] iUpper=iCounter
						[ ] break
				[+] for  (iCounter=iUpper;iCounter>0;--iCounter)
					[ ] bMatch =MatchStr("*{rTxnReqResp.sBankcc}*",lsRequestResponse[iCounter])
					[+] if (bMatch==TRUE)
						[ ] iLower=iCounter
						[ ] break
				[+] for  (iCounter=iLower;iCounter<iUpper;++iCounter)
					[ ] bMatch =MatchStr("*{rTxnReqResp.sCorrelationId}*",lsRequestResponse[iCounter])
					[+] if (bMatch==TRUE)
						[ ] sCorrelationId=lsRequestResponse[iCounter]
						[ ] break
				[ ] 
				[ ] // Fetch the transaction response////
				[ ] sExpectedDescription="*{rTxnReqResp.sUserDescription}*{sExpected}*"
				[ ] hFile = FileOpen (APP_PATH + "\Data\TestData\"+sRequestFileName, FM_READ) 
				[ ] lsTxnRequestParams=NULL
				[ ] // /Verify Transaction Response////
				[ ] sLine=NULL
				[+] while (FileReadLine (hFile, sLine))
					[ ] bMatch=MatchStr(sExpectedResponse,sLine)
					[+] if bMatch==TRUE
						[ ] break
						[ ] 
				[+] if (bMatch==TRUE)
					[ ] // Open file, append line, and close
					[ ] // If Transaction Request found write the matched line to sResponseFileName///
					[ ] 
					[ ] FileHandle = FileOpen (APP_PATH + "\Data\TestData\"+sResponseFileName+".txt", FM_APPEND)
					[ ] // Split matched line to get it in a list
					[ ] FileWriteLine (FileHandle, sLine)
					[ ] FileClose (FileHandle)
					[ ] lsTxnRequestParams=NULL
					[ ] 
					[ ] lsTxnRequestParams= Split(sLine,",")
					[+] for  (iCounter=1;iCounter<ListCount( lsTxnRequestParams)+1;++iCounter)
						[ ] ListAppend(lsImportTxnResults,StrTran(StrTran(StrTran(StrTran(StrTran(lsTxnRequestParams[iCounter],chr(123),""),chr(125),""),chr(34),""),chr(91),""),chr(93),""))
					[ ] // / Match the FITID of the fetched transaction and get the index of FITID list item from the response list///
					[ ] 
					[+] for (iCounter=1;iCounter<ListCount( lsImportTxnResults)+1;++iCounter)
						[ ] bMatch =MatchStr("*{sCorrelationId}*",lsImportTxnResults[iCounter])
						[+] if (bMatch==TRUE)
							[ ] ++iCounter
							[ ] bMatch =MatchStr("*{rTxnReqResp.sImported}*",lsImportTxnResults[iCounter])
							[+] if (bMatch==TRUE)
								[ ] iLower=iCounter
								[ ] break
					[+] for (iCounter=iLower+1;iCounter<ListCount( lsImportTxnResults)+1;++iCounter)
						[ ] bMatch =MatchStr("*{rTxnReqResp.sImported}*",lsImportTxnResults[iCounter])
						[+] if ((bMatch==TRUE) || (iCounter==ListCount( lsImportTxnResults)) )
							[ ] iUpper=iCounter
							[ ] break
					[ ] 
					[+] for (iCounter= iLower-1 ; iCounter<iUpper+1 ; ++iCounter)
						[ ] ListAppend(lsResponse,lsImportTxnResults[iCounter])
					[ ] 
					[ ] ///Verify Transaction in getModifiedTransactions response////
					[ ] lsSyncId =Split(lsResponse[2],":")
					[ ] iSyncId=VAL(lsSyncId[4])+1
					[ ] sStrSyncId=lsSyncId[3]+":"+lsSyncId[4]
					[ ] sStrNextSyncId=lsSyncId[3]+":"+"{iSyncId}"
					[ ] hFile = FileOpen (APP_PATH + "\Data\TestData\"+sRequestFileName, FM_READ) 
					[ ] lsTxnRequestParams=NULL
					[ ] // // /Verify Transaction Response////
					[ ] sLine=NULL
					[ ] 
					[+] while (FileReadLine (hFile, sLine))
						[ ] bMatch=MatchStr(sExpectedModifiedResponse,sLine)
						[+] if bMatch==TRUE
							[ ] break
					[+] if (bMatch==TRUE)
						[ ] // // Open file, append line, and close
						[ ] // If Transaction Request found write the matched line to sResponseFileName///
						[ ] 
						[ ] FileHandle = FileOpen (APP_PATH + "\Data\TestData\"+sResponseFileName+".txt", FM_APPEND)
						[ ] // Split matched line to get it in a list
						[ ] FileWriteLine (FileHandle, sLine)
						[ ] FileClose (FileHandle)
						[ ] lsTxnRequestParams=NULL
						[ ] lsTxnRequestParams= Split(sLine,",")
						[+] for  (iCounter=1;iCounter<ListCount( lsTxnRequestParams)+1;++iCounter)
							[ ] ListAppend(lsModifiedTxns,StrTran(StrTran(StrTran(StrTran(StrTran(lsTxnRequestParams[iCounter],chr(123),""),chr(125),""),chr(34),""),chr(91),""),chr(93),""))
						[ ] iCounter=1
						[ ] iUpper=1
						[ ] iLower=1
						[ ] sExpectedDescription=NUll
						[ ] sExpectedDescription="{rTxnReqResp.sUserDescription}:{sExpected}"
						[ ] 
						[+] for (iCounter=1;iCounter<ListCount( lsModifiedTxns)+1;++iCounter)
							[ ] bMatch =MatchStr("*{sStrSyncId}*",lsModifiedTxns[iCounter])
							[+] if (bMatch==TRUE)
								[ ] iLower=iCounter
								[ ] break
						[+] for (iCounter=iLower+1;iCounter<ListCount( lsModifiedTxns)+1;++iCounter)
							[ ] bMatch =MatchStr("*{rTxnReqResp.sUserDescription}*",lsModifiedTxns[iCounter])
							[+] if ((bMatch==True) || (iCounter==ListCount( lsModifiedTxns)) )
								[+] if (sExpectedDescription!=lsModifiedTxns[iCounter])
									[ ] iUpper=iCounter
									[ ] break
								[ ] 
						[+] for (iCounter=iUpper;iCounter>iLower+1;--iCounter)
							[+] if(sExpectedDescription==lsModifiedTxns[iCounter])
								[ ] iUpperIndex=iCounter
								[ ] break
								[ ] 
						[+] for (iCounter= iLower ; iCounter<iUpperIndex+2 ; ++iCounter)
							[ ] bMatch = MatchStr("*{rTxnReqResp.sTransactions}*", lsModifiedTxns[iCounter])
							[+] if ( bMatch == TRUE)
								[ ] lsModifiedTxns[iCounter]=StrTran( lsModifiedTxns[iCounter],"{rTxnReqResp.sTransactions}:","")
							[ ] bMatch = MatchStr("*{rTxnReqResp.sModifiedTransactions}*", lsModifiedTxns[iCounter])
							[+] if ( bMatch == TRUE)
								[ ] lsModifiedTxns[iCounter]=StrTran( lsModifiedTxns[iCounter],"{rTxnReqResp.sModifiedTransactions}:","")
							[ ] ListAppend(lsModifiedResponse,lsModifiedTxns[iCounter])
						[ ] 
						[ ] // // / Delete date parameters from the modified response list as it will not match due to differnce of seconds///
						[+] for each sTransactionParam in lsTransactionParams
							[+] for  (iCounter=1;iCounter<ListCount(lsModifiedResponse)+1;++iCounter)
								[ ] bMatch = MatchStr("*{sTransactionParam}*", lsModifiedResponse[iCounter])
								[+] if ( bMatch == TRUE)
									[ ] ListDelete(lsModifiedResponse,iCounter)
						[ ] //////Verify importtransactionresults response with getmodifiedtransactions response://////
						[+] for each sModifiedResponse in lsModifiedResponse
							[+] for each sItemResponse in lsResponse
								[ ] bMatch = MatchStr("*{rTxnReqResp.sBankcc}*",sModifiedResponse)
								[+] if ( bMatch == TRUE)
									[ ] sModifiedResponse=StrTran(sModifiedResponse,"{rTxnReqResp.sBankcc}:","")
								[ ] bMatch=FALSE
								[ ] bMatch = MatchStr("*{sModifiedResponse}*", sItemResponse)
								[+] if ( bMatch == TRUE)
									[ ] break
							[+] if(bMatch==FALSE)
								[ ] ReportStatus("Verify transaction responses", FAIL, " Verify getmodifiedtransactions responses: getmodifiedtransactions Response  {sModifiedResponse} didn't match with importtransactionresults response  .")
							[+] // // if(bMatch)
								[ ] // // ReportStatus("Verify transaction responses", PASS, " Verify getmodifiedtransactions responses: getmodifiedtransactions Response is {sModifiedResponse} same as importtransactionresults response {sItemResponse}.")
							[+] // // else
								[ ] // // ReportStatus("Verify transaction responses", FAIL, " Verify getmodifiedtransactions responses: getmodifiedtransactions Response  {sModifiedResponse} didn't match with importtransactionresults response  .")
								[ ] 
					[+] else
						[ ] ReportStatus("Verify transaction response", FAIL, "Verify getmodifiedtransactions response in Cloud SyncLog: Transaction response for payee {sPayee} not found.")
						[ ] iFunctionResult=FAIL
					[ ] 
				[+] else
					[ ] ReportStatus("Verify transaction response", FAIL, "Verify importtransactionresults response in Cloud SyncLog: Transaction response for payee {sPayee} not found.")
					[ ] iFunctionResult=FAIL
			[+] else
				[ ] ReportStatus("Verify transaction request", FAIL, "Verify transactions in Cloud SyncLog: Transaction request for payee {sPayee} not found.")
				[ ] iFunctionResult=FAIL
				[ ] 
			[ ] FileClose (hFile)
			[ ] 
		[+] except
			[ ] Exceptlog()
			[ ] iFunctionResult=FAIL
		[ ] // /Returning the list of response parameters///
		[ ] return lsModifiedResponse
	[ ] 
	[ ] // // ==========================================================
	[+] // // FUNCTION: GetDeletedManualTransactionResponseFromCloudSyncLog()
		[ ] // // 
		[ ] // // DESCRIPTION:
		[ ] // // This function will verify the response of the delete transaction request
		[ ] // // 
		[ ] // // PARAMETERS:		STRING	 			sPayee
		[ ] // //                                  STRING	 			sSyncID
		[ ] // //                                 List OF ANYTYPE	 	sResponseBeforeDelete
		[ ] // // RETURNS:			If pass list of verified responses after delete
		[ ] // //If Fail returns the empty list and logs the failure
		[ ] // // 		
		[ ] // // 
		[ ] // // REVISION HISTORY:
		[ ] // // Mukesh  created  Feb 02 2013
	[ ] // // ==========================================================
	[+] public LIST OF ANYTYPE GetDeletedManualTransactionResponseFromCloudSyncLog(STRING sPayee,STRING sSyncID,LIST OF ANYTYPE lsResponseBeforeDelete)
		[ ] STRING  sExpectedRequest, sExpectedResponse, sExpectedModifiedResponse,sItemResponse, sModifiedResponse
		[ ] STRING sFITID, sExpectedDescription, sStrSyncId,sStrNextSyncId,sItem,sExpected,sActual,sLine
		[ ] List OF ANYTYPE lsExcelData, lsTxnRequestParams,lsResponse,lsModifiedResponse, lsSyncId,lsRequestResponse
		[ ] HANDLE hFile
		[ ] HFILE FileHandle
		[ ] List OF ANYTYPE lsImportTxnResults , lsModifiedTxns
		[ ] 
		[ ] STRING sTransactionParam, sCorrelationId
		[ ] 
		[ ] INTEGER iCounter, iLower, iUpper, iSyncId, iUpperIndex
		[ ] STRING sRequestFileName="SyncLog1.txt"
		[ ] STRING sResponseFileName="ResponseFileName"
		[ ] 
		[ ] rTransactionReqRespRecord rTxnReqResp
		[ ] rTxnReqResp = lsTransactionReqRespValue
		[ ] 
		[ ] sExpected =sPayee
		[ ] 
		[ ] sExpectedRequest="*{rTxnReqResp.sImportTransactions}*{rTxnReqResp.sIsLastInImportSequence}*{rTxnReqResp.sSyncID}*{sSyncID}*"
		[ ] sExpectedResponse="*{rTxnReqResp.sImportTransactionsResult}*{rTxnReqResp.sImportedTransactions}*"
		[ ] sExpectedModifiedResponse="*{rTxnReqResp.sModifiedTransactions}*{rTxnReqResp.sTransactions}*{rTxnReqResp.sSyncID}*{sSyncID}*"
		[ ] 
		[+] do
			[ ] hFile = FileOpen (APP_PATH + "\Data\TestData\"+sRequestFileName, FM_READ) 
			[ ] print(hFile)
			[ ] ///Verify Transaction Request////
			[+] while (FileReadLine (hFile, sLine))
				[ ] bMatch=MatchStr(sExpectedRequest,sLine)
				[+] if (bMatch==TRUE)
					[ ] break
			[+] if (bMatch==TRUE)
				[ ] //// If Transaction Request found write the matched line to sResponseFileName///
				[ ] FileHandle = FileOpen (APP_PATH + "\Data\TestData\"+sResponseFileName+".txt", FM_APPEND)
				[ ] //// Split matched line to get it in a list
				[ ] FileWriteLine (FileHandle, sLine)
				[ ] FileClose (FileHandle)
				[ ] lsTxnRequestParams=NULL
				[ ] lsTxnRequestParams= Split(sLine,",")
				[+] for  (iCounter=1;iCounter<ListCount( lsTxnRequestParams)+1;++iCounter)
					[ ] ListAppend(lsRequestResponse,StrTran(StrTran(StrTran(StrTran(StrTran(lsTxnRequestParams[iCounter],chr(123),""),chr(125),""),chr(34),""),chr(91),""),chr(93),""))
				[ ] iCounter=1
				[ ] ///Verify the SyncID in the importtransactions////
				[ ] iUpper=1
				[ ] iLower=1
				[+] for  (iCounter=1;iCounter<ListCount( lsRequestResponse)+1;++iCounter)
					[ ] bMatch =MatchStr("*{sSyncID}*",lsRequestResponse[iCounter])
					[+] if (bMatch==TRUE)
						[ ] break
				[ ] //// Fetch the transaction response////
				[ ] sExpectedDescription="*{rTxnReqResp.sSyncID}*{sSyncID}*"
				[ ] hFile = FileOpen (APP_PATH + "\Data\TestData\"+sRequestFileName, FM_READ) 
				[ ] lsTxnRequestParams=NULL
				[ ] ///Verify Transaction Response////
				[ ] sLine=NULL
				[+] while (FileReadLine (hFile, sLine))
					[ ] bMatch=MatchStr(sExpectedResponse,sLine)
					[+] if bMatch==TRUE
						[ ] break
						[ ] 
				[+] if (bMatch==TRUE)
					[ ] // Open file, append line, and close
					[ ] //// If Transaction Request found write the matched line to sResponseFileName///
					[ ] 
					[ ] FileHandle = FileOpen (APP_PATH + "\Data\TestData\"+sResponseFileName+".txt", FM_APPEND)
					[ ] //// Split matched line to get it in a list
					[ ] FileWriteLine (FileHandle, sLine)
					[ ] FileClose (FileHandle)
					[ ] lsTxnRequestParams=NULL
					[ ] lsTxnRequestParams= Split(sLine,",")
					[+] for  (iCounter=1;iCounter<ListCount( lsTxnRequestParams)+1;++iCounter)
						[ ] ListAppend(lsImportTxnResults,StrTran(StrTran(StrTran(StrTran(StrTran(lsTxnRequestParams[iCounter],chr(123),""),chr(125),""),chr(34),""),chr(91),""),chr(93),""))
					[ ] iCounter=1
					[ ] /// Match the FITID of the fetched transaction and get the index of FITID list item from the response list///
					[ ] 
					[+] for (iCounter=1;iCounter<ListCount( lsImportTxnResults)+1;++iCounter)
						[ ] bMatch =MatchStr("*{sSyncID}*",lsImportTxnResults[iCounter])
						[+] if (bMatch==TRUE) || (iCounter==ListCount( lsImportTxnResults)) 
							[ ] iLower=iCounter
							[ ] break
					[+] for (iCounter=iLower+1;iCounter<ListCount( lsImportTxnResults)+1;++iCounter)
						[ ] bMatch =MatchStr("*{rTxnReqResp.sImported}*",lsImportTxnResults[iCounter])
						[+] if ((bMatch==TRUE) || (iCounter==ListCount( lsImportTxnResults)) )
							[ ] iUpper=iCounter
							[ ] break
					[ ] 
					[+] for (iCounter= iLower-1 ; iCounter<iUpper+1 ; ++iCounter)
						[ ] ListAppend(lsResponse,lsImportTxnResults[iCounter])
					[ ] 
					[ ] /////Verify Transaction in getModifiedTransactions response////
					[ ] lsSyncId =Split(lsResponse[2],":")
					[ ] iSyncId=VAL(lsSyncId[4])+1
					[ ] sStrSyncId=lsSyncId[3]+":"+lsSyncId[4]
					[ ] // sStrNextSyncId=lsSyncId[3]+":"+"{iSyncId}"
					[ ] hFile = FileOpen (APP_PATH + "\Data\TestData\"+sRequestFileName, FM_READ) 
					[ ] lsTxnRequestParams=NULL
					[ ] ///Verify Transaction Response////
					[ ] sLine=NULL
					[ ] 
					[+] while (FileReadLine (hFile, sLine))
						[ ] bMatch=MatchStr(sExpectedModifiedResponse,sLine)
						[+] if bMatch==TRUE
							[ ] break
					[+] if (bMatch==TRUE)
						[ ] // Open file, append line, and close
						[ ] //// If Transaction Request found write the matched line to sResponseFileName///
						[ ] 
						[ ] FileHandle = FileOpen (APP_PATH + "\Data\TestData\"+sResponseFileName+".txt", FM_APPEND)
						[ ] //// Split matched line to get it in a list
						[ ] FileWriteLine (FileHandle, sLine)
						[ ] FileClose (FileHandle)
						[ ] lsTxnRequestParams=NULL
						[ ] lsTxnRequestParams= Split(sLine,",")
						[+] for  (iCounter=1;iCounter<ListCount( lsTxnRequestParams)+1;++iCounter)
							[ ] ListAppend(lsModifiedTxns,StrTran(StrTran(StrTran(StrTran(StrTran(lsTxnRequestParams[iCounter],chr(123),""),chr(125),""),chr(34),""),chr(91),""),chr(93),""))
						[ ] iCounter=1
						[ ] iUpper=1
						[ ] iLower=1
						[ ] sExpectedDescription=NUll
						[ ] sExpectedDescription="{rTxnReqResp.sUserDescription}:{sExpected}"
						[ ] 
						[+] for (iCounter=1;iCounter<ListCount( lsModifiedTxns)+1;++iCounter)
							[ ] bMatch =MatchStr("*{sSyncID}*",lsModifiedTxns[iCounter])
							[+] if (bMatch==TRUE)
								[ ] iLower=iCounter
								[ ] break
						[+] for (iCounter=iLower+1;iCounter<ListCount( lsModifiedTxns)+1;++iCounter)
							[ ] bMatch =MatchStr("*{rTxnReqResp.sUserDescription}*",lsModifiedTxns[iCounter])
							[+] if ((bMatch==True) || (iCounter==ListCount( lsModifiedTxns)) )
								[+] if ((sExpectedDescription!=lsModifiedTxns[iCounter]) || (iCounter==ListCount( lsModifiedTxns)) )
									[ ] iUpper=iCounter
									[ ] break
								[ ] 
						[+] for (iCounter=iUpper;iCounter>iLower+1;--iCounter)
							[+] if ((sExpectedDescription==lsModifiedTxns[iCounter]) || (iCounter==iLower) )
								[ ] iUpperIndex=iCounter
								[ ] break
								[ ] 
						[+] for (iCounter= iLower ; iCounter<iUpperIndex+2 ; ++iCounter)
							[ ] bMatch = MatchStr("*{rTxnReqResp.sModifiedTransactions}*", lsModifiedTxns[iCounter])
							[+] if ( bMatch == TRUE)
								[ ] lsModifiedTxns[iCounter]=StrTran( lsModifiedTxns[iCounter],"{rTxnReqResp.sModifiedTransactions}:","")
							[ ] bMatch = MatchStr("*{rTxnReqResp.sTransactions}*", lsModifiedTxns[iCounter])
							[+] if ( bMatch == TRUE)
								[ ] lsModifiedTxns[iCounter]=StrTran( lsModifiedTxns[iCounter],"{rTxnReqResp.sTransactions}:","")
							[ ] ListAppend(lsModifiedResponse,lsModifiedTxns[iCounter]) 
						[ ] 
						[ ] /// Delete date parameters from the modified response list as it will not match due to differnce of seconds///
						[+] for each sTransactionParam in lsTransactionParams
							[+] for  (iCounter=1;iCounter<ListCount(lsModifiedResponse)+1;++iCounter)
								[ ] bMatch = MatchStr("*{sTransactionParam}*", lsModifiedResponse[iCounter])
								[+] if ( bMatch == TRUE)
									[ ] ListDelete(lsModifiedResponse,iCounter)
						[ ] ////////Verify importtransactionresults response with getmodifiedtransactions response://////
						[+] for each sModifiedResponse in lsModifiedResponse
							[+] for each sItemResponse in lsResponseBeforeDelete
								[ ] bMatch = MatchStr("*{sModifiedResponse}*", sItemResponse)
								[+] if ( bMatch == TRUE)
									[ ] break
							[+] if(bMatch)
								[ ] ReportStatus("Verify transaction response", PASS, " Verify getmodifiedtransactions response before and after delete: Response after delete is {sModifiedResponse} updated as before delete response {sItemResponse}.")
							[+] else
								[ ] ReportStatus("Verify transaction response", FAIL, " Verify getmodifiedtransactions response before and after delete: Response after delete  {sModifiedResponse} didn't match with response before delete.")
					[+] else
						[ ] ReportStatus("Verify transaction response", FAIL, "Verify deleted response getmodifiedtransactions in Cloud SyncLog: Transaction response for payee {sPayee} not found.")
						[ ] iFunctionResult=FAIL
					[ ] 
				[+] else
					[ ] ReportStatus("Verify transaction response", FAIL, "Verify deleted response importtransactionresults in Cloud SyncLog: Transaction response for payee {sPayee} not found.")
					[ ] iFunctionResult=FAIL
			[+] else
				[ ] ReportStatus("Verify transaction request", FAIL, "Verify deleted request in importtransactions in Cloud SyncLog: Transaction request for payee {sPayee} not found.")
				[ ] iFunctionResult=FAIL
				[ ] 
			[ ] FileClose (hFile)
			[ ] 
		[+] except
			[ ] iFunctionResult=FAIL
		[ ] ///Returning the list of response parameters///
		[ ] return lsModifiedResponse
	[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: GetAccountsResultFromCloudSyncLog()
		[ ] // 
		[ ] // DESCRIPTION:
		[ ] // This function will fetch response of the GetAccountResult request
		[ ] // 
		[ ] // PARAMETERS:		STRING	 			sAccountName
		[ ] // 
		[ ] // RETURNS:			List of response		     This function will return list of GetAccountsResult response
		[ ] // 1		If any error occurs
		[ ] // 
		[ ] // REVISION HISTORY:
		[ ] // Mukesh  created  Feb 02 2013
	[ ] // ==========================================================
	[+] // public LIST OF ANYTYPE GetAccountsResultFromCloudSyncLog(STRING sAccountName)
		[ ] // STRING  sExpectedRequest, sExpectedResponse, sExpectedModifiedResponse,sItemResponse, sModifiedResponse
		[ ] // STRING sFITID, sExpectedDescription, sStrSyncId,sStrNextSyncId,sItem,sExpected,sActual,sLine
		[ ] // List OF ANYTYPE lsExcelData, lsTxnRequestParams,lsResponse,lsAccountResponse, lsSyncId 
		[ ] // HANDLE hFile
		[ ] // HFILE FileHandle
		[ ] // STRING sTransactionDate, sCorrelationId
		[ ] // INTEGER iCounter, iLower, iUpper, iSyncId, iUpperIndex,iLowerIndex
		[ ] // STRING sRequestFileName="SyncLog.txt"
		[ ] // STRING sResponseFileName="ResponseFileName"
		[ ] // 
		[ ] // rAccountReqRespRecord rAccountReqResp
		[ ] // rAccountReqResp = lsAccountReqRespRecordValue
		[ ] // 
		[ ] // sExpected =sAccountName
		[ ] // 
		[ ] // sExpectedRequest="*{rAccountReqResp.sAddAccount}*"
		[ ] // // sExpectedRequest="*{rAccountReqResp.sGetAccountsResult}*{rAccountReqResp.sAccounts}*"
		[ ] // 
		[+] // do
			[ ] // hFile = FileOpen (APP_PATH + "\Data\TestData\"+sRequestFileName, FM_READ) 
			[ ] // print(hFile)
			[ ] // ///Verify Transaction Request////
			[+] // while (FileReadLine (hFile, sLine))
				[ ] // bMatch=MatchStr(sExpectedRequest,sLine)
				[+] // if (bMatch==TRUE)
					[ ] // break
			[+] // if (bMatch==TRUE)
				[ ] // //// If Transaction Request found write the matched line to sResponseFileName///
				[ ] // FileHandle = FileOpen (APP_PATH + "\Data\TestData\"+sResponseFileName+".txt", FM_APPEND)
				[ ] // //// Split matched line to get it in a list
				[ ] // FileWriteLine (FileHandle, sLine)
				[ ] // FileClose (FileHandle)
				[ ] // lsTxnRequestParams= Split(sLine,",")
				[+] // for  (iCounter=1;iCounter<ListCount( lsTxnRequestParams)+1;++iCounter)
					[ ] // ListAppend(lsAccountResponse,StrTran(StrTran(StrTran(StrTran(StrTran(lsTxnRequestParams[iCounter],chr(123),""),chr(125),""),chr(34),""),chr(91),""),chr(93),""))
				[ ] // 
				[ ] // iCounter=1
				[ ] // iUpper=1
				[ ] // iLower=1
				[+] // for  (iCounter=1;iCounter<ListCount( lsAccountResponse)+1;++iCounter)
					[ ] // bMatch =MatchStr("*{sExpected}*",lsAccountResponse[iCounter])
					[+] // if (bMatch==TRUE)
						[ ] // iLowerIndex=iCounter
						[ ] // break
					[ ] // 
				[+] // for (iCounter=iLowerIndex;iCounter>1;--iCounter)
					[ ] // bMatch =MatchStr("*{rAccountReqResp.sFiLoginId}*",lsAccountResponse[iCounter])
					[+] // if (bMatch==TRUE) 
						[ ] // iLower=iCounter
						[ ] // break
				[+] // for (iCounter=iLower+1;iCounter<ListCount( lsAccountResponse)+1;++iCounter)
					[ ] // bMatch =MatchStr("*{rAccountReqResp.sCurrentBalance}*",lsAccountResponse[iCounter])
					[+] // if ((bMatch==TRUE) || (iCounter==ListCount( lsAccountResponse)) )
						[ ] // iUpper=iCounter
						[ ] // break
						[ ] // 
				[ ] // //Add responses to response list
				[+] // for (iCounter= iLower ; iCounter<iUpper+1 ; ++iCounter)
					[ ] // ListAppend(lsResponse,lsAccountResponse[iCounter])
			[+] // else
				[ ] // ReportStatus("Verify GetAccountsResult request", FAIL, "Verify GetAccountsResult in Cloud SyncLog: Account request for {sAccountName} not found.")
				[ ] // iFunctionResult=FAIL
				[ ] // 
			[ ] // FileClose (hFile)
			[ ] // 
		[+] // except
			[ ] // iFunctionResult=FAIL
		[ ] // ///Returning the list of response parameters///
		[ ] // return lsResponse
	[ ] 
	[+] public LIST OF ANYTYPE GetAccountsResultFromCloudSyncLog(STRING sAccountName)
		[ ] 
		[ ] STRING  sExpectedRequest, sExpectedResponse, sAccountRequest,sItemResponse, sAccountResponse
		[ ] STRING sFITID, sExpectedDescription, sStrSyncId,sStrNextSyncId,sItem,sExpected,sActual,sLine
		[ ] List OF ANYTYPE lsExcelData, lsAccountRequest, lsRequestData ,lsAccountResponse, lsTxnRequestParams
		[ ] List OF ANYTYPE  lsResponseData
		[ ] HANDLE hFile
		[ ] HFILE FileHandle
		[ ] STRING sTransactionDate, sCorrelationId
		[ ] 
		[ ] INTEGER iCounter, iLower, iUpper, iSyncId, iUpperIndex,iLowerIndex
		[ ] STRING sRequestFileName="SyncLog.txt"
		[ ] STRING sResponseFileName="ResponseFileName"
		[ ] 
		[ ] rAccountReqRespRecord rAccountReqResp
		[ ] rAccountReqResp = lsAccountReqRespRecordValue
		[ ] 
		[ ] sExpected =sAccountName
		[ ] 
		[ ] sExpectedRequest = "*{rAccountReqResp.sRequests}*{rAccountReqResp.sAddAccount}*"
		[ ] sExpectedResponse = "{rAccountReqResp.sSuccessfulAddAccount}"
		[ ] 
		[ ] 
		[ ] 
		[+] do
			[ ] 
			[ ] hFile = FileOpen (APP_PATH + "\Data\TestData\"+sRequestFileName, FM_READ) 
			[ ] print(hFile)
			[ ] ///Verify Transaction Request////
			[+] while (FileReadLine (hFile, sLine))
				[ ] bMatch=MatchStr(sExpectedRequest,sLine)
				[+] if (bMatch==TRUE)
					[ ] break
			[+] if (bMatch==TRUE)
				[ ] //// If Transaction Request found write the matched line to sResponseFileName///
				[ ] FileHandle = FileOpen (APP_PATH + "\Data\TestData\"+sResponseFileName+".txt", FM_APPEND)
				[ ] //// Split matched line to get it in a list
				[ ] FileWriteLine (FileHandle, sLine)
				[ ] FileClose (FileHandle)
				[ ] lsTxnRequestParams= Split(sLine,",")
				[+] for  (iCounter=1;iCounter<ListCount( lsTxnRequestParams)+1;++iCounter)
					[ ] ListAppend(lsAccountRequest,StrTran(StrTran(StrTran(StrTran(StrTran(lsTxnRequestParams[iCounter],chr(123),""),chr(125),""),chr(34),""),chr(91),""),chr(93),""))
				[ ] 
				[ ] iCounter=1
				[ ] iUpper=1
				[ ] iLower=1
				[ ] //getting the index of sourceAccountName parameter
				[+] for  (iCounter=1;iCounter<ListCount( lsAccountRequest)+1;++iCounter)
					[ ] bMatch =MatchStr("*{sExpected}*",lsAccountRequest[iCounter])
					[+] if (bMatch)
						[ ] iLowerIndex=iCounter
						[ ] //getting the index of accountOpeningBalance parameter
						[+] for (iCounter=iLowerIndex;iCounter>1;--iCounter)
							[ ] bMatch =MatchStr("*{rAccountReqResp.sAccountOpeningBalance}*",lsAccountRequest[iCounter])
							[+] if (bMatch==TRUE) 
								[ ] iLower=iCounter
								[ ] //getting the index of sRequestID parameter
								[+] for (iCounter=iLower+1;iCounter<ListCount( lsAccountRequest)+1;++iCounter)
									[ ] bMatch =MatchStr("*{rAccountReqResp.sRequestID}*",lsAccountRequest[iCounter])
									[+] if ((bMatch==TRUE) || (iCounter==ListCount( lsAccountRequest)) )
										[ ] iUpper=iCounter
										[ ] break
										[ ] 
								[ ] break
						[ ] break
				[ ] 
				[+] if (bMatch)
					[ ] //Add addaccount request to parameters to a list
					[+] for (iCounter= iLower ; iCounter<iUpper+1 ; ++iCounter)
						[ ] ListAppend(lsRequestData, lsAccountRequest[iCounter])
						[ ] 
					[ ] 
					[ ] ///Get the successfulAddAccount Response
					[ ] iCounter=1
					[ ] iUpper=1
					[ ] iLower=1
					[ ] lsAccountResponse =GetReqRespFromCloudSyncLog(sExpectedResponse)
					[+] if (ListCount(lsAccountResponse)>1)
						[ ] //getting the index of sourceAccountName parameter
						[+] for  (iCounter=1;iCounter<ListCount( lsAccountResponse)+1;++iCounter)
							[ ] bMatch =MatchStr("*{sExpected}*",lsAccountResponse[iCounter])
							[+] if (bMatch)
								[ ] iLowerIndex=iCounter
								[ ] bMatch=FALSE
								[ ] //getting the index of accountOpeningBalance parameter
								[+] for (iCounter=iLowerIndex;iCounter>=1;--iCounter)
									[ ] bMatch =MatchStr("*{rAccountReqResp.sRequestID}*",lsAccountResponse[iCounter])
									[+] if (bMatch==TRUE) 
										[ ] iLower=iCounter
										[ ] bMatch=FALSE
										[ ] //getting the index of sRequestID parameter
										[+] for (iCounter=iLower+1;iCounter<ListCount( lsAccountResponse)+1;++iCounter)
											[ ] bMatch =MatchStr("*{rAccountReqResp.sAccountOpeningBalance}*",lsAccountResponse[iCounter])
											[+] if ((bMatch==TRUE) || (iCounter==ListCount( lsAccountResponse)) )
												[ ] iUpper=iCounter
												[ ] break
												[ ] 
										[ ] break
								[ ] break
						[+] if (bMatch)
							[ ] //Add successfulAddAccount request to parameters to a list
							[+] for (iCounter= iLower ; iCounter<iUpper+1 ; ++iCounter)
								[ ] ListAppend(lsResponseData, lsAccountResponse[iCounter])
							[ ] //removing sourceAccountNumber parameter from request as this parameter is not available in the response//
							[+] for  (iCounter=1;iCounter<ListCount( lsRequestData)+1;++iCounter)
									[ ] bMatch = MatchStr("*{rAccountReqResp.sSourceAccountNumber}*",lsRequestData[iCounter])
									[+] if ( bMatch)
										[ ] ListDelete (lsRequestData, iCounter)
									[ ] bMatch = MatchStr("*{rAccountReqResp.sAccountOpeningDate}*",lsRequestData[iCounter])
									[+] if ( bMatch)
										[ ] ListDelete (lsRequestData, iCounter)
									[ ] 
									[ ] 
								[ ] 
							[ ] ////////Verify addaccount request with successfulAddAccount response:////// 
							[ ] //"requests":[{"addAccount":{"account":{"bankAccount": removing the parameters from request 
							[+] for each sAccountRequest in lsRequestData
								[+] for each sAccountResponse in lsResponseData
									[ ] bMatch = MatchStr("*{rAccountReqResp.sRequests}*",sAccountRequest)
									[+] if ( bMatch == TRUE)
										[ ] sAccountRequest=StrTran(sAccountRequest,"{rAccountReqResp.sRequests}:","")
									[ ] bMatch = MatchStr("*{rAccountReqResp.sAddAccount}*",sAccountRequest)
									[+] if ( bMatch == TRUE)
										[ ] sAccountRequest=StrTran(sAccountRequest,"{rAccountReqResp.sAddAccount}:","")
									[ ] bMatch = MatchStr("*{rAccountReqResp.sAccount}*",sAccountRequest)
									[+] if ( bMatch == TRUE)
										[ ] sAccountRequest=StrTran(sAccountRequest,"{rAccountReqResp.sAccount}:","")
									[ ] bMatch = MatchStr("*{rAccountReqResp.sBankAccount}*",sAccountRequest)
									[+] if ( bMatch == TRUE)
										[ ] sAccountRequest=StrTran(sAccountRequest,"{rAccountReqResp.sBankAccount}:","")
									[ ] bMatch = MatchStr("*{rAccountReqResp.sCreditCardAccount}*",lsRequestData[iCounter])
									[+] if ( bMatch == TRUE)
										[ ] sAccountRequest=StrTran(sAccountRequest,"{rAccountReqResp.sCreditCardAccount}:","")
									[ ] 
									[ ] 
									[ ] 
									[ ] 
									[ ] bMatch=FALSE
									[ ] bMatch = MatchStr("*{sAccountRequest}*", sAccountResponse)
									[+] if ( bMatch == TRUE)
										[ ] break
								[+] if(bMatch==FALSE)
									[ ] ReportStatus("Verify account responses", FAIL, " Verify account responses for {sExpected} : Account request; {sAccountRequest} for account: {sExpected} didn't match with responses: {lsResponseData}.")
								[ ] 
							[ ] 
							[ ] 
							[ ] 
						[+] else
							[ ] ReportStatus("Verify account responses", FAIL, " Verify account responses for {sExpected} : Account responses for {sExpected} couldn't be found in the Synclog.")
					[+] else
						[ ] ReportStatus("Verify account responses", FAIL, " Verify account responses : Account responses couldn't be found in the Synclog.")
					[ ] 
				[+] else
					[ ] ReportStatus("Verify addaccount request ", FAIL, " Verify addaccount request for {sExpected} : addaccount request for {sExpected} couldn't be found in the Synclog.")
			[+] else
				[ ] ReportStatus("Verify GetAccountsResult request", FAIL, "Verify GetAccountsResult in Cloud SyncLog: Account request for {sAccountName} not found.")
				[ ] iFunctionResult=FAIL
				[ ] 
			[ ] FileClose (hFile)
			[ ] 
		[+] except
			[ ] iFunctionResult=FAIL
		[ ] ///Returning the list of response parameters///
		[ ] return lsResponseData
	[ ] 
	[ ] // ==========================================================
	[ ] // // // ==========================================================
	[+] // // // FUNCTION: GetRequestResponseFromCloudSyncLog()
		[ ] // // // 
		[ ] // // // DESCRIPTION:
		[ ] // // // This function will fetch list of the requests for the request parameter passed
		[ ] //////    From CloudSyncLog if it has been inserted into the Cloud
		[ ] // // // 
		[ ] // // // PARAMETERS:		STRING	 			sRequestParameter
		[ ] // // //                                         STRING	 			sLogFileName
		[ ] // // // RETURNS:			If pass list of verified responses after verifying the request parameter
		[ ] ////                                             If Fail returns the empty list and logs the failure
		[ ] // // // 1		If any error occurs
		[ ] // // // 
		[ ] // // // REVISION HISTORY:
		[ ] // // // Mukesh  created  April 16 2013
	[ ] // // // ==========================================================
	[+] public LIST OF ANYTYPE GetReqRespFromCloudSyncLog(STRING sRequestParameter, STRING sLogFileName optional)
		[ ] LIST OF ANYTYPE lsTempLog, lsRequest, lsTemp ,lsRequestParams
		[ ] STRING sRequestFileName 
		[ ] INTEGER iCount ,iCounter
		[ ] sRequestFileName =sLogFileName
		[+] if (sRequestFileName==NULL)
			[ ] sRequestFileName="SyncLog.txt"
		[ ] 
		[ ] ListRead (lsTempLog , APP_PATH + "\Data\TestData\"+sRequestFileName)
		[ ] INTEGER iCatName
		[+] for (iCount=1;iCount<ListCount(lsTempLog)+1;++iCount)
			[ ] bMatch=MatchStr("*{sRequestParameter}*", lsTempLog[iCount])
			[+] if (bMatch==TRUE)
				[ ] lsRequestParams= Split(lsTempLog[iCount],",")
				[+] for  (iCounter=1;iCounter<ListCount( lsRequestParams)+1;++iCounter)
					[ ] ListAppend(lsRequest,StrTran(StrTran(StrTran(StrTran(StrTran(lsRequestParams[iCounter],chr(123),""),chr(125),""),chr(34),""),chr(91),""),chr(93),""))
				[ ] 
		[ ] 
		[ ] return lsRequest
		[ ] 
	[ ] 
	[+] // FUNCTION: GetRequestFromTransactionsList()
		[ ] // 
		[ ] // DESCRIPTION:
		[ ] // This function will get Excel list of transactions then will format in the request parameter and value 
		[ ] //    format for payment/ deposit/ transfer and split transactions
		[ ] // 
		[ ] // PARAMETERS:		STRING	 			lsRequestExcelList
		[ ] // 
		[ ] // RETURNS:			If pass list of verified responses after verifying the request parameter
		[ ] // If Fail returns the empty list and logs the failure
		[ ] // 1		If any error occurs
		[ ] // 
		[ ] // REVISION HISTORY:
		[ ] // Mukesh  created  April 18 2013
	[ ] // ==========================================================
	[+] public LIST OF ANYTYPE GetRequestFromTransactionsList(LIST OF ANYTYPE lsTransactionsExcelList)
		[ ] LIST OF ANYTYPE lsRequestParameters, lsTxnRequest, lsRequestData , lsTemp , lsTxnReqData
		[ ] STRING sCategoryName ,sCategoryId , sCategoryIdVal
		[ ] LIST OF ANYTYPE lsCatResponse ,lsCategoryId ,lsDescription ,lsCategoryName
		[ ] 
		[ ] STRING sRequestFileName 
		[ ] INTEGER iCount , iCounter , iItemCounter
		[ ] ///////Fetching the request record////
		[ ] rTransactionReqRespRecord rTxnReqResp
		[ ] rTxnReqResp = lsTransactionReqRespValue
		[ ] 
		[ ] ///////Fetching the request record////  updateCategory
		[ ] rCategoryReqRespRecord rCatReqResp
		[ ] rCatReqResp = lsCategoryReqRespValue
		[ ] 
		[ ] ////Get Request parameters in a list////
		[ ] lsRequestParameters=lsTransactionsExcelList[1]
		[+] for (iCounter=2;iCounter<ListCount(lsTransactionsExcelList)+1;++iCounter)
			[ ] lsRequestData=lsTransactionsExcelList[iCounter]
			[+] if (lsRequestData[1]==NULL)
				[ ] ListAppend(lsTxnRequest,lsData)
				[ ] break
				[ ] 
			[+] if (iCounter>2) 
				[ ] bMatch=MatchStr("*{lsRequestData[1]}*",lsData[1])
			[+] if ((iCounter>2) && bMatch==FALSE )
				[ ] ListAppend(lsTxnRequest,lsData)
				[ ] lsData=NULL
				[ ] lsData=lsTemp
				[ ] goto ABC
			[+] if ((iCounter>2) && bMatch==TRUE )
				[+] for (iCount=1;iCount<ListCount(lsRequestParameters)+1;++iCount)
					[+] if (lsRequestData[iCount]==NULL)
						[ ] lsRequestData[iCount]=""
					[ ] ListAppend(lsData,lsRequestParameters[iCount]+":"+lsRequestData[iCount])
				[+] if (iCounter==ListCount(lsTransactionsExcelList))
					[ ] ListAppend(lsTxnRequest,lsData)
			[+] else 
				[ ] ABC:
				[+] for (iCount=1;iCount<ListCount(lsRequestParameters)+1;++iCount)
					[+] if (lsRequestData[iCount]==NULL)
						[ ] lsRequestData[iCount]=""
					[ ] ListAppend(lsData,lsRequestParameters[iCount]+":"+lsRequestData[iCount])
				[+] if (iCounter==ListCount(lsTransactionsExcelList))
					[ ] ListAppend(lsTxnRequest,lsData)
					[ ] // 
		[ ] 
		[+] for (iItemCounter=1 ; iItemCounter<ListCount(lsTxnRequest)+1 ; ++iItemCounter)
			[ ] lsTemp=lsTxnRequest[iItemCounter]
			[+] if (lsTemp[1]==NULL)
				[ ] break
				[ ] 
			[+] for (iCounter=1;iCounter<ListCount(lsTemp)+1;++iCounter) 
				[ ] bMatch= MatchStr("*{rCatReqResp.sCategoryName}*", lsTemp[iCounter])
				[+] if (bMatch==TRUE)
					[ ] sCategoryName=lsTemp[iCounter]
					[ ] ListDelete(lsTemp,iCounter )
					[ ] lsCategoryName=Split(sCategoryName,":")
					[+] if (Listcount(lsCategoryName)>1)
						[+] if (lsCategoryName[2]=="Transfer")
							[ ] sCategoryIdVal="21"
							[+] if (iCounter>ListCount(lsTemp))
								[ ] ListAppend (lsTemp , "{rTxnReqResp.sCategoryId}:{sCategoryIdVal}")
							[+] else
								[ ] ListInsert (lsTemp , iCounter , "{rTxnReqResp.sCategoryId}:{sCategoryIdVal}")
							[ ] 
						[+] else
							[ ] lsCatResponse=GetCategoryResponseFromCloudSyncLog(trim(sCategoryName))
							[+] for (iCount=1 ; iCount<ListCount(lsCatResponse)+1 ; ++iCount) 
								[ ] bMatch= MatchStr("*:{rCatReqResp.sId}:*" , lsCatResponse[iCount])
								[+] if (bMatch==TRUE)
									[ ] sCategoryId=lsCatResponse[iCount]
									[ ] lsCategoryId=Split(sCategoryId,":")
									[ ]  sCategoryIdVal=lsCategoryId[3]
									[+] if (sCategoryIdVal != NULL)
										[+] if (iCounter>ListCount(lsTemp))
											[ ] ListAppend (lsTemp , "{rTxnReqResp.sCategoryId}:{sCategoryIdVal}")
										[+] else
											[ ] ListInsert (lsTemp , iCounter , "{rTxnReqResp.sCategoryId}:{sCategoryIdVal}")
										[ ] 
									[ ] break
						[ ] 
						[ ] 
				[ ] 
			[ ] ListAppend(lsTxnReqData , lsTemp)
		[ ] 
		[ ] 
		[ ] return lsTxnReqData
		[ ] 
	[ ] // // // ==========================================================
	[+] // // // FUNCTION: GetUpdateCategoryResponseFromCloudSyncLog()
		[ ] // // // 
		[ ] // // // DESCRIPTION:
		[ ] // // // This function will fetch Category Response From CloudSyncLog if it has been inserted into the Cloud
		[ ] // // // 
		[ ] // // // PARAMETERS:		STRING	 			sPayee
		[ ] // // // 
		[ ] // // // RETURNS:			If pass list of verified responses after verifying the Category
		[ ] ////                                             If Fail returns the empty list and logs the failure
		[ ] // // // 1		If any error occurs
		[ ] // // // 
		[ ] // // // REVISION HISTORY:
		[ ] // // // Mukesh  created  April 16 2013
	[ ] // // // ==========================================================
	[+] public LIST OF ANYTYPE GetUpdateCategoryResponseFromCloudSyncLog(STRING sCategoryID, STRING sLogFileName optional)
		[+] do
			[ ] LIST OF ANYTYPE lsTempLog, lsRequest, lsTemp,lsCatRequestParams,lsRequestResponse, lsCatRequest,lsCatResponse,lsCatRequestTemp,lsCatResponseTemp
			[ ] LIST OF ANYTYPE lsCatResponseParams , lsCatVerifiedParams , lsCatName
			[ ] STRING sRequestFileName , sCatRequest , sCatResponse , sCatName ,sItem
			[ ] INTEGER iCount , iCounter, iLower, iUpper, iCatName , iCatID
			[ ] 
			[ ] sRequestFileName =sLogFileName
			[+] if (sRequestFileName==NULL)
				[ ] sRequestFileName="SyncLog.txt"
			[ ] ///////Fetching the sUpdateCategory request ////
			[ ] rCategoryReqRespRecord rCatReqResp
			[ ] rCatReqResp = lsCategoryReqRespValue
			[ ] lsCatRequestParams=GetReqRespFromCloudSyncLog(rCatReqResp.sUpdateCategory)
			[+] // for  (iCounter=1;iCounter<ListCount( lsCatRequestParams)+1;++iCounter)
				[ ] // // lsCatRequestParams=lsCatRequestTemp[iCounter]
			[+] for (iCount=1;iCount<ListCount( lsCatRequestParams)+1;++iCount)
				[ ] bMatch =MatchStr("*:{rCatReqResp.sCategoryId}:{sCategoryID}*",lsCatRequestParams[iCount])
				[+] if (bMatch==True) 
					[ ] iCatName=iCount
					[+] for  (iCounter=iCatName;iCounter>0;--iCounter)
						[ ] bMatch =MatchStr("*{rCatReqResp.sUpdateCategory}*",lsCatRequestParams[iCounter])
						[+] if (bMatch==TRUE)
							[ ] iLower=iCounter
							[+] for  (iCounter=iCatName; iCounter<ListCount(lsCatRequestParams) +1; ++iCounter)
								[ ] bMatch =MatchStr("*{rCatReqResp.sRequestID}*", lsCatRequestParams[iCounter])
								[+] if (bMatch==TRUE)
									[ ] iUpper=iCounter
									[ ] ///Add category request items to a list///
									[+] for  (iCounter=iLower; iCounter<iUpper +1; ++iCounter)
										[ ] ListAppend(lsCatRequest, lsCatRequestParams[iCounter])
									[ ] 
									[ ] break
							[ ] break
					[ ] break
				[ ] 
				[ ] 
			[+] if (bMatch==False)
				[ ] ReportStatus("Verify updateCategory request", FAIL, "updateCategory request for Category: {sCategoryID} not found.")
			[+] else
				[ ] ///////Fetching the sCategoriesResponse request ////
				[+] for each sItem in lsCatRequest
					[ ] bMatch =MatchStr("*{rCatReqResp.sCategoryName}*", sItem)
					[+] if (bMatch==True) 
						[ ] break
						[ ] 
					[ ] 
				[ ] 
				[ ] lsCatName=split (sItem , ":")
				[ ] sCatName =lsCatName[3]
				[+] if (sCatName!=NULL)
					[ ] 
					[ ] lsCatResponseParams=GetReqRespFromCloudSyncLog(rCatReqResp.sCategoriesResponse)
					[+] for (iCount=1;iCount<ListCount( lsCatResponseParams)+1;++iCount)
						[ ] bMatch =MatchStr("*:{rCatReqResp.sId}:{sCategoryID}*",lsCatResponseParams[iCount])
						[+] if (bMatch==True) 
							[ ] iCatID=iCount
							[+] for (iCount=iCatID+1;iCount<ListCount( lsCatResponseParams)+1;++iCount)
								[ ] bMatch =MatchStr("*{rCatReqResp.sCategoryName}:{sCatName}*",lsCatResponseParams[iCount])
								[+] if (bMatch==True)
									[ ] iCatName=iCount
									[+] for  (iCount=iCatName; iCount>0;--iCount)
										[ ] bMatch =MatchStr("*{rCatReqResp.sRequestID}*",lsCatResponseParams[iCount])
										[+] if (bMatch==TRUE)
											[ ] iLower=iCount
											[+] for  (iCount=iCatName; iCount<ListCount(lsCatResponseParams) +1; ++iCount)
												[ ] bMatch =MatchStr("*{rCatReqResp.sCategoryFamily}*", lsCatResponseParams[iCount])
												[+] if (bMatch==TRUE)
													[ ] iUpper=iCount
													[ ] ///Add category request items to a list///
													[+] for  (iCount=iLower; iCount<iUpper +1; ++iCount)
														[ ] ListAppend(lsCatResponse, lsCatResponseParams[iCount])
													[ ] 
													[ ] break
											[ ] break
									[ ] break
							[ ] break
						[ ] 
						[ ] 
					[+] if (bMatch==False)
						[ ] ReportStatus("Verify Category response", FAIL, "Category response for Category: {sCategoryID} not found.")
					[+] else
						[ ] ////////Verify category request against category response //////
						[+] for each sCatRequest in lsCatRequest
							[ ] bMatch = MatchStr("*{rCatReqResp.sRequestID}*",sCatRequest)
							[+] if ( bMatch == TRUE)
								[ ] ListAppend(lsCatVerifiedParams , sCatRequest)
							[ ] bMatch=False
							[ ] bMatch = MatchStr("*{rCatReqResp.sCategoryName}*",sCatRequest)
							[+] if ( bMatch == TRUE)
								[ ] ListAppend(lsCatVerifiedParams , sCatRequest)
								[ ] 
							[ ] bMatch=False
							[ ] bMatch = MatchStr("*{rCatReqResp.sParentId}*",sCatRequest)
							[+] if ( bMatch == TRUE)
								[ ] ListAppend(lsCatVerifiedParams , sCatRequest)
								[ ] 
							[ ] bMatch=False
							[ ] bMatch = MatchStr("*{rCatReqResp.sEditable}*",sCatRequest)
							[+] if ( bMatch == TRUE)
								[ ] ListAppend(lsCatVerifiedParams , sCatRequest)
								[ ] 
							[ ] bMatch=False
							[ ] bMatch = MatchStr("*{rCatReqResp.sCategoryId}*",sCatRequest)
							[+] if ( bMatch == TRUE)
								[ ] ListAppend(lsCatVerifiedParams , sCatRequest)
								[ ] 
								[ ] 
						[+] for each sCatRequest in lsCatVerifiedParams
							[+] for each sCatResponse in lsCatResponse 
								[ ] bMatch = MatchStr("*:{rCatReqResp.sId}:*",sCatResponse)
								[+] if ( bMatch == TRUE)
									[ ] sCatResponse=StrTran( sCatResponse,"{rCatReqResp.sCategoriesResponse}:{rCatReqResp.sEntries}:" , "")
									[ ] sCatResponse=StrTran( sCatResponse,"{rCatReqResp.sSingleCategoryResponse}:" , "")
									[ ] 
								[ ] bMatch = MatchStr("*{rCatReqResp.sResponses}:*",sCatResponse)
								[+] if ( bMatch == TRUE)
									[ ] sCatResponse=StrTran( sCatResponse,"{rCatReqResp.sResponses}:" , "")
									[ ] 
								[ ] 
								[ ] bMatch=FALSE
								[ ] bMatch = MatchStr("*{sCatResponse}*", sCatRequest)
								[ ] 
								[+] if ( bMatch == TRUE)
									[ ] break
							[+] if(bMatch==FALSE)
								[ ] ReportStatus("Verify transaction responses", FAIL, " Verify CategoriesResponse : updateCategory request {sCatRequest} didn't match with singleCategoryResponse.")
						[ ] 
						[ ] 
				[+] else
					[ ] ReportStatus("Verify updateCategory response", FAIL, "updateCategory response for Category: {sCategoryID} doesn't include the categoryName parameter..")
				[ ] 
		[+] except
			[ ] iFunctionResult=FAIL
		[ ] ///Returning the list of response parameters///
		[ ] return lsCatResponse
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: QDSyncNow()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will sync the already synced file 
		[ ] //
		[ ] // PARAMETERS:		
		[ ] //						
		[ ] //                                  
		[ ] //
		[ ] // RETURNS:			INTEGER		0		If sync process is complete
		[ ] //										1		If any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //MUkesh created  April 16, 2013
	[ ] 
	[+] public INTEGER QDSyncNow(STRING sIntuitPassword optional)
		[ ] 
		[+] do
				[ ] ////#######Now Sync Again##############
				[ ] QuickenWindow.SetActive()
				[ ] QuickenMainWindow.QWNavigator.MobileAlerts.DoubleClick()
				[ ] WaitForState(QuickenMainWindow,TRUE,2)
				[ ] QuickenWindow.SetActive()
				[ ] WinMoblieSync.Click()
				[ ] WinMoblieSync.QWSnapHolder1.PanelMoblieSyncOverview.SyncNowButton.Click()
				[ ] Agent.SetOption(OPT_REQUIRE_ACTIVE,FALSE)
				[ ] 
				[ ] //Check if IAM sign in dialog appears
				[+] if (DlgIAMSignIn.Exists(15))
					[ ] DlgIAMSignIn.SetActive()
					[ ] DlgIAMSignIn.IntuitPasswordTextBox.SetText(sIntuitPassword)
					[ ] DlgIAMSignIn.LoginButton.Click()
				[+] if (DlgReplaceExistingID.Exists(20))
					[ ] DlgReplaceExistingID.SetActive()
					[ ] DlgReplaceExistingID.YesButton.Click()
				[+] if (DlgEnterIntuitPassword.Exists(10))
					[ ] DlgEnterIntuitPassword.SetActive()
					[ ] DlgEnterIntuitPassword.Cancel.Click()
					[ ] WaitForState(DlgEnterIntuitPassword , FALSE , 2)
				[ ] 
				[+] if(DlgCloudSyncComplete.Exists(100))
					[ ] DlgCloudSyncComplete.SetActive()
					[ ] DlgCloudSyncComplete.OKButton.Click()
					[ ] WaitForState(DlgCloudSyncComplete,FALSE,1)
					[ ] Agent.SetOption(OPT_REQUIRE_ACTIVE,TRUE)
					[ ] 
					[ ] ReportStatus("Sync data file to cloud",PASS,"Sync Now  is complete.")
					[+] if (QuickenMainWindow.SyncNow.Exists(20))
						[+] if (QuickenMainWindow.ViewErrors.Exists(5))
							[ ] ReportStatus ("Verify if Sync has errors", FAIL, "Sync to cloud has errors")
							[ ] iFunctionResult=FAIL
						[+] else
							[ ] ReportStatus ("Verify if Sync has errors", PASS, "Sync to cloud has no errors")
							[ ] iFunctionResult=PASS
				[+] else
					[ ] ReportStatus("Sync data file to cloud",FAIL,"Sync Now couldn't complete.")
					[ ] iFunctionResult=FAIL
				[ ] 
			[ ] 
		[+] except
			[ ] iFunctionResult=FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // // // FUNCTION: GetCategoryFromCloudSyncLog()
		[ ] // // // 
		[ ] // // // DESCRIPTION:
		[ ] // // // This function will fetch Category Response From CloudSyncLog if it has been inserted into the Cloud
		[ ] // // // 
		[ ] // // // PARAMETERS:		STRING	 			sPayee
		[ ] // // // 
		[ ] // // // RETURNS:			If pass list of verified responses after verifying the Category
		[ ] ////                                             If Fail returns the empty list and logs the failure
		[ ] // // // 1		If any error occurs
		[ ] // // // 
		[ ] // // // REVISION HISTORY:
		[ ] // // // Mukesh  created  April 16 2013
	[ ] // // // ==========================================================
	[+] public LIST OF ANYTYPE GetCategoryFromCloudSyncLog(STRING sCategoryName, STRING sParentID , STRING sLogFileName optional)
		[+] do
			[ ] LIST OF ANYTYPE lsTempLog, lsRequest, lsTemp,lsCatRequestParams,lsRequestResponse, lsCatRequest,lsCatResponse,lsCatRequestTemp,lsCatResponseTemp
			[ ] LIST OF ANYTYPE lsCatResponseParams , lsCatVerifiedParams
			[ ] STRING sRequestFileName , sCatRequest , sCatResponse
			[ ] INTEGER iCount , iCounter, iLower, iUpper ,iCatName , iParentID
			[ ] 
			[ ] sRequestFileName =sLogFileName
			[+] if (sRequestFileName==NULL)
				[ ] sRequestFileName="SyncLog.txt"
			[ ] ///////Fetching the request record////
			[ ] rCategoryReqRespRecord rCatReqResp
			[ ] rCatReqResp = lsCategoryReqRespValue
			[ ] 
			[ ] lsCatRequestParams=GetReqRespFromCloudSyncLog(rCatReqResp.sCreateCategory)
			[ ] 
			[+] for  (iCounter=1;iCounter<ListCount( lsCatRequestParams)+1;++iCounter)
				[ ] // lsCatRequestParams=lsCatRequestTemp[iCounter]
				[+] for (iCount=1;iCount<ListCount( lsCatRequestParams)+1;++iCount)
					[ ] bMatch =MatchStr("*{rCatReqResp.sCategoryName}:{sCategoryName}*",lsCatRequestParams[iCount])
					[+] if (bMatch==True) 
						[ ] bMatch=False
						[ ] iCatName=iCount
						[+] for  (iCount=iCatName; iCount<iCatName + 7; ++iCount)
							[ ] bMatch =MatchStr("*{rCatReqResp.sParentId}:{sParentID}*", lsCatRequestParams[iCount])
							[+] if (bMatch==TRUE)
								[ ] bMatch=False
								[ ] iParentID=iCount
								[+] for  (iCount=iParentID ; iCount>0 ; --iCount)
									[ ] bMatch =MatchStr("*{rCatReqResp.sCreateCategory}*",lsCatRequestParams[iCount])
									[+] if (bMatch==TRUE)
										[ ] iLower=iCount
										[+] for  (iCount=iCatName; iCount<ListCount(lsCatRequestParams) +1; ++iCount)
											[ ] bMatch =MatchStr("*{rCatReqResp.sRequestID}*", lsCatRequestParams[iCount])
											[+] if (bMatch==TRUE)
												[ ] iUpper=iCount
												[ ] ///Add category request items to a list///
												[+] for  (iCount=iLower; iCount<iUpper +1; ++iCount)
													[ ] ListAppend(lsCatRequest, lsCatRequestParams[iCount])
												[ ] break
												[ ] 
										[ ] break
										[ ] 
									[ ] 
							[+] if (bMatch==TRUE)
								[ ] break
						[ ] 
					[ ] 
					[+] if (bMatch==TRUE)
						[ ] break
					[ ] 
					[ ] 
				[+] if (bMatch==True)
					[ ] break 
			[+] if (bMatch==False)
				[ ] ReportStatus("Verify Category request", FAIL, "Category request for Category: {sCategoryName} not found.")
			[+] else
				[ ] 
				[ ] lsCatResponseParams=GetReqRespFromCloudSyncLog(rCatReqResp.sSingleCategoryResponse)
				[ ] 
				[+] for  (iCounter=1;iCounter<ListCount( lsCatResponseParams)+1;++iCounter)
					[ ] // lsCatResponseParams=lsCatResponseTemp[iCounter]
					[+] for (iCount=1;iCount<ListCount( lsCatResponseParams)+1;++iCount)
						[ ] bMatch =MatchStr("*{rCatReqResp.sCategoryName}:{sCategoryName}*",lsCatResponseParams[iCount])
						[+] if (bMatch==True) 
							[ ] bMatch=False
							[ ] iCatName=iCount
							[+] for  (iCount=iCatName; iCount<iCatName +3; ++iCount)
								[ ] bMatch =MatchStr("*{rCatReqResp.sParentId}:{sParentID}*", lsCatResponseParams[iCount])
								[+] if (bMatch==TRUE)
									[ ] bMatch=False
									[ ] iParentID=iCount
									[+] for  (iCount=iParentID ; iCount>0 ; --iCount)
										[ ] bMatch =MatchStr("*{rCatReqResp.sRequestID}*",lsCatResponseParams[iCount])
										[+] if (bMatch==TRUE)
											[ ] iLower=iCount
											[+] for  (iCount=iCatName; iCount<ListCount(lsCatResponseParams) +1; ++iCount)
												[ ] bMatch =MatchStr("*{rCatReqResp.sCategoryFamily}*", lsCatResponseParams[iCount])
												[+] if (bMatch==TRUE)
													[ ] iUpper=iCount
													[ ] ///Add category request items to a list///
													[+] for  (iCount=iLower; iCount<iUpper +1; ++iCount)
														[ ] ListAppend(lsCatResponse, lsCatResponseParams[iCount])
													[ ] break
													[ ] 
											[ ] break
											[ ] 
										[ ] 
								[+] if (bMatch==TRUE)
									[ ] break
							[ ] 
						[ ] 
						[+] if (bMatch==TRUE)
							[ ] break
						[ ] 
						[ ] 
					[+] if (bMatch==True)
						[ ] break 
					[ ] 
					[ ] 
				[+] if (bMatch==False)
					[ ] ReportStatus("Verify Category response", FAIL, "Category response for Category: {sCategoryName} not found.")
				[+] else
					[ ] ////////Verify category request against category response //////
					[+] for each sCatRequest in lsCatRequest
						[ ] bMatch = MatchStr("*{rCatReqResp.sRequestID}*",sCatRequest)
						[+] if ( bMatch == TRUE)
							[ ] ListAppend(lsCatVerifiedParams , sCatRequest)
						[ ] bMatch=False
						[ ] bMatch = MatchStr("*{rCatReqResp.sCategoryName}*",sCatRequest)
						[+] if ( bMatch == TRUE)
							[ ] ListAppend(lsCatVerifiedParams , sCatRequest)
							[ ] 
						[ ] bMatch=False
						[ ] bMatch = MatchStr("*{rCatReqResp.sParentId}*",sCatRequest)
						[+] if ( bMatch == TRUE)
							[ ] ListAppend(lsCatVerifiedParams , sCatRequest)
							[ ] 
						[ ] bMatch=False
						[ ] bMatch = MatchStr("*{rCatReqResp.sEditable}*",sCatRequest)
						[+] if ( bMatch == TRUE)
							[ ] ListAppend(lsCatVerifiedParams , sCatRequest)
							[ ] 
					[+] for each sCatRequest in lsCatVerifiedParams
						[+] for each sCatResponse in lsCatResponse 
							[ ] bMatch = MatchStr("*{rCatReqResp.sResponses}*",sCatResponse)
							[+] if ( bMatch == TRUE)
								[ ] sCatResponse=StrTran( sCatResponse,"{rCatReqResp.sResponses}:","")
							[ ] 
							[ ] bMatch=FALSE
							[ ] bMatch = MatchStr("*{sCatResponse}*", sCatRequest)
							[ ] 
							[+] if ( bMatch == TRUE)
								[ ] break
						[+] if(bMatch==FALSE)
							[ ] ReportStatus("Verify transaction responses", FAIL, " Verify singleCategoryResponse responses: createCategory request {sCatRequest} didn't match with singleCategoryResponse.")
					[ ] 
					[ ] 
				[ ] 
		[+] except
			[ ] Exceptlog()
			[ ] iFunctionResult=FAIL
		[ ] ///Returning the list of response parameters///
		[ ] return lsCatResponse
	[ ] 
	[ ] // // // ==========================================================
	[+] // // // FUNCTION: GetCategoryResponseFromCloudSyncLog()
		[ ] // // // 
		[ ] // // // DESCRIPTION:
		[ ] // // // This function will fetch Category Response From CloudSyncLog if it has been inserted into the Cloud
		[ ] // // // 
		[ ] // // // PARAMETERS:		STRING	 			sPayee
		[ ] // // // 
		[ ] // // // RETURNS:			If pass list of verified responses after verifying the Category
		[ ] ////                                             If Fail returns the empty list and logs the failure
		[ ] // // // 1		If any error occurs
		[ ] // // // 
		[ ] // // // REVISION HISTORY:
		[ ] // // // Mukesh  created  April 16 2013
	[ ] // // // ==========================================================
	[+] public LIST OF ANYTYPE GetCategoryResponseFromCloudSyncLog(STRING sCategoryName, STRING sLogFileName optional)
		[+] do
			[ ] LIST OF ANYTYPE  lsTemp , lsCatRequestParams , lsParentID
			[ ] STRING sRequestFileName , sCatRequest , sCatResponse ,sParentID
			[ ] INTEGER iCount , iCounter, iLower, iUpper
			[ ] 
			[ ] sRequestFileName =sLogFileName
			[+] if (sRequestFileName==NULL)
				[ ] sRequestFileName="SyncLog.txt"
			[ ] ///////Fetching the request record////
			[ ] rCategoryReqRespRecord rCatReqResp
			[ ] rCatReqResp = lsCategoryReqRespValue
			[ ] lsTemp= split(sCategoryName,":")
			[ ] ///Delete the categoryName parameter from string "categoryName:L1:L2:L3"////
			[ ] ListDelete(lsTemp,1)
			[ ] 
			[+] for (iCounter=1 ; iCounter < ListCount(lsTemp) +1 ; ++iCounter)
				[+] if  (iCounter==1)
					[ ] sParentID="0"
				[ ] lsCatRequestParams=GetCategoryFromCloudSyncLog(lsTemp[iCounter] , sParentID ,sRequestFileName)
				[+] if (iCounter== ListCount(lsTemp))
					[ ] break
				[+] for (iCount=1 ; iCount < ListCount(lsCatRequestParams) +1 ; ++iCount)
					[ ] bMatch=MatchStr("*:{rCatReqResp.sId}:*", lsCatRequestParams[iCount])
					[+] if (bMatch==TRUE)
						[ ] lsParentID= split (lsCatRequestParams[iCount] , ":")
						[ ] sParentID = trim (lsParentID[3])
						[ ] break
						[ ] 
						[ ] 
			[ ] 
		[+] except
			[ ] iFunctionResult=FAIL
		[ ] ///Returning the list of response parameters///
		[ ] return lsCatRequestParams
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: GetFILoginIDResponse()
		[ ] // 
		[ ] // DESCRIPTION:
		[ ] // This function will fetch FILogin Response From CloudSyncLog if it has been inserted into the Cloud
		[ ] // 
		[ ] // PARAMETERS:		STRING	 			sFIType Online/manual
		[ ] //                                  STRING	 			scpFIId 
		[ ] // 
		[ ] // RETURNS:			If pass list of verified responses after verifying the FILogin
		[ ] //                                  If Fail returns the empty list and logs the failure
		[ ] //                        
		[ ] // 
		[ ] // REVISION HISTORY:
		[ ] // Mukesh  created  Dec 09 2013
	[ ] // ==========================================================
	[ ] 
	[ ] 
	[+] public STRING GetFILoginIDResponse (STRING sContentProviderType , STRING scpFIId)
		[ ] 
		[ ] STRING sFILoginId  
		[ ] LIST OF STRING lsRequest 
		[ ] INTEGER iCount , iCounter
		[ ] 
		[ ] 
		[ ] rFILoginReqRespRecord rFILoginReqResp
		[ ] rFILoginReqResp =lsFILoginRecordValue
		[ ] 
		[+] do
			[ ] 
			[ ] lsRequest =GetReqRespFromCloudSyncLog(rFILoginReqResp.sAddFILogin)
			[+] switch (sContentProviderType)
				[ ] 
				[+] case "EXTERNAL"
					[+] for (iCount= 1 ; iCount < listcount (lsRequest) +1 ;++iCount)
						[ ] bMatch = MatchStr("*{rFILoginReqResp.sContentProviderType}:{sContentProviderType}*" , lsRequest[iCount])
						[+] if (bMatch)
							[ ] iCounter=iCount
							[+] for (iCount= iCounter ; iCount < listcount (lsRequest) +1 ;++iCount)
								[ ] bMatch = MatchStr("*{rFILoginReqResp.sSuccessfulAddFILogin}*" , lsRequest[iCount])
								[+] if (bMatch)
									[ ] iCounter=iCount
									[+] for (iCount= iCounter ; iCount < listcount (lsRequest) +1 ;++iCount)
										[ ] bMatch = MatchStr("*{rFILoginReqResp.sCpFIId}:{scpFIId}*" , lsRequest[iCount])
										[+] if (bMatch)
											[ ] iCounter=iCount
											[+] for (iCount= iCounter ; iCount < listcount (lsRequest) +1 ;++iCount)
												[ ] bMatch = MatchStr("*{rFILoginReqResp.sContentProviderType}:{sContentProviderType}*" , lsRequest[iCount])
												[+] if (bMatch)
													[ ] iCounter=iCount
													[+] for (iCount= iCounter ; iCount < listcount (lsRequest) +1 ;++iCount)
														[ ] bMatch = MatchStr("*{rFILoginReqResp.sFiLoginId}*" , lsRequest[iCount])
														[+] if (bMatch)
															[ ] sFILoginId= lsRequest[iCount]
															[ ] break
															[ ] 
													[ ] break
												[ ] 
											[ ] break
									[ ] break
							[ ] break
					[ ] 
				[+] case "CUSTOMER_CENTRAL"
					[+] for (iCount= 1 ; iCount < listcount (lsRequest) +1 ;++iCount)
						[ ] bMatch = MatchStr("*{rFILoginReqResp.sContentProviderType}:{sContentProviderType}*" , lsRequest[iCount])
						[+] if (bMatch)
							[ ] iCounter=iCount
							[+] for (iCount= iCounter ; iCount < listcount (lsRequest) +1 ;++iCount)
								[ ] bMatch = MatchStr("*{rFILoginReqResp.sCpFIId}:{scpFIId}*" , lsRequest[iCount])
								[+] if (bMatch)
									[ ] scpFIId=lsRequest[iCount]
									[ ] iCounter=iCount
									[+] for (iCount= iCounter ; iCount < listcount (lsRequest) +1 ;++iCount)
										[ ] bMatch = MatchStr("*{rFILoginReqResp.sSuccessfulAddFILogin}*" , lsRequest[iCount])
										[+] if (bMatch)
											[ ] iCounter=iCount
											[+] for (iCount= iCounter ; iCount < listcount (lsRequest) +1 ;++iCount)
												[ ] bMatch = MatchStr("*{scpFIId}*" , lsRequest[iCount])
												[+] if (bMatch)
													[ ] iCounter=iCount
													[+] for (iCount= iCounter ; iCount < listcount (lsRequest) +1 ;++iCount)
														[ ] bMatch = MatchStr("*{rFILoginReqResp.sContentProviderType}:{sContentProviderType}*" , lsRequest[iCount])
														[+] if (bMatch)
															[ ] iCounter=iCount
															[+] for (iCount= iCounter ; iCount < listcount (lsRequest) +1 ;++iCount)
																[ ] bMatch = MatchStr("*{rFILoginReqResp.sFiLoginId}*" , lsRequest[iCount])
																[+] if (bMatch)
																	[ ] sFILoginId= lsRequest[iCount]
																	[ ] break
															[ ] break
															[ ] 
											[ ] break
										[ ] 
									[ ] break
									[ ] 
							[ ] break
		[+] except
			[ ] exceptlog()
			[ ] 
		[ ] 
		[ ] return sFILoginId
		[ ] 
		[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: VerifyRegistrationDetails()
		[ ] // 
		[ ] // DESCRIPTION:
		[ ] // This function will verify registration details
		[ ] // 
		[ ] // PARAMETERS:		STRING	 			sFIType Online/manual
		[ ] //                                  	STRING	 			scpFIId 
		[ ] // 
		[ ] // RETURNS:			PASS
		[ ] //                                  	FAIL
		[ ] //                        
		[ ] // 
		[ ] // REVISION HISTORY:
		[ ] // Udita Dube  created  Nov 19 2014
	[ ] // ==========================================================
	[+] public INTEGER VerifyRegistrationDetails (STRING sEmailI , STRING sPassword, STRING sSecurityQ,STRING sSecurityA, LIST OF STRING lsPersonalDetails,BOOLEAN bEnterMobileNumber optional)
		[ ] INTEGER iResult
		[ ] STRING sActualText,sProperty
		[ ] BOOLEAN bExistingUser = TRUE
		[ ] 
		[ ] sProperty="Text"
		[ ] STRING sName, sLastName, sAddress, sCity, sState, sZip,sBoughtFrom,sPhoneNumber
		[ ] sName=trim(lsPersonalDetails[1])
		[ ] sLastName=trim(lsPersonalDetails[2])
		[ ] sAddress=trim(lsPersonalDetails[3])
		[ ] sCity=trim(lsPersonalDetails[4])
		[ ] sState=trim(lsPersonalDetails[5])
		[ ] sZip=trim(lsPersonalDetails[6])
		[ ] sBoughtFrom=trim(lsPersonalDetails[7])
		[ ] sPhoneNumber=trim(lsPersonalDetails[8])
		[ ] 
		[ ] // 06/05/2015  KalyanG: 2015 R6 enhancement, added below condition to handle the screen change
		[+] if (QuickenIAMMainWindow.IAMUserControl.IAMContentControl.linkCreateOneHere.Exists())
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.linkCreateOneHere.Click()
		[ ] 
		[ ] //Register Datafile
		[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.EmailID.Exists(20))
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.EmailID.SetText(sEmailI)
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Password.SetText(sPassword)
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.ConfirmPassword.SetText(sPassword)
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.SecurityQuestion.Select(val(sSecurityQ))
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.SecurityQuestionAnswer.SetText(sSecurityA)
			[ ] sleep(2)
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
			[ ] sleep(5)
			[ ] iResult=PASS
		[+] else
			[ ] ReportStatus("Verify IAMContentControl screen",FAIL, "Email id field is not available")
			[ ] iResult=FAIL
		[ ] //Handle if ID already exists
		[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.ExistingUserName.Exists(30))
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Password.SetText(sPassword)
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
			[ ] iResult=PASS
		[+] else
			[ ] ReportStatus("Verify sign in window",FAIL,"Existing user sign in page is not displayed")
			[ ] iResult=FAIL
		[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.WhereDidYouPurchaseQuicken.Exists(60))
			[ ] 
			[ ] //Verify that 'Tell us about yourself' step displays expected Name
			[ ] sActualText = QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Name.GetProperty(sProperty)
			[+] if (sName==lower( trim(sActualText)))
				[ ] ReportStatus("Verify that 'Tell us about yourself' step displays expected Name" , PASS, " Name: {sActualText} is auto populated on WhereDidYouPurchaseQuicken screen")
			[+] else
				[ ] ReportStatus("Verify that 'Tell us about yourself' step displays expected Name" , FAIL, " Name: {sActualText} is not auto populated on WhereDidYouPurchaseQuicken screen as expected: {sName}.")
			[ ] 
			[ ] //Verify that 'Tell us about yourself' step displays expected LastName
			[ ] sActualText = QuickenIAMMainWindow.IAMUserControl.IAMContentControl.LastName.GetProperty(sProperty)
			[+] if ( sLastName==lower( trim(sActualText)))
				[ ] ReportStatus("Verify that 'Tell us about yourself' step displays expected Last Name" , PASS, " Last Name: {sActualText} is auto populated on WhereDidYouPurchaseQuicken screen.")
			[+] else
				[ ] ReportStatus("Verify that 'Tell us about yourself' step displays expected Last Name" , FAIL, " Last Name: {sActualText} is not auto populated on WhereDidYouPurchaseQuicken screen as expected: {sLastName}.")
			[ ] 
			[ ] //Verify that 'Tell us about yourself' step displays expected Address
			[ ] sActualText = QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Address.GetProperty(sProperty)
			[+] if ( sAddress== trim(sActualText))
				[ ] ReportStatus("Verify that 'Tell us about yourself' step displays expected Address" , PASS, " Address: {sActualText} is auto populated on WhereDidYouPurchaseQuicken screen.")
			[+] else
				[ ] ReportStatus("Verify that 'Tell us about yourself' step displays expected Address" , FAIL, " Address: {sActualText} is not auto populated on WhereDidYouPurchaseQuicken screen as expected: {sAddress}.")
			[ ] 
			[ ] //Verify that 'Tell us about yourself' step displays expected City
			[ ] sActualText = QuickenIAMMainWindow.IAMUserControl.IAMContentControl.City.GetProperty(sProperty)
			[+] if ( sCity== trim(sActualText))
				[ ] ReportStatus("Verify that 'Tell us about yourself' step displays expected City" , PASS, " City: {sActualText} is auto populated on WhereDidYouPurchaseQuicken screen.")
			[+] else
				[ ] ReportStatus("Verify that 'Tell us about yourself' step displays expected City" , FAIL, " City: {sActualText} is not auto populated on WhereDidYouPurchaseQuicken screen as expected: {sCity}.")
			[ ] 
			[ ] //Verify that 'Tell us about yourself' step displays expected State
			[ ] sActualText = QuickenIAMMainWindow.IAMUserControl.IAMContentControl.State.GetProperty(sProperty)
			[+] if ( sState== trim(sActualText))
				[ ] ReportStatus("Verify that 'Tell us about yourself' step displays expected State" , PASS, " State: {sActualText} is auto populated on WhereDidYouPurchaseQuicken screen")
			[+] else
				[ ] ReportStatus("Verify that 'Tell us about yourself' step displays expected State" , FAIL, " State: {sActualText} is not auto populated on WhereDidYouPurchaseQuicken screen as expected: {sState}.")
			[ ] 
			[ ] //Verify that 'Tell us about yourself' step displays expected Zip
			[ ] sActualText = QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Zip.GetProperty(sProperty)
			[+] if ( sZip== trim(sActualText))
				[ ] ReportStatus("Verify that 'Tell us about yourself' step displays expected Zip" , PASS, " Zip: {sActualText} is auto populated on WhereDidYouPurchaseQuicken screen")
			[+] else
				[ ] ReportStatus("Verify that 'Tell us about yourself' step displays expected Zip" , FAIL, " Zip: {sActualText} is not auto populated on WhereDidYouPurchaseQuicken screen as expected: {sZip}.")
			[ ] 
			[ ] //Verify that 'Tell us about yourself' step displays expected Phone Number
			[+] if (QuickenIAMMainWindow.IAMUserControl.IAMContentControl.MobileNumber.Exists())
				[ ] ReportStatus("Phone number on 'Tell us about yourself' step" , FAIL, " Phone number: field should not appear on WhereDidYouPurchaseQuicken screen for existing user [per QW15 R6 changes]")
			[+] // if(bEnterMobileNumber==FALSE)
				[ ] // sActualText = QuickenIAMMainWindow.IAMUserControl.IAMContentControl.MobileNumber.GetProperty(sProperty)
				[+] // if (sPhoneNumber== trim(sActualText))
					[ ] // ReportStatus("Verify that 'Tell us about yourself' step displays expected Phone Number" , PASS, " Phone Number: {sActualText} is auto populated on WhereDidYouPurchaseQuicken screen")
				[+] // else
					[ ] // ReportStatus("Verify that 'Tell us about yourself' step displays expected Phone Number" , FAIL, " Phone Number: {sActualText} is not auto populated on WhereDidYouPurchaseQuicken screen as expected: {sPhoneNumber}.")
			[+] // else
				[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.MobileNumber.SetText(sPhoneNumber)
				[ ] // STRING sTemp=QuickenIAMMainWindow.IAMUserControl.IAMContentControl.MobileNumber.GetProperty(sProperty)
				[ ] // ReportStatus("Enter phone number on 'Tell us about yourself' step" , PASS, " Phone number: {sTemp} is entered on WhereDidYouPurchaseQuicken screen")
				[ ] // 
			[ ] 
			[ ] //Where Did You Purchase Quicken doesn't get auto populated
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.WhereDidYouPurchaseQuicken.Select(sBoughtFrom)
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
			[ ] sleep(5)
			[ ] iResult=PASS
			[ ] 
		[+] else
			[ ] ReportStatus("Verify WhereDidYouPurchaseQuicken screen",FAIL,"WhereDidYouPurchaseQuicken screen is not displayed")
			[ ] iResult=FAIL
		[ ] //Password Vault condition in case of Registered User
		[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Exists(150))
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.UseMobileOption.Check()
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
		[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.AddAccount.Exists(300))
			[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.AddAccount.Click()
			[+] if(AddAccount.Exists(10))
				[ ] AddAccount.SetActive()
				[ ] AddAccount.Close()
				[ ] WaitForState(AddAccount, FALSE ,5)
			[+] if(QuickenAccountSetup.Exists(10))
				[ ] QuickenAccountSetup.SetActive()
				[ ] QuickenAccountSetup.Cancel.Click()
		[ ] 
		[ ] return iResult
		[ ] 
	[ ] 
	[ ] 
	[ ] // ===================================================================================
	[+] // FUNCTION: RegisterQuickenConnectedServices()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will create an IAM Account for Quicken user
		[ ] //
		[ ] // PARAMETERS:		 STRING
		[ ] //                                   sEmailID, sPassword, sSecurityQuestion, sSecurityQuestionAnswer
		[ ] //                                   sName, sLastName, sAddress, sCity, sState, sZip, sBoughtFrom
		[ ] //                                   sVaultPassword optional
		[ ] //
		[ ] // RETURNS:			INTEGER		PASS		If Registration process is completed
		[ ] //										FAIL		If any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //	 July 15 2013	Dean Paes created
	[ ] // ===================================================================================
	[+] // public INTEGER RegisterQuickenConnectedServices(STRING sEmailID optional,STRING sPassword optional,STRING sSecurityQuestion optional,STRING sSecurityQuestionAnswer optional,STRING sName optional,STRING sLastName optional,STRING sAddress optional,STRING sCity optional,STRING sState optional,STRING sZip optional,STRING sBoughtFrom optional,STRING sVaultPassword optional)
		[ ] // 
		[+] // //Variable Definition in case of NULL Values
			[ ] // STRING sActual, sExpected
			[+] // if(sEmailID==NULL)
				[ ] // sEmailID="Quicken_User@test.qbn.intuit.com"
				[ ] // 
			[+] // if(sPassword==NULL)
				[ ] // sPassword="a123456b"
				[ ] // 
			[+] // if(sSecurityQuestion==NULL)
				[ ] // sSecurityQuestion="2"
				[ ] // 
			[+] // if(sSecurityQuestionAnswer==NULL)
				[ ] // sSecurityQuestionAnswer="Ferrari"
				[ ] // 
			[+] // if(sName==NULL)
				[ ] // sName="Quicken"
				[ ] // 
			[+] // if(sLastName==NULL)
				[ ] // sLastName="User"
				[ ] // 
				[ ] // 
			[+] // if(sAddress==NULL)
				[ ] // sAddress="101202 MTV"
				[ ] // 
			[+] // if(sCity==NULL)
				[ ] // sCity="Mountain View"
			[+] // if(sState==NULL)
				[ ] // sState="CA"
			[+] // if(sZip==NULL)
				[ ] // sZip="12345"
				[ ] // 
			[+] // if(sBoughtFrom==NULL)
				[ ] // sBoughtFrom="Other"
			[ ] // 
			[ ] // 
		[ ] // 
		[+] // do
			[ ] // 
			[+] // if (QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Exists(5))
				[ ] // QuickenIAMMainWindow.SetActive()
				[+] // if (QuickenIAMMainWindow.IAMUserControl.IAMContentControl.IamNew.Exists(5))
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.IamNew.Click()
				[+] // if (AlertMessage.Exists(10))
					[ ] // AlertMessage.SetActive()
					[ ] // AlertMessage.OK.Click()
					[ ] // sleep(1)
				[ ] // sleep(5)
				[ ] // //Second page of Quicken Connected Services
				[+] // if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.EmailID.Exists(5))
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.EmailID.SetText(sEmailID)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Password.SetText(sPassword)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.ConfirmPassword.SetText(sPassword)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.SecurityQuestion.Select(val(sSecurityQuestion))
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.SecurityQuestionAnswer.SetText(sSecurityQuestionAnswer)
					[ ] // sleep(2)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
					[ ] // sleep(5)
				[ ] // //Third page of Quicken Connected Services(if displayed)
				[+] // if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.WhereDidYouPurchaseQuicken.Exists(10))
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Name.SetText(sName)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.LastName.SetText(sLastName)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Address.SetText(sAddress)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.City.SetText(sCity)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.State.Select(sState)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Zip.SetText(sZip)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.WhereDidYouPurchaseQuicken.Select(sBoughtFrom)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
					[ ] // sleep(5)
					[ ] // 
					[ ] // //Fourth page of Quicken Connected Services
					[+] // if(sVaultPassword!=NULL)
						[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.PasswordVaultpassword.SetText(sVaultPassword)
						[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
					[+] // else
						[+] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.SkipThisStep.Click()
							[ ] // 
							[ ] // 
							[ ] // 
						[ ] // 
				[ ] // //Handle if ID already exists
				[+] // if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.ExistingUserName.Exists(60))
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Password.SetText(sPassword)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
					[ ] // 
				[+] // if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.WhereDidYouPurchaseQuicken.Exists(60))
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Name.SetText(sName)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.LastName.SetText(sLastName)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Address.SetText(sAddress)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.City.SetText(sCity)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.State.Select(sState)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Zip.SetText(sZip)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.WhereDidYouPurchaseQuicken.Select(sBoughtFrom)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
					[ ] // sleep(5)
					[ ] // 
					[ ] // 
				[+] // if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Exists(60))
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.UseMobileOption.Check()
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
				[+] // // if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Done.Exists(30))
					[ ] // // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Done.Click()
					[ ] // // 
				[+] // if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.AddAccount.Exists(30))
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.AddAccount.Click()
					[+] // if(AddAccount.Exists(5))
						[ ] // AddAccount.SetActive()
						[ ] // AddAccount.Close()
					[ ] // 
					[ ] // 
				[+] // if(QuickenWindow.Done.Exists(10))
					[ ] // QuickenWindow.Done.Click()
				[ ] // iFunctionResult=PASS
				[ ] // sleep(10)
			[+] // else
				[ ] // START:
				[+] // if(QuickenConnectedServices.Exists(5))
					[ ] // QuickenConnectedServices.SetActive()
					[ ] // //First page of Quicken Connected Services
					[+] // if (QuickenConnectedServices.GetStarted.Exists(5))
						[ ] // QuickenConnectedServices.GetStarted.Click()
					[ ] // //Second page of Quicken Connected Services
					[ ] // QuickenConnectedServices.SignUp.EmailID.SetText(sEmailID)
					[ ] // QuickenConnectedServices.SignUp.Password.SetText(sPassword)
					[ ] // QuickenConnectedServices.SignUp.ConfirmPassword.SetText(sPassword)
					[ ] // QuickenConnectedServices.SignUp.SecurityQuestion.Select(val(sSecurityQuestion))
					[ ] // QuickenConnectedServices.SignUp.SecurityQuestionAnswer.SetText(sSecurityQuestionAnswer)
					[ ] // sleep(2)
					[ ] // QuickenConnectedServices.SignUp.NextButton.Click()
					[ ] // sleep(5)
					[ ] // //Third page of Quicken Connected Services(if displayed)
					[+] // if(SignUp.SignUp.WhereDidYouPurchaseQuicken.Exists(10))
						[ ] // SignUp.SignUp.Name.SetText(sName)
						[ ] // SignUp.SignUp.LastName.SetText(sLastName)
						[ ] // SignUp.SignUp.Address.SetText(sAddress)
						[ ] // SignUp.SignUp.City.SetText(sCity)
						[ ] // SignUp.SignUp.State.Select(sState)
						[ ] // SignUp.SignUp.Zip.SetText(sZip)
						[ ] // SignUp.SignUp.WhereDidYouPurchaseQuicken.Select(sBoughtFrom)
						[ ] // SignUp.SignUp.NextButton.Click()
						[ ] // WaitForState(SignUp, false, 10)
						[ ] // //Fourth page of Quicken Connected Services
						[+] // if(sVaultPassword!=NULL)
							[ ] // PasswordVault.PasswordVault.PasswordVaultpassword.SetText(sVaultPassword)
							[ ] // PasswordVault.PasswordVault.NextButton.Click()
						[+] // else
							[ ] // PasswordVault.PasswordVault.SkipThisStep.Click()
					[ ] // //Handle if ID already exists
					[+] // if(SignIn.SignIn.ExistingUserName.Exists(30))
						[ ] // SignIn.SignIn.Password.SetText(sPassword)
						[ ] // SignIn.SignIn.NextButton.Click()
					[+] // if(SignUp.SignUp.WhereDidYouPurchaseQuicken.Exists(30))
						[ ] // SignUp.SignUp.Name.SetText(sName)
						[ ] // SignUp.SignUp.LastName.SetText(sLastName)
						[ ] // SignUp.SignUp.Address.SetText(sAddress)
						[ ] // SignUp.SignUp.City.SetText(sCity)
						[ ] // SignUp.SignUp.State.Select(sState)
						[ ] // SignUp.SignUp.Zip.SetText(sZip)
						[ ] // SignUp.SignUp.WhereDidYouPurchaseQuicken.Select(sBoughtFrom)
						[ ] // SignUp.SignUp.NextButton.Click()
						[ ] // WaitForState(SignUp, false, 10)
						[ ] // //Fourth page of Quicken Connected Services
						[+] // // if(sVaultPassword!=NULL)
							[ ] // // PasswordVault.PasswordVault.PasswordVaultpassword.SetText(sVaultPassword)
							[ ] // // PasswordVault.PasswordVault.NextButton.Click()
						[+] // // else
							[ ] // // PasswordVault.PasswordVault.SkipThisStep.Click()
							[ ] // // 
							[ ] // // 
							[ ] // // 
						[ ] // 
					[ ] // //Password Vault condition in case of Registered User
					[+] // // if(PasswordVault.PasswordVault.Exists(10))
						[+] // // if (PasswordVault.PasswordVault.VaultPassword.Exists(10))
							[ ] // // PasswordVault.PasswordVault.VaultPassword.SetText(sPassword)
							[ ] // // PasswordVault.PasswordVault.PasswordsMustMatch.SetText(sPassword)
						[ ] // // PasswordVault.PasswordVault.NextButton.Click()
					[+] // if(MobileAppRegistration.Exists(20))
						[ ] // MobileAppRegistration.SetActive()
						[ ] // MobileAppRegistration.UseMobileOption.Check()
						[ ] // MobileAppRegistration.NextButton.Click()
						[ ] // 
					[+] // if(DonePage.Exists(30))
						[ ] // // sActual = DonePage.DonePage.IntuitIDValueText.GetCaption()
						[ ] // // sExpected = sEmailID
						[+] // // if (sActual == sExpected)
							[ ] // // ReportStatus(" Verify the displayed Intuit ID on 'Thanks!' screen.", PASS, "Found the correct Intuit ID displayed on 'Thanks!' screen. Expected : {sExpected}, Actual : {sActual} ") 
						[+] // // else
							[ ] // // ReportStatus(" Verify the displayed Intuit ID on 'Thanks!' screen.", FAIL, "Did NOT find the correct Intuit ID displayed on 'Thanks!' screen. Expected : {sExpected}, Actual : {sActual} ") 
						[ ] // DonePage.DoneButton.Click()
						[ ] // WaitForState(DonePage,FALSE,10)
						[+] // if(AddAccount.Exists(3))
							[ ] // AddAccount.SetActive()
							[ ] // AddAccount.Close()
						[ ] // 
					[ ] // // Added by Govind on 12Feb2014 to handle 'Unlock your Password Vault' screen
					[+] // if (UnlockYourPasswordVault.Exists(10))
						[ ] // UnlockYourPasswordVault.SetActive()
						[ ] // UnlockYourPasswordVault.Password.SetText(sVaultPassword)
						[ ] // UnlockYourPasswordVault.OK.Click()
					[ ] // iFunctionResult=PASS
					[ ] // sleep(5)
				[+] // else
					[ ] // // ReportStatus("Verify Quicken connected services exist",FAIL,"Quicken Connected services window not found")
					[ ] // // iFunctionResult=FAIL
					[ ] // QuickenWindow.SetActive()
					[ ] // QuickenWindow.Tools.Click()
					[ ] // QuickenWindow.Tools.OneStepUpdate.Select()
					[ ] // // Added by Govind on 12Feb2014 to handle 'Unlock your Password Vault' screen
					[+] // if (UnlockYourPasswordVault.Exists(10))
						[ ] // UnlockYourPasswordVault.SetActive()
						[ ] // UnlockYourPasswordVault.Password.SetText(sVaultPassword)
						[ ] // UnlockYourPasswordVault.OK.Click()
					[+] //  if (OneStepUpdate.Exists(5))
						[ ] // OneStepUpdate.Close()
						[ ] // iFunctionResult=PASS
					[+] // else if(AddAccount.Exists(10))
						[ ] // AddAccount.SetActive()
						[ ] // AddAccount.No.Click()
						[ ] // iFunctionResult=PASS
					[+] // else if (QuickenConnectedServices.Exists(60))
						[ ] // goto START
					[ ] // 
				[ ] // 
				[+] // if(AddAccount.Exists(5))
					[ ] // AddAccount.SetActive()
					[ ] // AddAccount.No.Click()
					[ ] // iFunctionResult=PASS
				[+] // if (OneStepUpdate.Exists(5))
					[ ] // OneStepUpdate.Close()
					[ ] // iFunctionResult=PASS
			[ ] // 
		[+] // except
			[ ] // ExceptLog()
			[ ] // iFunctionResult=FAIL
			[ ] // 
		[ ] // 
		[ ] // return iFunctionResult
		[ ] // 
		[ ] // 
		[ ] // 
	[+] public INTEGER RegisterQuickenConnectedServices(STRING sEmailID optional,STRING sPassword optional,STRING sSecurityQuestion optional,STRING sSecurityQuestionAnswer optional,STRING sName optional,STRING sLastName optional,STRING sAddress optional,STRING sCity optional,STRING sState optional,STRING sZip optional,STRING sBoughtFrom optional,STRING sVaultPassword optional ,STRING sMobileNumber optional)
		[ ] 
		[+] //Variable Definition in case of NULL Values
			[ ] STRING sActual, sExpected
			[ ] BOOLEAN bExistingUser = FALSE
			[+] if(sEmailID==NULL)
				[ ] sEmailID="Quicken_User@test.qbn.intuit.com"
				[ ] 
			[+] if(sPassword==NULL)
				[ ] sPassword="a123456b"
				[ ] 
			[+] if(sSecurityQuestion==NULL)
				[ ] sSecurityQuestion="2"
				[ ] 
			[+] if(sSecurityQuestionAnswer==NULL)
				[ ] sSecurityQuestionAnswer="Ferrari"
				[ ] 
			[+] if(sName==NULL)
				[ ] sName="Quicken"
				[ ] 
			[+] if(sLastName==NULL)
				[ ] sLastName="User"
				[ ] 
				[ ] 
			[+] if(sAddress==NULL)
				[ ] sAddress="101202 MTV"
				[ ] 
			[+] if(sCity==NULL)
				[ ] sCity="Mountain View"
			[+] if(sState==NULL)
				[ ] sState="CA"
			[+] if(sZip==NULL)
				[ ] sZip="12345"
				[ ] 
			[+] if(sBoughtFrom==NULL)
				[ ] sBoughtFrom="Other"
			[+] if(sMobileNumber==NULL)
				[ ] sMobileNumber="1234567890"
			[ ] 
			[ ] 
		[ ] 
		[+] do
			[ ] 
			[+] if (QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Exists(5))
				[ ] QuickenIAMMainWindow.SetActive()
				[+] if (QuickenIAMMainWindow.IAMUserControl.IAMContentControl.IamNew.Exists(5))
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.IamNew.Click()
				[ ] 
				[ ] // 06/05/2015  KalyanG: 2015 R6 enhancement, added below condition to handle the screen change
				[+] if (QuickenIAMMainWindow.IAMUserControl.IAMContentControl.linkCreateOneHere.Exists())
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.linkCreateOneHere.Click()
				[ ] 
				[+] if (AlertMessage.Exists(10))
					[ ] AlertMessage.SetActive()
					[ ] AlertMessage.OK.Click()
					[ ] sleep(1)
				[ ] sleep(5)
				[ ] //Second page of Quicken Connected Services
				[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.EmailID.Exists(5))
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.EmailID.SetText(sEmailID)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Password.SetText(sPassword)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.ConfirmPassword.SetText(sPassword)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.SecurityQuestion.Select(val(sSecurityQuestion))
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.SecurityQuestionAnswer.SetText(sSecurityQuestionAnswer)
					[ ] sleep(2)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
					[ ] sleep(5)
				[ ] //Third page of Quicken Connected Services(if displayed)
				[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.WhereDidYouPurchaseQuicken.Exists(10))
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Name.SetText(sName)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.LastName.SetText(sLastName)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Address.SetText(sAddress)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.City.SetText(sCity)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.State.Select(sState)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Zip.SetText(sZip)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.MobileNumber.SetText(sMobileNumber)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.WhereDidYouPurchaseQuicken.Select(sBoughtFrom)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
					[ ] sleep(5)
					[ ] 
					[ ] //Fourth page of Quicken Connected Services
					[+] // if(sVaultPassword!=NULL)
						[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.PasswordVaultpassword.SetText(sVaultPassword)
						[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
					[+] // else
						[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.SkipThisStep.Click()
						[ ] // 
						[ ] // 
						[ ] // 
						[ ] // 
				[ ] //Handle if ID already exists
				[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.ExistingUserName.Exists(60))
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.ExistingUserName.SetText(sEmailID)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Password.SetText(sPassword)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
					[ ] // 06/05/2015  KalyanG: 2015 R6 enhancement, mobile number field does not appear for the existing user
					[ ] bExistingUser = TRUE
					[ ] 
				[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.WhereDidYouPurchaseQuicken.Exists(30))
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Name.SetText(sName)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.LastName.SetText(sLastName)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Address.SetText(sAddress)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.City.SetText(sCity)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.State.Select(sState)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Zip.SetText(sZip)
					[ ] 
					[+] if (bExistingUser)
						[+] if (QuickenIAMMainWindow.IAMUserControl.IAMContentControl.MobileNumber.Exists())
							[ ] ReportStatus("Mobile Number Field for Existing User", FAIL, "Mobile number field should n't appear for existing user")
					[+] else
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.MobileNumber.SetText(sMobileNumber)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.WhereDidYouPurchaseQuicken.Select(sBoughtFrom)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
					[ ] sleep(5)
				[+] else if (QuickenIAMMainWindow.IAMUserControl.IAMContentControl.CompleteProfile.Exists(10))
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Zip.SetText(sZip)
					[ ] Sleep(5)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
					[ ] 
				[ ] //Password Vault condition in case of Registered User
				[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Exists(30))
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.UseMobileOption.Check()
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
				[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.AddAccount.Exists(300))
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.AddAccount.Click()
					[+] if(AddAccount.Exists(5))
						[ ] AddAccount.SetActive()
						[ ] AddAccount.Close()
					[ ] 
					[ ] 
				[+] if(QuickenWindow.Done.Exists(10))
					[ ] QuickenWindow.Done.Click()
				[+] if (DlgConsolidatePassword.Exists(5))
					[ ] DlgConsolidatePassword.SetActive()
					[ ] DlgConsolidatePassword.Close()
					[ ] WaitForState(DlgConsolidatePassword ,FALSE , 5)
				[ ] 
				[ ] 
				[+] if(AddAccount.Exists(3))
					[ ] AddAccount.SetActive()
					[ ] AddAccount.Close()
				[+] if(QuickenAccountSetup.Exists(10))
					[ ] QuickenAccountSetup.SetActive()
					[ ] QuickenAccountSetup.Cancel.Click()
				[ ] 
				[ ] iFunctionResult=PASS
				[ ] sleep(10)
			[+] else
				[ ] START:
				[+] if(QuickenConnectedServices.Exists(5))
					[ ] QuickenConnectedServices.SetActive()
					[ ] //First page of Quicken Connected Services
					[+] if (QuickenConnectedServices.GetStarted.Exists(5))
						[ ] QuickenConnectedServices.GetStarted.Click()
					[ ] //Second page of Quicken Connected Services
					[ ] QuickenConnectedServices.SignUp.EmailID.SetText(sEmailID)
					[ ] QuickenConnectedServices.SignUp.Password.SetText(sPassword)
					[ ] QuickenConnectedServices.SignUp.ConfirmPassword.SetText(sPassword)
					[ ] QuickenConnectedServices.SignUp.SecurityQuestion.Select(val(sSecurityQuestion))
					[ ] QuickenConnectedServices.SignUp.SecurityQuestionAnswer.SetText(sSecurityQuestionAnswer)
					[ ] sleep(2)
					[ ] QuickenConnectedServices.SignUp.NextButton.Click()
					[ ] sleep(5)
					[ ] //Third page of Quicken Connected Services(if displayed)
					[+] if(SignUp.SignUp.WhereDidYouPurchaseQuicken.Exists(10))
						[ ] SignUp.SignUp.Name.SetText(sName)
						[ ] SignUp.SignUp.LastName.SetText(sLastName)
						[ ] SignUp.SignUp.Address.SetText(sAddress)
						[ ] SignUp.SignUp.City.SetText(sCity)
						[ ] SignUp.SignUp.State.Select(sState)
						[ ] SignUp.SignUp.Zip.SetText(sZip)
						[ ] SignUp.SignUp.WhereDidYouPurchaseQuicken.Select(sBoughtFrom)
						[ ] SignUp.SignUp.NextButton.Click()
						[ ] WaitForState(SignUp, false, 10)
						[ ] //Fourth page of Quicken Connected Services
						[+] if(sVaultPassword!=NULL)
							[ ] PasswordVault.PasswordVault.PasswordVaultpassword.SetText(sVaultPassword)
							[ ] PasswordVault.PasswordVault.NextButton.Click()
						[+] else
							[ ] PasswordVault.PasswordVault.SkipThisStep.Click()
					[ ] //Handle if ID already exists
					[+] if(SignIn.SignIn.ExistingUserName.Exists(30))
						[ ] SignIn.SignIn.Password.SetText(sPassword)
						[ ] SignIn.SignIn.NextButton.Click()
					[+] if(SignUp.SignUp.WhereDidYouPurchaseQuicken.Exists(30))
						[ ] SignUp.SignUp.Name.SetText(sName)
						[ ] SignUp.SignUp.LastName.SetText(sLastName)
						[ ] SignUp.SignUp.Address.SetText(sAddress)
						[ ] SignUp.SignUp.City.SetText(sCity)
						[ ] SignUp.SignUp.State.Select(sState)
						[ ] SignUp.SignUp.Zip.SetText(sZip)
						[ ] SignUp.SignUp.WhereDidYouPurchaseQuicken.Select(sBoughtFrom)
						[ ] SignUp.SignUp.NextButton.Click()
						[ ] WaitForState(SignUp, false, 10)
						[ ] //Fourth page of Quicken Connected Services
						[+] // if(sVaultPassword!=NULL)
							[ ] // PasswordVault.PasswordVault.PasswordVaultpassword.SetText(sVaultPassword)
							[ ] // PasswordVault.PasswordVault.NextButton.Click()
						[+] // else
							[ ] // PasswordVault.PasswordVault.SkipThisStep.Click()
							[ ] // 
							[ ] // 
							[ ] // 
						[ ] 
					[ ] //Password Vault condition in case of Registered User
					[+] // if(PasswordVault.PasswordVault.Exists(10))
						[+] // if (PasswordVault.PasswordVault.VaultPassword.Exists(10))
							[ ] // PasswordVault.PasswordVault.VaultPassword.SetText(sPassword)
							[ ] // PasswordVault.PasswordVault.PasswordsMustMatch.SetText(sPassword)
						[ ] // PasswordVault.PasswordVault.NextButton.Click()
					[+] if(MobileAppRegistration.Exists(20))
						[ ] MobileAppRegistration.SetActive()
						[ ] MobileAppRegistration.UseMobileOption.Check()
						[ ] MobileAppRegistration.NextButton.Click()
						[ ] 
					[+] if(DonePage.Exists(30))
						[ ] // sActual = DonePage.DonePage.IntuitIDValueText.GetCaption()
						[ ] // sExpected = sEmailID
						[+] // if (sActual == sExpected)
							[ ] // ReportStatus(" Verify the displayed Intuit ID on 'Thanks!' screen.", PASS, "Found the correct Intuit ID displayed on 'Thanks!' screen. Expected : {sExpected}, Actual : {sActual} ") 
						[+] // else
							[ ] // ReportStatus(" Verify the displayed Intuit ID on 'Thanks!' screen.", FAIL, "Did NOT find the correct Intuit ID displayed on 'Thanks!' screen. Expected : {sExpected}, Actual : {sActual} ") 
						[ ] DonePage.DoneButton.Click()
						[ ] WaitForState(DonePage,FALSE,10)
						[+] if(AddAccount.Exists(3))
							[ ] AddAccount.SetActive()
							[ ] AddAccount.Close()
						[ ] 
					[ ] // Added by Govind on 12Feb2014 to handle 'Unlock your Password Vault' screen
					[+] if (UnlockYourPasswordVault.Exists(10))
						[ ] UnlockYourPasswordVault.SetActive()
						[ ] UnlockYourPasswordVault.Password.SetText(sVaultPassword)
						[ ] UnlockYourPasswordVault.OK.Click()
					[ ] iFunctionResult=PASS
					[ ] sleep(5)
				[+] else
					[ ] // ReportStatus("Verify Quicken connected services exist",FAIL,"Quicken Connected services window not found")
					[ ] // iFunctionResult=FAIL
					[ ] QuickenWindow.SetActive()
					[ ] QuickenWindow.Tools.Click()
					[ ] QuickenWindow.Tools.OneStepUpdate.Select()
					[ ] // Added by Govind on 12Feb2014 to handle 'Unlock your Password Vault' screen
					[+] if (UnlockYourPasswordVault.Exists(10))
						[ ] UnlockYourPasswordVault.SetActive()
						[ ] UnlockYourPasswordVault.Password.SetText(sVaultPassword)
						[ ] UnlockYourPasswordVault.OK.Click()
					[+]  if (OneStepUpdate.Exists(5))
						[ ] OneStepUpdate.Close()
						[ ] iFunctionResult=PASS
					[+] else if(AddAccount.Exists(10))
						[ ] AddAccount.SetActive()
						[ ] AddAccount.No.Click()
						[ ] iFunctionResult=PASS
					[+] else if (QuickenConnectedServices.Exists(60))
						[ ] goto START
					[ ] 
				[ ] 
				[+] if(AddAccount.Exists(5))
					[ ] AddAccount.SetActive()
					[ ] AddAccount.No.Click()
					[ ] iFunctionResult=PASS
				[+] if (OneStepUpdate.Exists(5))
					[ ] OneStepUpdate.Close()
					[ ] iFunctionResult=PASS
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult=FAIL
			[ ] 
		[ ] 
		[ ] return iFunctionResult
		[ ] 
		[ ] 
		[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: RegisterQuickenConnectedServicesTillReistration()
			[ ] //
			[ ] // DESCRIPTION:
			[ ] // This function will create data file with specified name sFileName.
			[ ] // If file is created successfully TRUE is returned else FALSE with error message is returned.
			[ ] 
			[ ] //
			[ ] // PARAMETERS:		STRING 	sFileName		Name of the file to be created
			[ ] //						STRING 	sLocation		Path of the file
			[ ] //
			[ ] // RETURNS:			INTEGER	0 = If data file is created successfully
			[ ] //									1 = if any error occurs while creating file
			[ ] //
			[ ] // REVISION HISTORY:
			[ ] //	Dec 03, 2010	Mamta Jain created
			[ ] //	Dec 23, 2010	Udita Dube Modified
		[ ] // ==========================================================
	[ ] // ==========================================================
	[+]  public INTEGER RegisterQuickenConnectedServicesTillReistration(STRING sEmailID optional,STRING sPassword optional,STRING sSecurityQuestion optional,STRING sSecurityQuestionAnswer optional,STRING sName optional,STRING sLastName optional,STRING sAddress optional,STRING sCity optional,STRING sState optional,STRING sZip optional,STRING sBoughtFrom optional,STRING sVaultPassword optional ,STRING sMobileNumber optional)
			[ ] 
			[+] //Variable Definition in case of NULL Values
				[ ] STRING sActual, sExpected
				[ ]  BOOLEAN bExistingUser = FALSE
				[+] if(sEmailID==NULL)
					[ ] sEmailID="Quicken_User@test.qbn.intuit.com"
					[ ] 
				[+] if(sPassword==NULL)
					[ ] sPassword="a123456b"
					[ ] 
					[ ] 
				[+] if(sSecurityQuestion==NULL)
					[ ] sSecurityQuestion="2"
					[ ] 
				[+] if(sSecurityQuestionAnswer==NULL)
					[ ] sSecurityQuestionAnswer="Ferrari"
					[ ] 
				[+] if(sName==NULL)
					[ ] sName="Quicken"
					[ ] 
				[+] if(sLastName==NULL)
					[ ] sLastName="User"
					[ ] 
					[ ] 
				[+] if(sAddress==NULL)
					[ ] sAddress="101202 MTV"
					[ ] 
				[+] if(sCity==NULL)
					[ ] sCity="Mountain View"
				[+] if(sState==NULL)
					[ ] sState="CA"
				[+] if(sZip==NULL)
					[ ] sZip="12345"
					[ ] 
				[+] if(sBoughtFrom==NULL)
					[ ] sBoughtFrom="Other"
				[+] if(sMobileNumber==NULL)
					[ ] sMobileNumber="1234567890"
				[ ] 
				[ ] 
				[ ] 
			[ ] 
			[+] do
				[ ] 
				[+] if (QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Exists(5))
					[ ] QuickenIAMMainWindow.SetActive()
					[+] if (QuickenIAMMainWindow.IAMUserControl.IAMContentControl.IamNew.Exists(5))
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.IamNew.Click()
					[+] if (QuickenIAMMainWindow.IAMUserControl.IAMContentControl.linkCreateOneHere.Exists())
							[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.linkCreateOneHere.Click()
					[ ] 
					[+] if (AlertMessage.Exists(10))
						[ ] AlertMessage.SetActive()
						[ ] AlertMessage.OK.Click()
						[ ] sleep(1)
					[ ] sleep(5)
					[ ] //Second page of Quicken Connected Services
					[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.EmailID.Exists(5))
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.EmailID.SetText(sEmailID)
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Password.SetText(sPassword)
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.ConfirmPassword.SetText(sPassword)
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.SecurityQuestion.Select(val(sSecurityQuestion))
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.SecurityQuestionAnswer.SetText(sSecurityQuestionAnswer)
						[ ] sleep(2)
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
						[ ] sleep(5)
					[ ] //Third page of Quicken Connected Services(if displayed)
					[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.WhereDidYouPurchaseQuicken.Exists(10))
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Name.SetText(sName)
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.LastName.SetText(sLastName)
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Address.SetText(sAddress)
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.City.SetText(sCity)
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.State.Select(sState)
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Zip.SetText(sZip)
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.MobileNumber.SetText(sMobileNumber)
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.WhereDidYouPurchaseQuicken.Select(sBoughtFrom)
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
						[ ] sleep(5)
						[ ] 
						[ ] //Fourth page of Quicken Connected Services
						[+] // if(sVaultPassword!=NULL)
							[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.PasswordVaultpassword.SetText(sVaultPassword)
							[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
						[+] // else
							[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.SkipThisStep.Click()
							[ ] // 
							[ ] // 
							[ ] // 
							[ ] // 
					[ ] //Handle if ID already exists
					[+] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.ExistingUserName.SetText(sEmailID)
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Password.SetText(sPassword)
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
						[ ] bExistingUser = TRUE
					[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.WhereDidYouPurchaseQuicken.Exists(60))
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Name.SetText(sName)
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.LastName.SetText(sLastName)
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Address.SetText(sAddress)
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.City.SetText(sCity)
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.State.Select(sState)
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Zip.SetText(sZip)
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.MobileNumber.SetText(sMobileNumber)
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.WhereDidYouPurchaseQuicken.Select(sBoughtFrom)
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
						[ ] sleep(5)
						[ ] 
					[ ] //Password Vault condition in case of Registered User
					[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Exists(60))
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.UseMobileOption.Check()
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
					[+] // if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.AddAccount.Exists(300))
						[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.AddAccount.Click()
						[+] // if(AddAccount.Exists(5))
							[ ] // AddAccount.SetActive()
							[ ] // AddAccount.Close()
						[ ] // 
						[ ] // 
					[+] // if(QuickenWindow.Done.Exists(10))
						[ ] // QuickenWindow.Done.Click()
					[+] // if (DlgConsolidatePassword.Exists(5))
						[ ] // DlgConsolidatePassword.SetActive()
						[ ] // DlgConsolidatePassword.Close()
						[ ] // WaitForState(DlgConsolidatePassword ,FALSE , 5)
					[ ] // 
					[ ] // 
					[+] // if(AddAccount.Exists(3))
						[ ] // AddAccount.SetActive()
						[ ] // AddAccount.Close()
					[+] // if(QuickenAccountSetup.Exists(10))
						[ ] // QuickenAccountSetup.SetActive()
						[ ] // QuickenAccountSetup.Cancel.Click()
					[ ] 
					[ ] iFunctionResult=PASS
					[ ] sleep(10)
				[+] else
					[ ] START:
					[+] if(QuickenConnectedServices.Exists(5))
						[ ] QuickenConnectedServices.SetActive()
						[ ] //First page of Quicken Connected Services
						[+] if (QuickenConnectedServices.GetStarted.Exists(5))
							[ ] QuickenConnectedServices.GetStarted.Click()
						[ ] //Second page of Quicken Connected Services
						[ ] QuickenConnectedServices.SignUp.EmailID.SetText(sEmailID)
						[ ] QuickenConnectedServices.SignUp.Password.SetText(sPassword)
						[ ] QuickenConnectedServices.SignUp.ConfirmPassword.SetText(sPassword)
						[ ] QuickenConnectedServices.SignUp.SecurityQuestion.Select(val(sSecurityQuestion))
						[ ] QuickenConnectedServices.SignUp.SecurityQuestionAnswer.SetText(sSecurityQuestionAnswer)
						[ ] sleep(2)
						[ ] QuickenConnectedServices.SignUp.NextButton.Click()
						[ ] sleep(5)
						[ ] //Third page of Quicken Connected Services(if displayed)
						[+] if(SignUp.SignUp.WhereDidYouPurchaseQuicken.Exists(10))
							[ ] SignUp.SignUp.Name.SetText(sName)
							[ ] SignUp.SignUp.LastName.SetText(sLastName)
							[ ] SignUp.SignUp.Address.SetText(sAddress)
							[ ] SignUp.SignUp.City.SetText(sCity)
							[ ] SignUp.SignUp.State.Select(sState)
							[ ] SignUp.SignUp.Zip.SetText(sZip)
							[ ] SignUp.SignUp.WhereDidYouPurchaseQuicken.Select(sBoughtFrom)
							[ ] SignUp.SignUp.NextButton.Click()
							[ ] WaitForState(SignUp, false, 10)
							[ ] //Fourth page of Quicken Connected Services
							[+] if(sVaultPassword!=NULL)
								[ ] PasswordVault.PasswordVault.PasswordVaultpassword.SetText(sVaultPassword)
								[ ] PasswordVault.PasswordVault.NextButton.Click()
							[+] else
								[ ] PasswordVault.PasswordVault.SkipThisStep.Click()
						[ ] //Handle if ID already exists
						[+] if(SignIn.SignIn.ExistingUserName.Exists(30))
							[ ] SignIn.SignIn.Password.SetText(sPassword)
							[ ] SignIn.SignIn.NextButton.Click()
						[+] if(SignUp.SignUp.WhereDidYouPurchaseQuicken.Exists(30))
							[ ] SignUp.SignUp.Name.SetText(sName)
							[ ] SignUp.SignUp.LastName.SetText(sLastName)
							[ ] SignUp.SignUp.Address.SetText(sAddress)
							[ ] SignUp.SignUp.City.SetText(sCity)
							[ ] SignUp.SignUp.State.Select(sState)
							[ ] SignUp.SignUp.Zip.SetText(sZip)
							[ ] SignUp.SignUp.WhereDidYouPurchaseQuicken.Select(sBoughtFrom)
							[ ] SignUp.SignUp.NextButton.Click()
							[ ] WaitForState(SignUp, false, 10)
							[ ] //Fourth page of Quicken Connected Services
							[+] // if(sVaultPassword!=NULL)
								[ ] // PasswordVault.PasswordVault.PasswordVaultpassword.SetText(sVaultPassword)
								[ ] // PasswordVault.PasswordVault.NextButton.Click()
							[+] // else
								[ ] // PasswordVault.PasswordVault.SkipThisStep.Click()
								[ ] // 
								[ ] // 
								[ ] // 
							[ ] 
						[ ] //Password Vault condition in case of Registered User
						[+] // if(PasswordVault.PasswordVault.Exists(10))
							[+] // if (PasswordVault.PasswordVault.VaultPassword.Exists(10))
								[ ] // PasswordVault.PasswordVault.VaultPassword.SetText(sPassword)
								[ ] // PasswordVault.PasswordVault.PasswordsMustMatch.SetText(sPassword)
							[ ] // PasswordVault.PasswordVault.NextButton.Click()
						[+] if(MobileAppRegistration.Exists(20))
							[ ] MobileAppRegistration.SetActive()
							[ ] MobileAppRegistration.UseMobileOption.Check()
							[ ] MobileAppRegistration.NextButton.Click()
							[ ] 
						[+] if(DonePage.Exists(30))
							[ ] // sActual = DonePage.DonePage.IntuitIDValueText.GetCaption()
							[ ] // sExpected = sEmailID
							[+] // if (sActual == sExpected)
								[ ] // ReportStatus(" Verify the displayed Intuit ID on 'Thanks!' screen.", PASS, "Found the correct Intuit ID displayed on 'Thanks!' screen. Expected : {sExpected}, Actual : {sActual} ") 
							[+] // else
								[ ] // ReportStatus(" Verify the displayed Intuit ID on 'Thanks!' screen.", FAIL, "Did NOT find the correct Intuit ID displayed on 'Thanks!' screen. Expected : {sExpected}, Actual : {sActual} ") 
							[ ] DonePage.DoneButton.Click()
							[ ] WaitForState(DonePage,FALSE,10)
							[+] if(AddAccount.Exists(3))
								[ ] AddAccount.SetActive()
								[ ] AddAccount.Close()
							[ ] 
						[ ] // Added by Govind on 12Feb2014 to handle 'Unlock your Password Vault' screen
						[+] if (UnlockYourPasswordVault.Exists(10))
							[ ] UnlockYourPasswordVault.SetActive()
							[ ] UnlockYourPasswordVault.Password.SetText(sVaultPassword)
							[ ] UnlockYourPasswordVault.OK.Click()
						[ ] iFunctionResult=PASS
						[ ] sleep(5)
					[+] else
						[ ] // ReportStatus("Verify Quicken connected services exist",FAIL,"Quicken Connected services window not found")
						[ ] // iFunctionResult=FAIL
						[ ] QuickenWindow.SetActive()
						[ ] QuickenWindow.Tools.Click()
						[ ] QuickenWindow.Tools.OneStepUpdate.Select()
						[ ] // Added by Govind on 12Feb2014 to handle 'Unlock your Password Vault' screen
						[+] if (UnlockYourPasswordVault.Exists(10))
							[ ] UnlockYourPasswordVault.SetActive()
							[ ] UnlockYourPasswordVault.Password.SetText(sVaultPassword)
							[ ] UnlockYourPasswordVault.OK.Click()
						[+]  if (OneStepUpdate.Exists(5))
							[ ] OneStepUpdate.Close()
							[ ] iFunctionResult=PASS
						[+] else if(AddAccount.Exists(10))
							[ ] AddAccount.SetActive()
							[ ] AddAccount.No.Click()
							[ ] iFunctionResult=PASS
						[+] else if (QuickenConnectedServices.Exists(60))
							[ ] goto START
						[ ] 
					[ ] 
					[+] if(AddAccount.Exists(5))
						[ ] AddAccount.SetActive()
						[ ] AddAccount.No.Click()
						[ ] iFunctionResult=PASS
					[+] if (OneStepUpdate.Exists(5))
						[ ] OneStepUpdate.Close()
						[ ] iFunctionResult=PASS
				[ ] 
			[+] except
				[ ] ExceptLog()
				[ ] iFunctionResult=FAIL
				[ ] 
			[ ] 
			[ ] return iFunctionResult
	[+] // ==========================================================
		[ ] 
	[ ] // // ==================================================================================
	[+] // // FUNCTION: CloseQuickenConnectedServices()
		[ ] // //
		[ ] // // DESCRIPTION:	This function will close the Quicken Connected Services dialog that appears when Quicken is launched
		[ ] // //
		[ ] // // PARAMETERS IN:	      NONE
		[ ] // //
		[ ] // // RETURNS:				INTEGER		PASS	If window is closed
		[ ] // //											FAIL	If any error occurs
		[ ] // //
		[ ] // // REVISION HISTORY:	7/8/2013	Created by	Dean Paes
		[ ] // //							 									   
	[ ] // // ==================================================================================
	[+] public INTEGER CloseQuickenConnectedServices()
		[ ] 
		[+] do
			[+] if(QuickenConnectedServices.Exists(10))
				[ ] 
				[ ] QuickenConnectedServices.SetActive()
				[ ] // QuickenConnectedServices.Later.Click()
				[ ] QuickenConnectedServices.TypeKeys(KEY_EXIT)
				[ ] WaitForState(QuickenConnectedServices,FALSE,5)
				[ ] iFunctionResult=PASS
				[ ] 
				[ ] 
				[ ] 
				[ ] 
			[+] else
				[ ] //ReportStatus("Verify presence of Quicken Connected Services window",FAIL,"Quicken Connected Services window is not found")
				[ ] iFunctionResult=PASS
				[ ] 
		[+] except
			[ ] iFunctionResult=FAIL
		[ ] return iFunctionResult
		[ ] 
		[ ] 
	[ ] 
	[ ] //Commented on 12/16/2015 to handele new sign-in widget - Mukesh
	[ ] // // // ==================================================================================
	[+] // // // FUNCTION: SignInQuickenConnectedServices()
		[ ] // // //
		[ ] // // // DESCRIPTION:	This function will do IAM Sign-In to in full window mow
		[ ] // // //
		[ ] // // // PARAMETERS IN:	      NONE
		[ ] // // //
		[ ] // // // RETURNS:				INTEGER		PASS	If user signs in
		[ ] // // //											FAIL	If any error occurs
		[ ] // // //
		[ ] // // // REVISION HISTORY:	4/4/2014	Created by	Mukesh
		[ ] // // //							 									   
	[ ] // // // ==================================================================================
	[+] // public void SignInQuickenConnectedServices(STRING sEmailID optional,STRING sPassword optional,STRING sSecurityQuestion optional,STRING sSecurityQuestionAnswer optional,STRING sName optional,STRING sLastName optional,STRING sAddress optional,STRING sCity optional,STRING sState optional,STRING sZip optional,STRING sBoughtFrom optional,STRING sVaultPassword optional)
		[ ] // 
		[+] // //Variable Definition in case of NULL Values
			[ ] // STRING sActual, sExpected
			[+] // if(sEmailID==NULL)
				[ ] // sEmailID="Quicken_User@test.qbn.intuit.com"
				[ ] // 
			[+] // if(sPassword==NULL)
				[ ] // sPassword="a123456b"
				[ ] // 
			[+] // if(sSecurityQuestion==NULL)
				[ ] // sSecurityQuestion="2"
				[ ] // 
			[+] // if(sSecurityQuestionAnswer==NULL)
				[ ] // sSecurityQuestionAnswer="Ferrari"
				[ ] // 
			[+] // if(sName==NULL)
				[ ] // sName="Quicken"
				[ ] // 
			[+] // if(sLastName==NULL)
				[ ] // sLastName="User"
				[ ] // 
				[ ] // 
			[+] // if(sAddress==NULL)
				[ ] // sAddress="101202 MTV"
				[ ] // 
			[+] // if(sCity==NULL)
				[ ] // sCity="Mountain View"
			[+] // if(sState==NULL)
				[ ] // sState="CA"
			[+] // if(sZip==NULL)
				[ ] // sZip="12345"
				[ ] // 
			[+] // if(sBoughtFrom==NULL)
				[ ] // sBoughtFrom="Other"
			[ ] // 
			[ ] // String sTemp
		[ ] // 
		[+] // do
			[ ] // 
			[ ] // //Second page of Quicken Connected Services
			[+] // if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Exists(10))
				[ ] // QuickenIAMMainWindow.SetActive() 
				[ ] // 
				[ ] // // 11/05/2015  KalyanG: 2015 R6 enhancement, added below condition to handle the screen change
				[+] // if (QuickenIAMMainWindow.IAMUserControl.IAMContentControl.IamNew.Exists(5))
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.IamNew.Click()
					[ ] // sleep(2)
				[ ] // 
				[ ] // // 06/05/2015  KalyanG: 2015 R6 enhancement, added below condition to handle the screen change
				[+] // if (QuickenIAMMainWindow.IAMUserControl.IAMContentControl.linkCreateOneHere.Exists())
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.linkCreateOneHere.Click()
				[ ] // 
				[ ] // sleep(10)
				[ ] // 
				[+] // if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.EmailID.Exists(20))
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.EmailID.SetText(sEmailID)
					[ ] // sTemp=QuickenIAMMainWindow.IAMUserControl.IAMContentControl.EmailID.GetProperty("Text")
					[ ] // print("stemp: {sTemp}")
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Password.SetText(sPassword)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.ConfirmPassword.SetText(sPassword)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.SecurityQuestion.Select(val(sSecurityQuestion))
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.SecurityQuestionAnswer.SetText(sSecurityQuestionAnswer)
					[ ] // sleep(2)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
					[ ] // sleep(5)
				[ ] // //Third page of Quicken Connected Services(if displayed)
				[+] // if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.WhereDidYouPurchaseQuicken.Exists(10))
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Name.SetText(sName)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.LastName.SetText(sLastName)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Address.SetText(sAddress)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.City.SetText(sCity)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.State.Select(sState)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Zip.SetText(sZip)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.WhereDidYouPurchaseQuicken.Select(sBoughtFrom)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
					[ ] // sleep(5)
					[ ] // 
					[ ] // //Fourth page of Quicken Connected Services
					[+] // if(sVaultPassword!=NULL)
						[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.PasswordVaultpassword.SetText(sVaultPassword)
						[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
					[+] // else
						[+] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.SkipThisStep.Click()
							[ ] // 
							[ ] // 
							[ ] // 
						[ ] // 
				[ ] // //Handle if ID already exists
				[+] // if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.ExistingUserName.Exists(20))
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Password.SetText(sPassword)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
					[+] // if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Upgrade.Exists(30))
						[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Upgrade.BringIntoView()
						[ ] // sleep(1)
						[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Upgrade.Click()
						[+] // if (UpgradeToTheQuickenmobileApp.Exists(30))
							[ ] // UpgradeToTheQuickenmobileApp.SetActive()
							[ ] // UpgradeToTheQuickenmobileApp.CancelButton.Click()
						[ ] // 
					[ ] // 
					[ ] // 
				[+] // if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.WhereDidYouPurchaseQuicken.Exists(20))
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Name.SetText(sName)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.LastName.SetText(sLastName)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Address.SetText(sAddress)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.City.SetText(sCity)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.State.Select(sState)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Zip.SetText(sZip)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.WhereDidYouPurchaseQuicken.Select(sBoughtFrom)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
					[ ] // sleep(5)
					[ ] // 
					[ ] // 
				[+] // if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.UseMobileOption.Exists(20))
					[+] // do
						[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.UseMobileOption.Check()
					[+] // except
						[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.UseMobileOption.Click()
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
				[ ] // //
				[+] // if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Upgrade.Exists(20))
					[ ] // 
					[+] // if(QuickenWindow.GetState()!=WS_MAXIMIZED)
						[ ] // QuickenWindow.PressKeys(KEY_ALT_SPACE)
						[ ] // QuickenWindow.TypeKeys(KEY_X)
						[ ] // QuickenWindow.ReleaseKeys(KEY_ALT_SPACE)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Upgrade.BringIntoView()
					[ ] // sleep(2)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Upgrade.Click()
					[+] // if (UpgradeToTheQuickenmobileApp.Exists(30))
						[ ] // UpgradeToTheQuickenmobileApp.SetActive()
						[ ] // UpgradeToTheQuickenmobileApp.CancelButton.Click()
					[ ] // 
				[ ] // 
				[+] // if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.AddAccount.Exists(10))
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.AddAccount.Click()
					[+] // if(AddAccount.Exists(5))
						[ ] // AddAccount.SetActive()
						[ ] // AddAccount.Close()
					[ ] // 
					[ ] // 
				[+] // if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Exists(20))
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
					[ ] // 
					[ ] // 
				[+] // if(QuickenWindow.Done.Exists(20))
					[ ] // QuickenWindow.Done.Click()
				[+] // if (DlgConsolidatePassword.Exists(20))
					[ ] // DlgConsolidatePassword.SetActive()
					[ ] // DlgConsolidatePassword.Close()
					[ ] // WaitForState(DlgConsolidatePassword ,FALSE , 5)
				[+] // if (DlgQuickenOnePassword.Exists(20))
					[ ] // DlgQuickenOnePassword.SetActive()
					[ ] // DlgQuickenOnePassword.Close()
					[ ] // WaitForState(DlgQuickenOnePassword ,FALSE , 5)
				[ ] // 
				[ ] // iFunctionResult=PASS
			[+] // else if (DlgIAMSignIn.Exists(5))
				[ ] // DlgIAMSignIn.SetActive()
				[ ] // DlgIAMSignIn.IntuitPasswordTextBox.SetText(sPassword)
				[ ] // DlgIAMSignIn.LoginButton.Click()
				[ ] // WaitForState(DlgIAMSignIn , FALSE , 10)
				[ ] // sleep(5)
				[ ] // iFunctionResult=PASS
				[ ] // 
			[+] // else 
				[ ] // 
				[ ] // 
				[ ] // ///Datafile is already signed-in
				[ ] // iFunctionResult=PASS
			[ ] // 
		[+] // except
			[ ] // ExceptLog()
			[ ] // iFunctionResult=FAIL
			[ ] // 
		[ ] // 
		[ ] // 
		[ ] // 
		[ ] // 
	[ ] 
	[+] public void SignInQuickenConnectedServices(BOOLEAN bOpenDataFile optional ,STRING sEmailID optional,STRING sPassword optional,STRING sSecurityQuestion optional,STRING sSecurityQuestionAnswer optional,STRING sName optional,STRING sLastName optional,STRING sAddress optional,STRING sCity optional,STRING sState optional,STRING sZip optional,STRING sBoughtFrom optional,STRING sVaultPassword optional)
		[ ] 
		[+] //Variable Definition in case of NULL Values
			[ ] STRING sActual, sExpected
			[+] if (bOpenDataFile==NULL)
				[ ] bOpenDataFile=FALSE
			[+] if(sEmailID==NULL)
				[ ] sEmailID="Quicken_User_iamtestpass@test.qbn.intuit.com"
				[ ] 
			[+] if(sPassword==NULL)
				[ ] sPassword="Aa@123456"
				[ ] 
			[+] if(sSecurityQuestion==NULL)
				[ ] sSecurityQuestion="2"
				[ ] 
			[+] if(sSecurityQuestionAnswer==NULL)
				[ ] sSecurityQuestionAnswer="Ferrari"
				[ ] 
			[+] if(sName==NULL)
				[ ] sName="Quicken"
				[ ] 
			[+] if(sLastName==NULL)
				[ ] sLastName="User"
				[ ] 
				[ ] 
			[+] if(sAddress==NULL)
				[ ] sAddress="101202 MTV"
				[ ] 
			[+] if(sCity==NULL)
				[ ] sCity="Mountain View"
			[+] if(sState==NULL)
				[ ] sState="CA"
			[+] if(sZip==NULL)
				[ ] sZip="90000"
				[ ] 
			[+] if(sBoughtFrom==NULL)
				[ ] sBoughtFrom="Other"
			[ ] 
			[ ] 
		[ ] 
		[-] do
			[ ] 
			[ ] //Second page of Quicken Connected Services
			[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Exists(2))
				[ ] QuickenIAMMainWindow.SetActive() 
				[ ] 
				[ ] // 11/05/2015  KalyanG: 2015 R6 enhancement, added below condition to handle the screen change
				[+] if (QuickenIAMMainWindow.IAMUserControl.IAMContentControl.IamNew.Exists())
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.IamNew.Click()
					[ ] sleep(2)
				[ ] 
				[ ] // 06/05/2015  KalyanG: 2015 R6 enhancement, added below condition to handle the screen change
				[+] // if (QuickenIAMMainWindow.IAMUserControl.IAMContentControl.linkCreateOneHere.Exists())
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.linkCreateOneHere.Click()
				[ ] 
				[ ] sleep(120)
				[ ] //commented as these controls have been removed  mukesh 1/27/2016
				[+] // if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.UserName.Exists())
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.UserName.SetText(sEmailID)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.UserPassword.SetText(sPassword)
					[ ] // sleep(2)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
					[ ] // sleep(5)
				[ ] // 
				[+] // if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.EmailID.Exists())
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.EmailID.SetText(sEmailID)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Password.SetText(sPassword)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.ConfirmPassword.SetText(sPassword)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.SecurityQuestion.Select(val(sSecurityQuestion))
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.SecurityQuestionAnswer.SetText(sSecurityQuestionAnswer)
					[ ] // sleep(2)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
					[ ] // sleep(5)
				[+] // if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.EmailID.Exists())
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.EmailID.SetText(sEmailID)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Password.SetText(sPassword)
					[ ] // sleep(2)
					[ ] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
					[ ] // sleep(5)
				[ ] ////Added goto label to handle sign-in stuck issue on autolab only
				[ ] SignIn:
				[+] if (QuickenIAMMainWindow.Chrome_RenderWidgetHostHWND.Exists(5))
					[+] if (bOpenDataFile==FALSE)
						[ ] QuickenIAMMainWindow.Chrome_RenderWidgetHostHWND.TypeKeys(sEmailID)
						[ ] sleep(5)
					[+] if (bOpenDataFile==TRUE)
						[ ] QuickenIAMMainWindow.Chrome_RenderWidgetHostHWND.Click()
						[ ] sleep(2)
					[ ] QuickenIAMMainWindow.Chrome_RenderWidgetHostHWND.TypeKeys(KEY_TAB)
					[ ] QuickenIAMMainWindow.Chrome_RenderWidgetHostHWND.TypeKeys(sPassword)
					[ ] sleep(5)
					[ ] QuickenIAMMainWindow.Chrome_RenderWidgetHostHWND.TypeKeys(KEY_ENTER)
					[+] if(!QuickenIAMMainWindow.IAMUserControl.IAMContentControl.UseMobileOption.Exists(120))
						[ ] LaunchQuicken()
						[ ] goto SignIn
						[ ] 
					[ ] 
				[ ] 
				[ ] 
				[ ] // //Third page of Quicken Connected Services(if displayed)
				[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.WhereDidYouPurchaseQuicken.Exists(120))
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Name.SetText(sName)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.LastName.SetText(sLastName)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Address.SetText(sAddress)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.City.SetText(sCity)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.State.Select(sState)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Zip.SetText(sZip)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.WhereDidYouPurchaseQuicken.Select(sBoughtFrom)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
					[ ] sleep(5)
					[ ] 
					[ ] //Fourth page of Quicken Connected Services
					[+] if(sVaultPassword!=NULL)
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.PasswordVaultpassword.SetText(sVaultPassword)
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
					[+] // else
						[+] // QuickenIAMMainWindow.IAMUserControl.IAMContentControl.SkipThisStep.Click()
							[ ] // 
							[ ] // 
							[ ] // 
						[ ] // 
				[ ] // //Handle if ID already exists
				[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.UseMobileOption.Exists(120))
					[+] do
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.UseMobileOption.Check()
					[+] except
						[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.UseMobileOption.Click()
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
				[ ] 
				[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Upgrade.Exists())
					[ ] 
					[+] if(QuickenWindow.GetState()!=WS_MAXIMIZED)
						[ ] QuickenWindow.PressKeys(KEY_ALT_SPACE)
						[ ] QuickenWindow.TypeKeys(KEY_X)
						[ ] QuickenWindow.ReleaseKeys(KEY_ALT_SPACE)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Upgrade.BringIntoView()
					[ ] sleep(2)
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.Upgrade.Click()
					[+] if (UpgradeToTheQuickenmobileApp.Exists(30))
						[ ] UpgradeToTheQuickenmobileApp.SetActive()
						[ ] UpgradeToTheQuickenmobileApp.CancelButton.Click()
					[ ] 
				[ ] 
				[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.AddAccount.Exists(120))
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.AddAccount.Click()
					[+] if(AddAccount.Exists(5))
						[ ] AddAccount.SetActive()
						[ ] AddAccount.Close()
					[ ] 
					[ ] 
				[+] if(QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Exists(5))
					[ ] QuickenIAMMainWindow.IAMUserControl.IAMContentControl.NextButton.Click()
					[ ] 
					[ ] 
				[+] if(QuickenWindow.Done.Exists(20))
					[ ] QuickenWindow.Done.Click()
				[+] if (DlgConsolidatePassword.Exists())
					[ ] DlgConsolidatePassword.SetActive()
					[ ] DlgConsolidatePassword.Close()
					[ ] WaitForState(DlgConsolidatePassword ,FALSE , 5)
				[+] if (DlgQuickenOnePassword.Exists())
					[ ] DlgQuickenOnePassword.SetActive()
					[ ] DlgQuickenOnePassword.Close()
					[ ] WaitForState(DlgQuickenOnePassword ,FALSE , 5)
				[ ] 
				[ ] iFunctionResult=PASS
			[+] else if (DlgIAMSignIn.Exists(5))
				[ ] DlgIAMSignIn.SetActive()
				[ ] DlgIAMSignIn.IntuitPasswordTextBox.SetText(sPassword)
				[ ] DlgIAMSignIn.LoginButton.Click()
				[ ] WaitForState(DlgIAMSignIn , FALSE , 10)
				[ ] sleep(5)
				[ ] iFunctionResult=PASS
				[ ] 
			[+] else 
				[ ] 
				[ ] 
				[ ] ///Datafile is already signed-in
				[ ] iFunctionResult=PASS
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult=FAIL
			[ ] 
		[ ] 
		[ ] 
		[ ] 
		[ ] 
	[ ] 
	[ ] 
	[ ] // // ==================================================================================
	[+] // // FUNCTION: SignOutQuickenConnectedServices()
		[ ] // //
		[ ] // // DESCRIPTION:	This function will do IAM Sign-Out from preferences
		[ ] // //
		[ ] // // PARAMETERS IN:	      NONE
		[ ] // //
		[ ] // // RETURNS:				INTEGER		PASS	If user signs out successfully
		[ ] // //											FAIL	If any error occurs
		[ ] // //
		[ ] // // REVISION HISTORY:	22/9/2014	Created by	Udita
		[ ] // //							 									   
	[ ] // // ==================================================================================
	[+] public void SignOutQuickenConnectedServices()
		[ ] 
		[+] //Variables
			[ ] INTEGER iResult
			[ ] 
		[+] do
			[ ] 
			[ ] iResult=SelectPreferenceType(sINTUIT_ID_MOBILE_ALERT_PREFERENCE_TYPE)
			[+] if (iResult==PASS)
				[ ] Preferences.SetActive()
				[ ] Preferences.SignInAsADifferentUser.Click()
				[+] if(DlgSignInAsADifferentUser.Exists(3))
					[ ] DlgSignInAsADifferentUser.SetActive()
					[ ] DlgSignInAsADifferentUser.SignOutTextField.SetText("yes")
					[ ] DlgSignInAsADifferentUser.SignOutButton.Click()
					[ ] WaitForState(DlgSignInAsADifferentUser,FALSE,5)
					[ ] sleep(5)
					[ ] iFunctionResult=PASS
				[+] else
					[ ] ReportStatus("Verify Sign in as a different user dialog",FAIL,"Sign in as a different user dialog is not displayed")
					[ ] iFunctionResult=FAIL
			[+] else
				[ ] ReportStatus("Verify Preference type is selected",FAIL,"{sINTUIT_ID_MOBILE_ALERT_PREFERENCE_TYPE} preference type is not selected")
				[ ] iFunctionResult=FAIL
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult=FAIL
			[ ] 
		[ ] 
		[ ] 
		[ ] 
		[ ] 
	[ ] 
	[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: MobileSignUpAndSync()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will Carry out Mobile Sign Up and sync data to cloud 
		[ ] //
		[ ] // PARAMETERS:		STRING	 			Cloud ID
		[ ] //						STRING 			Cloud Password
		[ ] //                                  STRING                   ZIP Code
		[ ] //
		[ ] // RETURNS:			INTEGER		0		If sign up process is complete
		[ ] //										1		If any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //Govind Babhulgaonkar		Created		Jan 23 2014
		[ ] //
	[ ] // ==========================================================
	[+] public INTEGER MobileSignUpAndSync(STRING sIAMid, STRING sIAMpassword ,STRING sZIPCode, STRING sVaultPassword)
		[ ] // INTEGER iCloudZIPCode
		[ ] // iCloudZIPCode =VAL(sCloudZIPCode)
		[ ] STRING sActual,sExpected
		[ ] 
		[ ] sExpected="Accounts Synced"
		[+] do
			[ ] QuickenWindow.SetActive()
			[ ] QuickenMainWindow.QWNavigator.MobileAlerts.DoubleClick()
			[+] if (GetStartedBrowserWindow.GetStarted.Exists(5))
				[ ] GetStartedBrowserWindow.GetStarted.DomClick()
				[ ] sleep(5)
				[+] if (QuickenConnectedServices.Exists(15))
					[ ] RegisterQuickenConnectedServices(sIAMid,sIAMpassword,NULL,"PiggyDog")
				[+] if (DlgIAMSignIn.Exists(15))
					[ ] DlgIAMSignIn.SetActive()
					[ ] DlgIAMSignIn.IntuitPasswordTextBox.SetText(sIAMpassword)
					[ ] DlgIAMSignIn.LoginButton.Click()
					[+] if (DlgSyncCreatePasswordVault.Exists(10))
						[ ] DlgSyncCreatePasswordVault.SetActive()
						[ ] DlgSyncCreatePasswordVault.PasswordVaultContentControl.Cancel.Click()
						[ ] WaitForState(DlgSyncCreatePasswordVault , False , 2)
				[+] if (DlgReplaceExistingID.Exists(20))
					[ ] DlgReplaceExistingID.SetActive()
					[ ] DlgReplaceExistingID.YesButton.Click()
				[+] if (AlertMessage.Exists(5))
					[ ] AlertMessage.SetActive()
					[ ] AlertMessage.Yes.Click()
				[+] if (WinMoblieSync.QWSnapHolder1.CreateQuickenCloudAccountHeaderText.Exists(10) && WinMoblieSync.QWSnapHolder1.YourIntuitIDText.Exists(10) && WinMoblieSync.QWSnapHolder1.VerifyYourZipCodeText.Exists(10))
					[ ] // Verify Intuit ID/Cloud ID - convert this one to another function - accepting actual result i.e. sIAMid and returning PASS/FAIL
					[ ] VerifyDisplayedCloudId(sIAMid)
					[ ] ReportStatus(" Verify Create Quicken Clound Account - Zip Code Screen", PASS, "Create Quicken Clound Account with Zip Code screen displayed.") 
					[ ] WinMoblieSync.QWSnapHolder1.ZipCodeTextField.SetText(sZIPCode)
					[+] if (WinMoblieSync.QWSnapHolder1.NextButton.IsEnabled())
						[ ] ReportStatus("Click 'Next' on Create Quicken Clound Account - Zip Code Screen", PASS, "Found 'Next' button enabled; clicking it...") 
						[ ] WinMoblieSync.QWSnapHolder1.NextButton.Click()
					[+] else
						[ ] ReportStatus("Click 'Next' on Create Quicken Clound Account - Zip Code Screen", FAIL, "'Next' button is NOT enabled") 
						[ ] iFunctionResult=FAIL
				[+] if (DlgReplaceExistingID.Exists(20))
					[ ] DlgReplaceExistingID.SetActive()
					[ ] DlgReplaceExistingID.YesButton.Click()
				[+] if (UnlockYourPasswordVault.Exists(60))
					[ ] UnlockYourPasswordVault.SetActive()
					[ ] UnlockYourPasswordVault.Password.SetText(sVaultPassword)
					[ ] UnlockYourPasswordVault.OK.Click()
				[+] if (WinMoblieSync.QWSnapHolder1.CreateQuickenCloudIDPanel.Exists(30) && WinMoblieSync.QWSnapHolder1.CreateQuickenCloudIDPanel.QWinChild1.QWListViewer1.ListBox1.Exists())
					[ ] VerifyDisplayedCloudId(sIAMid)
					[ ] ReportStatus("Verify M.Create.2 (Select account to Sync) screen", PASS, "M.Create.2 (Select account to Sync) screen displayed.") 
					[ ] iFunctionResult=PASS
					[ ] //QuickenWindow.SetActive()
					[ ] WinMoblieSync.QWSnapHolder1.CreateQuickenCloudIDPanel.QWinChild1.AllButton.Click()
					[+] WinMoblieSync.QWSnapHolder1.CreateQuickenCloudIDPanel.DoneButton.DoubleClick()
						[+] if (DlgAccountsSynced.Exists(400))
							[ ] VerifyAccountsSynedDlg (sExpected, sIAMid)
							[ ] //DlgAccountsSynced.SetActive()
							[ ] //sActual=DlgAccountsSynced.GetCaption()
							[ ] //bMatch = MatchStr("*{sExpected}*", sActual)
							[+] //if (bMatch==TRUE)
								[ ] //ReportStatus("Verify accounts are synced to cloud.", PASS, "{sActual}")
								[ ] //iFunctionResult=PASS
							[+] //else
								[ ] //ReportStatus("Verify accounts are synced to cloud.", FAIL, "Accounts are NOT synced : {sActual}")
							[ ] DlgAccountsSynced.OK.Click()
							[ ] WaitForState(DlgAccountsSynced,FALSE,1)
						[+] else
							[ ] ReportStatus("Verify the '{sExpected}' screen.", FAIL, "Accounts NOT synced; Did NOT find the '{sExpected}' screen")
				[+] else
					[ ] ReportStatus("Verify M.Create.2 (Select account to Sync) screen", FAIL, "M.Create.2 (Select account to Sync) screen NOT displayed.") 
					[ ] iFunctionResult=FAIL
			[+] else
				[ ] ReportStatus(" Verify zero-data screen for Mobile & Alerts", FAIL, "Zero-data screen for Mobile & Alerts view not found.")  
				[ ] iFunctionResult=FAIL
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult=FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: VerifyDisplayedCloudId()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will verify the cloud ID displayed in Quicken 
		[ ] //
		[ ] // PARAMETERS:		STRING	 			Expected Cloud ID
		[ ] //
		[ ] // RETURNS:			INTEGER		0		If sign up process is complete
		[ ] //										1		If any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //Govind Babhulgaonkar		Created		Jan 23 2014
		[ ] //
	[ ] // ==========================================================
	[ ] 
	[+] public INTEGER VerifyDisplayedCloudId(STRING sExpectedIntuitID)
		[ ] STRING sActual,sExpected
		[ ] 
		[ ] 
		[ ] sExpected = sExpectedIntuitID
		[+] do
			[+] if (WinMoblieSync.QWSnapHolder1.IntuitIDValueText.Exists(30))
				[ ] sActual = WinMoblieSync.QWSnapHolder1.IntuitIDValueText.GetText()
			[+] else if (WinMoblieSync.QWSnapHolder1.CreateQuickenCloudIDPanel.QWinChild1.IntuitIDValue1Text.Exists(30))
				[ ] sActual = WinMoblieSync.QWSnapHolder1.CreateQuickenCloudIDPanel.QWinChild1.IntuitIDValue1Text.GetText()
				[ ] 
				[ ] bMatch = MatchStr("*{sExpected}*", sActual)
				[+] if (bMatch==TRUE)
					[ ] ReportStatus("Verify the IAM/Cloud ID displayed on 'Sync - Zip Code' screen", PASS, "Expected = {sExpected} || Actual = {sActual}") 
					[ ] iFunctionResult=PASS
				[+] else
					[ ] ReportStatus("Verify the IAM/Cloud ID displayed on 'Sync - Zip Code' screen", FAIL, "Expected = {sExpected} || Actual = {sActual}") 
					[ ] iFunctionResult=FAIL
			[+] else
				[ ] ReportStatus("Verify the IAM/Cloud ID displayed on 'Sync - Zip Code' screen", FAIL, "The StaticText object 'IntuitIDValueText' not found.'") 
				[ ] iFunctionResult=FAIL
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult=FAIL
		[ ] return iFunctionResult
		[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: VerifyAccountsSynedDlg()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will verify the title & cloud ID displayed on 'Accounts Synced' screen 
		[ ] //
		[ ] // PARAMETERS:		STRING	 			Expected Dialog Title
		[ ] //						STRING	 			Expected Cloud ID
		[ ] //	
		[ ] // RETURNS:			INTEGER		0		If sign up process is complete
		[ ] //										1		If any error occurs
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] //Govind Babhulgaonkar		Created		Jan 27 2014
		[ ] //
	[ ] // ==========================================================
	[+] public INTEGER VerifyAccountsSynedDlg (STRING sExpectedTitle, STRING sExpectedIntuitID)
		[ ] STRING sActual,sExpected
		[ ] 
		[+] do
			[ ] DlgAccountsSynced.SetActive()
			[ ] sActual=DlgAccountsSynced.GetCaption()
			[ ] sExpected = sExpectedTitle
			[ ] bMatch = MatchStr("*{sExpected}*", sActual)
			[+] if (bMatch==TRUE)
				[ ] ReportStatus("Verify title of the '{sExpected}' screen.", PASS, "Expected = {sExpected} || Actual = {sActual}")
				[ ] iFunctionResult=PASS
			[+] else
				[ ] ReportStatus("Verify title of the '{sExpected}' screen.", FAIL, "Expected = {sExpected} || Actual = {sActual}")
				[ ] iFunctionResult=FAIL
			[ ] DlgAccountsSynced.SetActive()
			[ ] sActual=DlgAccountsSynced.IntuitIDValueText.GetText()
			[ ] sExpected = sExpectedIntuitID
			[ ] bMatch = MatchStr("*{sExpected}*", sActual)
			[+] if (bMatch==TRUE)
				[ ] ReportStatus("Verify the Intuit ID displayed on '{sExpected}' screen.", PASS, "Expected = {sExpected} || Actual = {sActual}")
			[+] else
				[ ] ReportStatus("Verify the Intuit ID displayed on '{sExpected}' screen.", FAIL, "Expected = {sExpected} || Actual = {sActual}")
				[ ] iFunctionResult=FAIL
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult=FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] // 
	[ ] // // ==========================================================
	[+] // // FUNCTION: SkipRegistration()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] // // This function will skip IAM Registration flow
		[ ] // //
		[ ] // // PARAMETERS:		        	 	      NONE
		[ ] // //	
		[ ] // // RETURNS:			INTEGER		PASS		If sign up process is bypassed
		[ ] // //										FAIL		If any error occurs
		[ ] // //
		[ ] // // REVISION HISTORY:
		[ ] // // Dean Paes		     Created		May 15th  2014
		[ ] // //
	[ ] // // ==========================================================
	[+] // public INTEGER SkipRegistration()
		[ ] // 
		[ ] // STRING sConf_FilePath
		[ ] // HANDLE hIni
		[ ] // 
		[+] // do
			[ ] // 
			[ ] // sConf_FilePath = SYS_GetEnv("QuickenIniPath")
			[ ] // // Update Quicken.ini file
			[+] // if (FileExists(sConf_FilePath))
				[ ] // 
				[ ] // // Open File
				[ ] // hIni = SYS_IniFileOpen (sConf_FilePath)
				[ ] // 
				[ ] // // Set Values for keys under tag Registration
				[ ] // SYS_IniFileSetValue (hIni, "Registration" , "SkipIntuitIDReg", "True")
				[ ] // 
				[ ] // // Close File
				[ ] // SYS_IniFileClose (hIni)
				[ ] // 
				[ ] // iFunctionResult=PASS
				[ ] // 
			[+] // else
				[ ] // ReportStatus("Verify If Quicken.ini file exists",FAIL,"Quicken.ini file does NOT exists")
				[ ] // iFunctionResult=FAIL
			[ ] // 
			[ ] // 
			[ ] // 
		[+] // except
			[ ] // ExceptLog()
			[ ] // iFunctionResult=FAIL
		[ ] // return iFunctionResult
	[ ] // 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: SkipRegistration()
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will update Quicken config to skip registration. 
		[ ] //
		[ ] // PARAMETERS:		none
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // Feb 12, 2016	Mukesh created
	[ ] // ==========================================================
	[ ] 
	[+] public SkipRegistration()
		[+] do
			[ ] HINIFILE hQuickenConfigIni
			[ ] STRING sQuickenIniPath
			[ ] sQuickenIniPath = SYS_GetEnv("QuickenIniPath")
			[ ] hQuickenConfigIni = IniFileOpen(sQuickenIniPath)
			[ ] IniFileSetValue(hQuickenConfigIni, "Registration", "SkipIntuitIDReg", "True")
			[ ] IniFileClose(hQuickenConfigIni)
			[ ] sleep(2)
			[ ] LaunchQuicken()
			[ ] 
		[+] except
			[ ] exceptlog()
	[ ] 
	[ ] 
[ ] // 
[+] // //**************************Account Register Functions******************************************************
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: AddBankingTransaction()
		[ ] //
		[ ] // DESCRIPTION:		This function will add Transaction to Checking account
		[ ] // 
		[ ] //
		[ ] // PARAMETERS:		STRING 	sWindowType			MDI or Popup
		[ ] //						STRING 	sTransactionType		Payment or Deposit
		[ ] //						STRING 	sAmount				Transaction Amount
		[ ] //						STRING	sDate					Date of the transaction
		[ ] //						STRING	sChequeNo			Cheque number [Optional]
		[ ] //						STRING	sPayee				Payee	[Optional]
		[ ] //						STRING 	sMemo				Memo [Optional]
		[ ] //						STRING 	sCategory				Category [Optional]
		[ ] //						STRING 	sTag					Tag [Optional]
		[ ] //                                  STRING      sAccountType                Checking,Savings,CreditCard,Cash
		[ ] //
		[ ] // RETURNS:			INTEGER	0 = If Transaction is created successfully
		[ ] //									1 = if any error occurs while adding Transaction
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // Jan 28, 2013	Dean Paes created
		[ ] //// updtaed Abhijit S, July 2015
	[ ] // ==========================================================
	[+] public INTEGER AddBankingTransaction(STRING sWindowType,STRING sTransactionType, STRING sAmount, STRING sDate ,STRING sChequeNo optional, STRING sPayee optional, STRING sMemo  optional, STRING sCategory optional, STRING sTag optional,STRING sAccountType optional)
		[+] // Variable declaration
			[ ] BOOLEAN bBalanceCheck
			[ ] INTEGER  iSelect
			[ ] STRING sActual
		[+] do
			[+] if(IsNULL(sDate))
				[ ] sDate = ""
			[+] if(IsNULL(sChequeNo))
				[ ] sChequeNo = ""
			[+] if(IsNULL(sPayee))
				[ ] sPayee = ""
				[ ] 
			[+] if(IsNULL(sMemo))
				[ ] sMemo = ""
			[+] if( IsNULL(sCategory))
				[ ] sCategory = ""
			[+] if(IsNULL(sTag ))
				[ ] sTag = ""
			[ ] 
			[ ] 
			[+] switch(sWindowType)
				[ ] 
				[+] case("MDI")
					[ ] 
					[ ] // Turn Off "Use Popup Register" option for MDI window type
					[ ] iSelect=UsePopupRegister("OFF")
					[+] if(iSelect==PASS)
						[ ] ReportStatus("Verify Popup Register Option", PASS, "Popup register is OFF for MDI") 
						[ ] 
						[ ] 
						[ ] QuickenWindow.SetActive ()
						[ ] QuickenWindow.TypeKeys(KEY_CTRL_N)
						[ ] 
						[ ] // For Premier and Deluxe SKU's, tag column is not selected. Include the tag column from Account Settings options.
						[+] // if(SKU_TOBE_TESTED == "PREMIER" || SKU_TOBE_TESTED == "DELUXE")
							[ ] // BankingMDI.AccountActions.Click ()
							[ ] // BankingMDI.AccountActions.TypeKeys(  Replicate (KEY_DN, 16)) 
							[ ] // BankingMDI.AccountActions.TypeKeys(KEY_ENTER)
							[ ] // MDICalloutHolder.SetActive ()
							[ ] // MDICalloutHolder.CalloutPopup.Tag.Click (1, 12, 12)
							[ ] // MDICalloutHolder.CalloutPopup.Done.Click (1, 29, 11)
						[ ] 
						[+] switch(sTransactionType) 
							[+] case("Payment")
								[ ] 
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sDate)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[+] if(sAccountType=="Checking"||sAccountType=="Chequing")
									[ ] MDIClient.AccountRegister.TxList.TypeKeys (sChequeNo)
									[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sPayee)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sMemo)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sCategory)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[+] if(SKU_TOBE_TESTED != "QNUE")
									[ ] MDIClient.AccountRegister.TxList.TypeKeys (sTag)
									[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sAmount)
								[ ] sleep(SHORT_SLEEP)
								[ ] MDIClient.AccountRegister.TxList.TxToolBar.Save.Click()
								[+] if(AlertMessage.Exists(SHORT_SLEEP))                //Added by Dean on 12th Feb 2013
									[ ] AlertMessage.Yes.Click()
								[ ] 
								[ ] iFunctionResult = PASS
							[ ] 
							[+] case("Deposit")
								[ ] 
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sDate)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[+] if(sAccountType=="Checking"||sAccountType=="Chequing")
									[ ] MDIClient.AccountRegister.TxList.TypeKeys (sChequeNo)
									[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sPayee)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sMemo)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sCategory)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sTag)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_TAB)
								[ ] MDIClient.AccountRegister.TxList.TypeKeys (sAmount)
								[ ] sleep(SHORT_SLEEP)
								[ ] MDIClient.AccountRegister.TxList.TxToolBar.Save.Click()
								[+] if(AlertMessage.Exists(SHORT_SLEEP))                //Added by Dean on 12th Feb 2013
									[ ] AlertMessage.Yes.Click()
								[ ] 
								[ ] iFunctionResult = PASS
							[ ] 
							[+] default
								[ ] iFunctionResult = FAIL
							[ ] 
							[ ] 
						[ ] 
						[+] if(AlertMessage.Exists(SHORT_SLEEP)) // Handle message - You are entering a transaction over a year away. Is this correct?
							[ ] AlertMessage.SetActive()
							[ ] AlertMessage.DonTShowAgain.Check()
							[ ] AlertMessage.Yes.Click()
						[+] else if(AlertMessage.Exists(SHORT_SLEEP))
							[ ] AlertMessage.DonTShowAgain.Check()
							[ ] AlertMessage.Yes.Click()
						[+] else if(NewCategory.Exists(SHORT_SLEEP))
									[ ] NewCategory.SetActive()
									[ ] NewCategory.Yes.Click()
									[ ] sleep(1)
									[+] if(SetUpCategory.Exists(SHORT_SLEEP))
										[ ] SetUpCategory.SetActive()
										[ ] SetUpCategory.OK.Click(1,5,5)
							[ ] 
							[ ] 
						[+] else
							[ ] // do nothing
						[ ] 
					[+] else
						[ ] ReportStatus("Verify Popup Register Option", FAIL, "Popup register is not OFF for MDI") 
						[ ] 
					[ ] 
				[ ] 
				[+] case("PopUp")
					[ ] 
					[ ] // Turn ON "Use Popup Register" option for Popup window type
					[ ] iSelect=UsePopupRegister("ON")
					[ ] 
					[+] if(iSelect==PASS)
						[ ] ReportStatus("Verify Popup Register Option", PASS, "Popup register is ON for Popup") 
						[ ] 
						[ ] BankingPopUp.VerifyEnabled(TRUE, 20)
						[ ] // Maximize the Checking account window as Popup Register is on
						[ ] BankingPopUp.Maximize()
						[ ] 
						[ ] // For Premier and Deluxe SKU's, tag column is not selected. Include the tag column from Account Settings options.
						[+] // if(SKU_TOBE_TESTED == "PREMIER" || SKU_TOBE_TESTED == "DELUXE")
							[ ] // BankingPopUp.AccountActions.Click ()
							[ ] // BankingPopUp.AccountActions.TypeKeys(  Replicate (KEY_DN, 16)) 
							[ ] // BankingPopUp.AccountActions.TypeKeys(KEY_ENTER)
							[ ] // PopUpCalloutHolder.SetActive ()
							[ ] // PopUpCalloutHolder.CalloutPopup.Tag.Click (1, 12, 12)
							[ ] // PopUpCalloutHolder.CalloutPopup.Done.Click (1, 29, 11)
						[ ] 
						[+] switch(sTransactionType) 
							[+] case("Payment")
								[ ] BankingPopUp.SetActive()
								[ ] BankingPopUp.TypeKeys (sDate)
								[ ] BankingPopUp.TypeKeys(KEY_TAB)
								[+] if(sAccountType!="Savings"||sAccountType!="CreditCard"||sAccountType!="Cash")
									[ ] BankingPopUp.TypeKeys (sChequeNo)
									[ ] BankingPopUp.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TypeKeys (sPayee)
								[ ] BankingPopUp.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TypeKeys (sMemo)
								[ ] BankingPopUp.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TypeKeys (sCategory)
								[ ] BankingPopUp.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TypeKeys (sTag)
								[ ] BankingPopUp.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TypeKeys (sAmount)
								[ ] sleep(SHORT_SLEEP)
								[ ] BankingPopUp.TxList.TxToolbar.Save.Click()
								[+] if(AlertMessage.Exists(SHORT_SLEEP))                //Added by Dean on 12th Feb 2013
									[ ] AlertMessage.Yes.Click()
								[+] else if(NewCategory.Exists(SHORT_SLEEP))        // Added By Abhijit July,2015
																[ ] NewCategory.SetActive()
																[ ] NewCategory.Yes.Click()
																[ ] sleep(1)
																[+] if(SetUpCategory.Exists(SHORT_SLEEP))
																	[ ] SetUpCategory.SetActive()
																	[ ] SetUpCategory.OK.Click(1,5,5)
								[ ] iFunctionResult = PASS
							[ ] 
							[+] case("Deposit")
								[ ] BankingPopUp.SetActive()
								[ ] BankingPopUp.TxList.TypeKeys (sDate)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[+] if(sAccountType!="Savings"||sAccountType!="CreditCard"||sAccountType!="Cash")
									[ ] BankingPopUp.TypeKeys (sChequeNo)
									[ ] BankingPopUp.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sPayee)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sMemo)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sCategory)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sTag)
								[ ] BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] //BankingPopUp.TxList.TypeKeys(KEY_TAB)
								[ ] BankingPopUp.TxList.TypeKeys (sAmount)
								[ ] sleep(SHORT_SLEEP)
								[ ] BankingPopUp.TxList.TxToolbar.Save.Click()
								[+] if(AlertMessage.Exists(SHORT_SLEEP))                //Added by Dean on 12th Feb 2013
									[ ] AlertMessage.Yes.Click()
								[+] else if(NewCategory.Exists(SHORT_SLEEP))        // Added By Abhijit July,2015
																[ ] NewCategory.SetActive()
																[ ] NewCategory.Yes.Click()
																[ ] sleep(1)
																[+] if(SetUpCategory.Exists(SHORT_SLEEP))
																	[ ] SetUpCategory.SetActive()
																	[ ] SetUpCategory.OK.Click(1,5,5)
								[ ] 
								[ ] iFunctionResult = PASS
							[ ] 
							[+] default
								[ ] iFunctionResult = FAIL
						[ ] 
					[+] else
						[ ] ReportStatus("Verify Popup Register Option", FAIL, "Popup register is not ON for Popup") 
						[ ] 
					[ ] 
			[ ] 
		[+] except
			[+] if(BankingPopUp.Exists(SHORT_SLEEP))
				[ ] BankingPopUp.Close()
				[ ] 
			[ ] iFunctionResult = FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: VerifyAccountRegisterFilter()
		[ ] // // // 
		[ ] // // // DESCRIPTION:
		[ ] // // // This function will verify if transactions are displayed correctly under Register filter specified by matching the transaction count
		[ ] // // // 
		[ ] // // // PARAMETERS:		STRING	 			sSearchEntry
		[ ] // // //
		[ ] // // //
		[ ] // // // 
		[ ] // // // RETURNS:			INTEGER		0		If transaction count matches
		[ ] // // //                                                          1		If any error occurs
		[ ] // // // 
		[ ] // // // REVISION HISTORY:
		[ ] // // // Dean Paes  created  Jan 14 2013
	[ ] // ==========================================================
	[+] public INTEGER VerifyAccountRegisterFilter(STRING sFilterType,STRING sFilterName ,STRING sNumberOfTransactions)
		[ ] STRING sTransactionCount,sNum
		[ ] 
		[ ] INTEGER iNum , iCount
		[ ] 
		[+] do
			[ ] QuickenWindow.SetActive()
			[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_CTRL_N)
			[ ] MDIClient.AccountRegister.SearchWindow.SetText("")
			[ ] //set the default state of filter
			[ ] MDIClient.AccountRegister.TransactionTypeFilter.TypeKeys("a")
			[ ] sleep(1)
			[ ] MDIClient.AccountRegister.TypeFilter.TypeKeys("a")
			[ ] sleep(1)
			[+] if(sFilterType=="Transaction")
				[+] switch sFilterName
					[ ] 
					[+] case "All Transactions"
						[ ] 
						[ ] MDIClient.AccountRegister.TransactionTypeFilter.Select(1)
						[ ] 
					[+] case "Uncategorized"
						[ ] 
						[ ] MDIClient.AccountRegister.TransactionTypeFilter.Select(2)
						[ ] 
					[+] case "Unreconciled"
						[ ] MDIClient.AccountRegister.TransactionTypeFilter.Select(3)
						[ ] MDIClient.AccountRegister.TransactionTypeFilter.Select(3)
					[+] case "Cleared"
						[+] for (iCount =1 ; iCount <4 ; ++iCount)
							[ ] MDIClient.AccountRegister.TransactionTypeFilter.Select(4)
					[+] case "Uncleared"
						[+] for (iCount =1 ; iCount <5 ; ++iCount)
							[ ] MDIClient.AccountRegister.TransactionTypeFilter.Select(5)
						[ ] 
					[+] case "Flagged"
						[+] for (iCount =1 ; iCount <6 ; ++iCount)
							[ ] MDIClient.AccountRegister.TransactionTypeFilter.Select(6)
						[ ] 
						[ ] 
						[ ] 
					[+] default
						[ ] ReportStatus("Account Register Date Filter",FAIL,"Incorrect Transaction FIlter Option")
						[ ] 
					[ ] 
			[+] else if(sFilterType=="Date")
				[+] switch sFilterName
					[ ] 
					[+] case "All Dates"
						[ ] 
						[ ] MDIClient.AccountRegister.DateFilter.Select(1)
						[ ] 
					[+] case "This Month"
						[ ] 
						[ ] MDIClient.AccountRegister.DateFilter.Select(2)
					[+] case "Last Month"
						[ ] 
						[ ] MDIClient.AccountRegister.DateFilter.Select(3)
						[ ] 
					[+] case "Last 30 days"
						[ ] 
						[ ] MDIClient.AccountRegister.DateFilter.Select(4)
						[ ] 
					[+] case "Last 60 days"
						[ ] 
						[ ] MDIClient.AccountRegister.DateFilter.Select(5)
						[ ] 
					[+] case "Last 90 days"
						[ ] 
						[ ] MDIClient.AccountRegister.DateFilter.Select(6)
						[ ] 
					[+] case "Last 12 Months"
						[ ] 
						[ ] MDIClient.AccountRegister.DateFilter.Select(7)
						[ ] 
					[+] case "This Quarter"
						[ ] 
						[ ] MDIClient.AccountRegister.DateFilter.Select(8)
						[ ] 
					[+] case "Last Quarter"
						[ ] 
						[ ] MDIClient.AccountRegister.DateFilter.Select(9)
						[ ] 
					[+] case "This Year"
						[ ] 
						[ ] MDIClient.AccountRegister.DateFilter.Select(10)
					[+] case "Last Year"
						[ ] 
						[ ] MDIClient.AccountRegister.DateFilter.Select(11)
						[ ] 
					[+] case "Custom"
						[ ] 
						[ ] MDIClient.AccountRegister.DateFilter.Select(12)
						[ ] 
					[+] default
						[ ] ReportStatus("Account Register Date Filter",FAIL,"Incorrect Date Filter Option")
						[ ] 
					[ ] 
				[ ] 
				[ ] 
			[+] else if(sFilterType=="Type")
				[+] switch sFilterName
					[ ] 
					[ ] 
					[+] case "All Types"
						[ ] 
						[ ] MDIClient.AccountRegister.TypeFilter.Select(1)
						[ ] 
					[+] case "Any Type"
						[ ] MDIClient.AccountRegister.TypeFilter.Select(1)      
						[ ] 
					[+] case "Payment"
						[ ] MDIClient.AccountRegister.TypeFilter.Select(2)
						[ ] 
						[ ] 
					[+] case "PaidC"
						[ ] MDIClient.AccountRegister.TypeFilter.Select(2)
						[ ] 
						[ ] 
					[+] case "Billed"
						[ ] MDIClient.AccountRegister.TypeFilter.Select(2)
						[ ] 
						[ ] 
					[+] case "Deposit"
						[ ] MDIClient.AccountRegister.TypeFilter.Select(3)
						[ ] MDIClient.AccountRegister.TypeFilter.Select(3)
					[+] case "Charged"
						[ ] MDIClient.AccountRegister.TypeFilter.Select(3)
						[ ] MDIClient.AccountRegister.TypeFilter.Select(3)
						[ ] 
					[+] case "PaidV"
						[ ] MDIClient.AccountRegister.TypeFilter.Select(3)
						[ ] MDIClient.AccountRegister.TypeFilter.Select(3)
					[ ] 
					[+] default
						[ ] ReportStatus("Account Register Date Filter",FAIL,"Incorrect Date Filter Option")
						[ ] 
					[ ] 
			[ ] 
			[+] else
				[ ] ReportStatus("Account Register Filter",FAIL,"Incorrect Filter Type Option")
				[ ] 
			[ ] 
			[ ] //Match value obtained from register to value given in 
			[ ] sleep(1)
			[ ] sTransactionCount  = MDIClient.AccountRegister.Balances.TransactionCount.GetText()
			[ ] 
			[ ] iNum=val(sNumberOfTransactions)
			[ ] sNum=Str(iNum)
			[ ] 
			[ ] bMatch=MatchStr("*{sNum}*",sTransactionCount)
			[+] if(bMatch==TRUE)
				[ ] ReportStatus("Account Register Transaction Type Filter",PASS,"Transaction displayed correctly under {sFilterName} Filter actual Transaction Count is {sTransactionCount}  excpected count : {sNum} ")
				[ ] iFunctionResult=PASS
			[+] else
				[ ] ReportStatus("Account Register Transaction Type Filter",FAIL,"Transaction not displayed correctly under {sFilterName} Filter actual Transaction Count is {sTransactionCount} against excpected count : {sNum} ")
				[ ] iFunctionResult=FAIL
			[ ] 
			[ ] 
			[ ] 
			[ ] 
			[ ] 
			[ ] 
		[+] except
			[ ] iFunctionResult=FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: AccountActionsOnTransaction()
		[ ] // // // 
		[ ] // // // DESCRIPTION:
		[ ] // // // This function will verify if transactions searched are displayed correctly under Account Register filter specified by matching the transaction count
		[ ] // // // 
		[ ] // // // PARAMETERS:		STRING	 			sSearchEntry                                    Search in Register with this string
		[ ] // // //                                  STRING                  sAction                                             Action to be performed on 1st transaction in register
		[ ] // // //                                                                                                                        e.g. Copy Transactions(s), New, Delete
		[ ] // // //                                                                           
		[ ] // // //  
		[ ] // // // RETURNS:			INTEGER		PASS		If transaction count matches with expected 
		[ ] // // //                                                          FAIL		If any error occurs
		[ ] // // // 
		[ ] // // // REVISION HISTORY:
		[ ] // // // Dean Paes  created  Feb 22 2013
	[ ] // ==========================================================
	[+] // public INTEGER AccountActionsOnTransaction(STRING sSearchString,STRING sAction,INTEGER iXpos optional,INTEGER iYpos optional)
		[ ] // 
		[ ] // INTEGER iX,iY
		[ ] // 
		[+] // do
			[ ] // QuickenWindow.SetActive()
			[ ] // 
			[ ] // 
			[ ] // 
			[+] // if(MDIClient.AccountRegister.SearchWindow.Exists(SHORT_SLEEP))
				[ ] // ReportStatus("Verify Transaction", PASS, "Search Window exists") 
				[ ] // 
				[ ] // //Search for transaction with Payee name
				[ ] // MDIClient.AccountRegister.SearchWindow.SetText(sSearchString)
				[ ] // 
				[+] // if(iXpos==NULL)
					[ ] // iX=467
				[+] // else
					[ ] // iX=iXpos
					[ ] // 
				[ ] // 
				[ ] // 
				[+] // if(iYpos==NULL)
					[ ] // iY=23
				[+] // else
					[ ] // iY=iYpos
					[ ] // 
				[ ] // 
				[ ] // 
				[ ] // //Select 'sAction' option from dropdown list
				[ ] // MDIClient.AccountRegister.TxList.PopupSelect (iX, iY, sAction)
				[ ] // iFunctionResult=PASS
				[ ] // 
				[ ] // 
			[+] // else
				[ ] // iFunctionResult=FAIL
			[ ] // 
			[ ] // 
			[ ] // 
			[ ] // 
			[ ] // 
		[+] // except
			[ ] // iFunctionResult=FAIL
		[ ] // return iFunctionResult
	[+] public INTEGER AccountActionsOnTransaction(STRING sWindowType, STRING sSearchString,STRING sAction,STRING sSubAction optional, INTEGER iXpos optional,INTEGER iYpos optional)
		[ ] 
		[ ] INTEGER iX,iY ,iKeyCount , iSubKeyCount
		[ ] POINT pPoint
		[ ] 
		[+] do
			[ ] 
			[+] switch trim(sAction)
				[+] case "Save"
					[ ] iKeyCount=1
				[+] case "Split..."
					[ ] iKeyCount=3
				[+] case "Notes and flags..."
					[ ] iKeyCount=4
				[+] case "Attachments..."
					[ ] iKeyCount=5
				[+] case "Tax Line Item Assignments"
					[ ] iKeyCount=6
				[+] case "Copy transaction(s)"
					[ ] iKeyCount=7
				[+] case "Cut transaction(s)"
					[ ] iKeyCount=8
				[+] case "Paste transaction(s)"
					[ ] iKeyCount=9
				[+] case "Edit transaction(s)"
					[ ] iKeyCount=10
				[+] case "New"
					[ ] iKeyCount=11
				[+] case "Delete"
					[ ] iKeyCount=12
				[+] case "Undo delete"
					[ ] iKeyCount=13
				[+] case "Insert transaction"
					[ ] iKeyCount=14
				[+] case "Move transaction(s)"
					[ ] iKeyCount=15
				[+] case "Undo Accept All Transactions"
					[ ] iKeyCount=16
				[+] case "Memorize payee..."
					[ ] iKeyCount=17
				[+] case "Schedule bill or deposit"
					[ ] iKeyCount=18
				[+] case "Void transaction(s)"
					[ ] iKeyCount=19
				[+] case "Go To matching transfer"
					[ ] iKeyCount=24
				[+] case "Go to specific date..."
					[ ] iKeyCount=24
				[+] case "Payments received from"
					[ ] iKeyCount=26
				[+] case "Payments made to"
					[ ] iKeyCount=26
				[+] case "Launch Mini-Report for Payee Online"
					[ ] iKeyCount=29
				[+] case "Launch Mini-Report for Payee Manual"
					[ ] iKeyCount=28
				[+] case "Reconcile"
					[ ] iKeyCount=20
					[+] switch trim(sSubAction)
						[+] case "Not Reconciled"
							[ ] iSubKeyCount=0
						[+] case "Cleared"
							[ ] iSubKeyCount=1
						[+] case "Reconciled"
							[ ] iSubKeyCount=2
						[ ] 
				[ ] 
				[ ] 
				[ ] 
			[ ] 
			[ ] 
			[+] switch(sWindowType)
				[ ] 
				[+] case "MDI"
					[ ] QuickenWindow.SetActive()
					[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_CTRL_N)
					[+] if(MDIClient.AccountRegister.SearchWindow.Exists(5))
						[ ] ReportStatus("Verify Transaction", PASS, "Search Window exists") 
						[ ] 
						[ ] //Search for transaction with Payee name
						[+] if(iXpos==NULL)
							[ ] iX=251
						[+] else
							[ ] iX=iXpos
							[ ] 
						[ ] 
						[+] if(iYpos==NULL)
							[ ] iY=21
						[+] else
							[ ] iY=iYpos
							[ ] 
						[ ] 
						[ ] MDIClient.AccountRegister.SearchWindow.SetText(sSearchString)
						[ ] sleep(1)
						[ ] MDIClient.AccountRegister.TxList.Click(2, iX ,iY)
						[ ] sleep(1)
						[ ] MDIClient.AccountRegister.TxList.TypeKeys(replicate( KEY_DN , iKeyCount))
						[+] if (sAction=="Reconcile")
							[ ] MDIClient.AccountRegister.TxList.TypeKeys( KEY_RT)
							[+] if (sSubAction=="Not Reconciled")
								[ ] 
							[+] else if (sSubAction== "Cleared")
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(replicate( KEY_DN , iSubKeyCount))
							[+] else if (sSubAction== "Reconciled")
								[ ] MDIClient.AccountRegister.TxList.TypeKeys(replicate( KEY_DN , iSubKeyCount))
							[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_ENTER)
							[ ] MDIClient.AccountRegister.TxList.TxToolBar.Save.DoubleClick()
						[+] else
							[ ] MDIClient.AccountRegister.TxList.TypeKeys(KEY_ENTER)
							[ ] 
						[ ] 
						[ ] iFunctionResult=PASS
						[ ] 
					[+] else
						[ ] iFunctionResult=FAIL
					[ ] 
				[+] case "PopUp"
					[ ] BankingPopUp.SetActive()
					[+] if(BankingPopUp.SearchWindow.Exists(SHORT_SLEEP))
						[ ] ReportStatus("Verify Transaction", PASS, "Search Window exists") 
						[ ] 
						[+] if(iXpos==NULL)
							[ ] iX=467
						[+] else
							[ ] iX=iXpos
							[ ] 
						[+] if(iYpos==NULL)
							[ ] iY=23
						[+] else
							[ ] iY=iYpos
							[ ] 
							[ ] 
						[ ] 
						[ ] //Search for transaction with Payee name
						[ ] BankingPopUp.SearchWindow.SetText(sSearchString)
						[ ] sleep(1)
						[ ] BankingPopUp.TxList.Click(2,iX,iY)
						[ ] sleep(1)
						[ ] BankingPopUp.TxList.TypeKeys(replicate( KEY_DN , iKeyCount))
						[ ] BankingPopUp.TxList.TypeKeys(KEY_ENTER)
						[ ] iFunctionResult=PASS
						[ ] 
					[+] else
						[ ] iFunctionResult=FAIL
						[ ] 
					[ ] 
			[ ] 
			[ ] 
			[ ] 
		[+] except
			[ ] ExceptLog()
			[ ] iFunctionResult=FAIL
		[ ] 
		[ ] return iFunctionResult
	[ ] 
	[+] // FUNCTION: AccountActionsOnTransactionOnPopUpWindow()
		[ ] // // // 
		[ ] // // // DESCRIPTION:
		[ ] // // // This function will verify if transactions searched are displayed correctly under Popup Account Register filter specified by matching the transaction count
		[ ] // // // 
		[ ] // // // PARAMETERS:		STRING	sSearchEntry                                    Search in Register with this string
		[ ] // // //                                         STRING                  sAction                                   Action to be performed on 1st transaction in register
		[ ] // // //                                                                                                                        e.g. Copy Transactions(s), New, Delete
		[ ] // // //                                                                           
		[ ] // // //  
		[ ] // // // RETURNS:			INTEGER		PASS		If transaction count matches with expected 
		[ ] // // //                                                                     FAIL		If any error occurs
		[ ] // // // 
		[ ] // // // REVISION HISTORY:
		[ ] // // // Dean Paes  created  Feb 22 2013 AccountActionsOnTransactionOnPopUpWindow
	[ ] // ==========================================================
	[+] public INTEGER AccountActionsOnTransactionOnPopUpWindow(STRING sSearchString,STRING sAction,INTEGER iXpos optional,INTEGER iYpos optional)
		[ ] 
		[ ] INTEGER iX,iY
		[ ] 
		[+] do
			[ ] BankingPopUp.SetActive()
			[ ] 
			[ ] 
			[ ] 
			[+] if(BankingPopUp.SearchWindow.Exists(SHORT_SLEEP))
				[ ] ReportStatus("Verify Transaction", PASS, "Search Window exists") 
				[ ] 
				[ ] //Search for transaction with Payee name
				[ ] BankingPopUp.SearchWindow.SetText(sSearchString)
				[ ] 
				[+] if(iXpos==NULL)
					[ ] iX=467
				[+] else
					[ ] iX=iXpos
					[ ] 
				[ ] 
				[ ] 
				[+] if(iYpos==NULL)
					[ ] iY=23
				[+] else
					[ ] iY=iYpos
					[ ] 
				[ ] 
				[ ] 
				[ ] //Select 'sAction' option from dropdown list
				[ ] BankingPopUp.TxList.PopupSelect (iX, iY, sAction)
				[ ] iFunctionResult=PASS
				[ ] 
				[ ] 
			[+] else
				[ ] iFunctionResult=FAIL
			[ ] 
			[ ] 
			[ ] 
			[ ] 
			[ ] 
		[+] except
			[ ] iFunctionResult=FAIL
		[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] 
	[ ] // // ==========================================================
	[+] // // FUNCTION: CloseRegisterReminderInfoPopup()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] //  This function will close the register popup for Reminder Bar
		[ ] // 
		[ ] //  RETURNS:			INTEGER		PASS		If Reminder popup is closed
		[ ] //                                                          FAIL		If any error occurs
		[ ] //
		[ ] //
		[ ] // // REVISION HISTORY:
		[ ] //// Dean Paes Created 25th Oct 2013
		[ ] ///
	[ ] // // ==========================================================
	[+] public INTEGER CloseRegisterReminderInfoPopup()
		[ ] 
		[+] do
			[+] if(RegisterRemindersBarMessage.Exists(15))
				[ ] //RegisterRemindersBarMessage.SetActive()
				[ ] RegisterRemindersBarMessage.RegisterRemindersBarMessageChild.CloseButton.Click()
				[ ] WaitForState(RegisterRemindersBarMessage,FALSE,5)
				[ ] sleep(3)
				[ ] iFunctionResult=PASS
			[+] else
				[ ] iFunctionResult=PASS
		[+] except
			[ ] iFunctionResult=FAIL
			[ ] 
		[ ] return iFunctionResult
		[ ] 
		[ ] 
		[ ] 
		[ ] 
	[ ] 
	[ ] 
	[ ] // // ==========================================================
	[+] // // FUNCTION: CloseMobileSyncInfoPopup()
		[ ] // //
		[ ] // // DESCRIPTION:
		[ ] //  This function will close the mobile sync reminder
		[ ] // 
		[ ] //  RETURNS:			INTEGER		PASS		If Reminder popup is closed
		[ ] //                                                          FAIL		If any error occurs
		[ ] //
		[ ] //
		[ ] // // REVISION HISTORY:
		[ ] //// Dean Paes Created 17th Dec 2013
		[ ] ///
	[ ] // // ==========================================================
	[+] public INTEGER CloseMobileSyncInfoPopup()
		[ ] 
		[+] do
			[ ] 
			[ ] sleep(3)
			[+] if(PopUpCalloutHolder.Exists(5))
				[ ] 
				[ ] PopUpCalloutHolder.CalloutPopup.DontRemindMe.Check()
				[ ] PopUpCalloutHolder.CalloutPopup.NotNow.Click()
				[ ] WaitForState(PopUpCalloutHolder,FALSE,5)
				[ ] iFunctionResult=PASS
				[ ] 
				[ ] 
			[+] else
				[ ] iFunctionResult=PASS
				[ ] 
				[ ] 
			[ ] 
			[ ] 
			[ ] 
		[+] except
			[ ] iFunctionResult=FAIL
			[ ] 
		[ ] return iFunctionResult
		[ ] 
		[ ] 
		[ ] 
		[ ] 
	[ ] 
	[ ] 
	[ ] 
	[ ] // ==========================================================
	[ ] // 
	[+] // // FUNCTION: AccountActionsOnTransaction()
		[ ] // // // // 
		[ ] // // // // DESCRIPTION:
		[ ] // // // // This function will verify if transactions searched are displayed correctly under Popup Account Register filter specified by matching the transaction count
		[ ] // // // // 
		[ ] // // // // PARAMETERS:		STRING	sSearchEntry                                    Search in Register with this string
		[ ] // // // //                                         STRING                  sAction                                   Action to be performed on 1st transaction in register
		[ ] // // // //                                                                                                                        e.g. Copy Transactions(s), New, Delete
		[ ] // // // //                                                                           
		[ ] // // // //  
		[ ] // // // // RETURNS:			INTEGER		PASS		If transaction count matches with expected 
		[ ] // // // //                                                                     FAIL		If any error occurs
		[ ] // // // // 
		[ ] // // // // REVISION HISTORY:
		[ ] // // // // Dean Paes  created  Feb 22 2013 AccountActionsOnTransactionOnPopUpWindow
	[ ] // // ==========================================================
	[+] // public INTEGER AccountActionsOnTransactionOnPopUpWindow(STRING sSearchString,STRING sAction,INTEGER iXpos optional,INTEGER iYpos optional)
		[ ] // 
		[ ] // INTEGER iX,iY
		[ ] // 
		[+] // do
			[ ] // BankingPopUp.SetActive()
			[ ] // 
			[ ] // 
			[ ] // 
			[+] // if(BankingPopUp.SearchWindow.Exists(SHORT_SLEEP))
				[ ] // ReportStatus("Verify Transaction", PASS, "Search Window exists") 
				[ ] // 
				[ ] // //Search for transaction with Payee name
				[ ] // BankingPopUp.SearchWindow.SetText(sSearchString)
				[ ] // 
				[+] // if(iXpos==NULL)
					[ ] // iX=467
				[+] // else
					[ ] // iX=iXpos
					[ ] // 
				[ ] // 
				[ ] // 
				[+] // if(iYpos==NULL)
					[ ] // iY=23
				[+] // else
					[ ] // iY=iYpos
					[ ] // 
				[ ] // 
				[ ] // 
				[ ] // //Select 'sAction' option from dropdown list
				[ ] // BankingPopUp.TxList.PopupSelect (iX, iY, sAction)
				[ ] // iFunctionResult=PASS
				[ ] // 
				[ ] // 
			[+] // else
				[ ] // iFunctionResult=FAIL
			[ ] // 
			[ ] // 
			[ ] // 
			[ ] // 
			[ ] // 
		[+] // except
			[ ] // iFunctionResult=FAIL
		[ ] // return iFunctionResult
	[ ] // 
	[ ] // 
	[ ] // 
	[ ] // ==========================================================
	[+] // FUNCTION: VerifyTransactionInAccountRegister()
		[ ] // // // 
		[ ] // // // DESCRIPTION:
		[ ] // // // This function will verify if transactions searched are displayed correctly under Account Register filter specified by matching the transaction count
		[ ] // // // 
		[ ] // // // PARAMETERS:		STRING	 			sSearchEntry                                     Search in Register with this string
		[ ] // // //                                  STRING                  sExpectedNumberOfTransactions        Expected number of transactions to be found
		[ ] // // //
		[ ] // // // 
		[ ] // // // RETURNS:			INTEGER		PASS		If transaction count matches with expected
		[ ] // // //                                                          FAIL		If any error occurs
		[ ] // // // 
		[ ] // // // REVISION HISTORY:
		[ ] // // // Dean Paes  created  Feb 22 2013
	[ ] // ==========================================================
	[+] public INTEGER VerifyTransactionInAccountRegister(STRING sSearchString,STRING sExpectedNumberOfTransactions ,STRING sWindowType optional)
		[ ] STRING sNum,sTransactionCount
		[ ] 
		[ ] INTEGER iNum
		[+] if (sWindowType==NULL)
			[ ] sWindowType="MDI"
		[ ] 
		[+] do
			[ ] 
			[ ] 
			[+] switch(sWindowType)
				[+] case "MDI"
					[ ] QuickenWindow.SetActive()
					[+] if(MDIClient.AccountRegister.SearchWindow.Exists(SHORT_SLEEP))
						[ ] ReportStatus("Verify Transaction", PASS, "Search Window exists") 
						[ ] 
						[ ] //Search for transaction with Payee name
						[ ] MDIClient.AccountRegister.SearchWindow.SetText(sSearchString)
						[ ] 
						[ ] sleep(2)
						[ ] 
						[ ] //Match value obtained from register to value given in Quicken
						[ ] sTransactionCount  = MDIClient.AccountRegister.Balances.TransactionCount.GetText()
						[ ] MDIClient.AccountRegister.SearchWindow.SetText("")
						[ ] iNum=val(sExpectedNumberOfTransactions)
						[ ] sNum=Str(iNum)
						[ ] 
						[ ] bMatch=MatchStr("*{ sNum }*",sTransactionCount)
						[+] if(bMatch==TRUE)
							[ ] iFunctionResult=PASS
						[+] else
							[ ] iFunctionResult=FAIL
							[ ] 
					[+] else
						[ ] iFunctionResult=FAIL
				[+] case "PopUp"
					[ ] BankingPopUp.SetActive()
					[+] if(BankingPopUp.SearchWindow.Exists(SHORT_SLEEP))
						[ ] ReportStatus("Verify Transaction", PASS, "Search Window exists") 
						[ ] 
						[ ] //Search for transaction with Payee name
						[ ] BankingPopUp.SearchWindow.SetText(sSearchString)
						[ ] 
						[ ] sleep(2)
						[ ] 
						[ ] // Match value obtained from register to value given in Quicken
						[ ] sTransactionCount  = BankingPopUp.EndingBalance.NumOfTransactions.GetText()
						[ ] BankingPopUp.SearchWindow.SetText("")
						[ ] iNum=val(sExpectedNumberOfTransactions)
						[ ] sNum=Str(iNum)
						[ ] 
						[ ] bMatch=MatchStr("*{ sNum }*",sTransactionCount)
						[+] if(bMatch==TRUE)
							[ ] iFunctionResult=PASS
						[+] else
							[ ] iFunctionResult=FAIL
							[ ] 
					[+] else
						[ ] iFunctionResult=FAIL
					[ ] 
					[ ] 
			[ ] 
			[ ] 
			[ ] 
			[ ] 
			[ ] 
		[+] except
			[ ] iFunctionResult=FAIL
		[ ] return iFunctionResult
	[ ] // 
	[ ] // 
	[ ] // 
	[ ] // 
	[ ] // 
	[ ] // 
	[ ] // 
[ ] // 
[+] // //**********************Budgets Related Functions***************************************************************
	[ ] // 
	[ ] // //###########################Create a New Budget #################################
	[ ] // ==========================================================
	[+] // FUNCTION: CreateBudget(STRING sBudgetName,STRING sCategory,STRING sAmount optional)
		[ ] // // // 
		[ ] // // // DESCRIPTION:
		[ ] // // // This function will create Budget with given category and amount
		[ ] // // // 
		[ ] // // // PARAMETERS:		STRING	 			sBudgetName                             Name of the Budget
		[ ] // // //                                     STRING                      sCategory        					Category for which need to create the budget
		[ ] //// //						STRING  			sAmount						Amount set for budget
		[ ] // // //
		[ ] // // // 
		[ ] // // // RETURNS:			INTEGER		PASS		If Budget gets created successfully
		[ ] // // //                                                                 FAIL		If any error occurs
		[ ] // // // 
		[ ] // // // REVISION HISTORY:
		[ ] // // // Created         05-April-2013 			Anagha
		[ ] //////   Updated        16-April-2013                 Anagha
	[ ] // ==========================================================
	[ ] 
	[+] public INTEGER CreateBudget(STRING sBudgetName,STRING sCategory,STRING sAmount optional)//Added by Anagha 05/04/2013
		[ ] integer iNavigate,iCounter
		[ ] string sActual,sHandle
		[ ] 
		[ ] 
		[+] if(QuickenWindow.Exists(SHORT_SLEEP))
			[ ] iNavigate = NavigateQuickenTab(sTAB_HOME)
			[ ] 
			[+] if(iNavigate == PASS)
				[ ] sleep(5)
				[ ] ExpandAccountBar()
				[ ] //MDIClient.Home.QWStayOnTopOfMonthlyBills.StaticTextTSG.Panel.GetStarted.Click()
				[ ] // QuickenWindow.SetActive()
				[ ] // QuickenWindow.Planning.Click()
				[ ] // QuickenWindow.Planning.Budget.Select()
				[ ] 
				[ ] NavigateQuickenTab(sTAB_PLANNING,sTAB_BUDGET)
				[ ] 
				[ ] QuickenWindow.SetActive()
				[ ] GetStarted.SetFocus()
				[+] if(GetStarted.Exists(SHORT_SLEEP))
					[ ] //QuickenWindow.SetActive()
					[ ] 
					[ ] GetStarted.Click()
					[ ] GetStarted.Click()
					[ ] sleep(SHORT_SLEEP)
					[ ] 
					[+] if(CreateANewBudget.Exists(SHORT_SLEEP))
						[ ] ReportStatus("Validate Creat a New Budget Window ", PASS, "Creat a New Budget window is opened")
						[ ] CreateANewBudget.SetActive()
						[ ] CreateANewBudget.BudgetName.SetText(sBudgetName)
						[ ] CreateANewBudget.OK.Click()
						[+] if(Budget.Exists(SHORT_SLEEP))
							[ ] ReportStatus("Validate Budget window", PASS, "Budget window is available")
							[+] if(DlgBudgetMessageBox.Exists(5))
								[ ] DlgBudgetMessageBox.SetActive()
								[ ] DlgBudgetMessageBox.OKButton.Click()
								[ ] sleep(1)
							[ ] Budget.AddCategoryToBudget.Click()
							[ ] 
							[+] if(SelectCategoriesToBudget.Exists(SHORT_SLEEP))
								[ ] ReportStatus("Validate Select Categories to Budget window", PASS, "Select Categories to Budget window is available")
								[ ] Agent.SetOption (OPT_VERIFY_ACTIVE, FALSE)
								[ ] // Select Category from Select Categories to Budget window
								[ ] SelectCategoriesToBudget.ChooseTheCategories.Panel.QWinChild1.Panel3.PersonalExpenses.Click ()
								[ ] 
								[ ] sHandle = str(SelectCategoriesToBudget.ChooseTheCategories.QWListViewer.ListBox.GetHandle())
								[ ] 
								[+] for( iCounter=0;iCounter<SelectCategoriesToBudget.ChooseTheCategories.QWListViewer.ListBox.GetItemCount();iCounter++)
									[ ] 
									[ ] sActual = QwAutoExecuteCommand("LISTBOX_GETFULLROW",sHandle,"{iCounter}")
									[ ] bMatch = MatchStr("*{sCategory}*", sActual)
									[ ] 
									[+] if (bMatch)
										[ ] QwAutoExecuteCommand("LISTBOX_SELECTROW",sHandle,"{iCounter}")
										[ ] break
								[ ] 
								[ ] 
								[ ] // SelectCategoriesToBudget.ChooseTheCategories.QWListViewer.ListBox.Select(sCategory)
								[ ] SelectCategoriesToBudget.OK.Click()
								[ ] 
								[ ] iNavigate = NavigateQuickenTab(sTAB_HOME)
								[ ] iNavigate = NavigateQuickenTab(sTAB_PLANNING,sTAB_BUDGET)
								[ ] sleep(SHORT_SLEEP)
								[+] if(Budget.Exists(SHORT_SLEEP))
									[ ] // Enter Budget amount
									[ ] ReportStatus("Validate Budget window", PASS, "Budget window is available")
									[ ] Budget.ListViewer.ListBox.Amount.SetText(sAmount)
									[ ] QuickenMainWindow.Typekeys(KEY_ENTER)
									[ ] QuickenMainWindow.Typekeys(KEY_ENTER)
									[ ] Agent.SetOption (OPT_VERIFY_ACTIVE, TRUE)
									[ ] iFunctionResult = PASS
								[+] else
									[ ] ReportStatus("Validate Budget window", FAIL, "Budget window is not available")
									[ ] iFunctionResult = FAIL
								[ ] 
							[+] else
								[ ] ReportStatus("Validate Select Categories to Budget window", FAIL, "Select Categories to Budget window is not available")
								[ ] iFunctionResult = FAIL
						[+] else
							[ ] ReportStatus("Validate Budget window", FAIL, "Budget window is not available")
							[ ] iFunctionResult = FAIL
					[+] else
						[ ] ReportStatus("Validate Creat a New Budget Window ", FAIL, "Creat a New Budget window is not opened")
						[ ] iFunctionResult = FAIL
				[+] else
					[ ] ReportStatus("Validate Budget tab state ", iNavigate, "Budget tab is not active")
			[+] else
				[ ] ReportStatus("Validate Home tab state ", iNavigate, "Home tab is not active")
				[ ] iFunctionResult = FAIL
		[+] else
			[ ] ReportStatus("Validate Quicken Main Window", FAIL, "Quicken Main Window is not available")
			[ ] iFunctionResult = FAIL
		[ ] 
		[ ] return iFunctionResult
		[ ] 
	[ ] //###########################################################################
	[ ] // 
	[ ] // //###########################Delete a Budget ####################################
	[ ] // ==========================================================
	[+] // FUNCTION: DeleteBudget()
		[ ] // // // 
		[ ] // // // DESCRIPTION:
		[ ] // // // This function will Delete the existing Budget 
		[ ] // // // 
		[ ] // // // 
		[ ] // // // RETURNS:			INTEGER		PASS		If Budget gets created successfully
		[ ] // // //                                                                 FAIL		If any error occurs
		[ ] // // // 
		[ ] // // // REVISION HISTORY:
		[ ] // // // Created         05-April-2013 			Anagha
		[ ] 
	[ ] // ==========================================================
	[ ] 
	[+] public INTEGER DeleteBudget()//Added by Anagha 05/04/2013
		[ ] integer iNavigate
		[ ] 
		[+] if(QuickenWindow.Exists(SHORT_SLEEP))
			[ ] 
			[ ] NavigateQuickenTab(sTAB_PLANNING,sTAB_BUDGET)
			[ ] MDIClient.Budget.BudgetActions.Click()
			[ ] MDIClient.Budget.BudgetActions.TypeKeys(Replicate(KEY_DN, 6))
			[ ] MDIClient.Budget.BudgetActions.TypeKeys(KEY_ENTER)
			[ ] sleep(SHORT_SLEEP)
			[+] if(DeleteBudget.DeleteButton.Exists())
				[ ] DeleteBudget.SetActive()
				[ ] DeleteBudget.DeleteButton.Click()
				[+] if(!Budget.BudgetActions.Exists(SHORT_SLEEP))
					[ ] ReportStatus("Validate Budget window", PASS, "Budget window is in zero data state available")
					[ ] iFunctionResult = PASS
				[+] else
					[ ] ReportStatus("Validate Budget window", FAIL, "Budget window is not in zero data state available")
					[ ] iFunctionResult = FAIL
			[+] else
				[ ] iFunctionResult = FAIL
			[ ] 
		[+] else
			[ ] ReportStatus("Validate Quicken Main Window", FAIL, "Quicken Main Window is not available")
			[ ] iFunctionResult = FAIL
		[ ] 
		[ ] return iFunctionResult
		[ ] 
	[ ] //###########################################################################
	[ ] // ==========================================================
	[+] // FUNCTION: AddBudget(STRING sBudgetName)
		[ ] // // // 
		[ ] // // // DESCRIPTION:
		[ ] // // // This function will create new Budget 
		[ ] // // // 
		[ ] // // // PARAMETERS:		STRING	 			sBudgetName                             Name of the Budget
		[ ] // // //
		[ ] // // // 
		[ ] // // // RETURNS:			INTEGER		       PASS		      If Budget gets created successfully
		[ ] // // //                                                                 FAIL		If any error occurs
		[ ] // // // 
		[ ] // // // REVISION HISTORY:
		[ ] // // // Created         051April-2014 			Mukesh
		[ ] 
	[ ] // ==========================================================
	[ ] 
	[ ] 
	[+] public INTEGER AddBudget(STRING sBudgetName)
		[ ] INTEGER iResult
		[ ] 
		[+] if(QuickenWindow.Exists(SHORT_SLEEP))
			[ ] QuickenWindow.SetActive()
			[ ] iResult = NavigateQuickenTab(sTAB_PLANNING,sTAB_BUDGET)
			[+] if (iResult==PASS)
				[+] if(GetStartedBrowserWindow.GetStarted.Exists(5))
					[ ] GetStartedBrowserWindow.GetStarted.DoubleClick()
					[+] if (CreateANewBudget.Exists(5))
						[ ] CreateANewBudget.SetActive()
						[ ] CreateANewBudget.BudgetName.SetText(sBudgetName)
						[ ] CreateANewBudget.OK.Click()
						[ ] WaitForState(QuickenWindow,TRUE,2)
						[ ] iFunctionResult = PASS
					[+] else
						[ ] ReportStatus("Verify Create A New Budget dialog", FAIL, "Create A New Budget dialog didn't appear .")
						[ ] iFunctionResult = FAIL
						[ ] 
				[+] else
					[ ] ReportStatus("Verify Budget", PASS, "Budget already created.")
					[ ] iFunctionResult = PASS
			[+] else
				[ ] ReportStatus("Verify Quicken navigated to Budget. ", FAIL , "Quicken didn't navigate to Budget.") 
		[+] else
			[ ] ReportStatus("Verify Quicken Main Window", FAIL, "Quicken Main Window is not available")
			[ ] iFunctionResult = FAIL
		[ ] 
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: public INTEGER AddCategoriesToBudget(STRING sCategoryType, LIST OF ANYTYPE lsCategoryList)
		[ ] // // // 
		[ ] // // // DESCRIPTION:
		[ ] // // // This function will categories to budget 
		[ ] // // // 
		[ ] // // // PARAMETERS:		STRING	 			sCategoryType                             Category Type
		[ ] // // //                                                                 lsCategoryList                             List of categories
		[ ] // // // 
		[ ] // // // RETURNS:			INTEGER		       PASS		If categories get added to the budget successfully
		[ ] // // //                                                                 FAIL		If any error occurs
		[ ] // // // 
		[ ] // // // REVISION HISTORY:
		[ ] // // // Created         05 April-2014 			Mukesh
		[ ] 
	[ ] // ==========================================================
	[ ] 
	[+] public INTEGER AddCategoriesToBudget(STRING sCategoryType, LIST OF ANYTYPE lsCategoryList)
		[ ] INTEGER iResult ,iListCount , iCount
		[ ] STRING sActual,sHandle , sCategory
		[ ] 
		[ ] 
		[+] if(QuickenWindow.Exists(SHORT_SLEEP))
			[ ] QuickenWindow.SetActive()
			[ ] iResult = NavigateQuickenTab(sTAB_PLANNING,sTAB_BUDGET)
			[+] if (iResult==PASS)
				[ ] sleep(2)
				[ ] QuickenWindow.SetActive()
				[ ] MDIClient.Budget.SelectCategoryToBudgetLink.Click()
				[+] if (SelectCategoriesToBudget.Exists(4))
					[ ] SelectCategoriesToBudget.SetActive()
					[ ] SelectCategoriesToBudget.TextClick(sCategoryType)
					[ ] sHandle= Str(SelectCategoriesToBudget.ListBox.GetHandle())
					[ ] iListCount= SelectCategoriesToBudget.ListBox.GetItemCount() 
					[ ] 
					[+] for each sCategory in lsCategoryList
						[+] if (sCategory==NULL)
							[ ] break
						[+] for(iCount= 0; iCount <= iListCount;  iCount++)
							[+] if (iCount>0)
								[+] if (SelectCategoriesToBudget.ListBox.VScrollBar.Exists())
									[ ] SelectCategoriesToBudget.ListBox.VScrollBar.ScrollByLine(1)
								[ ] 
							[ ] sActual = QwAutoExecuteCommand("LISTBOX_GETFULLROW", sHandle, Str(iCount))
							[ ] bMatch = MatchStr("*{trim(sCategory)}*", sActual)
							[+] if (bMatch)
								[+] if (SelectCategoriesToBudget.ListBox.VScrollBar.Exists())
									[ ] SelectCategoriesToBudget.ListBox.VScrollBar.ScrollByLine(-3)
									[ ] sleep(1)
								[ ] SelectCategoriesToBudget.TextClick(sCategory)
								[+] if (SelectCategoriesToBudget.ListBox.VScrollBar.Exists())
									[ ] SelectCategoriesToBudget.ListBox.VScrollBar.ScrollToMin()
								[ ] break
							[ ] 
						[+] if (bMatch)
							[ ] iFunctionResult = PASS
						[+] else
							[ ] ReportStatus("Verify Category found in the Select Categories To Budget dialog.", FAIL, "Category couldn't be found in the Select Categories To Budget dialog.")
							[ ] iFunctionResult = FAIL
						[ ] 
					[ ] SelectCategoriesToBudget.OK.Click()
					[ ] WaitForState(SelectCategoriesToBudget , False ,3)
					[ ] 
					[ ] 
					[ ] 
					[ ] 
				[+] else
					[ ] ReportStatus("Verify Select Categories to Budget dialog appeared. ", FAIL , "Select Categories to Budget dialog didn't appear.") 
					[ ] iFunctionResult = FAIL
			[+] else
				[ ] ReportStatus("Verify Quicken navigated to Budget. ", FAIL , "Quicken didn't navigate to Budget.") 
				[ ] iFunctionResult = FAIL
		[+] else
			[ ] ReportStatus("Verify Quicken Main Window", FAIL, "Quicken Main Window is not available")
			[ ] iFunctionResult = FAIL
		[ ] 
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] //###########################################################################
	[ ] 
[ ] // 
[+] // // //**********************Loan Related Functions***************************************************************
	[ ] // ==========================================================
	[+] // FUNCTION: AddCCBankLoanAccount()
		[ ] //
		[ ] // DESCRIPTION:		This function will add Online Accounts (CCMintBank)
		[ ] // 
		[ ] //
		[ ] // PARAMETERS:		STRING 	sUserName			Username
		[ ] //						STRING 	sPassword	      	Password
		[ ] //						STRING 	sBankName			CCMintBank
		[ ] //
		[ ] // RETURNS:			None
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // 03 Jan, 2014	Mukesh created
	[ ] // ==========================================================
	[+] public INTEGER AddCCBankLoanAccount(STRING sUserName optional, STRING sPassword optional, STRING sBankName optional)
		[+] // Variable Declaration
			[ ] INTEGER iSelect
			[ ] STRING sErrorMsg
			[ ] BOOLEAN  bFlag
		[ ] 
		[ ] // Variable Defination
		[+] if (sBankName==NULL)
			[ ] sBankName="CCBank"
		[ ] bFlag = FALSE
		[ ] 
		[+] do
			[ ] QuickenWindow.SetActive()
			[ ] QuickenMainWindow.QWNavigator.QWNavBtnTray.AddAnAccount.Click()
			[+] if (AddAccount.Exists(30))
				[ ] AddAccount.SetActive()
				[ ] AddAccount.Loan.Click()
				[+] if(AddAnyAccount.Exists(700) && AddAnyAccount.IsEnabled())
					[ ] AddAnyAccount.VerifyEnabled(TRUE,150)
					[ ] AddAnyAccount.SetActive()
				[ ] AddAnyAccount.BankName.SetFocus()
				[ ] AddAnyAccount.BankName.TypeKeys(sBankName)  // Enter the name of the bank
				[ ] AddAnyAccount.Next.Click()
				[ ] // sleep(20)
				[ ] WaitForstate(AddAnyAccount.BankUserID,TRUE,200)
				[ ] AddAnyAccount.SetActive ()
				[+] if(sUserName!=NULL)
					[ ] AddAnyAccount.BankUserID.TypeKeys(sUserName)      //Enter user id      d_knievel17	Quicken70
				[+] else
					[ ] AddAnyAccount.BankUserID.TypeKeys("Test") 
				[+] if(sPassword!=NULL)
					[ ] AddAnyAccount.BankPassword.SetText(sPassword)   // Enter password
				[+] else
					[ ] AddAnyAccount.BankPassword.SetText("Test")
				[ ] 
				[+] if(AddAnyAccount.Next.IsEnabled() == FALSE)			// Connect/Next button is disabled for blank user id and password
					[ ] ReportStatus("Verify Next Button Status", WARN, "Connect (Next) button is disabled")
					[ ] bFlag = TRUE
					[ ] 
				[+] else
					[ ] AddAnyAccount.Next.Click ()
					[ ] WaitForstate(AddAnyAccount.ListBox , TRUE ,300)
					[ ] // WaitforState(AddAnyAccount,TRUE,150)
					[ ] 
					[ ] AddAnyAccount.SetActive()
					[ ] AddAnyAccount.Next.Click ()
					[ ] 
					[ ] 
					[+] if(AddAnyAccount.Exists(5) == TRUE)
						[+] while(AlertMessage.Exists(10))		// check whether any error message "Quicken is not able to connect to internet" is displayed or not
							[ ] AlertMessage.OK.Click ()
							[ ] goto ErrorMessage				
							[ ] 
						[ ] 
						[+] if(AddAnyAccount.Exists(10))
							[+] if(AddAnyAccount.BankUserID.Exists () == TRUE)			// for invalid user id/password, login window is displayed again with error message
								[ ] sErrorMsg = AddAnyAccount.ErrorMessage.GetText ()
								[ ] ReportStatus("Verify Error Message", WARN, "Error Message - {sErrorMsg} is displayed")
								[ ] bFlag = TRUE
							[ ] 
							[ ] ErrorMessage:
							[+] if(AddAnyAccount.ErrorMessage.Exists (10))
								[ ] AddAnyAccount.SetActive()
								[ ] sErrorMsg = AddAnyAccount.ErrorMessage.GetText ()
								[ ] ReportStatus("Verify Error Message", WARN, "Error Message - {sErrorMsg} is displayed")
								[ ] goto CloseWindow
								[ ] 
							[ ] 
							[ ] 
					[+] if(AccountAdded.Exists(140))
						[ ] AccountAdded.SetActive ()
						[ ] AccountAdded.Done.Click()
						[ ] bFlag = FALSE
				[+] if(bFlag == TRUE)
					[+] CloseWindow:								// Close the window
						[ ] bFlag = TRUE
						[ ] AddAnyAccount.SetActive()
						[ ] AddAnyAccount.Cancel.Click()  				
						[+] if(AlertMessage.Exists(SHORT_SLEEP))
							[ ] AlertMessage.SetActive()
							[ ] AlertMessage.OK.Click()
				[ ] 
				[+] if(bFlag == FALSE)
					[ ] ReportStatus("Verify Account", PASS, "{sBankName} account is added")
					[ ] iFunctionResult = PASS
			[+] else
				[ ] ReportStatus("Validate Add Account Window", FAIL, "Add Account window didn't display in 30 seconds.") 
				[ ] iFunctionResult = FAIL
			[ ] CloseMobileSyncInfoPopup()
		[+] except
			[ ] ExceptLog()
			[ ] AddAnyAccount.Cancel.Click()  				 //Close the window
			[+] if(AlertMessage.Exists(SHORT_SLEEP))		// on clicking cancel button, message box is displayed for confirmation of closing the window
				[ ] AlertMessage.SetActive()
				[ ] AlertMessage.OK.Click()
			[ ] iFunctionResult = FAIL
		[ ] 
		[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: OnlineLoansNaviagateToD2Step()  
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will function will naviagte user Second step of the online loan account
		[ ] // If account is added successfully TRUE is returned else FALSE with error message is returned.
		[ ] //
		[ ] // PARAMETERS:		STRING sAccountType     Name of the Account Type i.e Loan
		[ ] // 						STRING sAccountName   Name of the Loan account
		[ ] // 		 				STRING sOpeningDate     Opening date of the loan
		[ ] // 						STRING sOrgBalance	   Original Balance of loan
		[ ] // 						STRING sInterestRt		    Interest Rate
		[ ] // 						STRING sOrgLength		    Original Length
		[ ] //
		[ ] // RETURNS:			INTEGER	PASS = If account is created successfully
		[ ] //									FAIL = if any error occurs while adding account
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // 04 Jan, 2014	Mukesh created
	[ ] // ==========================================================
	[ ] 
	[+] public INTEGER  OnlineLoansNaviagateToD2Step ( STRING sAccountName, STRING sOpeningDate, STRING sOrgBalance,STRING sInterestRt,STRING sOrgLength,STRING sOrgLengthCombobox optional,  STRING sCompoundingPeriod optional,  STRING sPaymentSchedule optional , STRING sNextPaymentDue optional)
			[ ] 
			[ ] INTEGER iResult
			[+] do 
				[ ] 
				[+] if(QuickenWindow.Exists(5))
					[ ] QuickenWindow.SetActive()
					[ ] iResult =SelectAccountFromAccountBar( sAccountName, ACCOUNT_PROPERTYDEBT)
					[+] if (iResult==PASS)
						[ ] sleep(2)
						[ ] QuickenWindow.SetActive()
						[ ] MDIClientLoans.LoanWindow.AddLoanDetailsButton.Click()
						[+] if(LoanDetails.Exists(5))
							[ ] LoanDetails.SetActive()
							[+] if (!LoanDetails.LoanTypePopupList.Exists(2))
								[ ] LoanDetails.OpeningDateTextField.SetText(sOpeningDate)
								[ ] LoanDetails.OriginalBalanceTextField.SetText(sOrgBalance)
								[ ] LoanDetails.CurrentInterestRateTextField.SetText(StrTran(sInterestRt,"000",""))
								[ ] 
								[ ] LoanDetails.OriginalLengthTextField.SetText(sOrgLength)
								[+] if(sOrgLengthCombobox!=NULL)
									[ ] LoanDetails.OriginalLength.Select(sOrgLengthCombobox)
								[ ] 
								[+] if(sCompoundingPeriod!=NULL)
									[ ] LoanDetails.CompoundingPeriod.Select(sCompoundingPeriod)
								[ ] 
								[+] if(sPaymentSchedule!=NULL)
									[ ] LoanDetails.PaymentScheduleComboBox.Select(trim(sPaymentSchedule))
									[ ] 
								[ ] LoanDetails.OriginalBalanceTextField.TypeKeys(KEY_TAB)
								[ ] 
								[ ] LoanDetails.NextButton.Click()
								[ ] 
								[ ] // Added to cater the fail condition
								[+] if(LoanDetails.NextPaymentDueTextField.Exists(5))
									[ ] ReportStatus("Verify NextPaymentDueTextField on Online Loan Details D2 window.", PASS , "Navigation to Online Loan Details D2 window. for Online loan Account: {sAccountName} is successful") 
									[ ] iFunctionResult=PASS
								[+] else
									[ ] ReportStatus("Verify NextPaymentDueTextField on Online Loan Details D2 window.", FAIL , "Navigation to Online Loan Details D2 window. for Online loan Account: {sAccountName} is unsuccessful") 
									[ ] iFunctionResult=FAIL
									[ ] 
							[+] else
								[ ] ReportStatus("Verify LoanType PopupList on LoanDetails dialog. ", FAIL , " LoanType PopupList exists on LoanDetails dialog for Online loan Account: {sAccountName}.") 
								[ ] iFunctionResult=FAIL
							[ ] 
						[+] else
							[ ] ReportStatus("Verify LoanDetails dialog. ", FAIL , " LoanDetails dialog didn't appear.") 
							[ ] iFunctionResult=FAIL
					[+] else
						[ ] ReportStatus("Verify {sAccountName} Account", FAIL, "{sAccountName} account couldn't open.")
						[ ] iFunctionResult=FAIL
						[ ] 
					[ ] 
				[+] else
					[ ] ReportStatus("Verify Quicken Exists. ", FAIL , "Quicken does not exist.") 
					[ ] iFunctionResult=FAIL
			[+] except
				[ ] ExceptLog()
				[ ] iFunctionResult=FAIL
			[ ] 
			[ ] 
			[ ] return iFunctionResult
		[ ] 
	[ ] 
	[ ] // ==========================================================
	[+] // FUNCTION: OnlineLoansNaviagateToD3Step()  
		[ ] //
		[ ] // DESCRIPTION:
		[ ] // This function will function will naviagte user Third step of the online loan account
		[ ] // If account is added successfully TRUE is returned else FALSE with error message is returned.
		[ ] //
		[ ] // PARAMETERS:		STRING sAccountType     Name of the Account Type i.e Loan
		[ ] // 						STRING sAccountName   Name of the Loan account
		[ ] // 		 				STRING sOpeningDate     Opening date of the loan
		[ ] // 						STRING sOrgBalance	   Original Balance of loan
		[ ] // 						STRING sInterestRt		    Interest Rate
		[ ] // 						STRING sOrgLength		    Original Length
		[ ] //						STRING sOther optional      Other payment
		[ ] //						STRING sExtraPrincipal optional ExtraPrincipal payment
		[ ] //
		[ ] // RETURNS:			INTEGER	PASS = If account is created successfully
		[ ] //									FAIL = if any error occurs while adding account
		[ ] //
		[ ] // REVISION HISTORY:
		[ ] // 10 Jan, 2014	Mukesh created
	[ ] // ==========================================================
	[+] public INTEGER  OnlineLoansNaviagateToD3Step( STRING sAccountName, STRING sOpeningDate, STRING sOrgBalance,STRING sInterestRt,STRING sOrgLength,STRING sOrgLengthCombobox optional,  STRING sCompoundingPeriod optional,  STRING sPaymentSchedule optional , STRING sNextPaymentDue optional , STRING sOther optional ,STRING sExtraPrincipal optional)
		[ ] 
		[ ] INTEGER iResult
		[+] do
			[ ] iResult =OnlineLoansNaviagateToD2Step ( sAccountName, sOpeningDate, sOrgBalance, sInterestRt, sOrgLength, sOrgLengthCombobox ,   sCompoundingPeriod ,   sPaymentSchedule  ,  sNextPaymentDue )
			[+] if (iResult==PASS)
				[+] if(LoanDetails.Exists(5))
					[ ] LoanDetails.SetActive()
					[+] if(sOther!=NULL)
						[ ] LoanDetails.OtherTextField.SetText(sOther)
						[ ] 
					[+] if(sExtraPrincipal!=NULL)
						[ ] LoanDetails.PrincipalTextField.SetText(sExtraPrincipal)
						[ ] 
					[ ] LoanDetails.NextButton.Click()
					[+] if(DlgLoanReminder.Exists(5))
						[ ] DlgLoanReminder.SetActive()
						[ ] iFunctionResult=PASS
						[ ] 
					[+] else
						[ ] iFunctionResult=FAIL
						[ ] ReportStatus("Verify Loan Reminder dialog. ", FAIL , "Loan Reminder dialog didn't appear.") 
					[ ] 
				[+] else
					[ ] ReportStatus("Verify LoanDetails dialog. ", FAIL , " LoanDetails dialog didn't appear.") 
					[ ] iFunctionResult=FAIL
					[ ] 
				[ ] 
			[+] else
				[ ] ReportStatus("Verify NextPaymentDueTextField on Online Loan Details D2 window.", FAIL , "Navigation to Online Loan Details D2 window. for Online loan Account: {sAccountName} is unsuccessful") 
				[ ] iFunctionResult=FAIL
		[+] except
			[ ] Exceptlog()
			[ ] iFunctionResult=FAIL
		[ ] return iFunctionResult
		[ ] 
	[ ] 
[ ] 
[ ] 
[ ] 
[ ] //#############Added by Shrivardhan##########
[ ] 
[ ] // ==========================================================
[+] // FUNCTION: AddPayees()
	[ ] //
	[ ] // DESCRIPTION:
	[ ] // This function will add payee to memorized payee list
	[ ] //
	[ ] // PARAMETERS:		STRING	 	sName		Payee Name            
	[ ] //						STRING 	sAmount	Amount
	[ ] //                                  BOOLEAN  bLock         Lock payee option
	[ ] //                                  BOOLEAN  bCalendar   Show payee on calendar option
	[ ] //                                  BOOLEAN  bCategorize Never Auto Categorize option
	[ ] //                                  STRING      sMemo       Memo
	[ ] //                                  STRING      sTag           Tag
	[ ] //                                  INTEGER    iCategory    Random Category based on value
	[ ] //                                  STRING      sCategory   specific category  
	[ ] 
	[ ] 
	[ ] 
	[ ] //
	[ ] // RETURNS:			void		
	[ ] //										
	[ ] // REVISION HISTORY:
	[ ] // 25 June, 2014	Shrivardhan created
	[ ] //
[ ] // ==========================================================
[+] public void AddPayee(STRING sName,STRING sAmount optional,BOOLEAN bLock optional,BOOLEAN bCalendar optional,BOOLEAN bCategorize optional,STRING sMemo optional,STRING sTag optional,INTEGER iCategory optional,STRING sCategory optional)
	[+] //Variable declaration
		[+] if(IsNULL(bLock))
			[ ] bLock=FALSE
		[+] if(IsNULL(sAmount))
			[ ] sAmount="0"
		[+] if(IsNULL(bCalendar))
			[ ] bCalendar=FALSE
		[+] if(IsNULL(bCategorize))
			[ ] bCategorize=FALSE
		[+] if(IsNULL(iCategory))
			[ ] iCategory=1
		[ ] INTEGER i
	[+] if(!QuickenWindow.Exists(5))
		[ ] return
	[+] if(!MemorizedPayeeList.Exists(5))
		[ ] QuickenWindow.SetActive()
		[ ] QuickenWindow.Tools.Click()
		[ ] QuickenWindow.Tools.MemorizedPayeeList.Select()
		[ ] 
	[ ] MemorizedPayeeList.SetActive()
	[ ] MemorizedPayeeList.NewPayee.Click()
	[ ] CreateMemorizedPayee.CreateMemorizedPayeeTextField.SetText(sName)
	[ ] CreateMemorizedPayee.AmountTextField.SetText(sAmount)
	[ ] 
	[ ] CreateMemorizedPayee.TypeOfTransactionPopupList.Select("Payment")
	[ ] //CreateMemorizedPayee.MarkAsClearedCheckBox.Uncheck()
	[ ] CreateMemorizedPayee.MarkAsClearedCheckBox.Check()
	[ ] 
	[+] if(bLock==TRUE)
		[ ] CreateMemorizedPayee.LockAndLeaveThisPayeeUnchCheckBox.Check()
	[+] else
		[ ] //if(CreateMemorizedPayee.LockAndLeaveThisPayeeUnchCheckBox.IsChecked())
		[ ] CreateMemorizedPayee.LockAndLeaveThisPayeeUnchCheckBox.Uncheck()
	[ ] 
	[ ] 
	[+]  if(bCalendar==TRUE)
		[ ]   CreateMemorizedPayee.ShowThisPayeeInTheCalendaCheckBox.Check()
	[+] else 
		[ ]  CreateMemorizedPayee.ShowThisPayeeInTheCalendaCheckBox.Uncheck()
	[ ] 
	[+] if(bCategorize==TRUE)
		[ ] CreateMemorizedPayee.NeverAutoCategorizeThisPayCheckBox.Check()
		[+] if(IsNULL(sCategory))
			[+] for(i=0;i<iCategory;i++)
				[ ] CreateMemorizedPayee.CategoryTextField.Typekeys(KEY_DN)
		[+] else
			[ ] CreateMemorizedPayee.CategoryTextField.SetText(sCategory)
		[ ] 
	[+] else
		[ ] CreateMemorizedPayee.NeverAutoCategorizeThisPayCheckBox.Uncheck()
		[+] if(IsNULL(sCategory))
			[+] for(i=0;i<iCategory;i++)
				[ ] CreateMemorizedPayee.CategoryTextField.Typekeys(KEY_DN)
		[+] else
			[ ] CreateMemorizedPayee.CategoryTextField.SetText(sCategory)
	[ ] 
	[+] if(!IsNULL(sMemo))
		[ ] CreateMemorizedPayee.MemoTextField.SetText(sMemo)
		[ ] 
	[+] if(!IsNULL(sTag))
		[ ] CreateMemorizedPayee.TagTextField.SetText(sTag)
		[ ] CreateMemorizedPayee.OKButton.Click()
		[+] do
			[ ] NewTag.OKButton.Click()
		[+] except
			[ ] 
	[+] else
		[ ] CreateMemorizedPayee.OKButton.Click()
	[ ] 
[ ] 
[ ] // ==========================================================
[+] // FUNCTION: DeletePayees()
	[ ] //
	[ ] // DESCRIPTION:
	[ ] // This function will delete all payees in memorized payee list
	[ ] //
	[ ] // PARAMETERS:		void
	[ ] //
	[ ] // RETURNS:			void		
	[ ] //										
	[ ] // REVISION HISTORY:
	[ ] // 25 June, 2014	Shrivardhan created
	[ ] //
[ ] // ==========================================================
[+] public void DeletePayees()
	[+] //variable declaration
		[ ] INTEGER i,iPayeeCount
	[ ] 
	[+] if(!QuickenWindow.Exists(5))
		[ ] return
	[ ] 
	[ ] QuickenWindow.SetActive()
	[ ] QuickenWindow.Tools.Click()
	[ ] QuickenWindow.Tools.MemorizedPayeeList.Select()
	[ ] 
	[ ] MemorizedPayeeList.SetActive()
	[ ] iPayeeCount=MemorizedPayeeList.MemorizedPayeeList.ListBox.GetItemCount()
	[+] for(i=0;i<iPayeeCount;i++)
		[ ] 
		[ ] MemorizedPayeeList.MemorizedPayeeList.ListBox.Select(1)
		[ ] MemorizedPayeeList.Delete.Click()
		[ ] MemorizedPayeeList.DeletePayeeConfirmation.OK.Click()
		[ ] 
	[ ] MemorizedPayeeList.Done.Click()
	[ ] 
[ ] 
[ ] // ==========================================================
[+] // FUNCTION: SearchPayeeInMemorizedPayee()
	[ ] //
	[ ] // DESCRIPTION:
	[ ] // This function will search payee to memorized payee list
	[ ] //
	[ ] // PARAMETERS:		STRING	 	sName		Payee Name            
	[ ] //						STRING 	sAmount	Amount
	[ ] //                                  STRING      sCategory    category  
	[ ] //
	[ ] //
	[ ] // RETURNS:			INTEGER		PASS		If payee is found
	[ ] //										FAIL      	If any error occurs	
	[ ] //										
	[ ] // REVISION HISTORY:
	[ ] // 9 July, 2014	Shrivardhan created
	[ ] //
[ ] // ==========================================================
[+] public INTEGER SearchPayeeInMemorizedPayee(STRING sName,STRING sAmount optional,STRING sCategory optional)
	[+] //varibale declaration
		[ ] INTEGER i,iFunctionResult=1
		[ ] STRING sHandle,sActual
		[ ] BOOLEAN bMatch=FALSE
		[+] if(IsNull(sCategory))
			[ ] sCategory=""
		[+] if(IsNull(sAmount))
			[ ] sAmount=""
	[ ] 
	[ ] QuickenWindow.SetActive()
	[ ] QuickenWindow.Tools.Click()
	[ ] QuickenWindow.Tools.MemorizedPayeeList.Select()
	[+] if(MemorizedPayeeList.Exists(5))
		[ ] sHandle=str(MemorizedPayeeList.MemorizedPayeeList.ListBox.GetHandle())
		[ ] 
		[+] for(i=0;i<MemorizedPayeeList.MemorizedPayeeList.ListBox.GetItemCount();i++)
			[ ] 
			[ ] sActual = QwAutoExecuteCommand("LISTBOX_GETFULLROW", sHandle, str(i))
			[ ] 
			[+] // if(isNull(sAmount))
				[ ] // bMatch=MatchStr("*{sName}*{sCategory}*",sActual)
			[+] // else
				[ ] // bMatch=MatchStr("*{sName}*{sCategory}*{sAmount}*",sActual)
			[ ] 
			[ ] bMatch=MatchStr("*{sName}*{sCategory}*{sAmount}*",sActual)
			[+] if(bMatch==TRUE)
				[ ] break
			[ ] 
		[+] if(bMatch==TRUE)
			[ ] ReportStatus("Verify Payee present in Memorized Payee List",PASS,"Payee present in Memorized Payee List")
			[ ] iFunctionResult=PASS
		[+] else
			[ ] ReportStatus("Verify Payee present in Memorized Payee List",FAIL,"Payee not present in Memorized Payee List")
			[ ] iFunctionResult=FAIL
		[ ] 
		[ ] MemorizedPayeeList.Done.Click()
		[ ] QuickenWindow.SetActive()
	[ ] 
	[ ] return iFunctionResult
	[ ] 
[ ] 
[ ] // ==========================================================
[+] // FUNCTION: OpenAndSaveOFXLog()
	[ ] //
	[ ] // DESCRIPTION:
	[ ] // This function will open and save cloud sync log to default or specified location
	[ ] //
	[ ] // PARAMETERS:		STRING	 			sLogType
	[ ] //						STRING 			sSaveLocation
	[ ] //                             
	[ ] //
	[ ] // RETURNS:			INTEGER		PASS		If log is successfully saved at location
	[ ] //										FAIL      	If any error occurs
	[ ] //
	[ ] // REVISION HISTORY:
	[ ] // 9 July, 2014	Shrivardhan created
	[ ] //
[ ] // ==========================================================
[+] public INTEGER OpenAndSaveOFXLog(STRING sSaveLocation optional)
	[ ] 
	[+] //Variable Declaration
		[ ] 
		[ ] STRING sDefaultSaveLocation=AUT_DATAFILE_PATH + "\OFXLOG.txt"
		[ ] STRING sLocation
		[ ] INTEGER iLogType
		[ ] 
	[ ] 
	[+] do
		[ ] 
		[+] if((sSaveLocation)!=NULL)
			[+] if(FileExists(sSaveLocation))
				[ ] DeleteFile(sSaveLocation)
		[+] else if(FileExists(sDefaultSaveLocation))
			[ ] DeleteFile(sDefaultSaveLocation)
		[ ] 
		[ ] 
		[+] if(QuickenWindow.Exists(2))
			[ ] QuickenWindow.SetActive()
			[ ] //Open Log Files window
			[ ] QuickenWindow.Help.Click()
			[ ] QuickenWindow.Help.LogFiles.Select()
			[+] if(QuickenLogFiles.Exists(10))
				[ ] QuickenLogFiles.BrowserWindow.OFXLog.DomClick()
				[ ] 
				[ ] //Verify presence of Cloud Sync Log
				[+] if(ViewOFXLog.Exists(5))
					[ ] 
					[ ] //Click on Save As button
					[ ] ViewOFXLog.SaveAs.Click()
					[ ] 
					[+] if (SaveAsDialog.Exists(5))
						[ ] SaveAsDialog.SetActive()
						[ ] //Determine location to save
						[+] if(sSaveLocation==NULL)
							[ ] sLocation=sDefaultSaveLocation
						[+] else
							[ ] sLocation=sSaveLocation
						[ ] //Set Location to Save
						[ ] SaveAsDialog.FileName.SetText(sLocation)
						[ ] SaveAsDialog.Save.Click()
						[ ] //Overite File Save
						[+] if(ConfirmSaveAs.Exists(5))
							[ ] ConfirmSaveAs.SetActive ()
							[ ] ConfirmSaveAs.Yes.Click ()
						[ ] //CloseOFX Report
						[ ] ViewOFXLog.Close.Click()
						[ ] 
						[ ] //Close Reports Window
						[+] if(QuickenLogFiles.Exists())
							[ ] QuickenLogFiles.SetActive()
							[ ] QuickenLogFiles.Close()
						[ ] iFunctionResult=PASS
					[+] else
						[ ] ReportStatus("Verify SaveAs dailog",FAIL,"SaveAs dailog didn't appear.")
						[ ] iFunctionResult=FAIL
				[+] else
					[ ] ReportStatus(" Save OFX Log",FAIL, "Log Files Window not available") 
					[ ] iFunctionResult=FAIL
		[+] else
			[ ] ReportStatus(" Save OFX Log",FAIL, "Quicken Window not available") 
			[ ] iFunctionResult=FAIL
		[ ] 
	[+] except
		[ ] ExceptLog()
		[ ] iFunctionResult=FAIL
	[ ] 
	[ ] return iFunctionResult
	[ ] 
	[ ] 
[ ] 
[ ] // ==========================================================
[+] // FUNCTION: DeleteOFXLogFile()
	[ ] //
	[ ] // DESCRIPTION:
	[ ] // This function will delete the cloud sync log file
	[ ] //
	[ ] // PARAMETERS:		STRING	 			QDF Filename            
	[ ] //						STRING 			Sync Log location           //Path
	[ ] //                               
	[ ] //
	[ ] // RETURNS:			INTEGER		PASS		If sign up process is complete
	[ ] //										FAIL		If any error occurs
	[ ] //
	[ ] // REVISION HISTORY:
	[ ] // 9 July, 2014	Shrivardhan created
	[ ] // 
[ ] // ==========================================================
[+] public INTEGER DeleteOFXLogFile(STRING sDataFileName,STRING sLogFileLocation optional) 
	[ ] 
	[+] //Variable
		[ ] 
		[ ] STRING sLogFile
		[ ] 
	[ ] 
	[+] do
		[ ] 
		[ ] //Cloud Log file location
		[+] if(sLogFileLocation==NULL)
			[ ] sLogFile=AUT_DATAFILE_PATH
			[ ] 
		[+] else
			[ ] sLogFile=sLogFileLocation
			[ ] 
			[ ] 
		[ ] 
		[ ] //If log file exists delete cloud log file
		[+] if(FileExists(sLogFile+"\"+sDataFileName+"OFXLOG.DAT"))
			[ ] SYS_RemoveFile(sLogFile+"\"+sDataFileName+"OFXLOG.DAT")
			[ ] 
			[ ] 
		[+] else
			[ ] ReportStatus("Delete log File",FAIL,"Log file does not exist")
			[ ] 
		[ ] 
		[ ] iFunctionResult= PASS
		[ ] 
	[+] except
		[ ] iFunctionResult=FAIL
	[ ] return iFunctionResult
	[ ] 
	[ ] 
[ ] 
[ ] // ==========================================================
[+] // FUNCTION: EditTabsInRegister()
	[ ] //
	[ ] // DESCRIPTION:
	[ ] // This function will add/remove tabs from register when its opened
	[ ] //
	[ ] // PARAMETERS:		STRING	 			sMode        Add/Remove
	[ ] //						STRING 			sTab		Tab name
	[ ] //                             
	[ ] //
	[ ] // RETURNS:			INTEGER		PASS		If tab is added/removed successfully
	[ ] //										FAIL      	If any error occurs
	[ ] //
	[ ] // REVISION HISTORY:
	[ ] // 9 July, 2014	Shrivardhan created
	[ ] //
[ ] // ==========================================================
[+] public INTEGER EditTabsInRegister(STRING sMode,STRING sTab)
	[ ] 
	[ ] 
	[ ] QuickenWindow.SetActive()
	[ ] 
	[+] if(sMode=="Add")
		[ ] iFunctionResult=PASS
		[+] do
			[ ] MDIClient.AccountRegister.TextClick(sTab)
		[+] except
			[ ] MDIClient.AccountRegister.Click(1,790,70)
			[+] switch sTab
				[+] case "Check #"
					[ ] Check.Click()
					[ ] Done.Click()
				[+] case "Amount"
					[ ] Amount.Click()
					[ ] Done.Click()
				[+] case "Balance"
					[ ] Balance.Click()
					[ ] Done.Click()
				[+] case "Deposit"
					[ ] Deposit.Click()
					[ ] Done.Click()
				[+] case "Payment"
					[ ] Payment.Click()
					[ ] Done.Click()
				[+] case "Memo"
					[ ] Memo.Click()
					[ ] Done.Click()
				[+] case "Tag"
					[ ] Tag.Click()
					[ ] Done.Click()
				[+] case "Date"
					[ ] xDate.Click()
					[ ] Done.Click()
				[+] case "Exp"
					[ ] Expensed.Click()
					[ ] Done.Click()
				[+] case "Payee"
					[ ] Payee.Click()
					[ ] Done.Click()
				[+] case "Clr"
					[ ] Cleared.Click()
					[ ] Done.Click()
				[+] case "Tax Line"
					[ ] TaxLineItem.Click()
					[ ] Done.Click()
				[+] case "Notes"
					[ ] Notes.Click()
					[ ] Done.Click()
				[+] case "Downloaded Amount"
					[ ] DownloadedAmount.Click()
					[ ] Done.Click()
				[+] case "Downloaded ID"
					[ ] DownloadedID.Click()
					[ ] Done.Click()
				[+] case "Downloaded Memo"
					[ ] DownloadedMemo.Click()
					[ ] Done.Click()
				[+] case "Downloaded Payee"
					[ ] DownloadedPayee.Click()
					[ ] Done.Click()
				[+] case "Posting Date"
					[ ] DownloadedPostingDate.Click()
					[ ] Done.Click()
				[+] case "Downl..."
					[ ] DownloadedReference.Click()
					[ ] Done.Click()
				[+] default
					[ ] iFunctionResult=FAIL
			[ ] 
		[ ] 
	[+] else if(sMode=="Remove")
		[ ] iFunctionResult=PASS
		[+] do
			[ ] MDIClient.AccountRegister.TextClick(sTab)
			[ ] MDIClient.AccountRegister.Click(1,1690,70)
			[+] switch sTab
				[+] case "Check"
					[ ] Check.Click()
					[ ] Done.Click()
				[+] case "Amount"
					[ ] Amount.Click()
					[ ] Done.Click()
				[+] case "Balance"
					[ ] Balance.Click()
					[ ] Done.Click()
				[+] case "Deposit"
					[ ] Deposit.Click()
					[ ] Done.Click()
				[+] case "Payment"
					[ ] Payment.Click()
					[ ] Done.Click()
				[+] case "Memo"
					[ ] Memo.Click()
					[ ] Done.Click()
				[+] case "Tag"
					[ ] Tag.Click()
					[ ] Done.Click()
				[+] case "Date"
					[ ] xDate.Click()
					[ ] Done.Click()
				[+] case "Exp"
					[ ] Expensed.Click()
					[ ] Done.Click()
				[+] case "Payee"
					[ ] Payee.Click()
					[ ] Done.Click()
				[+] case "Clr"
					[ ] Cleared.Click()
					[ ] Done.Click()
				[+] case "Tax Line"
					[ ] TaxLineItem.Click()
					[ ] Done.Click()
				[+] case "Notes"
					[ ] Notes.Click()
					[ ] Done.Click()
				[+] case "Downloaded Amount"
					[ ] DownloadedAmount.Click()
					[ ] Done.Click()
				[+] case "Downloaded ID"
					[ ] DownloadedID.Click()
					[ ] Done.Click()
				[+] case "Downloaded Memo"
					[ ] DownloadedMemo.Click()
					[ ] Done.Click()
				[+] case "Downloaded Payee"
					[ ] DownloadedPayee.Click()
					[ ] Done.Click()
				[+] case "Posting Date"
					[ ] DownloadedPostingDate.Click()
					[ ] Done.Click()
				[+] case "Downl..."
					[ ] DownloadedReference.Click()
					[ ] Done.Click()
				[+] default
					[ ] iFunctionResult=FAIL
			[ ] 
			[ ] 
		[+] except
			[ ] 
		[ ] 
	[+] else
		[ ] iFunctionResult=FAIL
	[ ] 
	[ ] 
	[ ] return iFunctionResult
	[ ] 
	[ ] 
[ ] 
[ ] // ==========================================================
[+] // FUNCTION: SearchRenamingRule()
	[ ] //
	[ ] // DESCRIPTION:
	[ ] // This function will search for the given renaming rule
	[ ] //
	[ ] // PARAMETERS:		STRING	 			sRename        Renaming Rule name
	[ ] //						
	[ ] //                             
	[ ] //
	[ ] // RETURNS:			INTEGER		PASS		If rule is found
	[ ] //										FAIL      	If any error occurs
	[ ] //
	[ ] // REVISION HISTORY:
	[ ] // 21 July, 2014	Shrivardhan created
	[ ] //
[ ] // ==========================================================
[+] public INTEGER SearchRenamingRule(STRING sRename)
	[+] //variable declaration
		[ ] INTEGER i,iFunctionResult=PASS,iPass
		[ ] STRING sHandle,sActual
		[ ] BOOLEAN bMatch=FALSE,bContinue=TRUE,bIncrement
	[ ] //verify if quicken window exists
	[+] if(QuickenWindow.Exists(5))
			[ ] // select "Downloaded Transactions" from preferences window
			[ ] iPass=SelectPreferenceType("Downloaded Transactions")
			[+] if(iPass==PASS)
				[ ] 
				[ ] Preferences.SetActive()
				[ ] //open renaming rules
				[ ] Preferences.RenamingRules.Click()
				[ ] //verify if renaming rules window exists
				[+] if(RenamingRules.Exists(5))
					[ ] //get the handle of the list box
					[ ] sHandle=str(RenamingRules.ListBox.GetHandle())
					[ ] i=0
					[+] while(bContinue==TRUE)
						[ ] sActual = QwAutoExecuteCommand("LISTBOX_GETFULLROW", sHandle, str(i))
						[+] if(sActual=="")
							[ ] bContinue=FALSE
							[ ] break
						[ ] 
						[+] if(sActual==sRename)
							[ ] bMatch=TRUE
							[ ] break
						[ ] i++
						[ ] sActual = QwAutoExecuteCommand("LISTBOX_GETFULLROW", sHandle, str(i))
						[ ] bIncrement=MatchStr("*@*@*@*@*@*",sActual)
						[+] while(bIncrement==TRUE)
							[ ] i++
							[ ] sActual = QwAutoExecuteCommand("LISTBOX_GETFULLROW", sHandle, str(i))
							[ ] bIncrement=MatchStr("*@*@*@*@*@*",sActual)
							[ ] 
						[ ] 
					[+] if(bMatch==FALSE)
						[ ] iFunctionResult=FAIL
					[ ] //close renaming rules
					[ ] RenamingRules.Done.Click()
				[+] else
					[ ] iFunctionResult=FAIL
				[ ] //close preferences
				[ ] Preferences.OK.Click()
				[ ] 
			[+] else
				[ ] iFunctionResult=FAIL
		[ ] 
	[+] else
		[ ] iFunctionResult=FAIL
	[ ] 
	[ ] return iFunctionResult
[ ] 
[ ] // ==========================================================
[+] // FUNCTION: DeleteRenamingRule()
	[ ] //
	[ ] // DESCRIPTION:
	[ ] // This function will remove all renaming rules
	[ ] //
	[ ] // PARAMETERS:		
	[ ] //						
	[ ] //                             
	[ ] //
	[ ] // RETURNS:			INTEGER		PASS		If rules are removed
	[ ] //										FAIL      	If any error occurs
	[ ] //
	[ ] // REVISION HISTORY:
	[ ] // 21 July, 2014	Shrivardhan created
	[ ] //
[ ] // ==========================================================
[+] public INTEGER DeleteRenamingRule()
	[ ] 
	[+] //variable declaration
		[ ] INTEGER iFunctionResult=PASS,iPass,iCount
		[ ] 
	[ ] //verify if quicken window exists
	[+] if(QuickenWindow.Exists(5))
			[ ] // select "Downloaded Transactions" from preferences window
			[ ] iPass=SelectPreferenceType("Downloaded Transactions")
			[+] if(iPass==PASS)
				[ ] 
				[ ] Preferences.SetActive()
				[ ] //open renaming rules
				[ ] Preferences.RenamingRules.Click()
				[ ] //verify if renaming rules window exists
				[+] if(RenamingRules.Exists(5))
					[ ] iCount=RenamingRules.ListBox.GetItemCount()
					[+] while(iCount>0)
						[ ] RenamingRules.ListBox.Select(1)
						[ ] RenamingRules.ListBox.Click(1,375,10)
						[+] if(Quicken2012.Exists(5))
							[ ] Quicken2012.OK.Click()
						[+] else
							[ ] break
						[ ] iCount--
					[ ] //close renaming rules
					[ ] RenamingRules.Done.Click()
				[+] else
					[ ] iFunctionResult=FAIL
				[ ] //close preferences
				[ ] Preferences.OK.Click()
				[ ] 
			[+] else
				[ ] iFunctionResult=FAIL
		[ ] 
	[+] else
		[ ] iFunctionResult=FAIL
	[ ] 
	[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] 
	[ ] 
[ ] 
[ ] 
[ ] // ==========================================================
[+] // FUNCTION: ChangeAccountIntent()  
	[ ] //
	[ ] // DESCRIPTION:
	[ ] // This function will function will open the Edit Account Details window and change the Existing account intent to what is specified as a parameter
	[ ] // If account is added successfully TRUE is returned else FALSE with error message is returned.
	[ ] //
	[ ] // PARAMETERS:		STRING sAccountType     Name of the Account Type i.e Loan
	[ ] // 						STRING sAccountName   Name of the Loan account
	[ ] // 		 				STRING sSetAccountIntentTo     
	[ ] //
	[ ] // RETURNS:			INTEGER	PASS = If account is created successfully
	[ ] //									FAIL = if any error occurs while adding account
	[ ] //
	[ ] // REVISION HISTORY:
	[ ] // 10 Jan, 2014	Mukesh created
[ ] // ==========================================================
[+] public INTEGER  ChangeAccountIntent( STRING sAccountName, STRING sAccountType, STRING sSetAccountIntentTo)
	[ ] 
	[ ] INTEGER iResult, iSelect, iNavigate
	[+] do
		[ ] iSelect = SelectAccountFromAccountBar( sAccountName, sAccountType)
		[+] if(iSelect==PASS)
			[ ] ReportStatus("Select Account", PASS, "Account  is selected") 
			[ ] NavigateToAccountDetails(sAccountName)
			[+] if(AccountDetails.Exists(SHORT_SLEEP))
				[ ] ReportStatus("Account Details Window ", PASS, "Account Details window available") 
				[ ] AccountDetails.SetActive()
				[ ] AccountDetails.TextClick("Display Options")
				[+] switch(sSetAccountIntentTo)
					[+] case "PERSONAL"
						[ ] AccountDetails.AccountIntent2.Select(1)
						[ ] AccountDetails.OK.Click()
					[+] case ACCOUNT_BUSINESS
						[ ] AccountDetails.AccountIntent2.Select(2)
						[ ] AccountDetails.OK.Click()
					[+] case ACCOUNT_RENTALPROPERTY
						[ ] AccountDetails.AccountIntent2.Select(3)
						[ ] AccountDetails.OK.Click()
				[ ] iFunctionResult=PASS
			[+] else
				[ ] LogException("Account Details window is NOT available")
				[ ] 
				[ ] 
		[+] else
			[ ] LogException("Account  is NOT selected")
			[ ] 
		[ ] 
	[+] except
		[ ] Exceptlog()
		[ ] iFunctionResult=FAIL
	[ ] return iFunctionResult
[ ] 
[ ] // ==========================================================
[+] // FUNCTION: GetEndingBalance()  
	[ ] //
	[ ] // DESCRIPTION:
	[ ] // This function will convert the MDI Register to Pop Up register, Detect the Ending balance and Covert back Pop Up register to MDI Register
	[ ] // Returns the Ending Balance
	[ ] //
	[ ] // PARAMETERS:		STRING sAccountType     Name of the Account Type i.e Loan
	[ ] // 						STRING sAccountName   Name of the Loan account
	[ ] // 		 		
	[ ] //
	[ ] // RETURNS:			INTEGER	PASS = If account is created successfully
	[ ] //									FAIL = if any error occurs while adding account
	[ ] //
	[ ] // REVISION HISTORY:
	[ ] // 10 Jan, 2014	Mukesh created
[ ] // ==========================================================
[+] public STRING  GetEndingBalance( STRING sAccountName, STRING sAccountType)
	[ ] 
	[ ] INTEGER iResult, iSelect, iNavigate
	[ ] STRING sEndingBalance
	[ ] 
	[+] // if(sAccountType== "LOAN")
		[+] // do
			[ ] // UsePopupRegister("ON")
			[ ] // iSelect = SelectAccountFromAccountBar( sAccountName, "Property & Debt")
			[+] // if(iSelect==PASS)
				[ ] // ReportStatus("Select Account", PASS, "Account  is selected") 
				[+] // do
					[ ] // AccountPopUpRegister.SetActive()
					[ ] // //sEndingBalance= AccountPopUpRegister.LoanBalance.G
					[ ] // ReportStatus("Ending balance", PASS, "Ending Balance is {sEndingBalance}") 
					[ ] // AttachmentValidationPopup.TypeKeys(KEY_ALT_F4)
					[ ] // UsePopupRegister("OFF")
					[ ] // return sEndingBalance
				[+] // except
					[ ] // LogException("Account Details window is NOT available")
					[ ] // 
					[ ] // 
			[+] // else
				[ ] // LogException("Account  is NOT selected")
			[ ] // UsePopupRegister("OFF")
		[+] // except
			[ ] // Exceptlog()
	[ ] // else
	[+] do
		[ ] UsePopupRegister("ON")
		[ ] iSelect = SelectAccountFromAccountBar( sAccountName, sAccountType)
		[+] if(iSelect==PASS)
			[ ] ReportStatus("Select Account", PASS, "Account  is selected") 
			[+] do
				[ ] AttachmentValidationPopup.SetActive()
				[ ] sEndingBalance= AttachmentValidationPopup.EndingBalance.EndingBalance.GetText()
				[ ] ReportStatus("Ending balance", PASS, "Ending Balance is {sEndingBalance}") 
				[ ] AttachmentValidationPopup.TypeKeys(KEY_ALT_F4)
				[ ] UsePopupRegister("OFF")
				[ ] return sEndingBalance
			[+] except
				[ ] LogException("Account Details window is NOT available")
				[ ] 
				[ ] 
		[+] else
			[ ] LogException("Account  is NOT selected")
		[ ] UsePopupRegister("OFF")
	[+] except
		[ ] Exceptlog()
	[ ] UsePopupRegister("OFF")
	[ ] return sEndingBalance
[ ] 
[ ] // ==========================================================
[+] // FUNCTION: SelectDebtDateRange()  
	[ ] //
	[ ] // DESCRIPTION:
	[ ] // This function will help you to select the option from the dates range combo box in the debt view and 
	[ ] // I
	[ ] //
	[ ] // PARAMETERS:		STRING sDateRange     The option from the date range combo box
	[ ] // 						STRING sAccountName   Name of the Loan account
	[ ] // 		 				STRING sSetAccountIntentTo     
	[ ] //
	[ ] // RETURNS:			INTEGER	PASS = If account is created successfully
	[ ] //									FAIL = if any error occurs while adding account
	[ ] //
	[ ] // REVISION HISTORY:
	[ ] // 10 Jan, 2014	Mukesh created
	[ ] // ==========================================================
[+] public INTEGER  SelectDebtDateRange ( STRING sDateRange)
	[ ] 
	[ ] INTEGER iResult
	[+] do
		[+] if(MDIClientPropertyDebt.PropertyDebtWindow.Dates.exists())
			[ ] ReportStatus("Select Dates Dropdown", PASS, "Dates Dropdown  is Present") 
			[ ] MDIClientPropertyDebt.PropertyDebtWindow.Dates.TypeKeys("A")
			[ ] Sleep(5)
			[+] switch(sDateRange)
				[+] case "Add Dates"
					[ ] MDIClientPropertyDebt.PropertyDebtWindow.AllAccountsDebt.Select(1)
				[+] case "Last 12 Months"
					[ ] MDIClientPropertyDebt.PropertyDebtWindow.Dates.TypeKeys("L")
				[+] case "Last Year"
					[ ] MDIClientPropertyDebt.PropertyDebtWindow.Dates.TypeKeys(Replicate("L", 2))
				[+] case "Last 3 Years"
					[ ] MDIClientPropertyDebt.PropertyDebtWindow.Dates.TypeKeys(Replicate("L", 3))
				[+] case "Last 5 Years"
					[ ] MDIClientPropertyDebt.PropertyDebtWindow.Dates.TypeKeys(Replicate("L", 4))
				[+] case "Last 10 Years"
					[ ] MDIClientPropertyDebt.PropertyDebtWindow.Dates.TypeKeys(Replicate("L", 5))
				[+] case "Year to date"
					[ ] MDIClientPropertyDebt.PropertyDebtWindow.Dates.TypeKeys("Y")
				[+] case "Quarter to date"
					[ ] MDIClientPropertyDebt.PropertyDebtWindow.Dates.TypeKeys("YQ")
					[ ] 
				[ ] 
				[ ] 
			[ ] iFunctionResult=PASS
		[+] else
			[ ] LogException("Dates range drop down not Present")
			[ ] 
	[+] except
		[ ] Exceptlog()
		[ ] iFunctionResult=FAIL
	[ ] return iFunctionResult
	[ ] 
	[ ] 
	[ ] 
	[ ] 
[ ] // ==========================================================
[+] // FUNCTION: SeparateAccounts()  
	[ ] //
	[ ] // DESCRIPTION:
	[ ] // This function will function will open the Edit Account Details window and change the Existing account intent to what is specified as a parameter
	[ ] // If account is added successfully TRUE is returned else FALSE with error message is returned.
	[ ] //
	[ ] // PARAMETERS:		STRING sAccountType     Name of the Account Type i.e Loan
	[ ] // 						STRING sAccountName   Name of the Loan account
	[ ] // 		 				STRING sSetAccountIntentTo     
	[ ] //
	[ ] // RETURNS:			INTEGER	PASS = If account is created successfully
	[ ] //									FAIL = if any error occurs while adding account
	[ ] //
	[ ] // REVISION HISTORY:
	[ ] // 10 Jan, 2014	Mukesh created
[ ] // ==========================================================
[+] public INTEGER  SeparateAccounts( STRING sAccountName, STRING sAccountType, STRING sSetAccountSeparateCheck)
	[ ] 
	[ ] INTEGER iResult, iSelect, iNavigate
	[ ] BOOLEAN bCheckStatus
	[+] do
		[+] switch(sSetAccountSeparateCheck)
			[+] case "Check"
				[ ] iSelect = SelectAccountFromAccountBar( sAccountName, sAccountType)
				[+] if(iSelect==PASS)
					[ ] ReportStatus("Select Account", PASS, "Account  is selected") 
					[ ] NavigateToAccountDetails(sAccountName)
					[+] if(AccountDetails.Exists(SHORT_SLEEP))
						[ ] ReportStatus("Account Details Window ", PASS, "Account Details window available") 
						[ ] AccountDetails.SetActive()
						[ ] AccountDetails.TextClick("Display Options")
						[ ] bCheckStatus= AccountDetails.KeepThisAccountSeparate.IsChecked()
						[+] if(bCheckStatus==TRUE)
							[ ] ReportStatus("Check KeepThisAccountSeparate checkbox", PASS, "First Checkbox: Keep this account separate- account will be excluded from Quicken reports and features is checked")
							[ ] AccountDetails.OK.Click()
						[+] else
							[ ] AccountDetails.KeepThisAccountSeparate.Check()
							[ ] ReportStatus("Check KeepThisAccountSeparate checkbox", PASS, "First Checkbox: Keep this account separate- account will be excluded from Quicken reports and features is checked")
							[ ] AccountDetails.OK.Click()
					[+] else
						[ ] LogException("Account Details window is NOT available")
						[ ] 
				[+] else
					[ ] LogException("Account  is NOT selected")
					[ ] 
			[+] case "UnCheck"
				[ ] NavigateQuickenTools(TOOLS_ACCOUNT_LIST)
				[ ] EditButtonFromAccountList(sAccountName, "BusinessBanking")
				[+] if(AccountDetails.Exists(SHORT_SLEEP))
					[ ] ReportStatus("Account Details Window ", PASS, "Account Details window available") 
					[ ] AccountDetails.SetActive()
					[ ] AccountDetails.TextClick("Display Options")
					[ ] bCheckStatus= AccountDetails.KeepThisAccountSeparate.IsChecked()
					[+] if(bCheckStatus==TRUE)
						[ ] AccountDetails.KeepThisAccountSeparate.Uncheck()
						[ ] AccountDetails.OK.Click()
						[ ] ReportStatus("Check KeepThisAccountSeparate checkbox", PASS, "First Checkbox: Keep this account separate- account will be excluded from Quicken reports and features is UnChecked")
					[+] else
						[ ] AccountDetails.OK.Click()
						[ ] ReportStatus("Check KeepThisAccountSeparate checkbox", PASS, "First Checkbox: Keep this account separate- account will be excluded from Quicken reports and features is UnChecked")
					[ ] AccountList.Done.Click()
				[+] else
					[ ] LogException("Account Details window is NOT available")
				[ ] 
		[ ] iFunctionResult=PASS
	[+] 
		[ ] 
	[+] except
		[ ] Exceptlog()
		[ ] iFunctionResult=FAIL
	[ ] return iFunctionResult
	[ ] 
[ ] // ==========================================================
